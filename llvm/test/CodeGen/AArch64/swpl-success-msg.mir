# RUN: llc -o /dev/null -mcpu=a64fx -O1 %s -start-before=aarch64-swpipeliner -fswp -pass-remarks=aarch64-swpipeliner  2>&1 | FileCheck %s
# CHECK: remark: s.c:37:13: software pipelining
--- |
  ; ModuleID = 's.c'
  source_filename = "s.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  %struct.args_t = type { %struct.timeval, %struct.timeval, ptr }
  %struct.timeval = type { i64, i64 }
  
  @__func__.s = private unnamed_addr constant [2 x i8] c"s\00", align 1
  @aa = external global [256 x [256 x double]], align 64
  @bb = external global [256 x [256 x double]], align 64
  @a = external global [32000 x double], align 64
  @b = external global [32000 x double], align 64
  @c = external global [32000 x double], align 64
  @d = external global [32000 x double], align 64
  @e = external global [32000 x double], align 64
  @cc = external global [256 x [256 x double]], align 64
  
  ; Function Attrs: nounwind uwtable vscale_range(4,4)
  define dso_local double @s(ptr nocapture noundef %func_args) local_unnamed_addr #0 !dbg !10 {
  entry:
    %call = tail call i32 @initialise_arrays(ptr noundef nonnull @__func__.s) #4, !dbg !13
    %call1 = tail call i32 @gettimeofday(ptr noundef %func_args, ptr noundef null) #4, !dbg !14
    br label %for.cond2.preheader, !dbg !15
  
  for.cond2.preheader:                              ; preds = %entry, %for.cond.cleanup4
    %nl.042 = phi i32 [ 0, %entry ], [ %inc26, %for.cond.cleanup4 ]
    br label %for.cond6.preheader, !dbg !16
  
  for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
    %t2 = getelementptr inbounds %struct.args_t, ptr %func_args, i64 0, i32 1, !dbg !17
    %call28 = tail call i32 @gettimeofday(ptr noundef nonnull %t2, ptr noundef null) #4, !dbg !18
    %call29 = tail call double @calc_checksum(ptr noundef nonnull @__func__.s) #4, !dbg !19
    ret double %call29, !dbg !20
  
  for.cond6.preheader:                              ; preds = %for.cond2.preheader, %for.cond.cleanup8
    %lsr.iv = phi i64 [ 0, %for.cond2.preheader ], [ %lsr.iv.next, %for.cond.cleanup8 ]
    %indvars.iv45 = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next46, %for.cond.cleanup8 ]
    %uglygep = getelementptr i8, ptr @aa, i64 %lsr.iv, !dbg !21
    %uglygep55 = getelementptr i8, ptr @bb, i64 %lsr.iv, !dbg !21
    %0 = call i64 @llvm.start.loop.iterations.i64(i64 63), !dbg !21
    br label %vector.body, !dbg !21
  
  vector.body:                                      ; preds = %vector.body, %for.cond6.preheader
    %lsr.iv52 = phi i64 [ %lsr.iv.next53, %vector.body ], [ 0, %for.cond6.preheader ]
    %1 = phi i64 [ %0, %for.cond6.preheader ], [ %3, %vector.body ], !dbg !22
    %uglygep54 = getelementptr i8, ptr %uglygep, i64 %lsr.iv52, !dbg !22
    %wide.load = load <4 x double>, ptr %uglygep54, align 32, !dbg !22, !tbaa !23
    %uglygep56 = getelementptr i8, ptr %uglygep55, i64 %lsr.iv52, !dbg !27
    %uglygep57 = getelementptr i8, ptr %uglygep56, i64 2056, !dbg !27
    %wide.load51 = load <4 x double>, ptr %uglygep57, align 8, !dbg !27, !tbaa !23
    %2 = fadd <4 x double> %wide.load, %wide.load51, !dbg !28
    %uglygep58 = getelementptr i8, ptr %uglygep, i64 %lsr.iv52, !dbg !29
    %uglygep59 = getelementptr i8, ptr %uglygep58, i64 2056, !dbg !29
    store <4 x double> %2, ptr %uglygep59, align 8, !dbg !29, !tbaa !23
    %lsr.iv.next53 = add nuw nsw i64 %lsr.iv52, 32
    %3 = call i64 @llvm.loop.decrement.reg.i64(i64 %1, i64 1)
    %4 = icmp ne i64 %3, 0
    br i1 %4, label %vector.body, label %for.body9.preheader, !llvm.loop !30
  
  for.body9.preheader:                              ; preds = %vector.body
    %5 = call i64 @llvm.start.loop.iterations.i64(i64 3), !dbg !21
    br label %for.body9, !dbg !21
  
  for.cond.cleanup4:                                ; preds = %for.cond.cleanup8
    %call24 = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, double noundef 0.000000e+00) #4, !dbg !35
    %inc26 = add nuw nsw i32 %nl.042, 1, !dbg !36
    %exitcond50.not = icmp eq i32 %inc26, 781200, !dbg !37
    br i1 %exitcond50.not, label %for.cond.cleanup, label %for.cond2.preheader, !dbg !15, !llvm.loop !38
  
  for.cond.cleanup8:                                ; preds = %for.body9
    %indvars.iv.next46 = add nuw nsw i64 %indvars.iv45, 1, !dbg !40
    %lsr.iv.next = add nuw nsw i64 %lsr.iv, 2048, !dbg !16
    %exitcond49.not = icmp eq i64 %indvars.iv.next46, 256, !dbg !41
    br i1 %exitcond49.not, label %for.cond.cleanup4, label %for.cond6.preheader, !dbg !16, !llvm.loop !42
  
  for.body9:                                        ; preds = %for.body9.preheader, %for.body9
    %lsr.iv60 = phi i64 [ %lsr.iv, %for.body9.preheader ], [ %lsr.iv.next61, %for.body9 ]
    %6 = phi i64 [ %5, %for.body9.preheader ], [ %9, %for.body9 ], !dbg !22
    %uglygep62 = getelementptr i8, ptr @aa, i64 %lsr.iv60, !dbg !22
    %uglygep63 = getelementptr i8, ptr %uglygep62, i64 2016, !dbg !22
    %7 = load double, ptr %uglygep63, align 8, !dbg !22, !tbaa !23
    %uglygep64 = getelementptr i8, ptr getelementptr (i8, ptr @bb, i64 4072), i64 %lsr.iv60, !dbg !27
    %8 = load double, ptr %uglygep64, align 8, !dbg !27, !tbaa !23
    %add = fadd double %7, %8, !dbg !28
    %uglygep65 = getelementptr i8, ptr @aa, i64 %lsr.iv60, !dbg !29
    %uglygep66 = getelementptr i8, ptr %uglygep65, i64 4072, !dbg !29
    store double %add, ptr %uglygep66, align 8, !dbg !29, !tbaa !23
    %lsr.iv.next61 = add nuw nsw i64 %lsr.iv60, 8, !dbg !44
    %9 = call i64 @llvm.loop.decrement.reg.i64(i64 %6, i64 1), !dbg !21
    %10 = icmp ne i64 %9, 0, !dbg !21
    br i1 %10, label %for.body9, label %for.cond.cleanup8, !dbg !21, !llvm.loop !45
  }
  
  declare i32 @initialise_arrays(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nofree nounwind
  declare noundef i32 @gettimeofday(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #2
  
  declare i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, double noundef) local_unnamed_addr #1
  
  declare double @calc_checksum(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #3
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #3
  
  attributes #0 = { nounwind uwtable vscale_range(4,4) "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #1 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #2 = { nofree nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #3 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #4 = { nounwind }
  
  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
  !llvm.ident = !{!9}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 15.0.4 ()", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "s.c", directory: "/test", checksumkind: CSK_MD5, checksum: "9ddd552247cc650091a64bf7e0dfbc8d")
  !2 = !{i32 7, !"Dwarf Version", i32 5}
  !3 = !{i32 2, !"Debug Info Version", i32 3}
  !4 = !{i32 1, !"wchar_size", i32 4}
  !5 = !{i32 7, !"PIC Level", i32 2}
  !6 = !{i32 7, !"PIE Level", i32 2}
  !7 = !{i32 7, !"uwtable", i32 2}
  !8 = !{i32 7, !"frame-pointer", i32 1}
  !9 = !{!"clang version 15.0.4 ()"}
  !10 = distinct !DISubprogram(name: "s", scope: !1, file: !1, line: 26, type: !11, scopeLine: 27, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !12)
  !11 = !DISubroutineType(types: !12)
  !12 = !{}
  !13 = !DILocation(line: 32, column: 5, scope: !10)
  !14 = !DILocation(line: 33, column: 5, scope: !10)
  !15 = !DILocation(line: 35, column: 5, scope: !10)
  !16 = !DILocation(line: 36, column: 9, scope: !10)
  !17 = !DILocation(line: 44, column: 30, scope: !10)
  !18 = !DILocation(line: 44, column: 5, scope: !10)
  !19 = !DILocation(line: 45, column: 12, scope: !10)
  !20 = !DILocation(line: 45, column: 5, scope: !10)
  !21 = !DILocation(line: 37, column: 13, scope: !10)
  !22 = !DILocation(line: 38, column: 28, scope: !10)
  !23 = !{!24, !24, i64 0}
  !24 = !{!"double", !25, i64 0}
  !25 = !{!"omnipotent char", !26, i64 0}
  !26 = !{!"Simple C/C++ TBAA"}
  !27 = !DILocation(line: 38, column: 43, scope: !10)
  !28 = !DILocation(line: 38, column: 41, scope: !10)
  !29 = !DILocation(line: 38, column: 26, scope: !10)
  !30 = distinct !{!30, !21, !31, !32, !33, !34}
  !31 = !DILocation(line: 39, column: 13, scope: !10)
  !32 = !{!"llvm.loop.mustprogress"}
  !33 = !{!"llvm.loop.unroll.disable"}
  !34 = !{!"llvm.loop.isvectorized", i32 1}
  !35 = !DILocation(line: 41, column: 9, scope: !10)
  !36 = !DILocation(line: 35, column: 56, scope: !10)
  !37 = !DILocation(line: 35, column: 25, scope: !10)
  !38 = distinct !{!38, !15, !39, !32, !33}
  !39 = !DILocation(line: 42, column: 5, scope: !10)
  !40 = !DILocation(line: 36, column: 38, scope: !10)
  !41 = !DILocation(line: 36, column: 27, scope: !10)
  !42 = distinct !{!42, !16, !43, !32, !33}
  !43 = !DILocation(line: 40, column: 9, scope: !10)
  !44 = !DILocation(line: 37, column: 31, scope: !10)
  !45 = distinct !{!45, !21, !31, !32, !33, !34}
...
---
name:            s
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32sp, preferred-register: '' }
  - { id: 1, class: gpr64common, preferred-register: '' }
  - { id: 2, class: gpr64sp, preferred-register: '' }
  - { id: 3, class: gpr64, preferred-register: '' }
  - { id: 4, class: gpr64, preferred-register: '' }
  - { id: 5, class: gpr64all, preferred-register: '' }
  - { id: 6, class: gpr64common, preferred-register: '' }
  - { id: 7, class: gpr64sp, preferred-register: '' }
  - { id: 8, class: gpr64all, preferred-register: '' }
  - { id: 9, class: gpr64all, preferred-register: '' }
  - { id: 10, class: gpr64all, preferred-register: '' }
  - { id: 11, class: gpr32all, preferred-register: '' }
  - { id: 12, class: gpr64all, preferred-register: '' }
  - { id: 13, class: gpr64all, preferred-register: '' }
  - { id: 14, class: gpr64common, preferred-register: '' }
  - { id: 15, class: gpr64sp, preferred-register: '' }
  - { id: 16, class: gpr64all, preferred-register: '' }
  - { id: 17, class: gpr64all, preferred-register: '' }
  - { id: 18, class: gpr64common, preferred-register: '' }
  - { id: 19, class: gpr32all, preferred-register: '' }
  - { id: 20, class: gpr64common, preferred-register: '' }
  - { id: 21, class: gpr32all, preferred-register: '' }
  - { id: 22, class: gpr64all, preferred-register: '' }
  - { id: 23, class: gpr32all, preferred-register: '' }
  - { id: 24, class: gpr32all, preferred-register: '' }
  - { id: 25, class: gpr64all, preferred-register: '' }
  - { id: 26, class: gpr64all, preferred-register: '' }
  - { id: 27, class: gpr64all, preferred-register: '' }
  - { id: 28, class: gpr32, preferred-register: '' }
  - { id: 29, class: gpr64all, preferred-register: '' }
  - { id: 30, class: gpr64common, preferred-register: '' }
  - { id: 31, class: gpr64, preferred-register: '' }
  - { id: 32, class: gpr64common, preferred-register: '' }
  - { id: 33, class: gpr64, preferred-register: '' }
  - { id: 34, class: gpr64all, preferred-register: '' }
  - { id: 35, class: gpr32, preferred-register: '' }
  - { id: 36, class: gpr64common, preferred-register: '' }
  - { id: 37, class: ppr_3b, preferred-register: '' }
  - { id: 38, class: zpr, preferred-register: '' }
  - { id: 39, class: gpr64common, preferred-register: '' }
  - { id: 40, class: gpr64common, preferred-register: '' }
  - { id: 41, class: zpr, preferred-register: '' }
  - { id: 42, class: zpr, preferred-register: '' }
  - { id: 43, class: gpr64sp, preferred-register: '' }
  - { id: 44, class: gpr64, preferred-register: '' }
  - { id: 45, class: gpr32, preferred-register: '' }
  - { id: 46, class: gpr64common, preferred-register: '' }
  - { id: 47, class: gpr64common, preferred-register: '' }
  - { id: 48, class: fpr64, preferred-register: '' }
  - { id: 49, class: gpr64common, preferred-register: '' }
  - { id: 50, class: gpr64common, preferred-register: '' }
  - { id: 51, class: fpr64, preferred-register: '' }
  - { id: 52, class: fpr64, preferred-register: '' }
  - { id: 53, class: gpr64sp, preferred-register: '' }
  - { id: 54, class: gpr64, preferred-register: '' }
  - { id: 55, class: gpr64sp, preferred-register: '' }
  - { id: 56, class: gpr64sp, preferred-register: '' }
  - { id: 57, class: gpr64, preferred-register: '' }
  - { id: 58, class: gpr64common, preferred-register: '' }
  - { id: 59, class: gpr64common, preferred-register: '' }
  - { id: 60, class: gpr64common, preferred-register: '' }
  - { id: 61, class: gpr64common, preferred-register: '' }
  - { id: 62, class: gpr64common, preferred-register: '' }
  - { id: 63, class: gpr64common, preferred-register: '' }
  - { id: 64, class: gpr64common, preferred-register: '' }
  - { id: 65, class: gpr64common, preferred-register: '' }
  - { id: 66, class: fpr64, preferred-register: '' }
  - { id: 67, class: gpr32all, preferred-register: '' }
  - { id: 68, class: gpr32common, preferred-register: '' }
  - { id: 69, class: gpr32, preferred-register: '' }
  - { id: 70, class: gpr32, preferred-register: '' }
  - { id: 71, class: gpr64sp, preferred-register: '' }
  - { id: 72, class: gpr64all, preferred-register: '' }
  - { id: 73, class: gpr32all, preferred-register: '' }
  - { id: 74, class: gpr64common, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%18' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     true
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $x0
  
    %18:gpr64common = COPY $x0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !13
    %20:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s, debug-location !13
    $x0 = COPY %20, debug-location !13
    BL @initialise_arrays, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0, debug-location !13
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !13
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !14
    %22:gpr64all = COPY $xzr
    $x0 = COPY %18, debug-location !14
    $x1 = COPY %22, debug-location !14
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0, debug-location !14
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !14
    %24:gpr32all = COPY $wzr
    %19:gpr32all = COPY %24
    %28:gpr32 = MOVi32imm 1
    %30:gpr64common = LOADgot target-flags(aarch64-got) @aa
    %32:gpr64common = LOADgot target-flags(aarch64-got) @bb
    %35:gpr32 = MOVi32imm 63
    %37:ppr_3b = PTRUE_D 4
    %40:gpr64common = MOVi64imm 257
    %45:gpr32 = MOVi32imm 3
    %58:gpr64common = LOADgot target-flags(aarch64-got) @a
    %59:gpr64common = LOADgot target-flags(aarch64-got) @b
    %60:gpr64common = LOADgot target-flags(aarch64-got) @c
    %61:gpr64common = LOADgot target-flags(aarch64-got) @d
    %62:gpr64common = LOADgot target-flags(aarch64-got) @e
    %65:gpr64common = LOADgot target-flags(aarch64-got) @cc
    %66:fpr64 = FMOVD0
    %69:gpr32 = MOVi32imm 781200
  
  bb.1.for.cond2.preheader:
    successors: %bb.3(0x80000000)
  
    %0:gpr32sp = PHI %19, %bb.0, %11, %bb.6
    %27:gpr64all = COPY $xzr
    %25:gpr64all = COPY %27
    %26:gpr64all = SUBREG_TO_REG 0, %28, %subreg.sub_32
    B %bb.3, debug-location !16
  
  bb.2.for.cond.cleanup:
    %71:gpr64sp = nuw ADDXri %18, 16, 0, debug-location !17
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !18
    %72:gpr64all = COPY $xzr
    $x0 = COPY %71, debug-location !18
    $x1 = COPY %72, debug-location !18
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0, debug-location !18
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !18
    %74:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s, debug-location !19
    $x0 = COPY %74, debug-location !19
    TCRETURNdi @calc_checksum, 0, csr_aarch64_aapcs, implicit $sp, implicit $x0, debug-location !19
  
  bb.3.for.cond6.preheader:
    successors: %bb.4(0x80000000)
  
    %1:gpr64common = PHI %25, %bb.1, %13, %bb.7
    %2:gpr64sp = PHI %26, %bb.1, %12, %bb.7
    %31:gpr64 = ADDXrr %30, %1, debug-location !21
    %33:gpr64 = ADDXrr %32, %1, debug-location !21
    %34:gpr64all = COPY $xzr
    %29:gpr64all = COPY %34
    %5:gpr64all = SUBREG_TO_REG 0, %35, %subreg.sub_32
  
  bb.4.vector.body:
    successors: %bb.4(0x7c000000), %bb.5(0x04000000)
  
    %6:gpr64common = PHI %29, %bb.3, %8, %bb.4
    %7:gpr64sp = PHI %5, %bb.3, %9, %bb.4, debug-location !22
    %36:gpr64common = ADDXrr %31, %6, debug-location !22
    %38:zpr = LD1D_IMM %37, %36, 0, debug-location !22 :: (load (s256) from %ir.uglygep54, !tbaa !23)
    %39:gpr64common = ADDXrr %33, %6, debug-location !27
    %41:zpr = LD1D %37, killed %39, %40, debug-location !27 :: (load (s256) from %ir.uglygep57, align 8, !tbaa !23)
    %42:zpr = FADD_ZPZZ_D_UNDEF %37, killed %38, killed %41, debug-location !28
    ST1D killed %42, %37, %36, %40, debug-location !29 :: (store (s256) into %ir.uglygep59, align 8, !tbaa !23)
    %43:gpr64sp = nuw nsw ADDXri %6, 32, 0
    %8:gpr64all = COPY %43
    %44:gpr64 = SUBSXri %7, 1, 0, implicit-def $nzcv
    %9:gpr64all = COPY %44
    Bcc 1, %bb.4, implicit $nzcv
    B %bb.5
  
  bb.5.for.body9.preheader:
    successors: %bb.8(0x80000000)
  
    %10:gpr64all = SUBREG_TO_REG 0, %45, %subreg.sub_32
    B %bb.8, debug-location !21
  
  bb.6.for.cond.cleanup4:
    successors: %bb.2(0x04000000), %bb.1(0x7c000000)
  
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !35
    $x0 = COPY %58, debug-location !35
    $x1 = COPY %59, debug-location !35
    $x2 = COPY %60, debug-location !35
    $x3 = COPY %61, debug-location !35
    $x4 = COPY %62, debug-location !35
    $x5 = COPY %30, debug-location !35
    $x6 = COPY %32, debug-location !35
    $x7 = COPY %65, debug-location !35
    $d0 = COPY %66, debug-location !35
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $d0, implicit-def $sp, implicit-def $w0, debug-location !35
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !35
    %68:gpr32common = nuw nsw ADDWri %0, 1, 0, debug-location !36
    %11:gpr32all = COPY %68, debug-location !36
    dead $wzr = SUBSWrr %68, %69, implicit-def $nzcv, debug-location !15
    Bcc 0, %bb.2, implicit $nzcv, debug-location !15
    B %bb.1, debug-location !15
  
  bb.7.for.cond.cleanup8:
    successors: %bb.6(0x04000000), %bb.3(0x7c000000)
  
    %55:gpr64sp = nuw nsw ADDXri %2, 1, 0, debug-location !40
    %12:gpr64all = COPY %55, debug-location !40
    %56:gpr64sp = nuw nsw ADDXri %1, 2048, 0, debug-location !16
    %13:gpr64all = COPY %56, debug-location !16
    dead $xzr = SUBSXri %55, 256, 0, implicit-def $nzcv, debug-location !16
    Bcc 0, %bb.6, implicit $nzcv, debug-location !16
    B %bb.3, debug-location !16
  
  bb.8.for.body9:
    successors: %bb.8(0x7c000000), %bb.7(0x04000000)
  
    %14:gpr64common = PHI %1, %bb.5, %16, %bb.8
    %15:gpr64sp = PHI %10, %bb.5, %17, %bb.8, debug-location !22
    %47:gpr64common = ADDXrr %30, %14, debug-location !22
    %48:fpr64 = LDRDui %47, 252, debug-location !22 :: (load (s64) from %ir.uglygep63, !tbaa !23)
    %50:gpr64common = ADDXrr %32, %14, debug-location !27
    %51:fpr64 = LDRDui killed %50, 509, debug-location !27 :: (load (s64) from %ir.uglygep64, !tbaa !23)
    %52:fpr64 = nofpexcept FADDDrr killed %48, killed %51, implicit $fpcr, debug-location !28
    STRDui killed %52, %47, 509, debug-location !29 :: (store (s64) into %ir.uglygep66, !tbaa !23)
    %53:gpr64sp = nuw nsw ADDXri %14, 8, 0, debug-location !44
    %16:gpr64all = COPY %53, debug-location !44
    %54:gpr64 = SUBSXri %15, 1, 0, implicit-def $nzcv, debug-location !21
    %17:gpr64all = COPY %54, debug-location !21
    Bcc 1, %bb.8, implicit $nzcv, debug-location !21
    B %bb.7, debug-location !21

...
