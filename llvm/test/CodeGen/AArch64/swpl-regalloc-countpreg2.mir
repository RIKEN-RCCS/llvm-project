# RUN: llc %s  -fswp -mcpu=a64fx -start-before=aarch64-swpipeliner -pass-remarks=aarch64-swpipeliner -swpl-enable-reg-alloc  -o /dev/null 2>&1 | FileCheck %s
# CHECK: remark: <unknown>:0:0: software pipelining (IPC: 2.62, ITR: 3, MVE: 2, II: 8, Stage: 3, (VReg Fp: 0/32, Int: 23/32, Pred: 1/8)), SRA(PReg Fp: 0/32, Int: 19/29, Pred: 0/8)
--- |
  ; ModuleID = 'loop063.c'
  source_filename = "loop063.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  @ga = dso_local local_unnamed_addr global [1000 x i32] zeroinitializer, align 4
  @gb = dso_local local_unnamed_addr global [1000 x i32] zeroinitializer, align 4
  @a = dso_local local_unnamed_addr global i32 0, align 4
  @b = dso_local local_unnamed_addr global [1000 x i32] zeroinitializer, align 4
  @c = dso_local local_unnamed_addr global i32 0, align 4
  @d = dso_local local_unnamed_addr global [1000 x i32] zeroinitializer, align 4
  @.str = private unnamed_addr constant [44 x i8] c"a=%d, b[%d]=%d, c=%d, d[%d]=%d, la[%d]=%lf\0A\00", align 1
  
  ; Function Attrs: nounwind uwtable vscale_range(1,16)
  define dso_local i32 @test_main() local_unnamed_addr #0 {
  entry:
    %la = alloca [1000 x double], align 8
    call void @llvm.lifetime.start.p0(i64 8000, ptr nonnull %la) #7
    call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(8000) %la, i8 0, i64 8000, i1 false)
    tail call void @init() #7
    %call = tail call i32 @finish() #7
    %0 = tail call i64 @llvm.vscale.i64()
    %min.iters.check = icmp ugt i64 %0, 25
    br i1 %min.iters.check, label %for.body.preheader, label %vector.ph
  
  vector.ph:                                        ; preds = %entry
    %1 = tail call i64 @llvm.vscale.i64()
    %2 = shl nuw nsw i64 %1, 2
    %n.mod.vf = urem i64 100, %2
    %n.vec = sub nuw nsw i64 100, %n.mod.vf
    %3 = tail call <vscale x 4 x i64> @llvm.experimental.stepvector.nxv4i64()
    %4 = tail call i64 @llvm.vscale.i64()
    %5 = shl nuw nsw i64 %4, 2
    %.splatinsert = insertelement <vscale x 4 x i64> poison, i64 %5, i64 0
    %.splat = shufflevector <vscale x 4 x i64> %.splatinsert, <vscale x 4 x i64> poison, <vscale x 4 x i32> zeroinitializer
    %6 = tail call <vscale x 4 x i32> @llvm.experimental.stepvector.nxv4i32()
    %7 = tail call i32 @llvm.vscale.i32()
    %8 = shl nuw nsw i32 %7, 2
    %.splatinsert84 = insertelement <vscale x 4 x i32> poison, i32 %8, i64 0
    %.splat85 = shufflevector <vscale x 4 x i32> %.splatinsert84, <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer
    %9 = tail call i64 @llvm.vscale.i64()
    %10 = shl nuw nsw i64 %9, 2
    br label %vector.body
  
  vector.body:                                      ; preds = %vector.body, %vector.ph
    %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
    %vec.ind = phi <vscale x 4 x i64> [ %3, %vector.ph ], [ %vec.ind.next, %vector.body ]
    %vec.ind86 = phi <vscale x 4 x i32> [ %6, %vector.ph ], [ %vec.ind.next87, %vector.body ]
    %11 = extractelement <vscale x 4 x i64> %vec.ind, i64 0
    %12 = add nuw nsw i64 %11, 1
    %13 = getelementptr inbounds [1000 x i32], ptr @b, i64 0, i64 %12
    %wide.load = load <vscale x 4 x i32>, ptr %13, align 4, !tbaa !6
    %14 = add nsw <vscale x 4 x i32> %wide.load, %vec.ind86
    %15 = shl i64 %index, 2
    %uglygep151 = getelementptr i8, ptr @b, i64 %15
    store <vscale x 4 x i32> %14, ptr %uglygep151, align 4, !tbaa !6
    %index.next = add nuw i64 %index, %10
    %vec.ind.next = add <vscale x 4 x i64> %vec.ind, %.splat
    %vec.ind.next87 = add <vscale x 4 x i32> %vec.ind86, %.splat85
    %16 = icmp eq i64 %n.vec, %index.next
    br i1 %16, label %middle.block, label %vector.body, !llvm.loop !10
  
  middle.block:                                     ; preds = %vector.body
    %cmp.n = icmp eq i64 %n.mod.vf, 0
    br i1 %cmp.n, label %for.end, label %for.body.preheader
  
  for.body.preheader:                               ; preds = %entry, %middle.block
    %indvars.iv.ph = phi i64 [ %n.vec, %middle.block ], [ 0, %entry ]
    br label %for.body
  
  for.body:                                         ; preds = %for.body.preheader, %for.body
    %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ %indvars.iv.ph, %for.body.preheader ]
    %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
    %17 = shl i64 %indvars.iv, 2
    %uglygep149 = getelementptr i8, ptr @b, i64 %17
    %uglygep150 = getelementptr i8, ptr %uglygep149, i64 4
    %18 = load i32, ptr %uglygep150, align 4, !tbaa !6
    %19 = zext i32 %18 to i64
    %20 = add i64 %indvars.iv, %19
    %21 = shl i64 %indvars.iv, 2
    %uglygep148 = getelementptr i8, ptr @b, i64 %21
    %tmp147 = trunc i64 %20 to i32
    store i32 %tmp147, ptr %uglygep148, align 4, !tbaa !6
    %exitcond.not = icmp eq i64 %indvars.iv.next, 100
    br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !15
  
  for.end:                                          ; preds = %for.body, %middle.block
    %call4 = tail call i32 @initial() #7
    %cmp670 = icmp slt i32 %call4, %call
    br i1 %cmp670, label %for.body7.preheader, label %for.body34.preheader
  
  for.body34.preheader:                             ; preds = %for.cond5.for.cond32.preheader_crit_edge, %for.end
    br label %for.body34
  
  for.body7.preheader:                              ; preds = %for.end
    %c.promoted = load i32, ptr @c, align 4, !tbaa !6
    %a.promoted = load i32, ptr @a, align 4, !tbaa !6
    %22 = sext i32 %call4 to i64
    %wide.trip.count = sext i32 %call to i64
    %23 = sub nsw i64 %wide.trip.count, %22
    %24 = tail call i64 @llvm.vscale.i64()
    %25 = shl nuw nsw i64 %24, 1
    %min.iters.check90 = icmp ult i64 %23, %25
    br i1 %min.iters.check90, label %for.body7.preheader117, label %vector.ph91
  
  vector.ph91:                                      ; preds = %for.body7.preheader
    %26 = tail call i64 @llvm.vscale.i64()
    %27 = shl nuw nsw i64 %26, 1
    %n.mod.vf92 = urem i64 %23, %27
    %n.vec93 = sub i64 %23, %n.mod.vf92
    %ind.end = add nsw i64 %n.vec93, %22
    %28 = insertelement <vscale x 2 x i32> zeroinitializer, i32 %a.promoted, i64 0
    %29 = insertelement <vscale x 2 x i32> zeroinitializer, i32 %c.promoted, i64 0
    %.splatinsert99 = insertelement <vscale x 2 x i32> poison, i32 %call4, i64 0
    %.splat100 = shufflevector <vscale x 2 x i32> %.splatinsert99, <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
    %30 = tail call <vscale x 2 x i32> @llvm.experimental.stepvector.nxv2i32()
    %induction101 = add <vscale x 2 x i32> %.splat100, %30
    %31 = tail call i32 @llvm.vscale.i32()
    %32 = shl nuw nsw i32 %31, 1
    %.splatinsert102 = insertelement <vscale x 2 x i32> poison, i32 %32, i64 0
    %.splat103 = shufflevector <vscale x 2 x i32> %.splatinsert102, <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
    %33 = tail call i64 @llvm.vscale.i64()
    %34 = shl nuw nsw i64 %33, 1
    %35 = shl nsw i64 %22, 2
    %uglygep137 = getelementptr i8, ptr @ga, i64 %35
    %uglygep139 = getelementptr i8, ptr @b, i64 %35
    %uglygep141 = getelementptr i8, ptr @gb, i64 %35
    %uglygep143 = getelementptr i8, ptr @d, i64 %35
    %36 = shl nsw i64 %22, 3
    %uglygep145 = getelementptr i8, ptr %la, i64 %36
    br label %vector.body96
  
  vector.body96:                                    ; preds = %vector.body96, %vector.ph91
    %index97 = phi i64 [ 0, %vector.ph91 ], [ %index.next108, %vector.body96 ]
    %vec.phi = phi <vscale x 2 x i32> [ %28, %vector.ph91 ], [ %42, %vector.body96 ]
    %vec.phi98 = phi <vscale x 2 x i32> [ %29, %vector.ph91 ], [ %44, %vector.body96 ]
    %vec.ind104 = phi <vscale x 2 x i32> [ %induction101, %vector.ph91 ], [ %vec.ind.next105, %vector.body96 ]
    %37 = shl i64 %index97, 2
    %uglygep138 = getelementptr i8, ptr %uglygep137, i64 %37
    %wide.load106 = load <vscale x 2 x i32>, ptr %uglygep138, align 4, !tbaa !6
    %38 = shl nsw <vscale x 2 x i32> %wide.load106, shufflevector (<vscale x 2 x i32> insertelement (<vscale x 2 x i32> poison, i32 1, i32 0), <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer)
    %uglygep140 = getelementptr i8, ptr %uglygep139, i64 %37
    store <vscale x 2 x i32> %38, ptr %uglygep140, align 4, !tbaa !6
    %39 = shl i64 %index97, 2
    %uglygep142 = getelementptr i8, ptr %uglygep141, i64 %39
    %wide.load107 = load <vscale x 2 x i32>, ptr %uglygep142, align 4, !tbaa !6
    %40 = add nsw <vscale x 2 x i32> %wide.load107, %vec.ind104
    %uglygep144 = getelementptr i8, ptr %uglygep143, i64 %39
    store <vscale x 2 x i32> %40, ptr %uglygep144, align 4, !tbaa !6
    %41 = sub <vscale x 2 x i32> %38, %40
    %42 = add <vscale x 2 x i32> %41, %vec.phi
    %43 = add nsw <vscale x 2 x i32> %38, %vec.ind104
    %44 = add <vscale x 2 x i32> %43, %vec.phi98
    %45 = shl i64 %index97, 3
    %uglygep146 = getelementptr i8, ptr %uglygep145, i64 %45
    store <vscale x 2 x double> shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 0x400A887293FD6F34, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), ptr %uglygep146, align 8, !tbaa !17
    %index.next108 = add nuw i64 %index97, %34
    %vec.ind.next105 = add <vscale x 2 x i32> %vec.ind104, %.splat103
    %46 = icmp eq i64 %n.vec93, %index.next108
    br i1 %46, label %middle.block88, label %vector.body96, !llvm.loop !19
  
  middle.block88:                                   ; preds = %vector.body96
    %47 = tail call i32 @llvm.vector.reduce.add.nxv2i32(<vscale x 2 x i32> %44)
    %48 = tail call i32 @llvm.vector.reduce.add.nxv2i32(<vscale x 2 x i32> %42)
    %cmp.n95 = icmp eq i64 %n.mod.vf92, 0
    br i1 %cmp.n95, label %for.cond5.for.cond32.preheader_crit_edge, label %for.body7.preheader117
  
  for.body7.preheader117:                           ; preds = %for.body7.preheader, %middle.block88
    %indvars.iv76.ph = phi i64 [ %ind.end, %middle.block88 ], [ %22, %for.body7.preheader ]
    %add216872.ph = phi i32 [ %48, %middle.block88 ], [ %a.promoted, %for.body7.preheader ]
    %add256971.ph = phi i32 [ %47, %middle.block88 ], [ %c.promoted, %for.body7.preheader ]
    %49 = trunc i64 %indvars.iv76.ph to i32
    %50 = sub i32 0, %49
    %51 = zext i32 %50 to i64
    %52 = shl nsw i64 %indvars.iv76.ph, 2
    %uglygep127 = getelementptr i8, ptr @ga, i64 %52
    %uglygep129 = getelementptr i8, ptr @b, i64 %52
    %uglygep131 = getelementptr i8, ptr @gb, i64 %52
    %uglygep133 = getelementptr i8, ptr @d, i64 %52
    %53 = shl nsw i64 %indvars.iv76.ph, 3
    %uglygep135 = getelementptr i8, ptr %la, i64 %53
    %54 = sub i64 %wide.trip.count, %indvars.iv76.ph
    %55 = call i64 @llvm.start.loop.iterations.i64(i64 %54)
    br label %for.body7
  
  for.cond5.for.cond32.preheader_crit_edge.loopexit: ; preds = %for.body7
    %56 = shl i32 %74, 1
    %57 = add i32 %add256971, %56
    %58 = zext i32 %57 to i64
    %59 = trunc i64 %indvars.iv76.ph to i32
    %60 = add i32 %59, -1
    %61 = zext i32 %60 to i64
    %62 = add i64 %61, %58
    %63 = add i64 %62, %lsr.iv.next
    %tmp120 = trunc i64 %63 to i32
    %64 = add i32 %add216872, %56
    %65 = sub i32 %64, %76
    %66 = zext i32 %65 to i64
    %67 = sub i32 0, %59
    %68 = zext i32 %67 to i64
    %69 = add i64 %68, %66
    %70 = sub i64 %69, %lsr.iv.next
    %71 = add i64 %70, 1
    %tmp122 = trunc i64 %71 to i32
    br label %for.cond5.for.cond32.preheader_crit_edge
  
  for.cond5.for.cond32.preheader_crit_edge:         ; preds = %for.cond5.for.cond32.preheader_crit_edge.loopexit, %middle.block88
    %add21.lcssa = phi i32 [ %48, %middle.block88 ], [ %tmp122, %for.cond5.for.cond32.preheader_crit_edge.loopexit ]
    %add25.lcssa = phi i32 [ %47, %middle.block88 ], [ %tmp120, %for.cond5.for.cond32.preheader_crit_edge.loopexit ]
    store i32 %add21.lcssa, ptr @a, align 4, !tbaa !6
    store i32 %add25.lcssa, ptr @c, align 4, !tbaa !6
    br label %for.body34.preheader
  
  for.body7:                                        ; preds = %for.body7.preheader117, %for.body7
    %lsr.iv123 = phi i64 [ 0, %for.body7.preheader117 ], [ %lsr.iv.next124, %for.body7 ]
    %lsr.iv = phi i64 [ 0, %for.body7.preheader117 ], [ %lsr.iv.next, %for.body7 ]
    %add216872 = phi i32 [ %tmp125, %for.body7 ], [ %add216872.ph, %for.body7.preheader117 ]
    %add256971 = phi i32 [ %tmp121, %for.body7 ], [ %add256971.ph, %for.body7.preheader117 ]
    %72 = phi i64 [ %55, %for.body7.preheader117 ], [ %91, %for.body7 ]
    %73 = shl i64 %lsr.iv, 2
    %uglygep128 = getelementptr i8, ptr %uglygep127, i64 %73
    %74 = load i32, ptr %uglygep128, align 4, !tbaa !6
    %mul = shl i32 %74, 1
    %uglygep130 = getelementptr i8, ptr %uglygep129, i64 %73
    store i32 %mul, ptr %uglygep130, align 4, !tbaa !6
    %75 = shl i64 %lsr.iv, 2
    %uglygep132 = getelementptr i8, ptr %uglygep131, i64 %75
    %76 = load i32, ptr %uglygep132, align 4, !tbaa !6
    %77 = zext i32 %76 to i64
    %78 = add i64 %indvars.iv76.ph, %lsr.iv
    %79 = add i64 %78, %77
    %80 = shl i64 %lsr.iv, 2
    %uglygep134 = getelementptr i8, ptr %uglygep133, i64 %80
    %tmp126 = trunc i64 %79 to i32
    store i32 %tmp126, ptr %uglygep134, align 4, !tbaa !6
    %81 = add i32 %add216872, %mul
    %82 = sub i32 %81, %76
    %83 = zext i32 %82 to i64
    %84 = add i64 %51, %lsr.iv123
    %85 = add i64 %84, %83
    %86 = add i32 %add256971, %mul
    %87 = zext i32 %86 to i64
    %88 = add i64 %indvars.iv76.ph, %lsr.iv
    %89 = add i64 %88, %87
    %90 = shl i64 %lsr.iv, 3
    %uglygep136 = getelementptr i8, ptr %uglygep135, i64 %90
    store double 0x400A887293FD6F34, ptr %uglygep136, align 8, !tbaa !17
    %lsr.iv.next = add i64 %lsr.iv, 1
    %lsr.iv.next124 = add i64 %lsr.iv123, -1
    %tmp121 = trunc i64 %89 to i32
    %tmp125 = trunc i64 %85 to i32
    %91 = call i64 @llvm.loop.decrement.reg.i64(i64 %72, i64 1)
    %92 = icmp ne i64 %91, 0
    br i1 %92, label %for.body7, label %for.cond5.for.cond32.preheader_crit_edge.loopexit, !llvm.loop !20
  
  for.body34:                                       ; preds = %for.body34.preheader, %for.body34
    %indvars.iv80 = phi i64 [ %indvars.iv.next81, %for.body34 ], [ 0, %for.body34.preheader ]
    %93 = load i32, ptr @a, align 4, !tbaa !6
    %94 = shl nuw nsw i64 %indvars.iv80, 2
    %uglygep119 = getelementptr i8, ptr @b, i64 %94
    %95 = load i32, ptr %uglygep119, align 4, !tbaa !6
    %96 = load i32, ptr @c, align 4, !tbaa !6
    %97 = shl nuw nsw i64 %indvars.iv80, 2
    %uglygep118 = getelementptr i8, ptr @d, i64 %97
    %98 = load i32, ptr %uglygep118, align 4, !tbaa !6
    %99 = shl nuw nsw i64 %indvars.iv80, 3
    %uglygep = getelementptr i8, ptr %la, i64 %99
    %100 = load double, ptr %uglygep, align 8, !tbaa !17
    %tmp = trunc i64 %indvars.iv80 to i32
    %call41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %93, i32 noundef %tmp, i32 noundef %95, i32 noundef %96, i32 noundef %tmp, i32 noundef %98, i32 noundef %tmp, double noundef %100)
    %indvars.iv.next81 = add nuw nsw i64 %indvars.iv80, 50
    %101 = add i64 %indvars.iv.next81, -50
    %cmp33 = icmp ult i64 %101, 950
    br i1 %cmp33, label %for.body34, label %for.end44, !llvm.loop !21
  
  for.end44:                                        ; preds = %for.body34
    call void @llvm.lifetime.end.p0(i64 8000, ptr nonnull %la) #7
    ret i32 0
  }
  
  ; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
  declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1
  
  ; Function Attrs: argmemonly mustprogress nocallback nofree nounwind willreturn writeonly
  declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #2
  
  declare void @init() local_unnamed_addr #3
  
  declare i32 @finish() local_unnamed_addr #3
  
  declare i32 @initial() local_unnamed_addr #3
  
  ; Function Attrs: nofree nounwind
  declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #4
  
  ; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
  declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
  declare i64 @llvm.vscale.i64() #5
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
  declare <vscale x 4 x i64> @llvm.experimental.stepvector.nxv4i64() #5
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
  declare <vscale x 4 x i32> @llvm.experimental.stepvector.nxv4i32() #5
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
  declare i32 @llvm.vscale.i32() #5
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
  declare <vscale x 2 x i32> @llvm.experimental.stepvector.nxv2i32() #5
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
  declare i32 @llvm.vector.reduce.add.nxv2i32(<vscale x 2 x i32>) #5
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #6
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #6
  
  attributes #0 = { nounwind uwtable vscale_range(1,16) "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #1 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }
  attributes #2 = { argmemonly mustprogress nocallback nofree nounwind willreturn writeonly }
  attributes #3 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #4 = { nofree nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #5 = { nocallback nofree nosync nounwind readnone willreturn }
  attributes #6 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #7 = { nounwind }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 7, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !5 = !{!"clang version 15.0.4 ()"}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"int", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C/C++ TBAA"}
  !10 = distinct !{!10, !11, !12, !13, !14}
  !11 = !{!"llvm.loop.mustprogress"}
  !12 = !{!"llvm.loop.unroll.disable"}
  !13 = !{!"llvm.loop.pipeline.disable", i1 true}
  !14 = !{!"llvm.loop.isvectorized", i32 1}
  !15 = distinct !{!15, !11, !12, !13, !16, !14}
  !16 = !{!"llvm.loop.unroll.runtime.disable"}
  !17 = !{!18, !18, i64 0}
  !18 = !{!"double", !8, i64 0}
  !19 = distinct !{!19, !11, !12, !14}
  !20 = distinct !{!20, !11, !12, !14}
  !21 = distinct !{!21, !11, !12, !13}

...
---
name:            test_main
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32, preferred-register: '' }
  - { id: 1, class: gpr64, preferred-register: '' }
  - { id: 2, class: gpr64, preferred-register: '' }
  - { id: 3, class: zpr, preferred-register: '' }
  - { id: 4, class: zpr, preferred-register: '' }
  - { id: 5, class: zpr, preferred-register: '' }
  - { id: 6, class: zpr, preferred-register: '' }
  - { id: 7, class: zpr, preferred-register: '' }
  - { id: 8, class: zpr, preferred-register: '' }
  - { id: 9, class: gpr64, preferred-register: '' }
  - { id: 10, class: gpr64common, preferred-register: '' }
  - { id: 11, class: zpr, preferred-register: '' }
  - { id: 12, class: zpr, preferred-register: '' }
  - { id: 13, class: zpr, preferred-register: '' }
  - { id: 14, class: gpr64all, preferred-register: '' }
  - { id: 15, class: zpr, preferred-register: '' }
  - { id: 16, class: zpr, preferred-register: '' }
  - { id: 17, class: zpr, preferred-register: '' }
  - { id: 18, class: gpr64all, preferred-register: '' }
  - { id: 19, class: gpr64common, preferred-register: '' }
  - { id: 20, class: gpr64all, preferred-register: '' }
  - { id: 21, class: gpr32all, preferred-register: '' }
  - { id: 22, class: gpr32all, preferred-register: '' }
  - { id: 23, class: gpr32all, preferred-register: '' }
  - { id: 24, class: gpr64, preferred-register: '' }
  - { id: 25, class: gpr64, preferred-register: '' }
  - { id: 26, class: gpr64, preferred-register: '' }
  - { id: 27, class: gpr64, preferred-register: '' }
  - { id: 28, class: gpr64, preferred-register: '' }
  - { id: 29, class: gpr64all, preferred-register: '' }
  - { id: 30, class: zpr, preferred-register: '' }
  - { id: 31, class: zpr, preferred-register: '' }
  - { id: 32, class: zpr, preferred-register: '' }
  - { id: 33, class: zpr, preferred-register: '' }
  - { id: 34, class: gpr64, preferred-register: '' }
  - { id: 35, class: gpr64sp, preferred-register: '' }
  - { id: 36, class: gpr64sp, preferred-register: '' }
  - { id: 37, class: gpr64sp, preferred-register: '' }
  - { id: 38, class: gpr64sp, preferred-register: '' }
  - { id: 39, class: gpr64sp, preferred-register: '' }
  - { id: 40, class: gpr64common, preferred-register: '' }
  - { id: 41, class: zpr, preferred-register: '' }
  - { id: 42, class: zpr, preferred-register: '' }
  - { id: 43, class: zpr, preferred-register: '' }
  - { id: 44, class: zpr, preferred-register: '' }
  - { id: 45, class: zpr, preferred-register: '' }
  - { id: 46, class: gpr64all, preferred-register: '' }
  - { id: 47, class: zpr, preferred-register: '' }
  - { id: 48, class: gpr32all, preferred-register: '' }
  - { id: 49, class: gpr32all, preferred-register: '' }
  - { id: 50, class: gpr64, preferred-register: '' }
  - { id: 51, class: gpr32all, preferred-register: '' }
  - { id: 52, class: gpr32all, preferred-register: '' }
  - { id: 53, class: gpr64all, preferred-register: '' }
  - { id: 54, class: gpr64sp, preferred-register: '' }
  - { id: 55, class: gpr64sp, preferred-register: '' }
  - { id: 56, class: gpr64sp, preferred-register: '' }
  - { id: 57, class: gpr64sp, preferred-register: '' }
  - { id: 58, class: gpr64sp, preferred-register: '' }
  - { id: 59, class: gpr64all, preferred-register: '' }
  - { id: 60, class: gpr32all, preferred-register: '' }
  - { id: 61, class: gpr32all, preferred-register: '' }
  - { id: 62, class: gpr32, preferred-register: '' }
  - { id: 63, class: gpr32, preferred-register: '' }
  - { id: 64, class: gpr64sp, preferred-register: '' }
  - { id: 65, class: gpr64common, preferred-register: '' }
  - { id: 66, class: gpr32, preferred-register: '' }
  - { id: 67, class: gpr32, preferred-register: '' }
  - { id: 68, class: gpr64sp, preferred-register: '' }
  - { id: 69, class: gpr32, preferred-register: '' }
  - { id: 70, class: gpr32, preferred-register: '' }
  - { id: 71, class: gpr64all, preferred-register: '' }
  - { id: 72, class: gpr64all, preferred-register: '' }
  - { id: 73, class: gpr32all, preferred-register: '' }
  - { id: 74, class: gpr32all, preferred-register: '' }
  - { id: 75, class: gpr64all, preferred-register: '' }
  - { id: 76, class: gpr64common, preferred-register: '' }
  - { id: 77, class: gpr64all, preferred-register: '' }
  - { id: 78, class: gpr64all, preferred-register: '' }
  - { id: 79, class: gpr32, preferred-register: '' }
  - { id: 80, class: gpr64all, preferred-register: '' }
  - { id: 81, class: gpr64sp, preferred-register: '' }
  - { id: 82, class: gpr32all, preferred-register: '' }
  - { id: 83, class: gpr64all, preferred-register: '' }
  - { id: 84, class: gpr32, preferred-register: '' }
  - { id: 85, class: gpr64, preferred-register: '' }
  - { id: 86, class: gpr64common, preferred-register: '' }
  - { id: 87, class: gpr64all, preferred-register: '' }
  - { id: 88, class: gpr64, preferred-register: '' }
  - { id: 89, class: gpr64all, preferred-register: '' }
  - { id: 90, class: gpr64common, preferred-register: '' }
  - { id: 91, class: gpr32, preferred-register: '' }
  - { id: 92, class: gpr64, preferred-register: '' }
  - { id: 93, class: gpr64, preferred-register: '' }
  - { id: 94, class: gpr64, preferred-register: '' }
  - { id: 95, class: gpr64, preferred-register: '' }
  - { id: 96, class: gpr32sp, preferred-register: '' }
  - { id: 97, class: gpr64all, preferred-register: '' }
  - { id: 98, class: gpr64, preferred-register: '' }
  - { id: 99, class: gpr64common, preferred-register: '' }
  - { id: 100, class: gpr64common, preferred-register: '' }
  - { id: 101, class: gpr64common, preferred-register: '' }
  - { id: 102, class: ppr_3b, preferred-register: '' }
  - { id: 103, class: zpr, preferred-register: '' }
  - { id: 104, class: zpr, preferred-register: '' }
  - { id: 105, class: gpr64, preferred-register: '' }
  - { id: 106, class: gpr64, preferred-register: '' }
  - { id: 107, class: gpr64sp, preferred-register: '' }
  - { id: 108, class: gpr64common, preferred-register: '' }
  - { id: 109, class: gpr64common, preferred-register: '' }
  - { id: 110, class: gpr32, preferred-register: '' }
  - { id: 111, class: gpr32, preferred-register: '' }
  - { id: 112, class: gpr32, preferred-register: '' }
  - { id: 113, class: gpr64, preferred-register: '' }
  - { id: 114, class: gpr32, preferred-register: '' }
  - { id: 115, class: gpr32, preferred-register: '' }
  - { id: 116, class: gpr64common, preferred-register: '' }
  - { id: 117, class: gpr32, preferred-register: '' }
  - { id: 118, class: gpr64common, preferred-register: '' }
  - { id: 119, class: gpr32, preferred-register: '' }
  - { id: 120, class: gpr64, preferred-register: '' }
  - { id: 121, class: gpr64all, preferred-register: '' }
  - { id: 122, class: gpr64, preferred-register: '' }
  - { id: 123, class: gpr64, preferred-register: '' }
  - { id: 124, class: gpr64all, preferred-register: '' }
  - { id: 125, class: gpr64, preferred-register: '' }
  - { id: 126, class: gpr64, preferred-register: '' }
  - { id: 127, class: gpr64common, preferred-register: '' }
  - { id: 128, class: gpr64, preferred-register: '' }
  - { id: 129, class: gpr64all, preferred-register: '' }
  - { id: 130, class: gpr64common, preferred-register: '' }
  - { id: 131, class: gpr64, preferred-register: '' }
  - { id: 132, class: gpr64, preferred-register: '' }
  - { id: 133, class: gpr64, preferred-register: '' }
  - { id: 134, class: gpr64, preferred-register: '' }
  - { id: 135, class: gpr64sp, preferred-register: '' }
  - { id: 136, class: gpr64all, preferred-register: '' }
  - { id: 137, class: ppr_3b, preferred-register: '' }
  - { id: 138, class: zpr, preferred-register: '' }
  - { id: 139, class: gpr64sp, preferred-register: '' }
  - { id: 140, class: gpr64all, preferred-register: '' }
  - { id: 141, class: gpr64, preferred-register: '' }
  - { id: 142, class: gpr64all, preferred-register: '' }
  - { id: 143, class: gpr64, preferred-register: '' }
  - { id: 144, class: gpr64common, preferred-register: '' }
  - { id: 145, class: gpr64, preferred-register: '' }
  - { id: 146, class: gpr64common, preferred-register: '' }
  - { id: 147, class: gpr64, preferred-register: '' }
  - { id: 148, class: gpr64common, preferred-register: '' }
  - { id: 149, class: gpr64, preferred-register: '' }
  - { id: 150, class: gpr64common, preferred-register: '' }
  - { id: 151, class: gpr64, preferred-register: '' }
  - { id: 152, class: gpr64common, preferred-register: '' }
  - { id: 153, class: gpr64, preferred-register: '' }
  - { id: 154, class: gpr64all, preferred-register: '' }
  - { id: 155, class: ppr_3b, preferred-register: '' }
  - { id: 156, class: zpr, preferred-register: '' }
  - { id: 157, class: zpr, preferred-register: '' }
  - { id: 158, class: zpr, preferred-register: '' }
  - { id: 159, class: zpr, preferred-register: '' }
  - { id: 160, class: zpr, preferred-register: '' }
  - { id: 161, class: zpr, preferred-register: '' }
  - { id: 162, class: gpr64common, preferred-register: '' }
  - { id: 163, class: zpr, preferred-register: '' }
  - { id: 164, class: gpr64, preferred-register: '' }
  - { id: 165, class: gpr64, preferred-register: '' }
  - { id: 166, class: ppr_3b, preferred-register: '' }
  - { id: 167, class: zpr, preferred-register: '' }
  - { id: 168, class: gpr64all, preferred-register: '' }
  - { id: 169, class: zpr, preferred-register: '' }
  - { id: 170, class: gpr64all, preferred-register: '' }
  - { id: 171, class: gpr64all, preferred-register: '' }
  - { id: 172, class: gpr32, preferred-register: '' }
  - { id: 173, class: gpr32, preferred-register: '' }
  - { id: 174, class: gpr32, preferred-register: '' }
  - { id: 175, class: gpr32, preferred-register: '' }
  - { id: 176, class: gpr64, preferred-register: '' }
  - { id: 177, class: gpr64common, preferred-register: '' }
  - { id: 178, class: gpr64, preferred-register: '' }
  - { id: 179, class: gpr64common, preferred-register: '' }
  - { id: 180, class: gpr64, preferred-register: '' }
  - { id: 181, class: gpr64common, preferred-register: '' }
  - { id: 182, class: gpr64, preferred-register: '' }
  - { id: 183, class: gpr64common, preferred-register: '' }
  - { id: 184, class: gpr64, preferred-register: '' }
  - { id: 185, class: gpr64common, preferred-register: '' }
  - { id: 186, class: gpr64, preferred-register: '' }
  - { id: 187, class: gpr64, preferred-register: '' }
  - { id: 188, class: gpr64all, preferred-register: '' }
  - { id: 189, class: gpr64, preferred-register: '' }
  - { id: 190, class: gpr32, preferred-register: '' }
  - { id: 191, class: gpr32, preferred-register: '' }
  - { id: 192, class: gpr32, preferred-register: '' }
  - { id: 193, class: gpr32, preferred-register: '' }
  - { id: 194, class: gpr32, preferred-register: '' }
  - { id: 195, class: gpr32, preferred-register: '' }
  - { id: 196, class: gpr32, preferred-register: '' }
  - { id: 197, class: gpr32, preferred-register: '' }
  - { id: 198, class: gpr32, preferred-register: '' }
  - { id: 199, class: gpr32, preferred-register: '' }
  - { id: 200, class: gpr32, preferred-register: '' }
  - { id: 201, class: gpr32, preferred-register: '' }
  - { id: 202, class: gpr32, preferred-register: '' }
  - { id: 203, class: gpr32, preferred-register: '' }
  - { id: 204, class: gpr32, preferred-register: '' }
  - { id: 205, class: gpr64, preferred-register: '' }
  - { id: 206, class: gpr64sp, preferred-register: '' }
  - { id: 207, class: gpr64common, preferred-register: '' }
  - { id: 208, class: gpr64, preferred-register: '' }
  - { id: 209, class: gpr32, preferred-register: '' }
  - { id: 210, class: gpr32, preferred-register: '' }
  - { id: 211, class: gpr32, preferred-register: '' }
  - { id: 212, class: gpr32, preferred-register: '' }
  - { id: 213, class: gpr32, preferred-register: '' }
  - { id: 214, class: gpr32common, preferred-register: '' }
  - { id: 215, class: gpr32common, preferred-register: '' }
  - { id: 216, class: gpr32, preferred-register: '' }
  - { id: 217, class: gpr32, preferred-register: '' }
  - { id: 218, class: gpr32, preferred-register: '' }
  - { id: 219, class: gpr32common, preferred-register: '' }
  - { id: 220, class: gpr32sp, preferred-register: '' }
  - { id: 221, class: gpr64common, preferred-register: '' }
  - { id: 222, class: gpr64common, preferred-register: '' }
  - { id: 223, class: gpr64all, preferred-register: '' }
  - { id: 224, class: gpr64all, preferred-register: '' }
  - { id: 225, class: gpr64common, preferred-register: '' }
  - { id: 226, class: gpr32, preferred-register: '' }
  - { id: 227, class: gpr64, preferred-register: '' }
  - { id: 228, class: gpr64common, preferred-register: '' }
  - { id: 229, class: gpr32, preferred-register: '' }
  - { id: 230, class: gpr64common, preferred-register: '' }
  - { id: 231, class: gpr32, preferred-register: '' }
  - { id: 232, class: gpr64common, preferred-register: '' }
  - { id: 233, class: gpr32, preferred-register: '' }
  - { id: 234, class: gpr64sp, preferred-register: '' }
  - { id: 235, class: fpr64, preferred-register: '' }
  - { id: 236, class: gpr32all, preferred-register: '' }
  - { id: 237, class: gpr64common, preferred-register: '' }
  - { id: 238, class: gpr32all, preferred-register: '' }
  - { id: 239, class: gpr64sp, preferred-register: '' }
  - { id: 240, class: gpr64, preferred-register: '' }
  - { id: 241, class: gpr32all, preferred-register: '' }
  - { id: 242, class: gpr64common, preferred-register: '' }
  - { id: 243, class: gpr64common, preferred-register: '' }
  - { id: 244, class: gpr64common, preferred-register: '' }
  - { id: 245, class: gpr64common, preferred-register: '' }
  - { id: 246, class: gpr64common, preferred-register: '' }
  - { id: 247, class: gpr64common, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  8000
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: la, type: default, offset: 0, size: 8000, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      local-offset: -8000, debug-info-variable: '', debug-info-expression: '', 
      debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:
  - id:              0
    value:           double 0x400A887293FD6F34
    alignment:       8
    isTargetSpecific: false
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.18(0x40000000), %bb.1(0x40000000)
  
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %79:gpr32 = MOVi32imm 8000
    %80:gpr64all = SUBREG_TO_REG 0, killed %79, %subreg.sub_32
    %81:gpr64sp = ADDXri %stack.0.la, 0, 0
    %82:gpr32all = COPY $wzr
    $x0 = COPY %81
    $w1 = COPY %82
    $x2 = COPY %80
    BL &memset, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $x2, implicit-def $sp, implicit-def $x0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    BL @init, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit-def $sp
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    BL @finish, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %84:gpr32 = COPY $w0
    %85:gpr64 = RDVLI_XI 1
    %86:gpr64common = UBFMXri killed %85, 4, 63
    dead $xzr = SUBSXri killed %86, 25, 0, implicit-def $nzcv
    %242:gpr64common = MOVaddr target-flags(aarch64-page) @b, target-flags(aarch64-pageoff, aarch64-nc) @b
    Bcc 9, %bb.1, implicit $nzcv
  
  bb.18:
    successors: %bb.4(0x80000000)
  
    %87:gpr64all = COPY $xzr
    %78:gpr64all = COPY %87
    B %bb.4
  
  bb.1.vector.ph:
    successors: %bb.2(0x80000000)
  
    %90:gpr64common = CNTW_XPiI 31, 1
    %91:gpr32 = MOVi32imm 100
    %92:gpr64 = SUBREG_TO_REG 0, killed %91, %subreg.sub_32
    %93:gpr64 = UDIVXr %92, %90
    %94:gpr64 = MADDXrrr killed %93, %90, $xzr
    %95:gpr64 = SUBXrr %92, %94
    %1:gpr64 = COPY %95
    %2:gpr64 = COPY %94
    %3:zpr = INDEX_II_D 0, 1
    %4:zpr = INCD_ZPiI %3, 31, 1
    %6:zpr = DUP_ZR_D %90
    %7:zpr = INDEX_II_S 0, 1
    %96:gpr32sp = COPY %90.sub_32
    %8:zpr = DUP_ZR_S killed %96
    %97:gpr64all = COPY $xzr
    %89:gpr64all = COPY %97
    %101:gpr64common = MOVi64imm 1
    %102:ppr_3b = PTRUE_S 31
  
  bb.2.vector.body:
    successors: %bb.3(0x04000000), %bb.2(0x7c000000)
  
    %10:gpr64common = PHI %89, %bb.1, %14, %bb.2
    %11:zpr = PHI %3, %bb.1, %15, %bb.2
    %12:zpr = PHI %4, %bb.1, %16, %bb.2
    %13:zpr = PHI %7, %bb.1, %17, %bb.2
    %98:gpr64 = COPY %11.dsub
    %100:gpr64common = ADDXrs %242, killed %98, 2
    %103:zpr = LD1W %102, killed %100, %101 :: (load unknown-size from %ir.13, align 4, !tbaa !6)
    %104:zpr = nsw ADD_ZZZ_S killed %103, %13
    ST1W killed %104, %102, %242, %10 :: (store unknown-size into %ir.uglygep151, align 4, !tbaa !6)
    %105:gpr64 = nuw ADDXrr %10, %90
    %14:gpr64all = COPY %105
    %15:zpr = ADD_ZZZ_D %11, %6
    %16:zpr = ADD_ZZZ_D %12, %6
    %17:zpr = ADD_ZZZ_S %13, %8
    dead $xzr = SUBSXrr %94, %105, implicit-def $nzcv
    Bcc 1, %bb.2, implicit $nzcv
    B %bb.3
  
  bb.3.middle.block:
    successors: %bb.6(0x30000000), %bb.4(0x50000000)
  
    CBZX %1, %bb.6
    B %bb.4
  
  bb.4.for.body.preheader:
    successors: %bb.5(0x80000000)
  
    %18:gpr64all = PHI %78, %bb.18, %2, %bb.3
  
  bb.5.for.body:
    successors: %bb.6(0x04000000), %bb.5(0x7c000000)
  
    %19:gpr64common = PHI %18, %bb.4, %20, %bb.5
    %107:gpr64sp = nuw nsw ADDXri %19, 1, 0
    %20:gpr64all = COPY %107
    %109:gpr64common = ADDXrs %242, %19, 2
    %110:gpr32 = LDRWui %109, 1 :: (load (s32) from %ir.uglygep150, !tbaa !6)
    %111:gpr32 = COPY %19.sub_32
    %112:gpr32 = ADDWrr killed %111, killed %110
    STRWui killed %112, %109, 0 :: (store (s32) into %ir.uglygep148, !tbaa !6)
    dead $xzr = SUBSXri %107, 100, 0, implicit-def $nzcv
    Bcc 1, %bb.5, implicit $nzcv
    B %bb.6
  
  bb.6.for.end:
    successors: %bb.8(0x40000000), %bb.7(0x40000000)
  
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    BL @initial, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %114:gpr32 = COPY $w0
    dead $wzr = SUBSWrr %114, %84, implicit-def $nzcv
    %243:gpr64common = ADRP target-flags(aarch64-page) @c
    %244:gpr64common = ADRP target-flags(aarch64-page) @a
    %245:gpr64common = MOVaddr target-flags(aarch64-page) @d, target-flags(aarch64-pageoff, aarch64-nc) @d
    Bcc 11, %bb.8, implicit $nzcv
    B %bb.7
  
  bb.7.for.body34.preheader:
    successors: %bb.16(0x80000000)
  
    %224:gpr64all = COPY $xzr
    %223:gpr64all = COPY %224
    %234:gpr64sp = ADDXri %stack.0.la, 0, 0
    %237:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
    B %bb.16
  
  bb.8.for.body7.preheader:
    successors: %bb.19(0x40000000), %bb.9(0x40000000)
  
    %117:gpr32 = LDRWui %243, target-flags(aarch64-pageoff, aarch64-nc) @c :: (dereferenceable load (s32) from @c, !tbaa !6)
    %119:gpr32 = LDRWui %244, target-flags(aarch64-pageoff, aarch64-nc) @a :: (dereferenceable load (s32) from @a, !tbaa !6)
    %121:gpr64all = IMPLICIT_DEF
    %120:gpr64 = INSERT_SUBREG %121, %114, %subreg.sub_32
    %122:gpr64 = SBFMXri killed %120, 0, 31
    %124:gpr64all = IMPLICIT_DEF
    %123:gpr64 = INSERT_SUBREG %124, %84, %subreg.sub_32
    %125:gpr64 = SBFMXri killed %123, 0, 31
    %126:gpr64 = nsw SUBXrr %125, %122
    %127:gpr64common = CNTD_XPiI 31, 1
    dead $xzr = SUBSXrr %126, %127, implicit-def $nzcv
    %246:gpr64common = MOVaddr target-flags(aarch64-page) @ga, target-flags(aarch64-pageoff, aarch64-nc) @ga
    %247:gpr64common = MOVaddr target-flags(aarch64-page) @gb, target-flags(aarch64-pageoff, aarch64-nc) @gb
    Bcc 2, %bb.9, implicit $nzcv
  
  bb.19:
    successors: %bb.12(0x80000000)
  
    %22:gpr32all = COPY %117
    %23:gpr32all = COPY %119
    %24:gpr64 = COPY %122
    B %bb.12
  
  bb.9.vector.ph91:
    successors: %bb.10(0x80000000)
  
    %131:gpr64 = UDIVXr %126, %127
    %132:gpr64 = MADDXrrr killed %131, %127, $xzr
    %133:gpr64 = SUBXrr %126, %132
    %27:gpr64 = COPY %133
    %134:gpr64 = nsw ADDXrr %132, %122
    %29:gpr64all = COPY %134
    %136:gpr64all = IMPLICIT_DEF
    %135:gpr64sp = INSERT_SUBREG %136, %119, %subreg.sub_32
    %137:ppr_3b = PTRUE_D 1
    %138:zpr = DUP_ZI_D 0, 0
    %30:zpr = CPY_ZPmR_D %138, %137, killed %135
    %140:gpr64all = IMPLICIT_DEF
    %139:gpr64sp = INSERT_SUBREG %140, %117, %subreg.sub_32
    %31:zpr = CPY_ZPmR_D %138, %137, killed %139
    %142:gpr64all = IMPLICIT_DEF
    %141:gpr64 = INSERT_SUBREG %142, %114, %subreg.sub_32
    %32:zpr = INDEX_RI_D killed %141, 1
    %33:zpr = DUP_ZR_D %127
    %143:gpr64 = nsw UBFMXri %122, 62, 61
    %145:gpr64 = ADDXrr %246, %143
    %35:gpr64sp = COPY %145
    %147:gpr64 = ADDXrr %242, %143
    %36:gpr64sp = COPY %147
    %149:gpr64 = ADDXrr %247, %143
    %37:gpr64sp = COPY %149
    %151:gpr64 = ADDXrr %245, %143
    %38:gpr64sp = COPY %151
    %152:gpr64common = ADDXri %stack.0.la, 0, 0
    %153:gpr64 = ADDXrs killed %152, %122, 3
    %154:gpr64all = COPY $xzr
    %129:gpr64all = COPY %154
    %39:gpr64sp = COPY %153
    %155:ppr_3b = PTRUE_D 31
    %162:gpr64common = MOVaddrCP target-flags(aarch64-page) %const.0, target-flags(aarch64-pageoff, aarch64-nc) %const.0
  
  bb.10.vector.body96:
    successors: %bb.11(0x04000000), %bb.10(0x7c000000)
  
    %40:gpr64common = PHI %129, %bb.9, %46, %bb.10
    %41:zpr = PHI %30, %bb.9, %44, %bb.10
    %42:zpr = PHI %31, %bb.9, %45, %bb.10
    %43:zpr = PHI %32, %bb.9, %47, %bb.10
    %156:zpr = LD1W_D %155, %35, %40 :: (load unknown-size from %ir.uglygep138, align 4, !tbaa !6)
    %157:zpr = nsw LSL_ZZI_D %156, 1
    ST1W_D %157, %155, %36, %40 :: (store unknown-size into %ir.uglygep140, align 4, !tbaa !6)
    %158:zpr = LD1W_D %155, %37, %40 :: (load unknown-size from %ir.uglygep142, align 4, !tbaa !6)
    %159:zpr = nsw ADD_ZZZ_D killed %158, %43
    ST1W_D %159, %155, %38, %40 :: (store unknown-size into %ir.uglygep144, align 4, !tbaa !6)
    %160:zpr = SUB_ZZZ_D %157, %159
    %44:zpr = ADD_ZZZ_D killed %160, %41
    %161:zpr = nsw ADR_LSL_ZZZ_D_1 %43, %156
    %45:zpr = ADD_ZZZ_D killed %161, %42
    %163:zpr = LD1RD_IMM %155, %162, 0 :: (load (s64) from constant-pool)
    ST1D killed %163, %155, %39, %40 :: (store unknown-size into %ir.uglygep146, align 8, !tbaa !17)
    %164:gpr64 = nuw ADDXrr %40, %127
    %46:gpr64all = COPY %164
    %47:zpr = ADD_ZZZ_D %43, %33
    dead $xzr = SUBSXrr %132, %164, implicit-def $nzcv
    Bcc 1, %bb.10, implicit $nzcv
    B %bb.11
  
  bb.11.middle.block88:
    successors: %bb.14(0x30000000), %bb.12(0x50000000)
  
    %167:zpr = UADDV_VPZ_D %155, %45
    %168:gpr64all = COPY %167.dsub
    %48:gpr32all = COPY %168.sub_32
    %169:zpr = UADDV_VPZ_D %155, %44
    %170:gpr64all = COPY %169.dsub
    %49:gpr32all = COPY %170.sub_32
    CBZX %27, %bb.14
    B %bb.12
  
  bb.12.for.body7.preheader117:
    successors: %bb.15(0x80000000)
  
    %50:gpr64 = PHI %24, %bb.19, %29, %bb.11
    %51:gpr32all = PHI %23, %bb.19, %49, %bb.11
    %52:gpr32all = PHI %22, %bb.19, %48, %bb.11
    %172:gpr32 = COPY %50.sub_32
    %173:gpr32 = COPY $wzr
    %174:gpr32 = SUBWrr %173, killed %172
    %53:gpr64all = SUBREG_TO_REG 0, %174, %subreg.sub_32
    %176:gpr64 = nsw UBFMXri %50, 62, 61
    %178:gpr64 = ADDXrr %246, %176
    %54:gpr64sp = COPY %178
    %180:gpr64 = ADDXrr %242, %176
    %55:gpr64sp = COPY %180
    %182:gpr64 = ADDXrr %247, %176
    %56:gpr64sp = COPY %182
    %184:gpr64 = ADDXrr %245, %176
    %57:gpr64sp = COPY %184
    %185:gpr64common = ADDXri %stack.0.la, 0, 0
    %186:gpr64 = ADDXrs killed %185, %50, 3
    %58:gpr64sp = COPY %186
    %187:gpr64 = SUBXrr %125, %50
    %188:gpr64all = COPY $xzr
    %171:gpr64all = COPY %188
    %59:gpr64all = COPY %187
    %200:gpr32 = COPY %53.sub_32
    %205:gpr64 = MOVi64imm 4614650793885003572
    B %bb.15
  
  bb.13.for.cond5.for.cond32.preheader_crit_edge.loopexit:
    successors: %bb.14(0x80000000)
  
    %211:gpr32 = COPY %50.sub_32
    %212:gpr32 = ADDWrr %211, %203
    %213:gpr32 = COPY %71.sub_32
    %214:gpr32common = ADDWrr killed %212, %213
    %215:gpr32common = SUBWri killed %214, 1, 0
    %60:gpr32all = COPY %215
    %218:gpr32 = SUBWrr %198, %211
    %219:gpr32common = SUBWrr killed %218, %213
    %220:gpr32sp = ADDWri killed %219, 1, 0
    %61:gpr32all = COPY %220
  
  bb.14.for.cond5.for.cond32.preheader_crit_edge:
    successors: %bb.7(0x80000000)
  
    %62:gpr32 = PHI %49, %bb.11, %61, %bb.13
    %63:gpr32 = PHI %48, %bb.11, %60, %bb.13
    STRWui %62, %244, target-flags(aarch64-pageoff, aarch64-nc) @a :: (store (s32) into @a, !tbaa !6)
    STRWui %63, %243, target-flags(aarch64-pageoff, aarch64-nc) @c :: (store (s32) into @c, !tbaa !6)
    B %bb.7
  
  bb.15.for.body7:
    successors: %bb.15(0x7c000000), %bb.13(0x04000000)
  
    %64:gpr64sp = PHI %171, %bb.12, %72, %bb.15
    %65:gpr64common = PHI %171, %bb.12, %71, %bb.15
    %66:gpr32 = PHI %51, %bb.12, %74, %bb.15
    %67:gpr32 = PHI %52, %bb.12, %73, %bb.15
    %68:gpr64sp = PHI %59, %bb.12, %75, %bb.15
    %189:gpr64 = UBFMXri %65, 62, 61
    %190:gpr32 = LDRWroX %54, %189, 0, 0 :: (load (s32) from %ir.uglygep128, !tbaa !6)
    %191:gpr32 = UBFMWri %190, 31, 30
    STRWroX %191, %55, %189, 0, 0 :: (store (s32) into %ir.uglygep130, !tbaa !6)
    %192:gpr32 = LDRWroX %56, %189, 0, 0 :: (load (s32) from %ir.uglygep132, !tbaa !6)
    %193:gpr32 = COPY %65.sub_32
    %194:gpr32 = COPY %50.sub_32
    %195:gpr32 = ADDWrr killed %194, killed %193
    %196:gpr32 = ADDWrr %195, %192
    STRWroX killed %196, %57, %189, 0, 0 :: (store (s32) into %ir.uglygep134, !tbaa !6)
    %197:gpr32 = ADDWrr %66, %191
    %198:gpr32 = SUBWrr %197, %192
    %199:gpr32 = COPY %64.sub_32
    %201:gpr32 = ADDWrr %200, killed %199
    %202:gpr32 = ADDWrr killed %201, %198
    %203:gpr32 = ADDWrr %67, %191
    %204:gpr32 = ADDWrr %195, %203
    STRXroX %205, %58, %65, 0, 1 :: (store (s64) into %ir.uglygep136, !tbaa !17)
    %206:gpr64sp = ADDXri %65, 1, 0
    %71:gpr64all = COPY %206
    %207:gpr64common = SUBXri %64, 1, 0
    %72:gpr64all = COPY %207
    %73:gpr32all = COPY %204
    %74:gpr32all = COPY %202
    %208:gpr64 = SUBSXri %68, 1, 0, implicit-def $nzcv
    %75:gpr64all = COPY %208
    Bcc 1, %bb.15, implicit $nzcv
    B %bb.13
  
  bb.16.for.body34:
    successors: %bb.16(0x7c000000), %bb.17(0x04000000)
  
    %76:gpr64common = PHI %223, %bb.7, %77, %bb.16
    %226:gpr32 = LDRWui %244, target-flags(aarch64-pageoff, aarch64-nc) @a :: (dereferenceable load (s32) from @a, !tbaa !6)
    %227:gpr64 = nuw nsw UBFMXri %76, 62, 61
    %229:gpr32 = LDRWroX %242, %227, 0, 0 :: (load (s32) from %ir.uglygep119, !tbaa !6)
    %231:gpr32 = LDRWui %243, target-flags(aarch64-pageoff, aarch64-nc) @c :: (dereferenceable load (s32) from @c, !tbaa !6)
    %233:gpr32 = LDRWroX %245, %227, 0, 0 :: (load (s32) from %ir.uglygep118, !tbaa !6)
    %235:fpr64 = LDRDroX %234, %76, 0, 1 :: (load (s64) from %ir.uglygep, !tbaa !17)
    %236:gpr32all = COPY %76.sub_32
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    $x0 = COPY %237
    $w1 = COPY %226
    $w2 = COPY %236
    $w3 = COPY %229
    $w4 = COPY %231
    $w5 = COPY %236
    $w6 = COPY %233
    $w7 = COPY %236
    $d0 = COPY %235
    BL @printf, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $w6, implicit $w7, implicit $d0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %239:gpr64sp = nuw nsw ADDXri %76, 50, 0
    %77:gpr64all = COPY %239
    dead $xzr = SUBSXri %76, 950, 0, implicit-def $nzcv
    Bcc 3, %bb.16, implicit $nzcv
    B %bb.17
  
  bb.17.for.end44:
    %241:gpr32all = COPY $wzr
    $w0 = COPY %241
    RET_ReallyLR implicit $w0

...
