#RUN: llc %s -mcpu=a64fx -fswp -O1 -swpl-debug-dump-resource-filter=".*" -start-before=aarch64-swpipeliner -o /dev/null 2>&1 | FileCheck %s

#CHECK:DBG(AArch64SwplTargetMachine::getPipelines): MI: %54:gpr32 = LDRWroX
#CHECK-NEXT:  ResourceID: INT_LD+2
#CHECK-NEXT:  latency: 5
#CHECK-NEXT:  seqDecode: false
#CHECK-NEXT:  stage/resource(): 0/EAGA, 0/LSU1, 5/EAGA_C
#CHECK-NEXT:  stage/resource(): 0/EAGB, 0/LSU1, 5/EAGB_C
#CHECK-NEXT:  stage/resource(): 0/EAGA, 0/LSU2, 5/EAGA_C
#CHECK-NEXT:  stage/resource(): 0/EAGB, 0/LSU2, 5/EAGB_C

#CHECK:DBG(AArch64SwplTargetMachine::getPipelines): MI: %56:gpr32 = ADDWrr
#CHECK-NEXT:  ResourceID: INT_OP+1
#CHECK-NEXT:  latency: 1
#CHECK-NEXT:  seqDecode: false
#CHECK-NEXT:  stage/resource(): 0/EXA
#CHECK-NEXT:  stage/resource(): 0/EXB
#CHECK-NEXT:  stage/resource(): 0/EAGA
#CHECK-NEXT:  stage/resource(): 0/EAGB

#CHECK:DBG(AArch64SwplTargetMachine::getPipelines): MI: STRWroX 
#CHECK-NEXT:  ResourceID: INT_ST+1
#CHECK-NEXT:  latency: 1
#CHECK-NEXT:  seqDecode: false
#CHECK-NEXT:  stage/resource(): 0/EAGA, 0/EXA, 0/LSU1, 0/LSU2
#CHECK-NEXT:  stage/resource(): 0/EAGB, 0/EXA, 0/LSU1, 0/LSU2

--- |
  ; ModuleID = 'swpl-target-machine-pipelines.c'
  source_filename = "swpl-target-machine-pipelines.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  @b = dso_local local_unnamed_addr global [64 x i32] zeroinitializer, align 4
  @a = dso_local local_unnamed_addr global [64 x i32] zeroinitializer, align 4
  
  ; Function Attrs: nofree norecurse nosync nounwind uwtable vscale_range(1,16)
  define dso_local void @test() local_unnamed_addr #0 {
  entry:
    %0 = tail call i64 @llvm.vscale.i64()
    %min.iters.check = icmp ugt i64 %0, 16
    br i1 %min.iters.check, label %for.body.preheader, label %vector.ph
  
  vector.ph:                                        ; preds = %entry
    %1 = shl nuw nsw i64 %0, 2
    %n.mod.vf = urem i64 64, %1
    %n.vec = sub nuw nsw i64 64, %n.mod.vf
    %2 = tail call <vscale x 4 x i32> @llvm.experimental.stepvector.nxv4i32()
    %3 = tail call i32 @llvm.vscale.i32()
    %4 = shl nuw nsw i32 %3, 2
    %.splatinsert = insertelement <vscale x 4 x i32> poison, i32 %4, i64 0
    %.splat = shufflevector <vscale x 4 x i32> %.splatinsert, <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer
    br label %vector.body
  
  vector.body:                                      ; preds = %vector.body, %vector.ph
    %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
    %vec.ind = phi <vscale x 4 x i32> [ %2, %vector.ph ], [ %vec.ind.next, %vector.body ]
    %5 = shl i64 %index, 2
    %uglygep10 = getelementptr i8, ptr @b, i64 %5
    %wide.load = load <vscale x 4 x i32>, ptr %uglygep10, align 4, !tbaa !6
    %6 = add nsw <vscale x 4 x i32> %wide.load, %vec.ind
    %uglygep11 = getelementptr i8, ptr @a, i64 %5
    store <vscale x 4 x i32> %6, ptr %uglygep11, align 4, !tbaa !6
    %index.next = add nuw i64 %index, %1
    %vec.ind.next = add <vscale x 4 x i32> %vec.ind, %.splat
    %7 = icmp eq i64 %n.vec, %index.next
    br i1 %7, label %middle.block, label %vector.body, !llvm.loop !10
  
  middle.block:                                     ; preds = %vector.body
    %cmp.n = icmp eq i64 %n.mod.vf, 0
    br i1 %cmp.n, label %for.cond.cleanup, label %for.body.preheader
  
  for.body.preheader:                               ; preds = %entry, %middle.block
    %indvars.iv.ph = phi i64 [ %n.vec, %middle.block ], [ 0, %entry ]
    %8 = sub i64 64, %indvars.iv.ph
    %9 = call i64 @llvm.start.loop.iterations.i64(i64 %8)
    br label %for.body
  
  for.cond.cleanup:                                 ; preds = %for.body, %middle.block
    ret void
  
  for.body:                                         ; preds = %for.body.preheader, %for.body
    %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ %indvars.iv.ph, %for.body.preheader ]
    %10 = phi i64 [ %9, %for.body.preheader ], [ %16, %for.body ]
    %11 = shl i64 %indvars.iv, 2
    %uglygep9 = getelementptr i8, ptr @b, i64 %11
    %12 = load i32, ptr %uglygep9, align 4, !tbaa !6
    %13 = zext i32 %12 to i64
    %14 = add i64 %indvars.iv, %13
    %15 = shl i64 %indvars.iv, 2
    %uglygep = getelementptr i8, ptr @a, i64 %15
    %tmp = trunc i64 %14 to i32
    store i32 %tmp, ptr %uglygep, align 4, !tbaa !6
    %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
    %16 = call i64 @llvm.loop.decrement.reg.i64(i64 %10, i64 1)
    %17 = icmp ne i64 %16, 0
    br i1 %17, label %for.body, label %for.cond.cleanup, !llvm.loop !13
  }
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
  declare i64 @llvm.vscale.i64() #1
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
  declare <vscale x 4 x i32> @llvm.experimental.stepvector.nxv4i32() #1
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
  declare i32 @llvm.vscale.i32() #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #2
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #2
  
  attributes #0 = { nofree norecurse nosync nounwind uwtable vscale_range(1,16) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #1 = { nocallback nofree nosync nounwind readnone willreturn }
  attributes #2 = { nocallback noduplicate nofree nosync nounwind willreturn }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 7, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"int", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C/C++ TBAA"}
  !10 = distinct !{!10, !11, !12}
  !11 = !{!"llvm.loop.mustprogress"}
  !12 = !{!"llvm.loop.isvectorized", i32 1}
  !13 = distinct !{!13, !11, !14, !12}
  !14 = !{!"llvm.loop.unroll.runtime.disable"}

...
---
name:            test
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr64, preferred-register: '' }
  - { id: 1, class: gpr64, preferred-register: '' }
  - { id: 2, class: gpr64, preferred-register: '' }
  - { id: 3, class: gpr64, preferred-register: '' }
  - { id: 4, class: zpr, preferred-register: '' }
  - { id: 5, class: zpr, preferred-register: '' }
  - { id: 6, class: gpr64common, preferred-register: '' }
  - { id: 7, class: zpr, preferred-register: '' }
  - { id: 8, class: gpr64all, preferred-register: '' }
  - { id: 9, class: zpr, preferred-register: '' }
  - { id: 10, class: gpr64, preferred-register: '' }
  - { id: 11, class: gpr64all, preferred-register: '' }
  - { id: 12, class: gpr64common, preferred-register: '' }
  - { id: 13, class: gpr64sp, preferred-register: '' }
  - { id: 14, class: gpr64all, preferred-register: '' }
  - { id: 15, class: gpr64all, preferred-register: '' }
  - { id: 16, class: gpr64all, preferred-register: '' }
  - { id: 17, class: gpr64, preferred-register: '' }
  - { id: 18, class: gpr64common, preferred-register: '' }
  - { id: 19, class: gpr64all, preferred-register: '' }
  - { id: 20, class: gpr64, preferred-register: '' }
  - { id: 21, class: gpr64all, preferred-register: '' }
  - { id: 22, class: gpr64, preferred-register: '' }
  - { id: 23, class: gpr32, preferred-register: '' }
  - { id: 24, class: gpr64, preferred-register: '' }
  - { id: 25, class: gpr64, preferred-register: '' }
  - { id: 26, class: gpr64, preferred-register: '' }
  - { id: 27, class: gpr64, preferred-register: '' }
  - { id: 28, class: gpr64, preferred-register: '' }
  - { id: 29, class: gpr32sp, preferred-register: '' }
  - { id: 30, class: gpr64all, preferred-register: '' }
  - { id: 31, class: gpr64common, preferred-register: '' }
  - { id: 32, class: ppr_3b, preferred-register: '' }
  - { id: 33, class: zpr, preferred-register: '' }
  - { id: 34, class: zpr, preferred-register: '' }
  - { id: 35, class: gpr64common, preferred-register: '' }
  - { id: 36, class: gpr64, preferred-register: '' }
  - { id: 37, class: gpr64, preferred-register: '' }
  - { id: 38, class: gpr32, preferred-register: '' }
  - { id: 39, class: gpr64, preferred-register: '' }
  - { id: 40, class: gpr64, preferred-register: '' }
  - { id: 41, class: gpr64, preferred-register: '' }
  - { id: 42, class: gpr64common, preferred-register: '' }
  - { id: 43, class: gpr32, preferred-register: '' }
  - { id: 44, class: gpr32, preferred-register: '' }
  - { id: 45, class: gpr32, preferred-register: '' }
  - { id: 46, class: gpr64common, preferred-register: '' }
  - { id: 47, class: gpr64sp, preferred-register: '' }
  - { id: 48, class: gpr64, preferred-register: '' }
  - { id: 49, class: gpr64common, preferred-register: '' }
  - { id: 50, class: gpr64common, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.7(0x40000000), %bb.1(0x40000000)
  
    %17:gpr64 = RDVLI_XI 1
    %18:gpr64common = UBFMXri killed %17, 4, 63
    dead $xzr = SUBSXri %18, 16, 0, implicit-def $nzcv
    %49:gpr64common = MOVaddr target-flags(aarch64-page) @b, target-flags(aarch64-pageoff, aarch64-nc) @b
    %50:gpr64common = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a
    Bcc 9, %bb.1, implicit $nzcv
  
  bb.7:
    successors: %bb.4(0x80000000)
  
    %19:gpr64all = COPY $xzr
    %16:gpr64all = COPY %19
    B %bb.4
  
  bb.1.vector.ph:
    successors: %bb.2(0x80000000)
  
    %22:gpr64 = nuw nsw UBFMXri %18, 62, 61
    %23:gpr32 = MOVi32imm 64
    %24:gpr64 = SUBREG_TO_REG 0, killed %23, %subreg.sub_32
    %25:gpr64 = UDIVXr %24, %22
    %26:gpr64 = MADDXrrr killed %25, %22, $xzr
    %27:gpr64 = SUBXrr %24, %26
    %2:gpr64 = COPY %27
    %3:gpr64 = COPY %26
    %4:zpr = INDEX_II_S 0, 1
    %28:gpr64 = CNTW_XPiI 31, 1
    %29:gpr32sp = COPY %28.sub_32
    %5:zpr = DUP_ZR_S killed %29
    %30:gpr64all = COPY $xzr
    %21:gpr64all = COPY %30
    %32:ppr_3b = PTRUE_S 31
  
  bb.2.vector.body:
    successors: %bb.3(0x04000000), %bb.2(0x7c000000)
  
    %6:gpr64common = PHI %21, %bb.1, %8, %bb.2
    %7:zpr = PHI %4, %bb.1, %9, %bb.2
    %33:zpr = LD1W %32, %49, %6 :: (load unknown-size from %ir.uglygep10, align 4, !tbaa !6)
    %34:zpr = nsw ADD_ZZZ_S killed %33, %7
    ST1W killed %34, %32, %50, %6 :: (store unknown-size into %ir.uglygep11, align 4, !tbaa !6)
    %36:gpr64 = nuw ADDXrr %6, %22
    %8:gpr64all = COPY %36
    %9:zpr = ADD_ZZZ_S %7, %5
    dead $xzr = SUBSXrr %26, %36, implicit-def $nzcv
    Bcc 1, %bb.2, implicit $nzcv
    B %bb.3
  
  bb.3.middle.block:
    successors: %bb.5(0x30000000), %bb.4(0x50000000)
  
    CBZX %2, %bb.5
    B %bb.4
  
  bb.4.for.body.preheader:
    successors: %bb.6(0x80000000)
  
    %10:gpr64 = PHI %16, %bb.7, %3, %bb.3
    %38:gpr32 = MOVi32imm 64
    %39:gpr64 = SUBREG_TO_REG 0, killed %38, %subreg.sub_32
    %40:gpr64 = SUBXrr killed %39, %10
    %11:gpr64all = COPY %40
    B %bb.6
  
  bb.5.for.cond.cleanup:
    RET_ReallyLR
  
  bb.6.for.body:
    successors: %bb.6(0x7c000000), %bb.5(0x04000000)
  
    %12:gpr64common = PHI %10, %bb.4, %14, %bb.6
    %13:gpr64sp = PHI %11, %bb.4, %15, %bb.6
    %41:gpr64 = UBFMXri %12, 62, 61
    %43:gpr32 = LDRWroX %49, %41, 0, 0 :: (load (s32) from %ir.uglygep9, !tbaa !6)
    %44:gpr32 = COPY %12.sub_32
    %45:gpr32 = ADDWrr killed %44, killed %43
    STRWroX killed %45, %50, %41, 0, 0 :: (store (s32) into %ir.uglygep, !tbaa !6)
    %47:gpr64sp = nuw nsw ADDXri %12, 1, 0
    %14:gpr64all = COPY %47
    %48:gpr64 = SUBSXri %13, 1, 0, implicit-def $nzcv
    %15:gpr64all = COPY %48
    Bcc 1, %bb.6, implicit $nzcv
    B %bb.5

...
