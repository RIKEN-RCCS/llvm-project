#RUN: llc %s -mcpu=a64fx -O1  -start-before=aarch64-swpipeliner -pass-remarks=aarch64-swpipeliner -pass-remarks-analysis=aarch64-swpipeliner -o /dev/null 2>&1 | FileCheck %s

#CHECK:remark: swpl-remainder-loop-pipeline-006.cpp:7:5: SVE instruction latency is calculated at 512bit.
#CHECK-NOT:remark: swpl-remainder-loop-pipeline-006.cpp:7:5: software pipelining

--- |
  ; ModuleID = '/test/swpl-remainder-loop-pipeline-006.cpp'
  source_filename = "/test/swpl-remainder-loop-pipeline-006.cpp"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-hurd-gnu"
  
  @.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
  
  ; Function Attrs: mustprogress uwtable vscale_range(4,4)
  define dso_local noundef i32 @_Z14remainder_loopiPPc(i32 noundef %count, ptr nocapture noundef readonly %val) local_unnamed_addr #0 !dbg !8 {
  entry:
    %cmp6 = icmp sgt i32 %count, 0, !dbg !12
    br i1 %cmp6, label %for.body.lr.ph, label %for.cond.cleanup, !dbg !13
  
  for.body.lr.ph:                                   ; preds = %entry
    %0 = load ptr, ptr %val, align 8, !tbaa !14
    %1 = load i8, ptr %0, align 1, !tbaa !18
    %conv = zext i8 %1 to i32
    %2 = add i32 %count, -1, !dbg !13
    %3 = urem i32 %2, 10, !dbg !13
    %xtraiter.cmp = icmp ult i32 %3, 9, !dbg !13
    %xtraiter.v = select i1 %xtraiter.cmp, i32 1, i32 -9, !dbg !13
    %xtraiter = add i32 %3, %xtraiter.v, !dbg !13
    %4 = icmp ult i32 %count, 10, !dbg !13
    br i1 %4, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.lr.ph.new, !dbg !13
  
  for.body.lr.ph.new:                               ; preds = %for.body.lr.ph
    %5 = udiv i32 %2, 10, !dbg !13
    %6 = mul nuw i32 %5, 10, !dbg !13
    %7 = add i32 %6, -9, !dbg !13
    %8 = sub i32 %7, %xtraiter.v, !dbg !13
    %9 = zext i32 %8 to i64, !dbg !13
    %10 = udiv i64 %9, 10, !dbg !13
    %11 = add nuw nsw i64 %10, 1, !dbg !13
    %12 = call i64 @llvm.start.loop.iterations.i64(i64 %11), !dbg !13
    br label %for.body, !dbg !13
  
  for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.body, %for.body.lr.ph
    %add.lcssa.ph = phi i32 [ undef, %for.body.lr.ph ], [ %add.9, %for.body ]
    %i.08.unr = phi i32 [ 0, %for.body.lr.ph ], [ %inc.9, %for.body ]
    %sum.07.unr = phi i32 [ 0, %for.body.lr.ph ], [ %add.9, %for.body ]
    %lcmp.mod.not = icmp eq i32 %xtraiter, 0, !dbg !13
    br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.body.epil.preheader, !dbg !13
  
  for.body.epil.preheader:                          ; preds = %for.cond.cleanup.loopexit.unr-lcssa
    %13 = add i32 %xtraiter.v, %count, !dbg !13
    %14 = add i32 %13, -2, !dbg !13
    %15 = udiv i32 %2, 10, !dbg !13
    %16 = mul nuw i32 %15, 10, !dbg !13
    %17 = sub i32 %14, %16, !dbg !13
    %18 = zext i32 %17 to i64, !dbg !13
    %19 = add nuw nsw i64 %18, 1, !dbg !13
    %20 = call i64 @llvm.start.loop.iterations.i64(i64 %19), !dbg !13
    br label %for.body.epil, !dbg !13
  
  for.body.epil:                                    ; preds = %for.body.epil.preheader, %for.body.epil
    %i.08.epil = phi i32 [ %inc.epil, %for.body.epil ], [ %i.08.unr, %for.body.epil.preheader ]
    %sum.07.epil = phi i32 [ %22, %for.body.epil ], [ %sum.07.unr, %for.body.epil.preheader ]
    %21 = phi i64 [ %20, %for.body.epil.preheader ], [ %23, %for.body.epil ], !dbg !19
    %mul.epil = mul i32 %sum.07.epil, %conv, !dbg !19
    %22 = add i32 %i.08.epil, %mul.epil, !dbg !20
    %inc.epil = add i32 %i.08.epil, 1, !dbg !20
    %23 = call i64 @llvm.loop.decrement.reg.i64(i64 %21, i64 1), !dbg !13
    %24 = icmp ne i64 %23, 0, !dbg !13
    br i1 %24, label %for.body.epil, label %for.cond.cleanup.loopexit, !dbg !13, !llvm.loop !21
  
  for.cond.cleanup.loopexit:                        ; preds = %for.body.epil
    %25 = mul i32 %conv, %sum.07.epil, !dbg !23
    %26 = add i32 %25, %inc.epil, !dbg !23
    %27 = add i32 %26, -1, !dbg !23
    br label %for.cond.cleanup, !dbg !23
  
  for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %for.cond.cleanup.loopexit.unr-lcssa, %entry
    %sum.0.lcssa = phi i32 [ 0, %entry ], [ %add.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %27, %for.cond.cleanup.loopexit ], !dbg !24
    %call = tail call noundef i32 (ptr, ...) @_Z6printfPKcz(ptr noundef nonnull @.str, i32 noundef %sum.0.lcssa), !dbg !23
    ret i32 0, !dbg !25
  
  for.body:                                         ; preds = %for.body, %for.body.lr.ph.new
    %i.08 = phi i32 [ 0, %for.body.lr.ph.new ], [ %inc.9, %for.body ]
    %sum.07 = phi i32 [ 0, %for.body.lr.ph.new ], [ %add.9, %for.body ]
    %28 = phi i64 [ %12, %for.body.lr.ph.new ], [ %29, %for.body ], !dbg !19
    %mul = mul nsw i32 %sum.07, %conv, !dbg !19
    %add = add nsw i32 %mul, %i.08, !dbg !26
    %inc = or i32 %i.08, 1, !dbg !20
    %mul.1 = mul nsw i32 %add, %conv, !dbg !19
    %add.1 = add nsw i32 %mul.1, %inc, !dbg !26
    %inc.1 = add nuw nsw i32 %i.08, 2, !dbg !20
    %mul.2 = mul nsw i32 %add.1, %conv, !dbg !19
    %add.2 = add nsw i32 %mul.2, %inc.1, !dbg !26
    %inc.2 = add nuw nsw i32 %i.08, 3, !dbg !20
    %mul.3 = mul nsw i32 %add.2, %conv, !dbg !19
    %add.3 = add nsw i32 %mul.3, %inc.2, !dbg !26
    %inc.3 = add nuw nsw i32 %i.08, 4, !dbg !20
    %mul.4 = mul nsw i32 %add.3, %conv, !dbg !19
    %add.4 = add nsw i32 %mul.4, %inc.3, !dbg !26
    %inc.4 = add nuw nsw i32 %i.08, 5, !dbg !20
    %mul.5 = mul nsw i32 %add.4, %conv, !dbg !19
    %add.5 = add nsw i32 %mul.5, %inc.4, !dbg !26
    %inc.5 = add nuw nsw i32 %i.08, 6, !dbg !20
    %mul.6 = mul nsw i32 %add.5, %conv, !dbg !19
    %add.6 = add nsw i32 %mul.6, %inc.5, !dbg !26
    %inc.6 = add nuw nsw i32 %i.08, 7, !dbg !20
    %mul.7 = mul nsw i32 %add.6, %conv, !dbg !19
    %add.7 = add nsw i32 %mul.7, %inc.6, !dbg !26
    %inc.7 = add nuw nsw i32 %i.08, 8, !dbg !20
    %mul.8 = mul nsw i32 %add.7, %conv, !dbg !19
    %add.8 = add nsw i32 %mul.8, %inc.7, !dbg !26
    %inc.8 = add nuw nsw i32 %i.08, 9, !dbg !20
    %mul.9 = mul nsw i32 %add.8, %conv, !dbg !19
    %add.9 = add nsw i32 %mul.9, %inc.8, !dbg !26
    %inc.9 = add nuw i32 %i.08, 10, !dbg !20
    %29 = call i64 @llvm.loop.decrement.reg.i64(i64 %28, i64 1), !dbg !13
    %30 = icmp ne i64 %29, 0, !dbg !13
    br i1 %30, label %for.body, label %for.cond.cleanup.loopexit.unr-lcssa, !dbg !13, !llvm.loop !27
  }
  
  declare !dbg !30 dso_local noundef i32 @_Z6printfPKcz(ptr noundef, ...) local_unnamed_addr #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #2
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #2
  
  attributes #0 = { mustprogress uwtable vscale_range(4,4) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #1 = { "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #2 = { nocallback noduplicate nofree nosync nounwind willreturn }
  
  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!2, !3, !4, !5, !6}
  !llvm.ident = !{!7}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1, producer: "clang version 16.0.6", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "/test/swpl-remainder-loop-pipeline-006.cpp", directory: "/test", checksumkind: CSK_MD5, checksum: "97f95afc1d2c347afc1abcb8479f9791")
  !2 = !{i32 7, !"Dwarf Version", i32 5}
  !3 = !{i32 2, !"Debug Info Version", i32 3}
  !4 = !{i32 1, !"wchar_size", i32 4}
  !5 = !{i32 7, !"uwtable", i32 2}
  !6 = !{i32 7, !"frame-pointer", i32 1}
  !7 = !{!"clang version 16.0.6"}
  !8 = distinct !DISubprogram(name: "remainder_loop", scope: !9, file: !9, line: 3, type: !10, scopeLine: 3, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !11)
  !9 = !DIFile(filename: "swpl-remainder-loop-pipeline-006.cpp", directory: "/test", checksumkind: CSK_MD5, checksum: "97f95afc1d2c347afc1abcb8479f9791")
  !10 = !DISubroutineType(types: !11)
  !11 = !{}
  !12 = !DILocation(line: 7, column: 20, scope: !8)
  !13 = !DILocation(line: 7, column: 5, scope: !8)
  !14 = !{!15, !15, i64 0}
  !15 = !{!"any pointer", !16, i64 0}
  !16 = !{!"omnipotent char", !17, i64 0}
  !17 = !{!"Simple C++ TBAA"}
  !18 = !{!16, !16, i64 0}
  !19 = !DILocation(line: 8, column: 12, scope: !8)
  !20 = !DILocation(line: 7, column: 29, scope: !8)
  !21 = distinct !{!21, !22}
  !22 = !{!"llvm.loop.unroll.disable"}
  !23 = !DILocation(line: 11, column: 2, scope: !8)
  !24 = !DILocation(line: 0, scope: !8)
  !25 = !DILocation(line: 12, column: 2, scope: !8)
  !26 = !DILocation(line: 9, column: 12, scope: !8)
  !27 = distinct !{!27, !13, !28, !29, !22}
  !28 = !DILocation(line: 10, column: 5, scope: !8)
  !29 = !{!"llvm.loop.mustprogress"}
  !30 = !DISubprogram(name: "printf", scope: !9, file: !9, line: 1, type: !10, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !11)

...
---
name:            _Z14remainder_loopiPPc
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32, preferred-register: '' }
  - { id: 1, class: gpr32, preferred-register: '' }
  - { id: 2, class: gpr32, preferred-register: '' }
  - { id: 3, class: gpr32, preferred-register: '' }
  - { id: 4, class: gpr64all, preferred-register: '' }
  - { id: 5, class: gpr32all, preferred-register: '' }
  - { id: 6, class: gpr32all, preferred-register: '' }
  - { id: 7, class: gpr32all, preferred-register: '' }
  - { id: 8, class: gpr64all, preferred-register: '' }
  - { id: 9, class: gpr32common, preferred-register: '' }
  - { id: 10, class: gpr32, preferred-register: '' }
  - { id: 11, class: gpr64sp, preferred-register: '' }
  - { id: 12, class: gpr32all, preferred-register: '' }
  - { id: 13, class: gpr32, preferred-register: '' }
  - { id: 14, class: gpr64all, preferred-register: '' }
  - { id: 15, class: gpr32all, preferred-register: '' }
  - { id: 16, class: gpr32all, preferred-register: '' }
  - { id: 17, class: gpr32common, preferred-register: '' }
  - { id: 18, class: gpr32, preferred-register: '' }
  - { id: 19, class: gpr64sp, preferred-register: '' }
  - { id: 20, class: gpr32all, preferred-register: '' }
  - { id: 21, class: gpr32all, preferred-register: '' }
  - { id: 22, class: gpr64all, preferred-register: '' }
  - { id: 23, class: gpr32common, preferred-register: '' }
  - { id: 24, class: gpr64common, preferred-register: '' }
  - { id: 25, class: gpr32all, preferred-register: '' }
  - { id: 26, class: gpr32all, preferred-register: '' }
  - { id: 27, class: gpr32, preferred-register: '' }
  - { id: 28, class: gpr32all, preferred-register: '' }
  - { id: 29, class: gpr32all, preferred-register: '' }
  - { id: 30, class: gpr64common, preferred-register: '' }
  - { id: 31, class: gpr32, preferred-register: '' }
  - { id: 32, class: gpr32, preferred-register: '' }
  - { id: 33, class: gpr32, preferred-register: '' }
  - { id: 34, class: gpr64, preferred-register: '' }
  - { id: 35, class: gpr64, preferred-register: '' }
  - { id: 36, class: gpr32, preferred-register: '' }
  - { id: 37, class: gpr32, preferred-register: '' }
  - { id: 38, class: gpr32, preferred-register: '' }
  - { id: 39, class: gpr32common, preferred-register: '' }
  - { id: 40, class: gpr32, preferred-register: '' }
  - { id: 41, class: gpr32, preferred-register: '' }
  - { id: 42, class: gpr32, preferred-register: '' }
  - { id: 43, class: gpr32, preferred-register: '' }
  - { id: 44, class: gpr32all, preferred-register: '' }
  - { id: 45, class: gpr32, preferred-register: '' }
  - { id: 46, class: gpr32all, preferred-register: '' }
  - { id: 47, class: gpr32, preferred-register: '' }
  - { id: 48, class: gpr64, preferred-register: '' }
  - { id: 49, class: gpr64, preferred-register: '' }
  - { id: 50, class: gpr32, preferred-register: '' }
  - { id: 51, class: gpr32, preferred-register: '' }
  - { id: 52, class: gpr32, preferred-register: '' }
  - { id: 53, class: gpr32common, preferred-register: '' }
  - { id: 54, class: gpr32common, preferred-register: '' }
  - { id: 55, class: gpr32, preferred-register: '' }
  - { id: 56, class: gpr64, preferred-register: '' }
  - { id: 57, class: gpr64, preferred-register: '' }
  - { id: 58, class: gpr64common, preferred-register: '' }
  - { id: 59, class: gpr64sp, preferred-register: '' }
  - { id: 60, class: gpr32all, preferred-register: '' }
  - { id: 61, class: gpr32, preferred-register: '' }
  - { id: 62, class: gpr32, preferred-register: '' }
  - { id: 63, class: gpr32common, preferred-register: '' }
  - { id: 64, class: gpr32, preferred-register: '' }
  - { id: 65, class: gpr32, preferred-register: '' }
  - { id: 66, class: gpr32, preferred-register: '' }
  - { id: 67, class: gpr32common, preferred-register: '' }
  - { id: 68, class: gpr32common, preferred-register: '' }
  - { id: 69, class: gpr32, preferred-register: '' }
  - { id: 70, class: gpr32common, preferred-register: '' }
  - { id: 71, class: gpr32common, preferred-register: '' }
  - { id: 72, class: gpr32, preferred-register: '' }
  - { id: 73, class: gpr32common, preferred-register: '' }
  - { id: 74, class: gpr32common, preferred-register: '' }
  - { id: 75, class: gpr32, preferred-register: '' }
  - { id: 76, class: gpr32common, preferred-register: '' }
  - { id: 77, class: gpr32common, preferred-register: '' }
  - { id: 78, class: gpr32, preferred-register: '' }
  - { id: 79, class: gpr32common, preferred-register: '' }
  - { id: 80, class: gpr32common, preferred-register: '' }
  - { id: 81, class: gpr32, preferred-register: '' }
  - { id: 82, class: gpr32common, preferred-register: '' }
  - { id: 83, class: gpr32common, preferred-register: '' }
  - { id: 84, class: gpr32, preferred-register: '' }
  - { id: 85, class: gpr32common, preferred-register: '' }
  - { id: 86, class: gpr32common, preferred-register: '' }
  - { id: 87, class: gpr32, preferred-register: '' }
  - { id: 88, class: gpr32common, preferred-register: '' }
  - { id: 89, class: gpr32sp, preferred-register: '' }
  - { id: 90, class: gpr32sp, preferred-register: '' }
  - { id: 91, class: gpr64, preferred-register: '' }
  - { id: 92, class: gpr32, preferred-register: '' }
  - { id: 93, class: gpr32, preferred-register: '' }
  - { id: 94, class: gpr64, preferred-register: '' }
  - { id: 95, class: gpr64, preferred-register: '' }
  - { id: 96, class: gpr32, preferred-register: '' }
  - { id: 97, class: gpr32, preferred-register: '' }
  - { id: 98, class: gpr32, preferred-register: '' }
  - { id: 99, class: gpr32common, preferred-register: '' }
  - { id: 100, class: gpr32common, preferred-register: '' }
  - { id: 101, class: gpr32, preferred-register: '' }
  - { id: 102, class: gpr64sp, preferred-register: '' }
  - { id: 103, class: gpr64sp, preferred-register: '' }
  - { id: 104, class: gpr32, preferred-register: '' }
  - { id: 105, class: gpr32, preferred-register: '' }
  - { id: 106, class: gpr32common, preferred-register: '' }
  - { id: 107, class: gpr64, preferred-register: '' }
  - { id: 108, class: gpr32, preferred-register: '' }
  - { id: 109, class: gpr32common, preferred-register: '' }
  - { id: 110, class: gpr32common, preferred-register: '' }
  - { id: 111, class: gpr64common, preferred-register: '' }
  - { id: 112, class: gpr32all, preferred-register: '' }
  - { id: 113, class: gpr32all, preferred-register: '' }
  - { id: 114, class: gpr32common, preferred-register: '' }
liveins:
  - { reg: '$w0', virtual-reg: '%23' }
  - { reg: '$x1', virtual-reg: '%24' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x50000000), %bb.9(0x30000000)
    liveins: $w0, $x1
  
    %24:gpr64common = COPY $x1
    %23:gpr32common = COPY $w0
    %27:gpr32 = SUBSWri %23, 1, 0, implicit-def $nzcv, debug-location !13
    Bcc 10, %bb.1, implicit $nzcv, debug-location !13
  
  bb.9:
    successors: %bb.7(0x80000000)
  
    %26:gpr32all = COPY $wzr
    %25:gpr32all = COPY %26
    B %bb.7
  
  bb.1.for.body.lr.ph:
    successors: %bb.10(0x40000000), %bb.2(0x40000000)
  
    %30:gpr64common = LDRXui %24, 0 :: (load (s64) from %ir.val, !tbaa !14)
    %31:gpr32 = LDRBBui killed %30, 0 :: (load (s8) from %ir.0, !tbaa !18)
    %33:gpr32 = MOVi32imm -858993459, debug-location !13
    %34:gpr64 = UMADDLrrr %27, %33, $xzr, debug-location !13
    %35:gpr64 = UBFMXri %34, 35, 63, debug-location !13
    %36:gpr32 = COPY %35.sub_32, debug-location !13
    %37:gpr32 = MOVi32imm 10
    %39:gpr32common = MSUBWrrr killed %36, %37, %27, debug-location !13
    dead $wzr = SUBSWri %39, 9, 0, implicit-def $nzcv, debug-location !13
    %41:gpr32 = MOVi32imm -9
    %42:gpr32 = CSINCWr killed %41, $wzr, 2, implicit $nzcv, debug-location !13
    %43:gpr32 = ADDWrr %39, %42, debug-location !13
    dead $wzr = SUBSWri %23, 10, 0, implicit-def $nzcv, debug-location !13
    Bcc 2, %bb.2, implicit $nzcv, debug-location !13
  
  bb.10:
    successors: %bb.3(0x80000000)
  
    %44:gpr32all = COPY $wzr
    %29:gpr32all = COPY %44
    %28:gpr32all = IMPLICIT_DEF
    B %bb.3
  
  bb.2.for.body.lr.ph.new:
    successors: %bb.8(0x80000000)
  
    %50:gpr32 = COPY %35.sub_32, debug-location !13
    %114:gpr32common = nuw SUBWrr $wzr, %42, debug-location !13
    %53:gpr32common = nuw MADDWrrr killed %50, %37, %114, debug-location !13
    %54:gpr32common = SUBWri killed %53, 9, 0, debug-location !13
    %56:gpr64 = SUBREG_TO_REG 0, %54, %subreg.sub_32, debug-location !13
    %57:gpr64 = MOVi64imm 1844674407370955162
    %58:gpr64common = UMULHrr killed %56, killed %57, debug-location !13
    %59:gpr64sp = nuw nsw ADDXri killed %58, 1, 0, debug-location !13
    %60:gpr32all = COPY $wzr
    %46:gpr32all = COPY %60
    %4:gpr64all = COPY %59, debug-location !13
    B %bb.8, debug-location !13
  
  bb.3.for.cond.cleanup.loopexit.unr-lcssa:
    successors: %bb.7(0x30000000), %bb.4(0x50000000)
  
    %5:gpr32all = PHI %28, %bb.10, %20, %bb.8
    %6:gpr32all = PHI %29, %bb.10, %21, %bb.8
    %7:gpr32all = PHI %29, %bb.10, %20, %bb.8
    CBZW %43, %bb.7, debug-location !13
    B %bb.4, debug-location !13
  
  bb.4.for.body.epil.preheader:
    successors: %bb.5(0x80000000)
  
    %92:gpr32 = ADDWrr %42, %23, debug-location !13
    %93:gpr32 = MOVi32imm -858993459, debug-location !13
    %94:gpr64 = UMADDLrrr %27, killed %93, $xzr, debug-location !13
    %95:gpr64 = UBFMXri killed %94, 35, 63, debug-location !13
    %96:gpr32 = COPY %95.sub_32, debug-location !13
    %97:gpr32 = MOVi32imm 10
    %99:gpr32common = nuw MSUBWrrr killed %96, killed %97, killed %92, debug-location !13
    %100:gpr32common = SUBWri killed %99, 2, 0, debug-location !13
    %102:gpr64sp = SUBREG_TO_REG 0, %100, %subreg.sub_32, debug-location !13
    %103:gpr64sp = nuw nsw ADDXri killed %102, 1, 0, debug-location !13
    %8:gpr64all = COPY %103, debug-location !13
  
  bb.5.for.body.epil:
    successors: %bb.5(0x7c000000), %bb.6(0x04000000)
  
    %9:gpr32common = PHI %6, %bb.4, %13, %bb.5
    %10:gpr32 = PHI %7, %bb.4, %12, %bb.5
    %11:gpr64sp = PHI %8, %bb.4, %14, %bb.5, debug-location !19
    %104:gpr32 = MADDWrrr %10, %31, $wzr, debug-location !19
    %105:gpr32 = ADDWrr %9, killed %104, debug-location !20
    %12:gpr32all = COPY %105, debug-location !20
    %106:gpr32common = ADDWri %9, 1, 0, debug-location !20
    %13:gpr32 = COPY %106, debug-location !20
    %107:gpr64 = SUBSXri %11, 1, 0, implicit-def $nzcv, debug-location !13
    %14:gpr64all = COPY %107, debug-location !13
    Bcc 1, %bb.5, implicit $nzcv, debug-location !13
    B %bb.6, debug-location !13
  
  bb.6.for.cond.cleanup.loopexit:
    successors: %bb.7(0x80000000)
  
    %108:gpr32 = MADDWrrr %31, %10, $wzr, debug-location !23
    %109:gpr32common = ADDWrr killed %108, %106, debug-location !23
    %110:gpr32common = SUBWri killed %109, 1, 0, debug-location !23
    %15:gpr32all = COPY %110, debug-location !23
  
  bb.7.for.cond.cleanup:
    %16:gpr32all = PHI %25, %bb.9, %5, %bb.3, %15, %bb.6, debug-location !24
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !23
    %111:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !23
    $x0 = COPY %111, debug-location !23
    $w1 = COPY %16, debug-location !23
    BL @_Z6printfPKcz, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !23
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !23
    %113:gpr32all = COPY $wzr
    $w0 = COPY %113, debug-location !25
    RET_ReallyLR implicit $w0, debug-location !25
  
  bb.8.for.body:
    successors: %bb.8(0x7c000000), %bb.3(0x04000000)
  
    %17:gpr32common = PHI %46, %bb.2, %21, %bb.8
    %18:gpr32 = PHI %46, %bb.2, %20, %bb.8
    %19:gpr64sp = PHI %4, %bb.2, %22, %bb.8, debug-location !19
    %61:gpr32 = nsw MADDWrrr %18, %31, $wzr, debug-location !19
    %62:gpr32 = nsw ADDWrr killed %61, %17, debug-location !26
    %63:gpr32common = ORRWri %17, 0, debug-location !20
    %65:gpr32 = nsw MADDWrrr killed %62, %31, killed %63, debug-location !26
    %67:gpr32common = nsw MADDWrrr killed %65, %31, %17, debug-location !20
    %68:gpr32common = ADDWri killed %67, 2, 0, debug-location !26
    %70:gpr32common = nsw MADDWrrr killed %68, %31, %17, debug-location !20
    %71:gpr32common = ADDWri killed %70, 3, 0, debug-location !26
    %73:gpr32common = nsw MADDWrrr killed %71, %31, %17, debug-location !20
    %74:gpr32common = ADDWri killed %73, 4, 0, debug-location !26
    %76:gpr32common = nsw MADDWrrr killed %74, %31, %17, debug-location !20
    %77:gpr32common = ADDWri killed %76, 5, 0, debug-location !26
    %79:gpr32common = nsw MADDWrrr killed %77, %31, %17, debug-location !20
    %80:gpr32common = ADDWri killed %79, 6, 0, debug-location !26
    %82:gpr32common = nsw MADDWrrr killed %80, %31, %17, debug-location !20
    %83:gpr32common = ADDWri killed %82, 7, 0, debug-location !26
    %85:gpr32common = nsw MADDWrrr killed %83, %31, %17, debug-location !20
    %86:gpr32common = ADDWri killed %85, 8, 0, debug-location !26
    %88:gpr32common = nsw MADDWrrr killed %86, %31, %17, debug-location !20
    %89:gpr32sp = ADDWri killed %88, 9, 0, debug-location !26
    %20:gpr32all = COPY %89, debug-location !26
    %90:gpr32sp = nuw ADDWri %17, 10, 0, debug-location !20
    %21:gpr32all = COPY %90, debug-location !20
    %91:gpr64 = SUBSXri %19, 1, 0, implicit-def $nzcv, debug-location !13
    %22:gpr64all = COPY %91, debug-location !13
    Bcc 1, %bb.8, implicit $nzcv, debug-location !13
    B %bb.3, debug-location !13

...
