#RUN: llc %s -mcpu=a64fx -fswp -O1  -start-before=aarch64-swpipeliner  -swpl-max-freg=10 -swpl-debug -o /dev/null 2>&1 | FileCheck %s

#CHECK:        : (Iterative Modulo Scheduling. ResMII 6. NumOfBodyInsts 17. Budget 850. Minimum II = 6.)
#CHECK:        :  (x) Run out of budget      at estimation.          : (II: 6 in [ 6,1000]) MVE: 0 Last inst: 3. (Itr Org: 0, Req: 0) (VReg Fp: 0/0, Int: 0/0, Pre: 0/0) Eval:0.000000e+00.
#CHECK:        :  (x) Run out of budget      at estimation.          : (II: 7 in [ 6,1000]) MVE: 0 Last inst: 8. (Itr Org: 0, Req: 0) (VReg Fp: 0/0, Int: 0/0, Pre: 0/0) Eval:0.000000e+00.
#CHECK:        :  (x) Register (F) short     at estimation.          : (II: 11 in [ 6,1000]) MVE: 4 Last inst: 0. (Itr Org: 0, Req: 8) (VReg Fp: 17/10, Int: 19/32, Pre: 1/8) Eval:0.000000e+00.
#CHECK:        :  (x) Register (F) short     at estimation.          : (II: 18 in [ 6,1000]) MVE: 3 Last inst: 0. (Itr Org: 0, Req: 5) (VReg Fp: 16/10, Int: 17/32, Pre: 1/8) Eval:0.000000e+00.
#CHECK:        :  (x) Register (F) short     at estimation.          : (II: 24 in [ 6,1000]) MVE: 2 Last inst: 0. (Itr Org: 0, Req: 3) (VReg Fp: 11/10, Int: 13/32, Pre: 1/8) Eval:0.000000e+00.
#CHECK:        :  (@) Scheduling tight       at estimation.          : (II: 28 in [ 6,1000]) MVE: 2 Last inst: 0. (Itr Org: 0, Req: 3) (VReg Fp: 10/10, Int: 13/32, Pre: 1/8) Eval:0.000000e+00.
#CHECK:        : Change ii range for moderate schedule search:[ 6, 1000 ] -> [ 29, 56 ]
#CHECK:        :  (@) Scheduling tight       at recollect moderate.  : (II: 29 in [ 29,56]) MVE: 2 Last inst: 0. (Itr Org: 0, Req: 3) (VReg Fp: 10/10, Int: 13/32, Pre: 1/8) Eval:0.000000e+00.
#CHECK:        :  (@) Scheduling tight       at recollect moderate.  : (II: 34 in [ 29,56]) MVE: 2 Last inst: 0. (Itr Org: 0, Req: 3) (VReg Fp: 10/10, Int: 13/32, Pre: 1/8) Eval:0.000000e+00.
#CHECK:        :  (@) Scheduling tight       at recollect moderate.  : (II: 39 in [ 29,56]) MVE: 2 Last inst: 0. (Itr Org: 0, Req: 2) (VReg Fp: 10/10, Int: 13/32, Pre: 1/8) Eval:0.000000e+00.
#CHECK:        :  (@) Scheduling tight       at recollect moderate.  : (II: 44 in [ 29,56]) MVE: 2 Last inst: 0. (Itr Org: 0, Req: 2) (VReg Fp: 10/10, Int: 13/32, Pre: 1/8) Eval:0.000000e+00.
#CHECK:        :  (@) Scheduling tight       at recollect moderate.  : (II: 49 in [ 29,56]) MVE: 2 Last inst: 0. (Itr Org: 0, Req: 2) (VReg Fp: 10/10, Int: 13/32, Pre: 1/8) Eval:0.000000e+00.
#CHECK:        :  (@) Scheduling tight       at recollect moderate.  : (II: 54 in [ 29,56]) MVE: 2 Last inst: 0. (Itr Org: 0, Req: 2) (VReg Fp: 10/10, Int: 13/32, Pre: 1/8) Eval:0.000000e+00.
#CHECK:        : Required iteration count in MIR input is        :   3 (= kernel:2 + pro/epilogue:1 + mod:0) 
#CHECK:        : Original loop iteration is not found.
#CHECK:        :
#CHECK:        : Loop is software pipelined. (ii=28, kernel=56 cycles, prologue,epilogue =28 cycles)
#CHECK:        :      IPC (initial=2.83, real=0.61, rate=21.43%)
#CHECK:        :      = Instructions(17)/II(28)
#CHECK:        :      Virtual inst:(0)
--- |
  ; ModuleID = '/TEST/tp/testprg.c'
  source_filename = "/TEST/tp/testprg.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  ; Function Attrs: nofree norecurse nounwind
  define dso_local double @fuga(double* noalias nocapture %0, double* noalias nocapture readonly %1, double* noalias nocapture readonly %2, i32 %3) local_unnamed_addr #0 !dbg !7 {
    %5 = icmp sgt i32 %3, 0, !dbg !10
    br i1 %5, label %6, label %19, !dbg !11
  
  6:                                                ; preds = %4
    %7 = zext i32 %3 to i64, !dbg !10
    %8 = shl nuw nsw i64 %7, 1, !dbg !11
    %9 = getelementptr double, double* %1, i64 %8, !dbg !11
    %10 = getelementptr double, double* %2, i64 %8, !dbg !11
    %11 = getelementptr double, double* %0, i64 %8, !dbg !11
    %12 = getelementptr double, double* %1, i64 %7, !dbg !11
    %13 = getelementptr double, double* %2, i64 %7, !dbg !11
    %14 = getelementptr double, double* %0, i64 %7, !dbg !11
    %15 = shl nuw nsw i64 %7, 3, !dbg !11
    %16 = add nsw i64 %15, -8, !dbg !11
    %17 = lshr i64 %16, 3, !dbg !11
    %18 = add nuw nsw i64 %17, 1, !dbg !11
    call void @llvm.set.loop.iterations.i64(i64 %18), !dbg !11
    br label %22, !dbg !11
  
  19:                                               ; preds = %22, %4
    %20 = getelementptr inbounds double, double* %0, i64 99, !dbg !12
    %21 = load double, double* %20, align 8, !dbg !12, !tbaa !13
    ret double %21, !dbg !17
  
  22:                                               ; preds = %22, %6
    %23 = phi i64 [ %67, %22 ], [ 0, %6 ]
    %24 = phi i64 [ %18, %6 ], [ %68, %22 ]
    %25 = bitcast double* %14 to i8*
    %26 = bitcast double* %13 to i8*
    %27 = bitcast double* %12 to i8*
    %28 = bitcast double* %11 to i8*
    %29 = bitcast double* %10 to i8*
    %30 = bitcast double* %9 to i8*
    %31 = bitcast double* %1 to i8*
    %32 = bitcast double* %2 to i8*
    %33 = bitcast double* %0 to i8*
    %34 = getelementptr i8, i8* %31, i64 %23, !dbg !18
    %35 = bitcast i8* %34 to double*
    %36 = load double, double* %35, align 8, !dbg !18, !tbaa !13
    %37 = getelementptr i8, i8* %32, i64 %23, !dbg !19
    %38 = bitcast i8* %37 to double*
    %39 = load double, double* %38, align 8, !dbg !19, !tbaa !13
    %40 = fmul fast double %39, 3.000000e+00, !dbg !20
    %41 = fadd fast double %40, 4.400000e+00, !dbg !21
    %42 = fadd fast double %41, %36, !dbg !22
    %43 = getelementptr i8, i8* %33, i64 %23, !dbg !23
    %44 = bitcast i8* %43 to double*
    store double %42, double* %44, align 8, !dbg !23, !tbaa !13
    %45 = getelementptr i8, i8* %27, i64 %23, !dbg !24
    %46 = bitcast i8* %45 to double*
    %47 = load double, double* %46, align 8, !dbg !24, !tbaa !13
    %48 = fadd fast double %41, %47, !dbg !25
    %49 = getelementptr i8, i8* %26, i64 %23, !dbg !26
    %50 = bitcast i8* %49 to double*
    %51 = load double, double* %50, align 8, !dbg !26, !tbaa !13
    %52 = fmul fast double %48, 4.000000e+00, !dbg !27
    %53 = fadd fast double %52, %51, !dbg !27
    %54 = getelementptr i8, i8* %25, i64 %23, !dbg !28
    %55 = bitcast i8* %54 to double*
    store double %53, double* %55, align 8, !dbg !28, !tbaa !13
    %56 = getelementptr i8, i8* %30, i64 %23, !dbg !29
    %57 = bitcast i8* %56 to double*
    %58 = load double, double* %57, align 8, !dbg !29, !tbaa !13
    %59 = fadd fast double %58, 4.400000e+00, !dbg !30
    %60 = getelementptr i8, i8* %29, i64 %23, !dbg !31
    %61 = bitcast i8* %60 to double*
    %62 = load double, double* %61, align 8, !dbg !31, !tbaa !13
    %63 = fmul fast double %62, 3.000000e+00, !dbg !32
    %64 = fadd fast double %59, %63, !dbg !33
    %65 = getelementptr i8, i8* %28, i64 %23, !dbg !34
    %66 = bitcast i8* %65 to double*
    store double %64, double* %66, align 8, !dbg !34, !tbaa !13
    %67 = add nuw nsw i64 %23, 8, !dbg !10
    %68 = call i64 @llvm.loop.decrement.reg.i64(i64 %24, i64 1), !dbg !11
    %69 = icmp ne i64 %68, 0, !dbg !11
    br i1 %69, label %22, label %19, !dbg !11, !llvm.loop !35
  }
  
  ; Function Attrs: noduplicate nounwind
  declare void @llvm.set.loop.iterations.i64(i64) #1
  
  ; Function Attrs: noduplicate nounwind
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #1
  
  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**) #2
  
  attributes #0 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="non-leaf" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" "use-soft-float"="false" }
  attributes #1 = { noduplicate nounwind }
  attributes #2 = { nounwind }
  
  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!3, !4, !5}
  !llvm.ident = !{!6}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 11.0.0", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly, enums: !2, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "/TEST/tp/testprg.c", directory: "/TEST")
  !2 = !{}
  !3 = !{i32 7, !"Dwarf Version", i32 4}
  !4 = !{i32 2, !"Debug Info Version", i32 3}
  !5 = !{i32 1, !"wchar_size", i32 4}
  !6 = !{!"clang version 11.0.0 "}
  !7 = distinct !DISubprogram(name: "fuga", scope: !8, file: !8, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2)
  !8 = !DIFile(filename: "tp/testprg.c", directory: "/TEST")
  !9 = !DISubroutineType(types: !2)
  !10 = !DILocation(line: 2, column: 21, scope: !7)
  !11 = !DILocation(line: 2, column: 3, scope: !7)
  !12 = !DILocation(line: 18, column: 10, scope: !7)
  !13 = !{!14, !14, i64 0}
  !14 = !{!"double", !15, i64 0}
  !15 = !{!"omnipotent char", !16, i64 0}
  !16 = !{!"Simple C/C++ TBAA"}
  !17 = !DILocation(line: 18, column: 3, scope: !7)
  !18 = !DILocation(line: 5, column: 10, scope: !7)
  !19 = !DILocation(line: 6, column: 10, scope: !7)
  !20 = !DILocation(line: 6, column: 15, scope: !7)
  !21 = !DILocation(line: 5, column: 15, scope: !7)
  !22 = !DILocation(line: 7, column: 15, scope: !7)
  !23 = !DILocation(line: 7, column: 10, scope: !7)
  !24 = !DILocation(line: 9, column: 10, scope: !7)
  !25 = !DILocation(line: 9, column: 22, scope: !7)
  !26 = !DILocation(line: 10, column: 10, scope: !7)
  !27 = !DILocation(line: 11, column: 17, scope: !7)
  !28 = !DILocation(line: 11, column: 12, scope: !7)
  !29 = !DILocation(line: 13, column: 10, scope: !7)
  !30 = !DILocation(line: 13, column: 19, scope: !7)
  !31 = !DILocation(line: 14, column: 10, scope: !7)
  !32 = !DILocation(line: 14, column: 19, scope: !7)
  !33 = !DILocation(line: 15, column: 19, scope: !7)
  !34 = !DILocation(line: 15, column: 14, scope: !7)
  !35 = distinct !{!35, !11, !36, !37}
  !36 = !DILocation(line: 16, column: 3, scope: !7)
  !37 = !{!"llvm.loop.unroll.disable"}

...
---
name:            fuga
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: gpr64sp, preferred-register: '' }
  - { id: 1, class: gpr64sp, preferred-register: '' }
  - { id: 2, class: gpr64sp, preferred-register: '' }
  - { id: 3, class: gpr64sp, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: gpr64sp, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr64common, preferred-register: '' }
  - { id: 8, class: gpr64sp, preferred-register: '' }
  - { id: 9, class: gpr64all, preferred-register: '' }
  - { id: 10, class: gpr64all, preferred-register: '' }
  - { id: 11, class: gpr64common, preferred-register: '' }
  - { id: 12, class: gpr64common, preferred-register: '' }
  - { id: 13, class: gpr64common, preferred-register: '' }
  - { id: 14, class: gpr32common, preferred-register: '' }
  - { id: 15, class: gpr32, preferred-register: '' }
  - { id: 16, class: gpr64all, preferred-register: '' }
  - { id: 17, class: gpr32, preferred-register: '' }
  - { id: 18, class: gpr64, preferred-register: '' }
  - { id: 19, class: gpr64, preferred-register: '' }
  - { id: 20, class: gpr64, preferred-register: '' }
  - { id: 21, class: gpr64, preferred-register: '' }
  - { id: 22, class: gpr64, preferred-register: '' }
  - { id: 23, class: gpr64common, preferred-register: '' }
  - { id: 24, class: gpr64, preferred-register: '' }
  - { id: 25, class: gpr64, preferred-register: '' }
  - { id: 26, class: gpr64, preferred-register: '' }
  - { id: 27, class: gpr64common, preferred-register: '' }
  - { id: 28, class: gpr64common, preferred-register: '' }
  - { id: 29, class: gpr64sp, preferred-register: '' }
  - { id: 30, class: gpr64all, preferred-register: '' }
  - { id: 31, class: fpr64, preferred-register: '' }
  - { id: 32, class: fpr64, preferred-register: '' }
  - { id: 33, class: fpr64, preferred-register: '' }
  - { id: 34, class: fpr64, preferred-register: '' }
  - { id: 35, class: gpr64common, preferred-register: '' }
  - { id: 36, class: fpr64, preferred-register: '' }
  - { id: 37, class: fpr64, preferred-register: '' }
  - { id: 38, class: fpr64, preferred-register: '' }
  - { id: 39, class: fpr64, preferred-register: '' }
  - { id: 40, class: fpr64, preferred-register: '' }
  - { id: 41, class: fpr64, preferred-register: '' }
  - { id: 42, class: fpr64, preferred-register: '' }
  - { id: 43, class: fpr64, preferred-register: '' }
  - { id: 44, class: fpr64, preferred-register: '' }
  - { id: 45, class: fpr64, preferred-register: '' }
  - { id: 46, class: fpr64, preferred-register: '' }
  - { id: 47, class: fpr64, preferred-register: '' }
  - { id: 48, class: fpr64, preferred-register: '' }
  - { id: 49, class: fpr64, preferred-register: '' }
  - { id: 50, class: gpr64sp, preferred-register: '' }
  - { id: 51, class: gpr64, preferred-register: '' }
  - { id: 52, class: fpr64, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%11' }
  - { reg: '$x1', virtual-reg: '%12' }
  - { reg: '$x2', virtual-reg: '%13' }
  - { reg: '$w3', virtual-reg: '%14' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
constants:
  - id:              0
    value:           'double 4.400000e+00'
    alignment:       8
    isTargetSpecific: false
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.4):
    successors: %bb.1(0x50000000), %bb.2(0x30000000)
    liveins: $x0, $x1, $x2, $w3
  
    %14:gpr32common = COPY $w3
    %13:gpr64common = COPY $x2
    %12:gpr64common = COPY $x1
    %11:gpr64common = COPY $x0
    dead $wzr = SUBSWri %14, 1, 0, implicit-def $nzcv, debug-location !11
    Bcc 11, %bb.2, implicit $nzcv, debug-location !11
    B %bb.1, debug-location !11
  
  bb.1 (%ir-block.6):
    successors: %bb.3(0x80000000)
  
    %17:gpr32 = ORRWrs $wzr, %14, 0, debug-location !10
    %18:gpr64 = SUBREG_TO_REG 0, killed %17, %subreg.sub_32, debug-location !10
    %19:gpr64 = UBFMXri %18, 60, 59, debug-location !11
    %20:gpr64 = ADDXrr %12, %19, debug-location !11
    %0:gpr64sp = COPY %20, debug-location !11
    %21:gpr64 = ADDXrr %13, %19, debug-location !11
    %1:gpr64sp = COPY %21, debug-location !11
    %22:gpr64 = ADDXrr %11, %19, debug-location !11
    %2:gpr64sp = COPY %22, debug-location !11
    %23:gpr64common = UBFMXri %18, 61, 60, debug-location !11
    %24:gpr64 = ADDXrr %12, %23, debug-location !11
    %3:gpr64sp = COPY %24, debug-location !11
    %25:gpr64 = ADDXrr %13, %23, debug-location !11
    %4:gpr64sp = COPY %25, debug-location !11
    %26:gpr64 = ADDXrr %11, %23, debug-location !11
    %5:gpr64sp = COPY %26, debug-location !11
    %27:gpr64common = nsw SUBXri %23, 8, 0, debug-location !11
    %28:gpr64common = UBFMXri killed %27, 3, 63, debug-location !11
    %29:gpr64sp = nuw nsw ADDXri killed %28, 1, 0, debug-location !11
    %6:gpr64all = COPY %29, debug-location !11
    %30:gpr64all = COPY $xzr
    %16:gpr64all = COPY %30
    %33:fpr64 = FMOVDi 8
    %35:gpr64common = ADRP target-flags(aarch64-page) %const.0
    %36:fpr64 = LDRDui %35, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
    %42:fpr64 = FMOVDi 16
    B %bb.3, debug-location !11
  
  bb.2 (%ir-block.19):
    %52:fpr64 = LDRDui %11, 99, debug-location !12 :: (load 8 from %ir.20, !tbaa !13)
    $d0 = COPY %52, debug-location !17
    RET_ReallyLR implicit $d0, debug-location !17
  
  bb.3 (%ir-block.22):
    successors: %bb.3(0x7c000000), %bb.2(0x04000000)
  
    %7:gpr64common = PHI %16, %bb.1, %9, %bb.3
    %8:gpr64sp = PHI %6, %bb.1, %10, %bb.3
    %31:fpr64 = LDRDroX %12, %7, 0, 0, debug-location !18 :: (load 8 from %ir.35, !tbaa !13)
    %32:fpr64 = LDRDroX %13, %7, 0, 0, debug-location !19 :: (load 8 from %ir.38, !tbaa !13)
    %37:fpr64 = FMADDDrrr killed %32, %33, %36, implicit $fpcr, debug-location !21
    %38:fpr64 = nnan ninf nsz arcp contract afn reassoc FADDDrr %37, killed %31, implicit $fpcr, debug-location !22
    STRDroX killed %38, %11, %7, 0, 0, debug-location !23 :: (store 8 into %ir.44, !tbaa !13)
    %39:fpr64 = LDRDroX %3, %7, 0, 0, debug-location !24 :: (load 8 from %ir.46, !tbaa !13)
    %40:fpr64 = nnan ninf nsz arcp contract afn reassoc FADDDrr %37, killed %39, implicit $fpcr, debug-location !25
    %41:fpr64 = LDRDroX %4, %7, 0, 0, debug-location !26 :: (load 8 from %ir.50, !tbaa !13)
    %44:fpr64 = FMADDDrrr killed %40, %42, killed %41, implicit $fpcr, debug-location !27
    STRDroX killed %44, %5, %7, 0, 0, debug-location !28 :: (store 8 into %ir.55, !tbaa !13)
    %45:fpr64 = LDRDroX %0, %7, 0, 0, debug-location !29 :: (load 8 from %ir.57, !tbaa !13)
    %46:fpr64 = nnan ninf nsz arcp contract afn reassoc FADDDrr killed %45, %36, implicit $fpcr, debug-location !30
    %47:fpr64 = LDRDroX %1, %7, 0, 0, debug-location !31 :: (load 8 from %ir.61, !tbaa !13)
    %49:fpr64 = FMADDDrrr killed %47, %33, killed %46, implicit $fpcr, debug-location !33
    STRDroX killed %49, %2, %7, 0, 0, debug-location !34 :: (store 8 into %ir.66, !tbaa !13)
    %50:gpr64sp = nuw nsw ADDXri %7, 8, 0, debug-location !10
    %9:gpr64all = COPY %50, debug-location !10
    %51:gpr64 = SUBSXri %8, 1, 0, implicit-def $nzcv, debug-location !11
    %10:gpr64all = COPY %51, debug-location !11
    Bcc 1, %bb.3, implicit $nzcv, debug-location !11
    B %bb.2, debug-location !11

...
