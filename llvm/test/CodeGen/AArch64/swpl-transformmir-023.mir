# RUN: llc %s -mcpu=a64fx -fswp -start-before=aarch64-swpipeliner -swpl-debug-dump-mir=8 -o /dev/null 2>&1 | FileCheck %s

# CHECK:** SwplTransformedMIRInfo begin **
# CHECK-NEXT:originalDoVReg:%2
# CHECK-NEXT:originalDoInitVar:%8
# CHECK-NEXT:doVReg:%38
# CHECK-NEXT:iterationInterval:13
# CHECK-NEXT:minimumIterationInterval:3
# CHECK-NEXT:coefficient: 1
# CHECK-NEXT:minConstant: 0
# CHECK-NEXT:expansion: 5
# CHECK-NEXT:nVersions: 3
# CHECK-NEXT:nCopies: 5
# CHECK-NEXT:requiredKernelIteration: 5
# CHECK-NEXT:prologEndIndx: 208
# CHECK-NEXT:kernelEndIndx: 520
# CHECK-NEXT:epilogEndIndx: 728
# CHECK-NEXT:isIterationCountConstant: 1
# CHECK-NEXT:doVRegInitialValue: 5
# CHECK-NEXT:originalKernelIteration: 5
# CHECK-NEXT:transformedKernelIteration: 1
# CHECK-NEXT:transformedModIteration: 0
# CHECK-NEXT:updateDoVRegMI:%16:gpr64 = SUBSXri %2:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:branchDoVRegMI:Bcc 1, %bb.10, implicit $nzcv
# CHECK-NEXT:branchDoVRegMIKernel:Bcc 10, %bb.2, implicit $nzcv
# CHECK-NEXT:OrgPreHeader: %bb.0
# CHECK-NEXT:Check1: %bb.5
# CHECK-NEXT:Prolog: %bb.6
# CHECK-NEXT:OrgBody: %bb.2
# CHECK-NEXT:Epilog: %bb.7
# CHECK-NEXT:NewPreHeader: %bb.9
# CHECK-NEXT:Check2: %bb.8
# CHECK-NEXT:NewBody: %bb.10
# CHECK-NEXT:NewExit: %bb.11
# CHECK-NEXT:OrgExit: %bb.1
# CHECK-NEXT:mis:
# CHECK-NEXT:** SwplTransformedMIRInfo end   **
# CHECK-NEXT:target loop:Loop at depth 1 containing: %bb.2<header><exiting>
# CHECK-NEXT:LAST:
# CHECK-NEXT:bb.0 (%ir-block.0):
# CHECK-NEXT:  successors: %bb.6(0x80000000); %bb.6(100.00%)

# CHECK:  %7:fpr32 = FMOVS0
# CHECK-NEXT:  %9:gpr64all = COPY $xzr
# CHECK-NEXT:  %6:gpr64all = COPY %9:gpr64all
# CHECK-NEXT:  %10:gpr32 = MOVi32imm 5
# CHECK-NEXT:  %8:gpr64all = SUBREG_TO_REG 0, killed %10:gpr32, %subreg.sub_32
# CHECK-NEXT:  %11:gpr64common = MOVaddr target-flags(aarch64-page) @B, target-flags(aarch64-pageoff, aarch64-nc) @B
# CHECK-NEXT:  %14:gpr64common = MOVaddr target-flags(aarch64-page) @A, target-flags(aarch64-pageoff, aarch64-nc) @A
# CHECK-NEXT:  B %bb.6
# CHECK-NEXT:bb.1 (%ir-block.1):
# CHECK-NEXT:; predecessors: %bb.11

# CHECK:  $s0 = COPY %43:fpr32
# CHECK-NEXT:  RET_ReallyLR implicit $s0
# CHECK-NEXT:bb.6 (%ir-block.2):
# CHECK-NEXT:; predecessors: %bb.0
# CHECK-NEXT:  successors: %bb.2(0x80000000); %bb.2(100.00%)

# CHECK:  %17:gpr64common = COPY %6:gpr64all
# CHECK-NEXT:  %18:fpr32 = COPY %7:fpr32
# CHECK-NEXT:  %19:gpr64sp = COPY %8:gpr64all
# CHECK-NEXT:  %28:gpr64common = COPY %17:gpr64common
# CHECK-NEXT:  %34:fpr32 = COPY %18:fpr32
# CHECK-NEXT:  %38:gpr64sp = COPY %19:gpr64sp
# CHECK-NEXT:  %27:fpr32 = LDRSroX %11:gpr64common, %28:gpr64common, 0, 0 :: (volatile load (s32) from %ir.uglygep23, !tbaa !2)
# CHECK-NEXT:  %31:fpr32 = nnan ninf nsz arcp contract afn reassoc FADDSrr %27:fpr32, %27:fpr32, implicit $fpcr
# CHECK-NEXT:  %29:gpr64common = nuw nsw ADDXri %28:gpr64common, 4, 0
# CHECK-NEXT:  %20:fpr32 = LDRSroX %11:gpr64common, %29:gpr64common, 0, 0 :: (volatile load (s32) from %ir.uglygep23, !tbaa !2)
# CHECK-NEXT:  $s1 = COPY %31:fpr32
# CHECK-NEXT:  $s2 = COPY %34:fpr32
# CHECK-NEXT:  $s3 = COPY %20:fpr32
# CHECK-NEXT:  $x0 = COPY %14:gpr64common
# CHECK-NEXT:  $x1 = COPY %28:gpr64common
# CHECK-NEXT:  $x3 = COPY %29:gpr64common
# CHECK-NEXT:  $x4 = COPY %11:gpr64common
# CHECK-NEXT:  $x6 = COPY %38:gpr64sp
# CHECK-NEXT:  SWPLIVEOUT implicit $s1, implicit $s2, implicit $s3, implicit $x0, implicit $x1, implicit $x3, implicit $x4, implicit $x6
# CHECK-NEXT:bb.2 (%ir-block.2):
# CHECK-NEXT:; predecessors: %bb.6
# CHECK-NEXT:  successors: %bb.7(0x04000000); %bb.7(3.12%)

# CHECK:  SWPLIVEIN implicit-def $s1, implicit-def $s2, implicit-def $s3, implicit-def $x0, implicit-def $x1, implicit-def $x3, implicit-def $x4, implicit-def $x6
# CHECK-NEXT:  renamable $s0 = nnan ninf nsz arcp contract afn reassoc FADDSrr renamable $s1, renamable $s2, implicit $fpcr
# CHECK-NEXT:  renamable $s2 = nnan ninf nsz arcp contract afn reassoc FADDSrr renamable $s3, renamable $s3, implicit $fpcr
# CHECK-NEXT:  STRSroX renamable $s1, renamable $x0, renamable $x1, 0, 0 :: (volatile store (s32) into %ir.uglygep1, !tbaa !2)
# CHECK-NEXT:  renamable $x2 = nuw nsw ADDXri renamable $x3, 4, 0
# CHECK-NEXT:  renamable $s1 = LDRSroX renamable $x4, renamable $x2, 0, 0 :: (volatile load (s32) from %ir.uglygep23, !tbaa !2)
# CHECK-NEXT:  renamable $x5 = SUBSXri renamable $x6, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  renamable $s3 = COPY renamable $s0
# CHECK-NEXT:  renamable $s0 = nnan ninf nsz arcp contract afn reassoc FADDSrr renamable $s2, renamable $s3, implicit $fpcr
# CHECK-NEXT:  renamable $s3 = nnan ninf nsz arcp contract afn reassoc FADDSrr renamable $s1, renamable $s1, implicit $fpcr
# CHECK-NEXT:  STRSroX renamable $s2, renamable $x0, renamable $x3, 0, 0 :: (volatile store (s32) into %ir.uglygep1, !tbaa !2)
# CHECK-NEXT:  renamable $x1 = nuw nsw ADDXri renamable $x2, 4, 0
# CHECK-NEXT:  renamable $s2 = LDRSroX renamable $x4, renamable $x1, 0, 0 :: (volatile load (s32) from %ir.uglygep23, !tbaa !2)
# CHECK-NEXT:  renamable $x7 = SUBSXri renamable $x5, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  renamable $s1 = COPY renamable $s0
# CHECK-NEXT:  renamable $s0 = nnan ninf nsz arcp contract afn reassoc FADDSrr renamable $s3, renamable $s1, implicit $fpcr
# CHECK-NEXT:  renamable $s1 = nnan ninf nsz arcp contract afn reassoc FADDSrr renamable $s2, renamable $s2, implicit $fpcr
# CHECK-NEXT:  STRSroX renamable $s3, renamable $x0, renamable $x2, 0, 0 :: (volatile store (s32) into %ir.uglygep1, !tbaa !2)
# CHECK-NEXT:  renamable $x3 = nuw nsw ADDXri renamable $x1, 4, 0
# CHECK-NEXT:  renamable $s3 = LDRSroX renamable $x4, renamable $x3, 0, 0 :: (volatile load (s32) from %ir.uglygep23, !tbaa !2)
# CHECK-NEXT:  renamable $x6 = SUBSXri renamable $x7, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  renamable $s2 = COPY renamable $s0
# CHECK-NEXT:  SWPLIVEOUT implicit $s1, implicit $s2, implicit $s3, implicit $x1, implicit $x2, implicit $x3, implicit $x6, implicit $s0, implicit $x7
# CHECK-NEXT:  $xzr = SUBSXri $x6, 5, 0, implicit-def $nzcv
# CHECK-NEXT:bb.7 (%ir-block.2):
# CHECK-NEXT:; predecessors: %bb.2
# CHECK-NEXT:  successors: %bb.9(0x80000000); %bb.9(100.00%)

# CHECK:  SWPLIVEIN implicit-def $s1, implicit-def $s2, implicit-def $s3, implicit-def $x1, implicit-def $x2, implicit-def $x3, implicit-def $x6, implicit-def $s0, implicit-def $x7, implicit-def $s1
# CHECK-NEXT:  %44:fpr32 = COPY $s1
# CHECK-NEXT:  %45:fpr32 = COPY $s2
# CHECK-NEXT:  %46:fpr32 = COPY $s3
# CHECK-NEXT:  %47:gpr64common = COPY $x1
# CHECK-NEXT:  %48:gpr64common = COPY $x2
# CHECK-NEXT:  %49:gpr64common = COPY $x3
# CHECK-NEXT:  %50:gpr64sp = COPY $x6
# CHECK-NEXT:  %51:fpr32 = COPY $s0
# CHECK-NEXT:  %52:gpr64sp = COPY $x7
# CHECK-NEXT:  %53:fpr32 = COPY $s1
# CHECK-NEXT:  %54:fpr32 = nnan ninf nsz arcp contract afn reassoc FADDSrr %44:fpr32, %45:fpr32, implicit $fpcr
# CHECK-NEXT:  %55:fpr32 = nnan ninf nsz arcp contract afn reassoc FADDSrr %46:fpr32, %46:fpr32, implicit $fpcr
# CHECK-NEXT:  STRSroX %44:fpr32, %14:gpr64common, %47:gpr64common, 0, 0 :: (volatile store (s32) into %ir.uglygep1, !tbaa !2)
# CHECK-NEXT:  %56:gpr64common = nuw nsw ADDXri %49:gpr64common, 4, 0
# CHECK-NEXT:  %57:gpr64sp = SUBSXri %50:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  %58:fpr32 = COPY %54:fpr32
# CHECK-NEXT:  %59:fpr32 = nnan ninf nsz arcp contract afn reassoc FADDSrr %55:fpr32, %58:fpr32, implicit $fpcr
# CHECK-NEXT:  STRSroX %55:fpr32, %14:gpr64common, %49:gpr64common, 0, 0 :: (volatile store (s32) into %ir.uglygep1, !tbaa !2)
# CHECK-NEXT:  %60:gpr64sp = SUBSXri %57:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  %61:fpr32 = COPY %59:fpr32
# CHECK-NEXT:bb.9 (%ir-block.2):
# CHECK-NEXT:; predecessors: %bb.7
# CHECK-NEXT:  successors: %bb.11(0x80000000); %bb.11(100.00%)

# CHECK:  %40:gpr64common = PHI %56:gpr64common, %bb.7
# CHECK-NEXT:  %41:fpr32 = PHI %61:fpr32, %bb.7
# CHECK-NEXT:  %42:gpr64sp = PHI %60:gpr64sp, %bb.7
# CHECK-NEXT:bb.11 (%ir-block.2):
# CHECK-NEXT:; predecessors: %bb.9
# CHECK-NEXT:  successors: %bb.1(0x80000000); %bb.1(100.00%)

# CHECK:  %43:fpr32 = PHI %59:fpr32, %bb.9
# CHECK-NEXT:  B %bb.1


--- |
  ; ModuleID = 'test3044-15.ll'
  source_filename = "test3044-15.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  @B = external dso_local local_unnamed_addr global [100 x float], align 4
  @A = external dso_local local_unnamed_addr global [100 x float], align 4
  
  ; Function Attrs: nofree norecurse nounwind
  define dso_local float @test3044() local_unnamed_addr #0 {
    call void @llvm.set.loop.iterations.i64(i64 5)
    br label %2
  
  1:                                                ; preds = %2
    ret float %7
  
  2:                                                ; preds = %2, %0
    %lsr.iv = phi i64 [ %lsr.iv.next, %2 ], [ 0, %0 ]
    %3 = phi float [ 0.000000e+00, %0 ], [ %7, %2 ]
    %4 = phi i64 [ 5, %0 ], [ %8, %2 ]
    %uglygep2 = getelementptr i8, i8* bitcast ([100 x float]* @B to i8*), i64 %lsr.iv
    %uglygep23 = bitcast i8* %uglygep2 to float*
    %5 = load float, float* %uglygep23, align 4, !tbaa !2
    %6 = fmul fast float %5, 2.000000e+00
    %uglygep = getelementptr i8, i8* bitcast ([100 x float]* @A to i8*), i64 %lsr.iv
    %uglygep1 = bitcast i8* %uglygep to float*
    store float %6, float* %uglygep1, align 4, !tbaa !2
    %7 = fadd fast float %6, %3
    %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4
    %8 = call i64 @llvm.loop.decrement.reg.i64(i64 %4, i64 1)
    %9 = icmp ne i64 %8, 0
    br i1 %9, label %2, label %1, !llvm.loop !6
  }
  
  ; Function Attrs: noduplicate nounwind
  declare void @llvm.set.loop.iterations.i64(i64) #1
  
  ; Function Attrs: noduplicate nounwind
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #1
  
  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**) #2
  
  attributes #0 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="non-leaf" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" "use-soft-float"="false" }
  attributes #1 = { noduplicate nounwind }
  attributes #2 = { nounwind }
  
  !llvm.module.flags = !{!0}
  !llvm.ident = !{!1}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{!"clang version 11.0.0 "}
  !2 = !{!3, !3, i64 0}
  !3 = !{!"float", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}
  !6 = distinct !{!6, !7}
  !7 = !{!"llvm.loop.unroll.disable"}

...
---
name:            test3044
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: gpr64common, preferred-register: '' }
  - { id: 1, class: fpr32, preferred-register: '' }
  - { id: 2, class: gpr64sp, preferred-register: '' }
  - { id: 3, class: fpr32, preferred-register: '' }
  - { id: 4, class: gpr64all, preferred-register: '' }
  - { id: 5, class: gpr64all, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: fpr32, preferred-register: '' }
  - { id: 8, class: gpr64all, preferred-register: '' }
  - { id: 9, class: gpr64all, preferred-register: '' }
  - { id: 10, class: gpr32, preferred-register: '' }
  - { id: 11, class: gpr64common, preferred-register: '' }
  - { id: 12, class: fpr32, preferred-register: '' }
  - { id: 13, class: fpr32, preferred-register: '' }
  - { id: 14, class: gpr64common, preferred-register: '' }
  - { id: 15, class: gpr64sp, preferred-register: '' }
  - { id: 16, class: gpr64, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    successors: %bb.2(0x80000000)
  
    %7:fpr32 = FMOVS0
    %9:gpr64all = COPY $xzr
    %6:gpr64all = COPY %9
    %10:gpr32 = MOVi32imm 5
    %8:gpr64all = SUBREG_TO_REG 0, killed %10, %subreg.sub_32
    %11:gpr64common = MOVaddr target-flags(aarch64-page) @B, target-flags(aarch64-pageoff, aarch64-nc) @B
    %14:gpr64common = MOVaddr target-flags(aarch64-page) @A, target-flags(aarch64-pageoff, aarch64-nc) @A
    B %bb.2
  
  bb.1 (%ir-block.1):
    $s0 = COPY %3
    RET_ReallyLR implicit $s0
  
  bb.2 (%ir-block.2):
    successors: %bb.2(0x7c000000), %bb.1(0x04000000)
  
    %0:gpr64common = PHI %6, %bb.0, %4, %bb.2
    %1:fpr32 = PHI %7, %bb.0, %3, %bb.2
    %2:gpr64sp = PHI %8, %bb.0, %5, %bb.2
    %12:fpr32 = LDRSroX %11, %0, 0, 0 :: (load 4 from %ir.uglygep23, !tbaa !2)
    %13:fpr32 = nnan ninf nsz arcp contract afn reassoc FADDSrr %12, %12, implicit $fpcr
    STRSroX %13, %14, %0, 0, 0 :: (store 4 into %ir.uglygep1, !tbaa !2)
    %3:fpr32 = nnan ninf nsz arcp contract afn reassoc FADDSrr %13, %1, implicit $fpcr
    %15:gpr64sp = nuw nsw ADDXri %0, 4, 0
    %4:gpr64all = COPY %15
    %16:gpr64 = SUBSXri %2, 1, 0, implicit-def $nzcv
    %5:gpr64all = COPY %16
    Bcc 1, %bb.2, implicit $nzcv
    B %bb.1

...
