# RUN: llc %s -o /dev/null -swpl-disable-restrictions-check=0 -pass-remarks-missed=aarch64-swpipeliner -mcpu=a64fx -fswp -O1 -start-before=aarch64-swpipeliner 2>&1 | FileCheck %s
# CHECK: remark: <unknown>:0:0: SWPL is not performed because a restriction is detected. MI:%94:zpr2 = LD2D_IMM %29:ppr_3b, killed %93:gpr64sp, 0

--- |
  ; ModuleID = 'rmcopy2.c'
  source_filename = "rmcopy2.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  @b = external global [32000 x double], align 64
  @d = external global [32000 x double], align 64
  @a = external global [32000 x double], align 64
  @c = external global [32000 x double], align 64
  @e = external global [32000 x double], align 64
  @aa = external global [256 x [256 x double]], align 64
  @bb = external global [256 x [256 x double]], align 64
  @cc = external global [256 x [256 x double]], align 64
  
  ; Function Attrs: nounwind uwtable vscale_range(4,4)
  define dso_local void @t() local_unnamed_addr #0 {
  entry:
    br label %vector.ph
  
  vector.ph:                                        ; preds = %for.cond.cleanup3, %entry
    %nl.030 = phi i32 [ 0, %entry ], [ %inc18, %for.cond.cleanup3 ]
    %0 = call i64 @llvm.start.loop.iterations.i64(i64 1999)
    br label %vector.body
  
  vector.body:                                      ; preds = %vector.body, %vector.ph
    %lsr.iv = phi i64 [ %lsr.iv.next, %vector.body ], [ -127936, %vector.ph ]
    %vec.ind = phi <8 x i64> [ <i64 -1, i64 1, i64 3, i64 5, i64 7, i64 9, i64 11, i64 13>, %vector.ph ], [ %vec.ind.next, %vector.body ]
    %1 = phi i64 [ %0, %vector.ph ], [ %16, %vector.body ]
    %2 = add nsw <8 x i64> %vec.ind, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
    %3 = getelementptr inbounds [32000 x double], ptr @b, i64 0, <8 x i64> %2
    %4 = extractelement <8 x ptr> %3, i64 0
    %5 = call <vscale x 2 x i1> @llvm.aarch64.sve.ptrue.nxv2i1(i32 31)
    %ldN = call { <vscale x 2 x double>, <vscale x 2 x double> } @llvm.aarch64.sve.ld2.sret.nxv2f64(<vscale x 2 x i1> %5, ptr %4)
    %6 = extractvalue { <vscale x 2 x double>, <vscale x 2 x double> } %ldN, 0
    %7 = call <8 x double> @llvm.vector.extract.v8f64.nxv2f64(<vscale x 2 x double> %6, i64 0)
    %uglygep = getelementptr i8, ptr @d, i64 %lsr.iv
    %uglygep41 = getelementptr i8, ptr %uglygep, i64 127936
    %wide.load = load <8 x double>, ptr %uglygep41, align 64, !tbaa !6
    %8 = fsub <8 x double> %7, %wide.load
    %uglygep42 = getelementptr i8, ptr @a, i64 %lsr.iv
    %uglygep43 = getelementptr i8, ptr %uglygep42, i64 127936
    store <8 x double> %8, ptr %uglygep43, align 64, !tbaa !6
    %9 = extractelement <8 x i64> %2, i64 0
    %10 = getelementptr inbounds [32000 x double], ptr @c, i64 0, i64 %9
    %11 = call <vscale x 2 x i1> @llvm.aarch64.sve.ptrue.nxv2i1(i32 31)
    %ldN52 = call { <vscale x 2 x double>, <vscale x 2 x double> } @llvm.aarch64.sve.ld2.sret.nxv2f64(<vscale x 2 x i1> %11, ptr %10)
    %12 = extractvalue { <vscale x 2 x double>, <vscale x 2 x double> } %ldN52, 0
    %13 = call <8 x double> @llvm.vector.extract.v8f64.nxv2f64(<vscale x 2 x double> %12, i64 0)
    %14 = fadd <8 x double> %8, %13
    %15 = getelementptr double, ptr @b, <8 x i64> %2
    tail call void @llvm.masked.scatter.v8f64.v8p0(<8 x double> %14, <8 x ptr> %15, i32 8, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !6
    %vec.ind.next = add <8 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
    %lsr.iv.next = add nsw i64 %lsr.iv, 64
    %16 = call i64 @llvm.loop.decrement.reg.i64(i64 %1, i64 1)
    %17 = icmp ne i64 %16, 0
    br i1 %17, label %vector.body, label %for.body4.preheader, !llvm.loop !10
  
  for.body4.preheader:                              ; preds = %vector.body
    %18 = call i64 @llvm.start.loop.iterations.i64(i64 8)
    br label %for.body4
  
  for.cond.cleanup:                                 ; preds = %for.cond.cleanup3
    ret void
  
  for.cond.cleanup3:                                ; preds = %for.body4
    %call = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, double noundef 1.000000e+00) #7
    %inc18 = add nuw nsw i32 %nl.030, 1
    %exitcond37.not = icmp eq i32 %inc18, 200
    br i1 %exitcond37.not, label %for.cond.cleanup, label %vector.ph, !llvm.loop !14
  
  for.body4:                                        ; preds = %for.body4.preheader, %for.body4
    %lsr.iv48 = phi i64 [ 0, %for.body4.preheader ], [ %lsr.iv.next49, %for.body4 ]
    %lsr.iv44 = phi i64 [ 255872, %for.body4.preheader ], [ %lsr.iv.next45, %for.body4 ]
    %19 = phi i64 [ %18, %for.body4.preheader ], [ %23, %for.body4 ]
    %uglygep46 = getelementptr i8, ptr @b, i64 %lsr.iv44
    %20 = load double, ptr %uglygep46, align 8, !tbaa !6
    %uglygep51 = getelementptr i8, ptr getelementptr (i8, ptr @d, i64 127936), i64 %lsr.iv48
    %21 = load double, ptr %uglygep51, align 8, !tbaa !6
    %sub = fsub double %20, %21
    %uglygep50 = getelementptr i8, ptr getelementptr (i8, ptr @a, i64 127936), i64 %lsr.iv48
    store double %sub, ptr %uglygep50, align 8, !tbaa !6
    %uglygep47 = getelementptr i8, ptr @c, i64 %lsr.iv44
    %22 = load double, ptr %uglygep47, align 8, !tbaa !6
    %add14 = fadd double %sub, %22
    store double %add14, ptr %uglygep46, align 8, !tbaa !6
    %lsr.iv.next45 = add nuw nsw i64 %lsr.iv44, 16
    %lsr.iv.next49 = add nuw nsw i64 %lsr.iv48, 8
    %23 = call i64 @llvm.loop.decrement.reg.i64(i64 %19, i64 1)
    %24 = icmp ne i64 %23, 0
    br i1 %24, label %for.body4, label %for.cond.cleanup3, !llvm.loop !15
  }
  
  declare i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, double noundef) local_unnamed_addr #1
  
  ; Function Attrs: nocallback nofree nosync nounwind willreturn writeonly
  declare void @llvm.masked.scatter.v8f64.v8p0(<8 x double>, <8 x ptr>, i32 immarg, <8 x i1>) #2
  
  ; Function Attrs: argmemonly nocallback nofree nosync nounwind readonly willreturn
  declare { <vscale x 2 x double>, <vscale x 2 x double> } @llvm.aarch64.sve.ld2.sret.nxv2f64(<vscale x 2 x i1>, ptr) #3
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
  declare <vscale x 2 x i1> @llvm.aarch64.sve.ptrue.nxv2i1(i32 immarg) #4
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare <8 x double> @llvm.vector.extract.v8f64.nxv2f64(<vscale x 2 x double>, i64 immarg) #5
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #6
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #6
  
  attributes #0 = { nounwind uwtable vscale_range(4,4) "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #1 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #2 = { nocallback nofree nosync nounwind willreturn writeonly }
  attributes #3 = { argmemonly nocallback nofree nosync nounwind readonly willreturn }
  attributes #4 = { nocallback nofree nosync nounwind readnone willreturn }
  attributes #5 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
  attributes #6 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #7 = { nounwind }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 7, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !5 = !{!"clang version 15.0.4 ()"}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"double", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C/C++ TBAA"}
  !10 = distinct !{!10, !11, !12, !13}
  !11 = !{!"llvm.loop.mustprogress"}
  !12 = !{!"llvm.loop.unroll.disable"}
  !13 = !{!"llvm.loop.isvectorized", i32 1}
  !14 = distinct !{!14, !11, !12}
  !15 = distinct !{!15, !11, !12, !13}

...
---
name:            t
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32sp, preferred-register: '' }
  - { id: 1, class: gpr64all, preferred-register: '' }
  - { id: 2, class: gpr64common, preferred-register: '' }
  - { id: 3, class: zpr, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: zpr, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr64all, preferred-register: '' }
  - { id: 8, class: gpr64all, preferred-register: '' }
  - { id: 9, class: gpr32all, preferred-register: '' }
  - { id: 10, class: gpr64common, preferred-register: '' }
  - { id: 11, class: gpr64common, preferred-register: '' }
  - { id: 12, class: gpr64sp, preferred-register: '' }
  - { id: 13, class: gpr64all, preferred-register: '' }
  - { id: 14, class: gpr64all, preferred-register: '' }
  - { id: 15, class: gpr64all, preferred-register: '' }
  - { id: 16, class: gpr32all, preferred-register: '' }
  - { id: 17, class: gpr32all, preferred-register: '' }
  - { id: 18, class: gpr64all, preferred-register: '' }
  - { id: 19, class: zpr, preferred-register: '' }
  - { id: 20, class: zpr, preferred-register: '' }
  - { id: 21, class: zpr, preferred-register: '' }
  - { id: 22, class: gpr64, preferred-register: '' }
  - { id: 23, class: gpr32, preferred-register: '' }
  - { id: 24, class: zpr, preferred-register: '' }
  - { id: 25, class: zpr, preferred-register: '' }
  - { id: 26, class: gpr64common, preferred-register: '' }
  - { id: 27, class: zpr, preferred-register: '' }
  - { id: 28, class: zpr, preferred-register: '' }
  - { id: 29, class: ppr_3b, preferred-register: '' }
  - { id: 30, class: gpr64sp, preferred-register: '' }
  - { id: 31, class: zpr2, preferred-register: '' }
  - { id: 32, class: zpr, preferred-register: '' }
  - { id: 33, class: gpr64common, preferred-register: '' }
  - { id: 34, class: gpr64common, preferred-register: '' }
  - { id: 35, class: gpr64common, preferred-register: '' }
  - { id: 36, class: zpr, preferred-register: '' }
  - { id: 37, class: zpr, preferred-register: '' }
  - { id: 38, class: gpr64common, preferred-register: '' }
  - { id: 39, class: gpr64common, preferred-register: '' }
  - { id: 40, class: gpr64common, preferred-register: '' }
  - { id: 41, class: gpr64common, preferred-register: '' }
  - { id: 42, class: zpr2, preferred-register: '' }
  - { id: 43, class: zpr, preferred-register: '' }
  - { id: 44, class: zpr, preferred-register: '' }
  - { id: 45, class: gpr64sp, preferred-register: '' }
  - { id: 46, class: zpr, preferred-register: '' }
  - { id: 47, class: zpr, preferred-register: '' }
  - { id: 48, class: gpr64sp, preferred-register: '' }
  - { id: 49, class: gpr64, preferred-register: '' }
  - { id: 50, class: gpr64all, preferred-register: '' }
  - { id: 51, class: gpr64all, preferred-register: '' }
  - { id: 52, class: gpr64all, preferred-register: '' }
  - { id: 53, class: gpr32, preferred-register: '' }
  - { id: 54, class: gpr32, preferred-register: '' }
  - { id: 55, class: gpr64common, preferred-register: '' }
  - { id: 56, class: fpr64, preferred-register: '' }
  - { id: 57, class: gpr64common, preferred-register: '' }
  - { id: 58, class: gpr64common, preferred-register: '' }
  - { id: 59, class: gpr32, preferred-register: '' }
  - { id: 60, class: gpr64, preferred-register: '' }
  - { id: 61, class: fpr64, preferred-register: '' }
  - { id: 62, class: fpr64, preferred-register: '' }
  - { id: 63, class: gpr64common, preferred-register: '' }
  - { id: 64, class: gpr64common, preferred-register: '' }
  - { id: 65, class: gpr64common, preferred-register: '' }
  - { id: 66, class: fpr64, preferred-register: '' }
  - { id: 67, class: fpr64, preferred-register: '' }
  - { id: 68, class: gpr64sp, preferred-register: '' }
  - { id: 69, class: gpr64sp, preferred-register: '' }
  - { id: 70, class: gpr64, preferred-register: '' }
  - { id: 71, class: gpr64common, preferred-register: '' }
  - { id: 72, class: gpr64common, preferred-register: '' }
  - { id: 73, class: gpr64common, preferred-register: '' }
  - { id: 74, class: gpr64common, preferred-register: '' }
  - { id: 75, class: gpr64common, preferred-register: '' }
  - { id: 76, class: gpr64common, preferred-register: '' }
  - { id: 77, class: gpr64common, preferred-register: '' }
  - { id: 78, class: gpr64common, preferred-register: '' }
  - { id: 79, class: fpr64, preferred-register: '' }
  - { id: 80, class: gpr32all, preferred-register: '' }
  - { id: 81, class: gpr32sp, preferred-register: '' }
  - { id: 82, class: gpr32, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
  
    %17:gpr32all = COPY $wzr
    %16:gpr32all = COPY %17
    %20:zpr = INDEX_II_D -1, 2
    %23:gpr32 = MOVi32imm 1999
    %26:gpr64common = LOADgot target-flags(aarch64-got) @b
    %27:zpr = DUP_ZR_D %26
    %29:ppr_3b = PTRUE_D 31
    %33:gpr64common = LOADgot target-flags(aarch64-got) @d
    %35:gpr64common = MOVi64imm 15992
    %38:gpr64common = LOADgot target-flags(aarch64-got) @a
    %41:gpr64common = LOADgot target-flags(aarch64-got) @c
    %53:gpr32 = MOVi32imm 255872
    %54:gpr32 = MOVi32imm 8
    %59:gpr32 = MOVi32imm 127936
    %60:gpr64 = SUBREG_TO_REG 0, %59, %subreg.sub_32
    %75:gpr64common = LOADgot target-flags(aarch64-got) @e
    %76:gpr64common = LOADgot target-flags(aarch64-got) @aa
    %77:gpr64common = LOADgot target-flags(aarch64-got) @bb
    %78:gpr64common = LOADgot target-flags(aarch64-got) @cc
    %79:fpr64 = FMOVDi 112
  
  bb.1.vector.ph:
    successors: %bb.2(0x80000000)
  
    %0:gpr32sp = PHI %16, %bb.0, %9, %bb.5
    %21:zpr = COPY %20
    %22:gpr64 = MOVi64imm -127936
    %18:gpr64all = COPY %22
    %19:zpr = COPY %21
    %1:gpr64all = SUBREG_TO_REG 0, %23, %subreg.sub_32
  
  bb.2.vector.body:
    successors: %bb.2(0x7c000000), %bb.3(0x04000000)
  
    %2:gpr64common = PHI %18, %bb.1, %6, %bb.2
    %3:zpr = PHI %19, %bb.1, %46, %bb.2
    %X:gpr64 = PHI %18, %bb.1, %Y, %bb.2
    %4:gpr64sp = PHI %1, %bb.1, %7, %bb.2
    %Y:gpr64 = COPY $xzr
    %24:zpr = COPY %3
    %25:zpr = ADD_ZI_D %3, 1, 0
    %28:zpr = ADR_LSL_ZZZ_D_3 %27, %25
    %30:gpr64sp = COPY %28.dsub
    %31:zpr2 = LD2D_IMM %29, killed %30, 0
    %32:zpr = COPY %31.zsub0
    %34:gpr64common = ADDXrr %33, %2
    %36:zpr = LD1D %29, killed %34, %35 :: (load (s512) from %ir.uglygep41, !tbaa !6)
    %37:zpr = FSUB_ZZZ_D killed %32, killed %36
    %39:gpr64common = ADDXrr %38, %2
    ST1D %37, %29, killed %39, %35 :: (store (s512) into %ir.uglygep43, !tbaa !6)
    %40:gpr64common = COPY %25.dsub
    %42:zpr2 = LD2D %29, %41, killed %40
    %43:zpr = COPY %42.zsub0
    %44:zpr = FADD_ZZZ_D %37, killed %43
    %45:gpr64sp = ADDXri %26, 8, 0
    SST1D_SCALED killed %44, %29, killed %45, %24 :: (store unknown-size, align 8, !tbaa !6)
    %46:zpr = ADD_ZI_D %3, 16, 0
    %48:gpr64sp = nsw ADDXri %2, 64, 0
    %6:gpr64all = COPY %48
    %49:gpr64 = SUBSXri %4, 1, 0, implicit-def $nzcv
    %7:gpr64all = COPY %49
    Bcc 1, %bb.2, implicit $nzcv
    B %bb.3
  
  bb.3.for.body4.preheader:
    successors: %bb.6(0x80000000)
  
    %52:gpr64all = COPY $xzr
    %50:gpr64all = COPY %52
    %51:gpr64all = SUBREG_TO_REG 0, %53, %subreg.sub_32
    %8:gpr64all = SUBREG_TO_REG 0, %54, %subreg.sub_32
    B %bb.6
  
  bb.4.for.cond.cleanup:
    RET_ReallyLR
  
  bb.5.for.cond.cleanup3:
    successors: %bb.4(0x04000000), %bb.1(0x7c000000)
  
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    $x0 = COPY %38
    $x1 = COPY %26
    $x2 = COPY %41
    $x3 = COPY %33
    $x4 = COPY %75
    $x5 = COPY %76
    $x6 = COPY %77
    $x7 = COPY %78
    $d0 = COPY %79
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $d0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %81:gpr32sp = nuw nsw ADDWri %0, 1, 0
    %9:gpr32all = COPY %81
    dead $wzr = SUBSWri %81, 200, 0, implicit-def $nzcv
    Bcc 0, %bb.4, implicit $nzcv
    B %bb.1
  
  bb.6.for.body4:
    successors: %bb.6(0x7c000000), %bb.5(0x04000000)
  
    %10:gpr64common = PHI %50, %bb.3, %14, %bb.6
    %11:gpr64common = PHI %51, %bb.3, %13, %bb.6
    %12:gpr64sp = PHI %8, %bb.3, %15, %bb.6
    %56:fpr64 = LDRDroX %26, %11, 0, 0 :: (load (s64) from %ir.uglygep46, !tbaa !6)
    %58:gpr64common = ADDXrr %33, %10
    %61:fpr64 = LDRDroX %58, %60, 0, 0 :: (load (s64) from %ir.uglygep51, !tbaa !6)
    %62:fpr64 = nofpexcept FSUBDrr killed %56, killed %61, implicit $fpcr
    %64:gpr64common = ADDXrr %38, %10
    STRDroX %62, %64, %60, 0, 0 :: (store (s64) into %ir.uglygep50, !tbaa !6)
    %66:fpr64 = LDRDroX %41, %11, 0, 0 :: (load (s64) from %ir.uglygep47, !tbaa !6)
    %67:fpr64 = nofpexcept FADDDrr %62, killed %66, implicit $fpcr
    STRDroX killed %67, %26, %11, 0, 0 :: (store (s64) into %ir.uglygep46, !tbaa !6)
    %68:gpr64sp = nuw nsw ADDXri %11, 16, 0
    %13:gpr64all = COPY %68
    %69:gpr64sp = nuw nsw ADDXri %10, 8, 0
    %14:gpr64all = COPY %69
    %70:gpr64 = SUBSXri %12, 1, 0, implicit-def $nzcv
    %15:gpr64all = COPY %70
    Bcc 1, %bb.6, implicit $nzcv
    B %bb.5

...
