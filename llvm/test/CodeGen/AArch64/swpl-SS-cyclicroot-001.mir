#RUN: llc %s -mcpu=a64fx -fswp -O3 -start-before=aarch64-swpipeliner -swpl-disable-stagescheduling=false -swpl-debug-dump-ss-cyclicroots -o /dev/null 2>&1  | FileCheck %s
#CHECK:*** dump SwplSSSyclicInfo ***
#CHECK:There is no circulation part.
--- |
  ; ModuleID = '/home/XXXX/sftest.c'
  source_filename = "/home/XXXX/sftest.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  ; Function Attrs: nofree norecurse nosync nounwind memory(argmem: readwrite) uwtable vscale_range(4,4)
  define dso_local nofpclass(nan inf) float @func(ptr noalias nocapture noundef %A, ptr noalias nocapture noundef readonly %B, ptr noalias nocapture noundef writeonly %Z, float noundef nofpclass(nan inf) %C, i32 noundef %N) local_unnamed_addr #0 {
  entry:
    %cmp12 = icmp ugt i32 %N, 1
    br i1 %cmp12, label %for.body.preheader, label %for.cond.cleanup
  
  for.body.preheader:                               ; preds = %entry
    %wide.trip.count = zext i32 %N to i64
    %scevgep = getelementptr i8, ptr %B, i64 4
    %scevgep21 = getelementptr i8, ptr %Z, i64 4
    %0 = add i64 %wide.trip.count, -1
    %1 = call i64 @llvm.start.loop.iterations.i64(i64 %0)
    br label %for.body
  
  for.cond.cleanup:                                 ; preds = %for.body, %entry
    %2 = load float, ptr %A, align 4, !tbaa !6
    ret float %2
  
  for.body:                                         ; preds = %for.body.preheader, %for.body
    %lsr.iv25 = phi ptr [ %A, %for.body.preheader ], [ %scevgep26, %for.body ]
    %lsr.iv22 = phi ptr [ %scevgep21, %for.body.preheader ], [ %scevgep23, %for.body ]
    %lsr.iv = phi ptr [ %scevgep, %for.body.preheader ], [ %scevgep20, %for.body ]
    %3 = phi i64 [ %1, %for.body.preheader ], [ %5, %for.body ]
    %4 = load float, ptr %lsr.iv, align 4, !tbaa !6
    %mul = fmul fast float %4, %C
    store float %4, ptr %lsr.iv25, align 4, !tbaa !6
    store float %mul, ptr %lsr.iv22, align 4, !tbaa !6
    %scevgep20 = getelementptr i8, ptr %lsr.iv, i64 4
    %scevgep23 = getelementptr i8, ptr %lsr.iv22, i64 4
    %scevgep26 = getelementptr i8, ptr %lsr.iv25, i64 8
    %5 = call i64 @llvm.loop.decrement.reg.i64(i64 %3, i64 1)
    %6 = icmp ne i64 %5, 0
    br i1 %6, label %for.body, label %for.cond.cleanup, !llvm.loop !10
  }
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #1
  
  attributes #0 = { nofree norecurse nosync nounwind memory(argmem: readwrite) uwtable vscale_range(4,4) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #1 = { nocallback noduplicate nofree nosync nounwind willreturn }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !5 = !{!"clang version 17.0.3"}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"float", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C/C++ TBAA"}
  !10 = distinct !{!10, !11, !12}
  !11 = !{!"llvm.loop.mustprogress"}
  !12 = !{!"llvm.loop.unroll.disable"}

...
---
name:            func
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr64all, preferred-register: '' }
  - { id: 1, class: gpr64all, preferred-register: '' }
  - { id: 2, class: gpr64all, preferred-register: '' }
  - { id: 3, class: gpr64sp, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: gpr64sp, preferred-register: '' }
  - { id: 6, class: gpr64sp, preferred-register: '' }
  - { id: 7, class: gpr64all, preferred-register: '' }
  - { id: 8, class: gpr64all, preferred-register: '' }
  - { id: 9, class: gpr64all, preferred-register: '' }
  - { id: 10, class: gpr64all, preferred-register: '' }
  - { id: 11, class: gpr64common, preferred-register: '' }
  - { id: 12, class: gpr64common, preferred-register: '' }
  - { id: 13, class: gpr64common, preferred-register: '' }
  - { id: 14, class: fpr32, preferred-register: '' }
  - { id: 15, class: gpr32common, preferred-register: '' }
  - { id: 16, class: gpr32, preferred-register: '' }
  - { id: 17, class: gpr32, preferred-register: '' }
  - { id: 18, class: gpr64sp, preferred-register: '' }
  - { id: 19, class: gpr64sp, preferred-register: '' }
  - { id: 20, class: gpr64sp, preferred-register: '' }
  - { id: 21, class: gpr64common, preferred-register: '' }
  - { id: 22, class: gpr64sp, preferred-register: '' }
  - { id: 23, class: fpr32, preferred-register: '' }
  - { id: 24, class: fpr32, preferred-register: '' }
  - { id: 25, class: gpr64sp, preferred-register: '' }
  - { id: 26, class: gpr64sp, preferred-register: '' }
  - { id: 27, class: gpr64, preferred-register: '' }
  - { id: 28, class: fpr32, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%11' }
  - { reg: '$x1', virtual-reg: '%12' }
  - { reg: '$x2', virtual-reg: '%13' }
  - { reg: '$s0', virtual-reg: '%14' }
  - { reg: '$w3', virtual-reg: '%15' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $x0, $x1, $x2, $s0, $w3
  
    %15:gpr32common = COPY $w3
    %14:fpr32 = COPY $s0
    %13:gpr64common = COPY $x2
    %12:gpr64common = COPY $x1
    %11:gpr64common = COPY $x0
    dead $wzr = SUBSWri %15, 2, 0, implicit-def $nzcv
    Bcc 3, %bb.2, implicit $nzcv
    B %bb.1
  
  bb.1.for.body.preheader:
    successors: %bb.3(0x80000000)
  
    %17:gpr32 = ORRWrs $wzr, %15, 0
    %18:gpr64sp = SUBREG_TO_REG 0, killed %17, %subreg.sub_32
    %19:gpr64sp = ADDXri %12, 4, 0
    %0:gpr64all = COPY %19
    %20:gpr64sp = ADDXri %13, 4, 0
    %1:gpr64all = COPY %20
    %21:gpr64common = SUBXri killed %18, 1, 0
    %2:gpr64all = COPY %21
    B %bb.3
  
  bb.2.for.cond.cleanup:
    %28:fpr32 = LDRSui %11, 0 :: (load (s32) from %ir.A, !tbaa !6)
    $s0 = COPY %28
    RET_ReallyLR implicit $s0
  
  bb.3.for.body:
    successors: %bb.3(0x7c000000), %bb.2(0x04000000)
  
    %3:gpr64sp = PHI %11, %bb.1, %9, %bb.3
    %4:gpr64sp = PHI %1, %bb.1, %8, %bb.3
    %5:gpr64sp = PHI %0, %bb.1, %7, %bb.3
    %6:gpr64sp = PHI %2, %bb.1, %10, %bb.3
    early-clobber %22:gpr64sp, %23:fpr32 = LDRSpost %5, 4 :: (load (s32) from %ir.lsr.iv, !tbaa !6)
    %24:fpr32 = nnan ninf nsz arcp contract afn reassoc nofpexcept FMULSrr %23, %14, implicit $fpcr
    early-clobber %25:gpr64sp = STRSpost %23, %3, 8 :: (store (s32) into %ir.lsr.iv25, !tbaa !6)
    early-clobber %26:gpr64sp = STRSpost killed %24, %4, 4 :: (store (s32) into %ir.lsr.iv22, !tbaa !6)
    %7:gpr64all = COPY %22
    %8:gpr64all = COPY %26
    %9:gpr64all = COPY %25
    %27:gpr64 = SUBSXri %6, 1, 0, implicit-def $nzcv
    %10:gpr64all = COPY %27
    Bcc 1, %bb.3, implicit $nzcv
    B %bb.2

...
