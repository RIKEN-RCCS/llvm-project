# RUN: llc -mcpu=a64fx -O3 -fswp -start-before=aarch64-swpipeliner -o /dev/null  -swpl-debug %s 2>&1 | FileCheck %s
#
# CHECK: before:early-clobber %39:gpr64sp, %40:fpr32 = LDRSpre %37:gpr64sp(tied-def 0), -4 :: (load (s32) from %ir.uglygep25, !tbaa !9)
# CHECK: after 1:%40:fpr32 = LDURSi %37:gpr64sp, -4 :: (load (s32) from %ir.uglygep25, !tbaa !9)
# CHECK: after 2:%39:gpr64sp = SUBXri %37:gpr64sp, 4, 0

--- |
  ; ModuleID = 'a.c'
  source_filename = "a.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  @a = dso_local global [32000 x float] zeroinitializer, align 64
  @b = dso_local global [32000 x float] zeroinitializer, align 64
  @c = dso_local global [32000 x float] zeroinitializer, align 64
  @d = dso_local global [32000 x float] zeroinitializer, align 64
  @e = dso_local global [32000 x float] zeroinitializer, align 64
  @aa = dso_local global [256 x [256 x float]] zeroinitializer, align 64
  @bb = dso_local global [256 x [256 x float]] zeroinitializer, align 64
  @cc = dso_local global [256 x [256 x float]] zeroinitializer, align 64
  
  ; Function Attrs: nounwind uwtable vscale_range(1,16)
  define dso_local void @a10(ptr nocapture noundef readnone %func_args) local_unnamed_addr #0 {
  entry:
    br label %for.cond1.preheader
  
  for.cond1.preheader:                              ; preds = %entry, %for.cond.cleanup3
    %nl.018 = phi i32 [ 0, %entry ], [ %inc, %for.cond.cleanup3 ]
    %0 = call i64 @llvm.start.loop.iterations.i64(i64 31999)
    br label %for.body4
  
  for.cond.cleanup:                                 ; preds = %for.cond.cleanup3
    ret void
  
  for.cond.cleanup3:                                ; preds = %for.body4
    %call = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, float noundef 0.000000e+00) #3
    %inc = add nuw nsw i32 %nl.018, 1
    %exitcond.not = icmp eq i32 %inc, 30
    br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond1.preheader, !llvm.loop !6
  
  for.body4:                                        ; preds = %for.cond1.preheader, %for.body4
    %lsr.iv23 = phi i64 [ 127992, %for.cond1.preheader ], [ %lsr.iv.next, %for.body4 ]
    %lsr.iv = phi ptr [ getelementptr (i8, ptr @a, i64 127996), %for.cond1.preheader ], [ %uglygep22, %for.body4 ]
    %1 = phi i64 [ %0, %for.cond1.preheader ], [ %4, %for.body4 ]
    %uglygep25 = getelementptr i8, ptr %lsr.iv, i64 -4
    %2 = load float, ptr %uglygep25, align 4, !tbaa !9
    %uglygep24 = getelementptr i8, ptr @b, i64 %lsr.iv23
    %3 = load float, ptr %uglygep24, align 4, !tbaa !9
    %add = fadd fast float %3, %2
    store float %add, ptr %lsr.iv, align 4, !tbaa !9
    %uglygep22 = getelementptr i8, ptr %lsr.iv, i64 -4
    %lsr.iv.next = add nsw i64 %lsr.iv23, -4
    %4 = call i64 @llvm.loop.decrement.reg.i64(i64 %1, i64 1)
    %5 = icmp ne i64 %4, 0
    br i1 %5, label %for.body4, label %for.cond.cleanup3, !llvm.loop !13
  }
  
  declare i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, float noundef) local_unnamed_addr #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #2
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #2
  
  attributes #0 = { nounwind uwtable vscale_range(1,16) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #1 = { "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #2 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #3 = { nounwind }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 7, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !5 = !{!"clang version 15.0.4"}
  !6 = distinct !{!6, !7, !8}
  !7 = !{!"llvm.loop.mustprogress"}
  !8 = !{!"llvm.loop.unroll.disable"}
  !9 = !{!10, !10, i64 0}
  !10 = !{!"float", !11, i64 0}
  !11 = !{!"omnipotent char", !12, i64 0}
  !12 = !{!"Simple C/C++ TBAA"}
  !13 = distinct !{!13, !7, !8}

...
---
name:            a10
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32sp, preferred-register: '' }
  - { id: 1, class: gpr64all, preferred-register: '' }
  - { id: 2, class: gpr32all, preferred-register: '' }
  - { id: 3, class: gpr64common, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: gpr64sp, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr64all, preferred-register: '' }
  - { id: 8, class: gpr64all, preferred-register: '' }
  - { id: 9, class: gpr64, preferred-register: '' }
  - { id: 10, class: gpr32all, preferred-register: '' }
  - { id: 11, class: gpr32all, preferred-register: '' }
  - { id: 12, class: gpr64all, preferred-register: '' }
  - { id: 13, class: gpr64all, preferred-register: '' }
  - { id: 14, class: gpr64common, preferred-register: '' }
  - { id: 15, class: gpr32, preferred-register: '' }
  - { id: 16, class: gpr32, preferred-register: '' }
  - { id: 17, class: gpr64sp, preferred-register: '' }
  - { id: 18, class: fpr32, preferred-register: '' }
  - { id: 19, class: gpr64common, preferred-register: '' }
  - { id: 20, class: fpr32, preferred-register: '' }
  - { id: 21, class: fpr32, preferred-register: '' }
  - { id: 22, class: gpr64common, preferred-register: '' }
  - { id: 23, class: gpr64, preferred-register: '' }
  - { id: 24, class: gpr64common, preferred-register: '' }
  - { id: 25, class: gpr64common, preferred-register: '' }
  - { id: 26, class: gpr64common, preferred-register: '' }
  - { id: 27, class: gpr64common, preferred-register: '' }
  - { id: 28, class: gpr64common, preferred-register: '' }
  - { id: 29, class: gpr64common, preferred-register: '' }
  - { id: 30, class: gpr64common, preferred-register: '' }
  - { id: 31, class: gpr64common, preferred-register: '' }
  - { id: 32, class: fpr32, preferred-register: '' }
  - { id: 33, class: gpr32all, preferred-register: '' }
  - { id: 34, class: gpr32sp, preferred-register: '' }
  - { id: 35, class: gpr32, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
  
    %11:gpr32all = COPY $wzr
    %10:gpr32all = COPY %11
    %14:gpr64common = MOVaddr target-flags(aarch64-page) @a + 127996, target-flags(aarch64-pageoff, aarch64-nc) @a + 127996
    %15:gpr32 = MOVi32imm 127992
    %16:gpr32 = MOVi32imm 31999
    %19:gpr64common = MOVaddr target-flags(aarch64-page) @b, target-flags(aarch64-pageoff, aarch64-nc) @b
    %24:gpr64common = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a
    %26:gpr64common = MOVaddr target-flags(aarch64-page) @c, target-flags(aarch64-pageoff, aarch64-nc) @c
    %27:gpr64common = MOVaddr target-flags(aarch64-page) @d, target-flags(aarch64-pageoff, aarch64-nc) @d
    %28:gpr64common = MOVaddr target-flags(aarch64-page) @e, target-flags(aarch64-pageoff, aarch64-nc) @e
    %29:gpr64common = MOVaddr target-flags(aarch64-page) @aa, target-flags(aarch64-pageoff, aarch64-nc) @aa
    %30:gpr64common = MOVaddr target-flags(aarch64-page) @bb, target-flags(aarch64-pageoff, aarch64-nc) @bb
    %31:gpr64common = MOVaddr target-flags(aarch64-page) @cc, target-flags(aarch64-pageoff, aarch64-nc) @cc
    %32:fpr32 = FMOVS0
  
  bb.1.for.cond1.preheader:
    successors: %bb.4(0x80000000)
  
    %0:gpr32sp = PHI %10, %bb.0, %2, %bb.3
    %13:gpr64all = COPY %14
    %12:gpr64all = SUBREG_TO_REG 0, %15, %subreg.sub_32
    %1:gpr64all = SUBREG_TO_REG 0, %16, %subreg.sub_32
    B %bb.4
  
  bb.2.for.cond.cleanup:
    RET_ReallyLR
  
  bb.3.for.cond.cleanup3:
    successors: %bb.2(0x04000000), %bb.1(0x7c000000)
  
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    $x0 = COPY %24
    $x1 = COPY %19
    $x2 = COPY %26
    $x3 = COPY %27
    $x4 = COPY %28
    $x5 = COPY %29
    $x6 = COPY %30
    $x7 = COPY %31
    $s0 = COPY %32
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $s0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %34:gpr32sp = nuw nsw ADDWri %0, 1, 0
    %2:gpr32all = COPY %34
    dead $wzr = SUBSWri %34, 30, 0, implicit-def $nzcv
    Bcc 0, %bb.2, implicit $nzcv
    B %bb.1
  
  bb.4.for.body4:
    successors: %bb.4(0x7c000000), %bb.3(0x04000000)
  
    %3:gpr64common = PHI %12, %bb.1, %7, %bb.4
    %4:gpr64sp = PHI %13, %bb.1, %6, %bb.4
    %5:gpr64sp = PHI %1, %bb.1, %8, %bb.4
    early-clobber %17:gpr64sp, %18:fpr32 = LDRSpre %4, -4 :: (load (s32) from %ir.uglygep25, !tbaa !9)
    %20:fpr32 = LDRSroX %19, %3, 0, 0 :: (load (s32) from %ir.uglygep24, !tbaa !9)
    %21:fpr32 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDSrr killed %20, killed %18
    STRSui killed %21, %4, 0 :: (store (s32) into %ir.lsr.iv, !tbaa !9)
    %6:gpr64all = COPY %17
    %22:gpr64common = nsw SUBXri %3, 4, 0
    %7:gpr64all = COPY %22
    %23:gpr64 = SUBSXri %5, 1, 0, implicit-def $nzcv
    %8:gpr64all = COPY %23
    Bcc 1, %bb.4, implicit $nzcv
    B %bb.3

...
