# RUN: llc %s -mcpu=a64fx -O1 -fswp -swpl-enable-reg-alloc -start-before=aarch64-swpipeliner -swpl-debug-dump-mir=8 -o /dev/null 2>&1 | FileCheck %s

# CHECK:bb.6.do.body:
# CHECK-NEXT:; predecessors: %bb.5
# CHECK-NEXT:  successors: %bb.1(0x80000000); %bb.1(100.00%)
# CHECK-EMPTY:
# CHECK-NEXT:  %24:gpr32 = COPY %8:gpr32all
# CHECK-NEXT:  %25:gpr64sp = COPY %2:gpr64all
# CHECK-NEXT:  %26:ppr_3b = COPY %0:ppr_3b
# CHECK-NEXT:  %35:zpr = INDEX_RI_S %24:gpr32, 1
# CHECK-NEXT:  %37:zpr = GLD1W_SXTW_SCALED %26:ppr_3b, %14:gpr64common, %35:zpr
# CHECK-NEXT:  SST1W_SXTW_SCALED killed %37:zpr, %0:ppr_3b, %16:gpr64common, %35:zpr
# CHECK-NEXT:  %39:zpr = GLD1W_SXTW_SCALED %0:ppr_3b, %17:gpr64common, %35:zpr
# CHECK-NEXT:  %36:gpr32 = ADDWrr %24:gpr32, %1:gpr32
# CHECK-NEXT:  %27:zpr = INDEX_RI_S %36:gpr32, 1
# CHECK-NEXT:  SST1W_SXTW_SCALED killed %39:zpr, %0:ppr_3b, %19:gpr64common, %35:zpr
# CHECK-NEXT:  %38:ppr_3b = PTRUE_S 31
# CHECK-NEXT:  %28:zpr = GLD1W_SXTW_SCALED %38:ppr_3b, %14:gpr64common, %27:zpr
# CHECK-NEXT:  $z0 = COPY %28:zpr
# CHECK-NEXT:  $p0 = COPY %0:ppr_3b
# CHECK-NEXT:  $x0 = COPY %16:gpr64common
# CHECK-NEXT:  $z1 = COPY %27:zpr
# CHECK-NEXT:  $x1 = COPY %17:gpr64common
# CHECK-NEXT:  $w3 = COPY %36:gpr32
# CHECK-NEXT:  $w4 = COPY %1:gpr32
# CHECK-NEXT:  $x5 = COPY %19:gpr64common
# CHECK-NEXT:  $x6 = COPY %14:gpr64common
# CHECK-NEXT:  $x8 = COPY %25:gpr64sp
# CHECK-NEXT:  SWPLIVEOUT implicit $z0, implicit $p0, implicit $x0, implicit $z1, implicit $x1, implicit $w3, implicit $w4, implicit $x5, implicit $x6, implicit $x8
# CHECK-NEXT:bb.1.do.body:
# CHECK-NEXT:; predecessors: %bb.1, %bb.6
# CHECK-NEXT:  successors: %bb.1(0x7c000000), %bb.7(0x04000000); %bb.1(96.88%), %bb.7(3.12%)
# CHECK-EMPTY:
# CHECK-NEXT:  SWPLIVEIN implicit-def $z0, implicit-def $p0, implicit-def $x0, implicit-def $z1, implicit-def $x1, implicit-def $w3, implicit-def $w4, implicit-def $x5, implicit-def $x6, implicit-def $x8
# CHECK-NEXT:  SST1W_SXTW_SCALED killed $z0, $p0, $x0, $z1
# CHECK-NEXT:  $z0 = GLD1W_SXTW_SCALED $p0, $x1, $z1
# CHECK-NEXT:  $w2 = ADDWrr $w3, $w4
# CHECK-NEXT:  $z2 = INDEX_RI_S $w2, 1
# CHECK-NEXT:  SST1W_SXTW_SCALED killed $z0, $p0, $x5, $z1
# CHECK-NEXT:  $p1 = PTRUE_S 31
# CHECK-NEXT:  $z0 = GLD1W_SXTW_SCALED $p1, $x6, $z2
# CHECK-NEXT:  $x7 = SUBSXri $x8, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  SST1W_SXTW_SCALED killed $z0, $p0, $x0, $z2
# CHECK-NEXT:  $z0 = GLD1W_SXTW_SCALED $p0, $x1, $z2
# CHECK-NEXT:  $w3 = ADDWrr $w2, $w4
# CHECK-NEXT:  $z1 = INDEX_RI_S $w3, 1
# CHECK-NEXT:  SST1W_SXTW_SCALED killed $z0, $p0, $x5, $z2
# CHECK-NEXT:  $p1 = PTRUE_S 31
# CHECK-NEXT:  $z0 = GLD1W_SXTW_SCALED $p1, $x6, $z1
# CHECK-NEXT:  $x8 = SUBSXri $x7, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  SWPLIVEOUT implicit $z0, implicit $p0, implicit $x0, implicit $z1, implicit $x1, implicit $w3, implicit $w4, implicit $x5, implicit $x6, implicit $x8, implicit $w2, implicit $p1
# CHECK-NEXT:  $xzr = SUBSXri $x8, 4, 0, implicit-def $nzcv
# CHECK-NEXT:  Bcc 10, %bb.1, implicit $nzcv
# CHECK-NEXT:bb.7.do.body:
# CHECK-NEXT:; predecessors: %bb.1
# CHECK-NEXT:  successors: %bb.8(0x80000000); %bb.8(100.00%)
# CHECK-EMPTY:
# CHECK-NEXT:  SWPLIVEIN implicit-def $z0, implicit-def $z1, implicit-def $w2, implicit-def $w3, implicit-def $p1, implicit-def $x8
# CHECK-NEXT:  %45:zpr = COPY $z0
# CHECK-NEXT:  %46:zpr = COPY $z1
# CHECK-NEXT:  %47:gpr32 = COPY $w2
# CHECK-NEXT:  %48:gpr32 = COPY $w3
# CHECK-NEXT:  %49:ppr_3b = COPY $p1
# CHECK-NEXT:  %50:gpr64sp = COPY $x8
# CHECK-NEXT:  SST1W_SXTW_SCALED killed %45:zpr, %0:ppr_3b, %16:gpr64common, %46:zpr
# CHECK-NEXT:  %51:zpr = GLD1W_SXTW_SCALED %0:ppr_3b, %17:gpr64common, %46:zpr
# CHECK-NEXT:  %52:gpr32 = ADDWrr %48:gpr32, %1:gpr32
# CHECK-NEXT:  SST1W_SXTW_SCALED killed %51:zpr, %0:ppr_3b, %19:gpr64common, %46:zpr
# CHECK-NEXT:  %53:ppr_3b = PTRUE_S 31
# CHECK-NEXT:  %54:gpr64sp = SUBSXri %50:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  %55:gpr64sp = SUBSXri %54:gpr64sp, 1, 0, implicit-def $nzcv

--- |
  ; ModuleID = 'SVE-001.c'
  source_filename = "SVE-001.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  @P1 = dso_local global [64 x i32] zeroinitializer, align 4
  @P2 = dso_local global [64 x i32] zeroinitializer, align 4
  @P3 = dso_local global [64 x i32] zeroinitializer, align 4
  @P4 = dso_local global [64 x i32] zeroinitializer, align 4
  
  ; Function Attrs: nofree nosync nounwind memory(readwrite, argmem: none, inaccessiblemem: none) uwtable vscale_range(1,16)
  define dso_local void @test_part(i64 noundef %count) local_unnamed_addr #0 {
  entry:
    %0 = tail call i64 @llvm.vscale.i64()
    %1 = tail call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 31)
    %umax = tail call i64 @llvm.umax.i64(i64 %count, i64 1)
    %2 = trunc i64 %0 to i32
    %3 = shl nuw nsw i32 %2, 2
    %4 = call i64 @llvm.start.loop.iterations.i64(i64 %umax)
    br label %do.body
  
  do.body:                                          ; preds = %do.body, %entry
    %lsr.iv = phi i32 [ %lsr.iv.next, %do.body ], [ 0, %entry ]
    %5 = phi i64 [ %4, %entry ], [ %9, %do.body ]
    %6 = tail call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 %lsr.iv, i32 1)
    %7 = tail call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.gather.sxtw.index.nxv4i32(<vscale x 4 x i1> %1, ptr nonnull @P1, <vscale x 4 x i32> %6)
    tail call void @llvm.aarch64.sve.st1.scatter.sxtw.index.nxv4i32(<vscale x 4 x i32> %7, <vscale x 4 x i1> %1, ptr nonnull @P2, <vscale x 4 x i32> %6)
    %8 = tail call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.gather.sxtw.index.nxv4i32(<vscale x 4 x i1> %1, ptr nonnull @P3, <vscale x 4 x i32> %6)
    tail call void @llvm.aarch64.sve.st1.scatter.sxtw.index.nxv4i32(<vscale x 4 x i32> %8, <vscale x 4 x i1> %1, ptr nonnull @P4, <vscale x 4 x i32> %6)
    %lsr.iv.next = add i32 %lsr.iv, %3
    %9 = call i64 @llvm.loop.decrement.reg.i64(i64 %5, i64 1)
    %10 = icmp ne i64 %9, 0
    br i1 %10, label %do.body, label %do.end, !llvm.loop !6
  
  do.end:                                           ; preds = %do.body
    ret void
  }
  
  ; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32, i32) #1
  
  ; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 immarg) #1
  
  ; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
  declare <vscale x 4 x i32> @llvm.aarch64.sve.ld1.gather.sxtw.index.nxv4i32(<vscale x 4 x i1>, ptr, <vscale x 4 x i32>) #2
  
  ; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: write)
  declare void @llvm.aarch64.sve.st1.scatter.sxtw.index.nxv4i32(<vscale x 4 x i32>, <vscale x 4 x i1>, ptr, <vscale x 4 x i32>) #3
  
  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare i64 @llvm.vscale.i64() #4
  
  ; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
  declare i64 @llvm.umax.i64(i64, i64) #5
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #6
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #6
  
  attributes #0 = { nofree nosync nounwind memory(readwrite, argmem: none, inaccessiblemem: none) uwtable vscale_range(1,16) "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" }
  attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
  attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read) }
  attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: write) }
  attributes #4 = { nocallback nofree nosync nounwind willreturn memory(none) }
  attributes #5 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
  attributes #6 = { nocallback noduplicate nofree nosync nounwind willreturn }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !6 = distinct !{!6, !7, !8}
  !7 = !{!"llvm.loop.mustprogress"}
  !8 = !{!"llvm.loop.unroll.disable"}

...
---
name:            test_part
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: ppr_3b, preferred-register: '' }
  - { id: 1, class: gpr32, preferred-register: '' }
  - { id: 2, class: gpr64all, preferred-register: '' }
  - { id: 3, class: gpr32, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: gpr32all, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr64common, preferred-register: '' }
  - { id: 8, class: gpr32all, preferred-register: '' }
  - { id: 9, class: gpr64, preferred-register: '' }
  - { id: 10, class: gpr64, preferred-register: '' }
  - { id: 11, class: gpr64, preferred-register: '' }
  - { id: 12, class: gpr32all, preferred-register: '' }
  - { id: 13, class: zpr, preferred-register: '' }
  - { id: 14, class: gpr64common, preferred-register: '' }
  - { id: 15, class: zpr, preferred-register: '' }
  - { id: 16, class: gpr64common, preferred-register: '' }
  - { id: 17, class: gpr64common, preferred-register: '' }
  - { id: 18, class: zpr, preferred-register: '' }
  - { id: 19, class: gpr64common, preferred-register: '' }
  - { id: 20, class: gpr32, preferred-register: '' }
  - { id: 21, class: gpr64, preferred-register: '' }
  - { id: 22, class: ppr_3b, preferred-register: '' }
  - { id: 23, class: ppr_3b, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%7' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $x0
  
    %7:gpr64common = COPY $x0
    %0:ppr_3b = PTRUE_S 31
    dead $xzr = SUBSXri %7, 1, 0, implicit-def $nzcv
    %10:gpr64 = CSINCXr %7, $xzr, 8, implicit $nzcv
    %11:gpr64 = CNTW_XPiI 31, 1
    %1:gpr32 = COPY %11.sub_32
    %12:gpr32all = COPY $wzr
    %8:gpr32all = COPY %12
    %2:gpr64all = COPY %10
    %14:gpr64common = MOVaddr target-flags(aarch64-page) @P1, target-flags(aarch64-pageoff, aarch64-nc) @P1
    %16:gpr64common = MOVaddr target-flags(aarch64-page) @P2, target-flags(aarch64-pageoff, aarch64-nc) @P2
    %17:gpr64common = MOVaddr target-flags(aarch64-page) @P3, target-flags(aarch64-pageoff, aarch64-nc) @P3
    %19:gpr64common = MOVaddr target-flags(aarch64-page) @P4, target-flags(aarch64-pageoff, aarch64-nc) @P4
  
  bb.1.do.body:
    successors: %bb.1(0x7c000000), %bb.2(0x04000000)
  
    %3:gpr32 = PHI %8, %bb.0, %5, %bb.1
    %4:gpr64sp = PHI %2, %bb.0, %6, %bb.1
    %23:ppr_3b = PHI %0, %bb.0, %22, %bb.1
    %13:zpr = INDEX_RI_S %3, 1
    %15:zpr = GLD1W_SXTW_SCALED %23, %14, %13
    SST1W_SXTW_SCALED killed %15, %0, %16, %13
    %18:zpr = GLD1W_SXTW_SCALED %0, %17, %13
    SST1W_SXTW_SCALED killed %18, %0, %19, %13
    %22:ppr_3b = PTRUE_S 31
    %20:gpr32 = ADDWrr %3, %1
    %5:gpr32all = COPY %20
    %21:gpr64 = SUBSXri %4, 1, 0, implicit-def $nzcv
    %6:gpr64all = COPY %21
    Bcc 1, %bb.1, implicit $nzcv
    B %bb.2
  
  bb.2.do.end:
    RET_ReallyLR

...

