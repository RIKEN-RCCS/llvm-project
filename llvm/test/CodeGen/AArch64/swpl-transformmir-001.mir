#RUN: llc %s -mcpu=a64fx -O1 -ffj-swp -swpl-debug-dump-mir=8 -start-before=aarch64-swpipeliner -o /dev/null 2>&1 | FileCheck %s
#CHECK:** SwplTransformedMIRInfo begin **
#CHECK:originalDoVReg:%4
#CHECK:originalDoInitVar:%0
#CHECK:doVReg:%51
#CHECK:iterationInterval:4
#CHECK:minimumIterationInterval:3
#CHECK:coefficient: 1
#CHECK:minConstant: 0
#CHECK:expansion: 5
#CHECK:nVersions: 3
#CHECK:nCopies: 5
#CHECK:requiredKernelIteration: 5
#CHECK:prologEndIndx: 64
#CHECK:kernelEndIndx: 160
#CHECK:epilogEndIndx: 224
#CHECK:isIterationCountConstant: 0
#CHECK:doVRegInitialValue: 0
#CHECK:originalKernelIteration: 0
#CHECK:transformedKernelIteration: 0
#CHECK:transformedModIteration: 0
#CHECK:updateDoVRegMI:%20:gpr64 = SUBSXri %4:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK:branchDoVRegMI:Bcc 1, %bb.12, implicit $nzcv
#CHECK:branchDoVRegMIKernel:Bcc 10, %bb.4, implicit $nzcv
#CHECK:OrgPreHeader: %bb.2
#CHECK:Check1: %bb.7
#CHECK:Prolog: %bb.8
#CHECK:OrgBody: %bb.4
#CHECK:Epilog: %bb.9
#CHECK:NewPreHeader: %bb.11
#CHECK:Check2: %bb.10
#CHECK:NewBody: %bb.12
#CHECK:NewExit: %bb.13
#CHECK:OrgExit: %bb.3
#CHECK:mis:
#CHECK:** SwplTransformedMIRInfo end   **
#CHECK:target loop:Loop at depth 1 containing: %bb.4<header><latch><exiting>
#CHECK:LAST:
#CHECK:bb.0 (%ir-block.1):
#CHECK:  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
#CHECK:  liveins: $x0
#CHECK:  %8:gpr64common = COPY $x0
#CHECK:  TBZX %8:gpr64common, 63, %bb.2
#CHECK:bb.1:
#CHECK:; predecessors: %bb.0
#CHECK:  successors: %bb.3(0x80000000); %bb.3(100.00%)
#CHECK:  %10:gpr64all = COPY $xzr
#CHECK:  %9:gpr64all = COPY %10:gpr64all
#CHECK:  B %bb.3
#CHECK:bb.2..preheader:
#CHECK:; predecessors: %bb.0
#CHECK:  successors: %bb.7(0x80000000); %bb.7(100.00%)
#CHECK:  %13:gpr64sp = ADDXri %8:gpr64common, 1, 0
#CHECK:  %0:gpr64all = COPY %13:gpr64sp
#CHECK:  %14:gpr64all = COPY $xzr
#CHECK:  %12:gpr64all = COPY %14:gpr64all
#CHECK:  %15:gpr64common = MOVaddr target-flags(aarch64-page) @A, target-flags(aarch64-pageoff, aarch64-nc) @A
#CHECK:  %11:gpr64all = COPY %15:gpr64common
#CHECK:  B %bb.7
#CHECK:bb.3 (%ir-block.4):
#CHECK:; predecessors: %bb.1, %bb.13
#CHECK:  %1:gpr64all = PHI %9:gpr64all, %bb.1, %59:gpr64all, %bb.13
#CHECK:  $x0 = COPY %1:gpr64all
#CHECK:  RET_ReallyLR implicit $x0
#CHECK:bb.7 (%ir-block.6):
#CHECK:; predecessors: %bb.2
#CHECK:  successors: %bb.8(0x40000000), %bb.11(0x40000000); %bb.8(50.00%), %bb.11(50.00%)
#CHECK:  %54:gpr64sp = COPY %0:gpr64all
#CHECK:  $xzr = SUBSXri %54:gpr64sp, 5, 0, implicit-def $nzcv
#CHECK:  Bcc 11, %bb.11, implicit $nzcv
#CHECK:bb.8 (%ir-block.6):
#CHECK:; predecessors: %bb.7
#CHECK:  successors: %bb.4(0x80000000); %bb.4(100.00%)
#CHECK:  %21:gpr64sp = COPY %11:gpr64all
#CHECK:  %22:gpr64 = COPY %12:gpr64all
#CHECK:  %23:gpr64sp = COPY %0:gpr64all
#CHECK:  %33:gpr64sp = COPY %21:gpr64sp
#CHECK:  %41:gpr64 = COPY %22:gpr64
#CHECK:  %49:gpr64sp = COPY %23:gpr64sp
#CHECK:  %32:fpr32 = LDURSi %33:gpr64sp, 0
#CHECK:  %36:gpr64sp = ADDXri %33:gpr64sp, 4, 0
#CHECK:  %46:gpr64all = COPY %36:gpr64sp
#CHECK:  %34:gpr64sp = COPY %46:gpr64all
#CHECK:  %25:fpr32 = LDURSi %34:gpr64sp, 0
#CHECK:  %24:gpr64sp = ADDXri %34:gpr64sp, 4, 0
#CHECK:  %29:gpr64all = COPY %24:gpr64sp
#CHECK:  %113:gpr64sp = COPY %29:gpr64all
#CHECK:bb.4 (%ir-block.6):
#CHECK:; predecessors: %bb.4, %bb.8
#CHECK:  successors: %bb.4(0x7c000000), %bb.9(0x04000000); %bb.4(96.88%), %bb.9(3.12%)
#CHECK:  %87:fpr32 = PHI %32:fpr32, %bb.8, %86:fpr32, %bb.4
#CHECK:  %99:fpr32 = PHI %25:fpr32, %bb.8, %98:fpr32, %bb.4
#CHECK:  %107:gpr64sp = PHI %113:gpr64sp, %bb.8, %106:gpr64sp, %bb.4
#CHECK:  %109:gpr64sp = PHI %49:gpr64sp, %bb.8, %108:gpr64sp, %bb.4
#CHECK:  %111:gpr64 = PHI %41:gpr64, %bb.8, %110:gpr64, %bb.4
#CHECK:  %74:gpr64 = FCVTZSUXSr killed %87:fpr32
#CHECK:  %75:fpr32 = LDURSi %107:gpr64sp, 0
#CHECK:  %76:gpr64sp = ADDXri %107:gpr64sp, 4, 0
#CHECK:  %77:gpr64 = SUBSXri %109:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK:  %78:gpr64 = nsw ADDXrr %111:gpr64, killed %74:gpr64
#CHECK:  %79:gpr64all = COPY %77:gpr64
#CHECK:  %80:gpr64all = COPY %78:gpr64
#CHECK:  %81:gpr64all = COPY %76:gpr64sp
#CHECK:  %82:gpr64sp = COPY %81:gpr64all
#CHECK:  %83:gpr64sp = COPY %79:gpr64all
#CHECK:  %84:gpr64 = COPY %80:gpr64all
#CHECK:  %85:gpr64 = FCVTZSUXSr killed %99:fpr32
#CHECK:  %86:fpr32 = LDURSi %82:gpr64sp, 0
#CHECK:  %88:gpr64sp = ADDXri %82:gpr64sp, 4, 0
#CHECK:  %89:gpr64 = SUBSXri %83:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK:  %90:gpr64 = nsw ADDXrr %84:gpr64, killed %85:gpr64
#CHECK:  %91:gpr64all = COPY %89:gpr64
#CHECK:  %92:gpr64all = COPY %90:gpr64
#CHECK:  %93:gpr64all = COPY %88:gpr64sp
#CHECK:  %94:gpr64sp = COPY %93:gpr64all
#CHECK:  %95:gpr64sp = COPY %91:gpr64all
#CHECK:  %96:gpr64 = COPY %92:gpr64all
#CHECK:  %97:gpr64 = FCVTZSUXSr killed %75:fpr32
#CHECK:  %98:fpr32 = LDURSi %94:gpr64sp, 0
#CHECK:  %100:gpr64sp = ADDXri %94:gpr64sp, 4, 0
#CHECK:  %101:gpr64 = SUBSXri %95:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK:  %102:gpr64 = nsw ADDXrr %96:gpr64, killed %97:gpr64
#CHECK:  %103:gpr64all = COPY %101:gpr64
#CHECK:  %104:gpr64all = COPY %102:gpr64
#CHECK:  %105:gpr64all = COPY %100:gpr64sp
#CHECK:  %106:gpr64sp = COPY %105:gpr64all
#CHECK:  %108:gpr64sp = COPY %103:gpr64all
#CHECK:  %110:gpr64 = COPY %104:gpr64all
#CHECK:  %112:gpr64sp = COPY %101:gpr64
#CHECK:  $xzr = SUBSXri %112:gpr64sp, 5, 0, implicit-def $nzcv
#CHECK:  Bcc 10, %bb.4, implicit $nzcv
#CHECK:bb.9 (%ir-block.6):
#CHECK:; predecessors: %bb.4
#CHECK:  successors: %bb.10(0x80000000); %bb.10(100.00%)
#CHECK:  %60:gpr64 = FCVTZSUXSr killed %86:fpr32
#CHECK:  %61:gpr64 = SUBSXri %108:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK:  %62:gpr64 = nsw ADDXrr %110:gpr64, killed %60:gpr64
#CHECK:  %63:gpr64all = COPY %61:gpr64
#CHECK:  %64:gpr64all = COPY %62:gpr64
#CHECK:  %65:gpr64sp = COPY %63:gpr64all
#CHECK:  %66:gpr64 = COPY %64:gpr64all
#CHECK:  %67:gpr64 = FCVTZSUXSr killed %98:fpr32
#CHECK:  %68:gpr64 = SUBSXri %65:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK:  %69:gpr64 = nsw ADDXrr %66:gpr64, killed %67:gpr64
#CHECK:  %70:gpr64all = COPY %68:gpr64
#CHECK:  %71:gpr64all = COPY %69:gpr64
#CHECK:  %72:gpr64sp = COPY %70:gpr64all
#CHECK:  %73:gpr64 = COPY %71:gpr64all
#CHECK:bb.10 (%ir-block.6):
#CHECK:; predecessors: %bb.9
#CHECK:  successors: %bb.11(0x40000000), %bb.13(0x40000000); %bb.11(50.00%), %bb.13(50.00%)
#CHECK:  $xzr = SUBSXri %72:gpr64sp, 0, 0, implicit-def $nzcv
#CHECK:  Bcc 0, %bb.13, implicit $nzcv
#CHECK:bb.11 (%ir-block.6):
#CHECK:; predecessors: %bb.10, %bb.7
#CHECK:  successors: %bb.12(0x80000000); %bb.12(100.00%)
#CHECK:  %56:gpr64sp = PHI %11:gpr64all, %bb.7, %106:gpr64sp, %bb.10
#CHECK:  %57:gpr64 = PHI %12:gpr64all, %bb.7, %73:gpr64, %bb.10
#CHECK:  %58:gpr64sp = PHI %0:gpr64all, %bb.7, %72:gpr64sp, %bb.10
#CHECK:bb.12 (%ir-block.6):
#CHECK:; predecessors: %bb.12, %bb.11
#CHECK:  successors: %bb.12(0x40000000), %bb.13(0x40000000); %bb.12(50.00%), %bb.13(50.00%)
#CHECK:  %2:gpr64sp = PHI %56:gpr64sp, %bb.11, %6:gpr64all, %bb.12
#CHECK:  %3:gpr64 = PHI %57:gpr64, %bb.11, %5:gpr64all, %bb.12
#CHECK:  %4:gpr64sp = PHI %58:gpr64sp, %bb.11, %7:gpr64all, %bb.12
#CHECK:  early-clobber %16:gpr64sp, %17:fpr32 = LDRSpost %2:gpr64sp(tied-def 0), 4
#CHECK:  %18:gpr64 = FCVTZSUXSr killed %17:fpr32
#CHECK:  %19:gpr64 = nsw ADDXrr %3:gpr64, killed %18:gpr64
#CHECK:  %5:gpr64all = COPY %19:gpr64
#CHECK:  %6:gpr64all = COPY %16:gpr64sp
#CHECK:  %20:gpr64 = SUBSXri %4:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK:  %7:gpr64all = COPY %20:gpr64
#CHECK:  Bcc 1, %bb.12, implicit $nzcv
#CHECK:  B %bb.13
#CHECK:bb.13 (%ir-block.6):
#CHECK:; predecessors: %bb.12, %bb.10
#CHECK:  successors: %bb.3(0x80000000); %bb.3(100.00%)

#CHECK:  %59:gpr64all = PHI %5:gpr64all, %bb.12, %71:gpr64all, %bb.10
#CHECK:  B %bb.3

--- |
  ; ModuleID = 'test3044.ll'
  source_filename = "test3044-01.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  @A = external dso_local local_unnamed_addr global [100 x float], align 4
  
  ; Function Attrs: norecurse nounwind readonly
  define dso_local i64 @test3044(i64 %0) local_unnamed_addr #0 {
    %2 = icmp slt i64 %0, 0
    br i1 %2, label %4, label %.preheader
  
  .preheader:                                       ; preds = %1
    %3 = add i64 %0, 1
    call void @llvm.set.loop.iterations.i64(i64 %3)
    br label %6
  
  4:                                                ; preds = %6, %1
    %5 = phi i64 [ 0, %1 ], [ %11, %6 ]
    ret i64 %5
  
  6:                                                ; preds = %6, %.preheader
    %lsr.iv1 = phi [100 x float]* [ @A, %.preheader ], [ %12, %6 ]
    %7 = phi i64 [ %11, %6 ], [ 0, %.preheader ]
    %8 = phi i64 [ %3, %.preheader ], [ %13, %6 ]
    %lsr.iv12 = bitcast [100 x float]* %lsr.iv1 to float*
    %9 = load float, float* %lsr.iv12, align 4, !tbaa !2
    %10 = fptosi float %9 to i64
    %11 = add nsw i64 %7, %10
    %scevgep = getelementptr [100 x float], [100 x float]* %lsr.iv1, i64 0, i64 1
    %12 = bitcast float* %scevgep to [100 x float]*
    %13 = call i64 @llvm.loop.decrement.reg.i64(i64 %8, i64 1)
    %14 = icmp ne i64 %13, 0
    br i1 %14, label %6, label %4, !llvm.loop !6
  }
  
  ; Function Attrs: noduplicate nounwind
  declare void @llvm.set.loop.iterations.i64(i64) #1
  
  ; Function Attrs: noduplicate nounwind
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #1
  
  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**) #2
  
  attributes #0 = { norecurse nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="non-leaf" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" "use-soft-float"="false" }
  attributes #1 = { noduplicate nounwind }
  attributes #2 = { nounwind }
  
  !llvm.module.flags = !{!0}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !2 = !{!3, !3, i64 0}
  !3 = !{!"float", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}
  !6 = distinct !{!6, !7}
  !7 = !{!"llvm.loop.unroll.disable"}

...
---
name:            test3044
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: gpr64all, preferred-register: '' }
  - { id: 1, class: gpr64all, preferred-register: '' }
  - { id: 2, class: gpr64sp, preferred-register: '' }
  - { id: 3, class: gpr64, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: gpr64all, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr64all, preferred-register: '' }
  - { id: 8, class: gpr64common, preferred-register: '' }
  - { id: 9, class: gpr64all, preferred-register: '' }
  - { id: 10, class: gpr64all, preferred-register: '' }
  - { id: 11, class: gpr64all, preferred-register: '' }
  - { id: 12, class: gpr64all, preferred-register: '' }
  - { id: 13, class: gpr64sp, preferred-register: '' }
  - { id: 14, class: gpr64all, preferred-register: '' }
  - { id: 15, class: gpr64common, preferred-register: '' }
  - { id: 16, class: gpr64sp, preferred-register: '' }
  - { id: 17, class: fpr32, preferred-register: '' }
  - { id: 18, class: gpr64, preferred-register: '' }
  - { id: 19, class: gpr64, preferred-register: '' }
  - { id: 20, class: gpr64, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%8' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.1):
    successors: %bb.4(0x30000000), %bb.1(0x50000000)
    liveins: $x0
  
    %8:gpr64common = COPY $x0
    TBZX %8, 63, %bb.1
  
  bb.4:
    successors: %bb.2(0x80000000)
  
    %10:gpr64all = COPY $xzr
    %9:gpr64all = COPY %10
    B %bb.2
  
  bb.1..preheader:
    successors: %bb.3(0x80000000)
  
    %13:gpr64sp = ADDXri %8, 1, 0
    %0:gpr64all = COPY %13
    %14:gpr64all = COPY $xzr
    %12:gpr64all = COPY %14
    %15:gpr64common = MOVaddr target-flags(aarch64-page) @A, target-flags(aarch64-pageoff, aarch64-nc) @A
    %11:gpr64all = COPY %15
    B %bb.3
  
  bb.2 (%ir-block.4):
    %1:gpr64all = PHI %9, %bb.4, %5, %bb.3
    $x0 = COPY %1
    RET_ReallyLR implicit $x0
  
  bb.3 (%ir-block.6):
    successors: %bb.3(0x7c000000), %bb.2(0x04000000)
  
    %2:gpr64sp = PHI %11, %bb.1, %6, %bb.3
    %3:gpr64 = PHI %12, %bb.1, %5, %bb.3
    %4:gpr64sp = PHI %0, %bb.1, %7, %bb.3
    early-clobber %16:gpr64sp, %17:fpr32 = LDRSpost %2, 4
    %18:gpr64 = FCVTZSUXSr killed %17
    %19:gpr64 = nsw ADDXrr %3, killed %18
    %5:gpr64all = COPY %19
    %6:gpr64all = COPY %16
    %20:gpr64 = SUBSXri %4, 1, 0, implicit-def $nzcv
    %7:gpr64all = COPY %20
    Bcc 1, %bb.3, implicit $nzcv
    B %bb.2

...
