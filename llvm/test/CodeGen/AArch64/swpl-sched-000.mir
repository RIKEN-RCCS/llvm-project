# RUN: llc -mcpu=a64fx -O3 -ffj-swp -start-before=aarch64-swpipeliner -o /dev/null -swpl-debug %s 2>&1 | FileCheck %s
# CHECK: DBG(SwplDdg::analysisRegsFlowDependence):
# CHECK:  former_inst:%41:gpr64common = COPY %46:gpr64all
# CHECK:  latter_inst:%43:zpr = LD1W %18:ppr_3b, %17:gpr64common, %41:gpr64common :: (load unknown-size from %ir.uglygep, align 64, !tbaa !6)
# CHECK:  use reg:%41
# CHECK:  distance:1
# CHECK:  delay:1
# CHECK: DBG(SwplDdg::analysisRegsFlowDependence):
# CHECK:  former_inst:%43:zpr = LD1W %18:ppr_3b, %17:gpr64common, %41:gpr64common :: (load unknown-size from %ir.uglygep, align 64, !tbaa !6)
# CHECK:  latter_inst:%44:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_UNDEF_S %18:ppr_3b, killed %43:zpr, 1
# CHECK:  use reg:%43
# CHECK:  distance:0
# CHECK:  delay:11
# CHECK: DBG(SwplDdg::analysisRegsFlowDependence):
# CHECK:  former_inst:%44:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_UNDEF_S %18:ppr_3b, killed %43:zpr, 1
# CHECK:  latter_inst:ST1W killed %44:zpr, %18:ppr_3b, %22:gpr64common, %41:gpr64common :: (store unknown-size into %ir.uglygep23, align 64, !tbaa !6)
# CHECK:  use reg:%44
# CHECK:  distance:0
# CHECK:  delay:9
# CHECK: DBG(SwplDdg::analysisRegsFlowDependence):
# CHECK:  former_inst:%41:gpr64common = COPY %46:gpr64all
# CHECK:  latter_inst:ST1W killed %44:zpr, %18:ppr_3b, %22:gpr64common, %41:gpr64common :: (store unknown-size into %ir.uglygep23, align 64, !tbaa !6)
# CHECK:  use reg:%41
# CHECK:  distance:1
# CHECK:  delay:1
# CHECK: DBG(SwplDdg::analysisRegsFlowDependence):
# CHECK:  former_inst:%41:gpr64common = COPY %46:gpr64all
# CHECK:  latter_inst:%45:gpr64sp = nuw ADDXri %41:gpr64common, 16, 0
# CHECK:  use reg:%41
# CHECK:  distance:1
# CHECK:  delay:1
# CHECK: DBG(SwplDdg::analysisRegsFlowDependence):
# CHECK:  former_inst:%45:gpr64sp = nuw ADDXri %41:gpr64common, 16, 0
# CHECK:  latter_inst:%46:gpr64all = COPY %45:gpr64sp
# CHECK:  use reg:%45
# CHECK:  distance:0
# CHECK:  delay:1
# CHECK: DBG(SwplDdg::analysisRegsFlowDependence):
# CHECK:  former_inst:%42:gpr64sp = COPY %48:gpr64all
# CHECK:  latter_inst:%47:gpr64 = SUBSXri %42:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK:  use reg:%42
# CHECK:  distance:1
# CHECK:  delay:1
# CHECK: DBG(SwplDdg::analysisRegsFlowDependence):
# CHECK:  former_inst:%47:gpr64 = SUBSXri %42:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK:  latter_inst:%48:gpr64all = COPY %47:gpr64
# CHECK:  use reg:%47
# CHECK:  distance:0
# CHECK:  delay:1
# CHECK: DBG(SwplDdg::analysisRegsFlowDependence):
# CHECK:  former_inst:%46:gpr64all = COPY %45:gpr64sp
# CHECK:  latter_inst:%41:gpr64common = COPY %46:gpr64all
# CHECK:  use reg:%46
# CHECK:  distance:0
# CHECK:  delay:1
# CHECK: DBG(SwplDdg::analysisRegsFlowDependence):
# CHECK:  former_inst:%48:gpr64all = COPY %47:gpr64
# CHECK:  latter_inst:%42:gpr64sp = COPY %48:gpr64all
# CHECK:  use reg:%48
# CHECK:  distance:0
# CHECK:  delay:1
# CHECK:  aliasAnalysis is NoAlias
# CHECK: DBG(SwplDdg::analysisMemDependence):anti
# CHECK:   former_inst:%43:zpr = LD1W %18:ppr_3b, %17:gpr64common, %41:gpr64common :: (load unknown-size from %ir.uglygep, align 64, !tbaa !6)
# CHECK:   latter_inst:ST1W killed %44:zpr, %18:ppr_3b, %22:gpr64common, %41:gpr64common :: (store unknown-size into %ir.uglygep23, align 64, !tbaa !6)
# CHECK:   distance:20
# CHECK:   delay:1
# CHECK:   aliasAnalysis is NoAlias
# CHECK: DBG(SwplDdg::analysisMemDependence):flow
# CHECK:   former_inst:ST1W killed %44:zpr, %18:ppr_3b, %22:gpr64common, %41:gpr64common :: (store unknown-size into %ir.uglygep23, align 64, !tbaa !6)
# CHECK:   latter_inst:%43:zpr = LD1W %18:ppr_3b, %17:gpr64common, %41:gpr64common :: (load unknown-size from %ir.uglygep, align 64, !tbaa !6)
# CHECK:   distance:20
# CHECK:   delay:6
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %43:zpr = LD1W %18:ppr_3b, %17:gpr64common, %41:gpr64common :: (load unknown-size from %ir.uglygep, align 64, !tbaa !6)
# CHECK:   ResourceID: SIMDFP_SVE_LD+1
# CHECK:   stage/resource(): 0/EAGA, 0/LSU1
# CHECK:   stage/resource(): 0/EAGB, 0/LSU1
# CHECK:   stage/resource(): 0/EAGA, 0/LSU2
# CHECK:   stage/resource(): 0/EAGB, 0/LSU2
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %44:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_UNDEF_S %18:ppr_3b, killed %43:zpr, 1
# CHECK:   ResourceID: SIMDFP_SVE_OP+3
# CHECK:   stage/resource(): 0/FLA
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: ST1W killed %44:zpr, %18:ppr_3b, %22:gpr64common, %41:gpr64common :: (store unknown-size into %ir.uglygep23, align 64, !tbaa !6)
# CHECK:   ResourceID: SIMDFP_SVE_ST+1
# CHECK:   stage/resource(): 0/EAGA, 0/FLA, 0/LSU1, 0/LSU2
# CHECK:   stage/resource(): 0/EAGB, 0/FLA, 0/LSU1, 0/LSU2
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %45:gpr64sp = nuw ADDXri %41:gpr64common, 16, 0
# CHECK:   ResourceID: INT_OP+1
# CHECK:   stage/resource(): 0/EXA
# CHECK:   stage/resource(): 0/EXB
# CHECK:   stage/resource(): 0/EAGA
# CHECK:   stage/resource(): 0/EAGB
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %46:gpr64all = COPY %45:gpr64sp
# CHECK:   ResourceID: INT_OP+1
# CHECK:   stage/resource(): 0/EXA
# CHECK:   stage/resource(): 0/EXB
# CHECK:   stage/resource(): 0/EAGA
# CHECK:   stage/resource(): 0/EAGB
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %47:gpr64 = SUBSXri %42:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK:   ResourceID: INT_OP+1
# CHECK:   stage/resource(): 0/EXA
# CHECK:   stage/resource(): 0/EXB
# CHECK:   stage/resource(): 0/EAGA
# CHECK:   stage/resource(): 0/EAGB
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %48:gpr64all = COPY %47:gpr64
# CHECK:   ResourceID: INT_OP+1
# CHECK:   stage/resource(): 0/EXA
# CHECK:   stage/resource(): 0/EXB
# CHECK:   stage/resource(): 0/EAGA
# CHECK:   stage/resource(): 0/EAGB
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %41:gpr64common = COPY %46:gpr64all
# CHECK:   ResourceID: INT_OP+1
# CHECK:   stage/resource(): 0/EXA
# CHECK:   stage/resource(): 0/EXB
# CHECK:   stage/resource(): 0/EAGA
# CHECK:   stage/resource(): 0/EAGB
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %42:gpr64sp = COPY %48:gpr64all
# CHECK:   ResourceID: INT_OP+1
# CHECK:   stage/resource(): 0/EXA
# CHECK:   stage/resource(): 0/EXB
# CHECK:   stage/resource(): 0/EAGA
# CHECK:   stage/resource(): 0/EAGB
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %43:zpr = LD1W %18:ppr_3b, %17:gpr64common, %41:gpr64common :: (load unknown-size from %ir.uglygep, align 64, !tbaa !6)
# CHECK:   ResourceID: SIMDFP_SVE_LD+1
# CHECK:   stage/resource(): 0/EAGA, 0/LSU1
# CHECK:   stage/resource(): 0/EAGB, 0/LSU1
# CHECK:   stage/resource(): 0/EAGA, 0/LSU2
# CHECK:   stage/resource(): 0/EAGB, 0/LSU2
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %44:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_UNDEF_S %18:ppr_3b, killed %43:zpr, 1
# CHECK:   ResourceID: SIMDFP_SVE_OP+3
# CHECK:   stage/resource(): 0/FLA
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %43:zpr = LD1W %18:ppr_3b, %17:gpr64common, %41:gpr64common :: (load unknown-size from %ir.uglygep, align 64, !tbaa !6)
# CHECK:   ResourceID: SIMDFP_SVE_LD+1
# CHECK:   stage/resource(): 0/EAGA, 0/LSU1
# CHECK:   stage/resource(): 0/EAGB, 0/LSU1
# CHECK:   stage/resource(): 0/EAGA, 0/LSU2
# CHECK:   stage/resource(): 0/EAGB, 0/LSU2
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: ST1W killed %44:zpr, %18:ppr_3b, %22:gpr64common, %41:gpr64common :: (store unknown-size into %ir.uglygep23, align 64, !tbaa !6)
# CHECK:   ResourceID: SIMDFP_SVE_ST+1
# CHECK:   stage/resource(): 0/EAGA, 0/FLA, 0/LSU1, 0/LSU2
# CHECK:   stage/resource(): 0/EAGB, 0/FLA, 0/LSU1, 0/LSU2
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: ST1W killed %44:zpr, %18:ppr_3b, %22:gpr64common, %41:gpr64common :: (store unknown-size into %ir.uglygep23, align 64, !tbaa !6)
# CHECK:   ResourceID: SIMDFP_SVE_ST+1
# CHECK:   stage/resource(): 0/EAGA, 0/FLA, 0/LSU1, 0/LSU2
# CHECK:   stage/resource(): 0/EAGB, 0/FLA, 0/LSU1, 0/LSU2
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %44:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_UNDEF_S %18:ppr_3b, killed %43:zpr, 1
# CHECK:   ResourceID: SIMDFP_SVE_OP+3
# CHECK:   stage/resource(): 0/FLA
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %44:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_UNDEF_S %18:ppr_3b, killed %43:zpr, 1
# CHECK:   ResourceID: SIMDFP_SVE_OP+3
# CHECK:   stage/resource(): 0/FLA
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %43:zpr = LD1W %18:ppr_3b, %17:gpr64common, %41:gpr64common :: (load unknown-size from %ir.uglygep, align 64, !tbaa !6)
# CHECK:   ResourceID: SIMDFP_SVE_LD+1
# CHECK:   stage/resource(): 0/EAGA, 0/LSU1
# CHECK:   stage/resource(): 0/EAGB, 0/LSU1
# CHECK:   stage/resource(): 0/EAGA, 0/LSU2
# CHECK:   stage/resource(): 0/EAGB, 0/LSU2
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %43:zpr = LD1W %18:ppr_3b, %17:gpr64common, %41:gpr64common :: (load unknown-size from %ir.uglygep, align 64, !tbaa !6)
# CHECK:   ResourceID: SIMDFP_SVE_LD+1
# CHECK:   stage/resource(): 0/EAGA, 0/LSU1
# CHECK:   stage/resource(): 0/EAGB, 0/LSU1
# CHECK:   stage/resource(): 0/EAGA, 0/LSU2
# CHECK:   stage/resource(): 0/EAGB, 0/LSU2
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %45:gpr64sp = nuw ADDXri %41:gpr64common, 16, 0
# CHECK:   ResourceID: INT_OP+1
# CHECK:   stage/resource(): 0/EXA
# CHECK:   stage/resource(): 0/EXB
# CHECK:   stage/resource(): 0/EAGA
# CHECK:   stage/resource(): 0/EAGB
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %46:gpr64all = COPY %45:gpr64sp
# CHECK:   ResourceID: INT_OP+1
# CHECK:   stage/resource(): 0/EXA
# CHECK:   stage/resource(): 0/EXB
# CHECK:   stage/resource(): 0/EAGA
# CHECK:   stage/resource(): 0/EAGB
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %45:gpr64sp = nuw ADDXri %41:gpr64common, 16, 0
# CHECK:   ResourceID: INT_OP+1
# CHECK:   stage/resource(): 0/EXA
# CHECK:   stage/resource(): 0/EXB
# CHECK:   stage/resource(): 0/EAGA
# CHECK:   stage/resource(): 0/EAGB
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %47:gpr64 = SUBSXri %42:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK:   ResourceID: INT_OP+1
# CHECK:   stage/resource(): 0/EXA
# CHECK:   stage/resource(): 0/EXB
# CHECK:   stage/resource(): 0/EAGA
# CHECK:   stage/resource(): 0/EAGB
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %48:gpr64all = COPY %47:gpr64
# CHECK:   ResourceID: INT_OP+1
# CHECK:   stage/resource(): 0/EXA
# CHECK:   stage/resource(): 0/EXB
# CHECK:   stage/resource(): 0/EAGA
# CHECK:   stage/resource(): 0/EAGB
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %47:gpr64 = SUBSXri %42:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK:   ResourceID: INT_OP+1
# CHECK:   stage/resource(): 0/EXA
# CHECK:   stage/resource(): 0/EXB
# CHECK:   stage/resource(): 0/EAGA
# CHECK:   stage/resource(): 0/EAGB
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %41:gpr64common = COPY %46:gpr64all
# CHECK:   ResourceID: INT_OP+1
# CHECK:   stage/resource(): 0/EXA
# CHECK:   stage/resource(): 0/EXB
# CHECK:   stage/resource(): 0/EAGA
# CHECK:   stage/resource(): 0/EAGB
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %46:gpr64all = COPY %45:gpr64sp
# CHECK:   ResourceID: INT_OP+1
# CHECK:   stage/resource(): 0/EXA
# CHECK:   stage/resource(): 0/EXB
# CHECK:   stage/resource(): 0/EAGA
# CHECK:   stage/resource(): 0/EAGB
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %45:gpr64sp = nuw ADDXri %41:gpr64common, 16, 0
# CHECK:   ResourceID: INT_OP+1
# CHECK:   stage/resource(): 0/EXA
# CHECK:   stage/resource(): 0/EXB
# CHECK:   stage/resource(): 0/EAGA
# CHECK:   stage/resource(): 0/EAGB
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %42:gpr64sp = COPY %48:gpr64all
# CHECK:   ResourceID: INT_OP+1
# CHECK:   stage/resource(): 0/EXA
# CHECK:   stage/resource(): 0/EXB
# CHECK:   stage/resource(): 0/EAGA
# CHECK:   stage/resource(): 0/EAGB
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %48:gpr64all = COPY %47:gpr64
# CHECK:   ResourceID: INT_OP+1
# CHECK:   stage/resource(): 0/EXA
# CHECK:   stage/resource(): 0/EXB
# CHECK:   stage/resource(): 0/EAGA
# CHECK:   stage/resource(): 0/EAGB
# CHECK: DBG(AArch64SwplTargetMachine::getPipelines): MI: %47:gpr64 = SUBSXri %42:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK:   ResourceID: INT_OP+1
# CHECK:   stage/resource(): 0/EXA
# CHECK:   stage/resource(): 0/EXB
# CHECK:   stage/resource(): 0/EAGA
# CHECK:   stage/resource(): 0/EAGB
--- |
  ; ModuleID = './s000.c'
  source_filename = "./s000.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  %struct.args_t = type { %struct.timeval, %struct.timeval, ptr }
  %struct.timeval = type { i64, i64 }
  
  @__func__.s127 = private unnamed_addr constant [5 x i8] c"s127\00", align 1
  @b = dso_local global [32000 x float] zeroinitializer, align 64
  @a = dso_local global [32000 x float] zeroinitializer, align 64
  @c = dso_local global [32000 x float] zeroinitializer, align 64
  @d = dso_local global [32000 x float] zeroinitializer, align 64
  @e = dso_local global [32000 x float] zeroinitializer, align 64
  @aa = dso_local global [256 x [256 x float]] zeroinitializer, align 64
  @bb = dso_local global [256 x [256 x float]] zeroinitializer, align 64
  @cc = dso_local global [256 x [256 x float]] zeroinitializer, align 64
  @flat_2d_array = dso_local local_unnamed_addr global [65536 x float] zeroinitializer, align 64
  @x = dso_local local_unnamed_addr global [32000 x float] zeroinitializer, align 64
  @tt = dso_local local_unnamed_addr global [256 x [256 x float]] zeroinitializer, align 64
  @indx = dso_local local_unnamed_addr global [32000 x i32] zeroinitializer, align 64
  @xx = dso_local local_unnamed_addr global ptr null, align 8
  @yy = dso_local local_unnamed_addr global ptr null, align 8
  
  ; Function Attrs: nounwind uwtable vscale_range(4,4)
  define dso_local float @s127(ptr nocapture noundef %func_args) local_unnamed_addr #0 {
  entry:
    %call = tail call i32 @initialise_arrays(ptr noundef nonnull @__func__.s127) #4
    %call1 = tail call i32 @gettimeofday(ptr noundef %func_args, ptr noundef null) #4
    br label %vector.ph
  
  vector.ph:                                        ; preds = %for.cond.cleanup4, %entry
    %nl.020 = phi i32 [ 0, %entry ], [ %inc10, %for.cond.cleanup4 ]
    %0 = call i64 @llvm.start.loop.iterations.i64(i64 2000)
    br label %vector.body
  
  vector.body:                                      ; preds = %vector.body, %vector.ph
    %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
    %1 = phi i64 [ %0, %vector.ph ], [ %5, %vector.body ]
    %2 = shl nuw nsw i64 %index, 2
    %uglygep = getelementptr i8, ptr @b, i64 %2
    %wide.load = load <vscale x 4 x float>, ptr %uglygep, align 64, !tbaa !6
    %3 = fadd fast <vscale x 4 x float> %wide.load, shufflevector (<vscale x 4 x float> insertelement (<vscale x 4 x float> poison, float 1.000000e+00, i32 0), <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer)
    %4 = shl nuw nsw i64 %index, 2
    %uglygep23 = getelementptr i8, ptr @a, i64 %4
    store <vscale x 4 x float> %3, ptr %uglygep23, align 64, !tbaa !6
    %index.next = add nuw i64 %index, 16
    %5 = call i64 @llvm.loop.decrement.reg.i64(i64 %1, i64 1)
    %6 = icmp ne i64 %5, 0
    br i1 %6, label %vector.body, label %for.cond.cleanup4, !llvm.loop !10
  
  for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
    %t2 = getelementptr inbounds %struct.args_t, ptr %func_args, i64 0, i32 1
    %call12 = tail call i32 @gettimeofday(ptr noundef nonnull %t2, ptr noundef null) #4
    %call13 = tail call fast float @calc_checksum(ptr noundef nonnull @__func__.s127) #4
    ret float %call13
  
  for.cond.cleanup4:                                ; preds = %vector.body
    %call8 = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, float noundef 0.000000e+00) #4
    %inc10 = add nuw nsw i32 %nl.020, 1
    %exitcond22.not = icmp eq i32 %inc10, 20
    br i1 %exitcond22.not, label %for.cond.cleanup, label %vector.ph, !llvm.loop !14
  }
  
  declare i32 @initialise_arrays(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nofree nounwind
  declare noundef i32 @gettimeofday(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #2
  
  declare i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, float noundef) local_unnamed_addr #1
  
  declare float @calc_checksum(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #3
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #3
  
  attributes #0 = { nounwind uwtable vscale_range(4,4) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #1 = { "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #2 = { nofree nounwind "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #3 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #4 = { nounwind }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 7, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !5 = !{!"clang version 15.0.4 ()"}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"float", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C/C++ TBAA"}
  !10 = distinct !{!10, !11, !12, !13}
  !11 = !{!"llvm.loop.mustprogress"}
  !12 = !{!"llvm.loop.unroll.disable"}
  !13 = !{!"llvm.loop.isvectorized", i32 1}
  !14 = distinct !{!14, !11, !12}

...
---
name:            s127
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32sp, preferred-register: '' }
  - { id: 1, class: gpr64all, preferred-register: '' }
  - { id: 2, class: gpr64common, preferred-register: '' }
  - { id: 3, class: gpr64sp, preferred-register: '' }
  - { id: 4, class: gpr64all, preferred-register: '' }
  - { id: 5, class: gpr64all, preferred-register: '' }
  - { id: 6, class: gpr32all, preferred-register: '' }
  - { id: 7, class: gpr64common, preferred-register: '' }
  - { id: 8, class: gpr32all, preferred-register: '' }
  - { id: 9, class: gpr64common, preferred-register: '' }
  - { id: 10, class: gpr32all, preferred-register: '' }
  - { id: 11, class: gpr64all, preferred-register: '' }
  - { id: 12, class: gpr32all, preferred-register: '' }
  - { id: 13, class: gpr32all, preferred-register: '' }
  - { id: 14, class: gpr64all, preferred-register: '' }
  - { id: 15, class: gpr64all, preferred-register: '' }
  - { id: 16, class: gpr32, preferred-register: '' }
  - { id: 17, class: gpr64common, preferred-register: '' }
  - { id: 18, class: ppr_3b, preferred-register: '' }
  - { id: 19, class: zpr, preferred-register: '' }
  - { id: 20, class: ppr_3b, preferred-register: '' }
  - { id: 21, class: zpr, preferred-register: '' }
  - { id: 22, class: gpr64common, preferred-register: '' }
  - { id: 23, class: gpr64sp, preferred-register: '' }
  - { id: 24, class: gpr64, preferred-register: '' }
  - { id: 25, class: gpr64common, preferred-register: '' }
  - { id: 26, class: gpr64common, preferred-register: '' }
  - { id: 27, class: gpr64common, preferred-register: '' }
  - { id: 28, class: gpr64common, preferred-register: '' }
  - { id: 29, class: gpr64common, preferred-register: '' }
  - { id: 30, class: gpr64common, preferred-register: '' }
  - { id: 31, class: gpr64common, preferred-register: '' }
  - { id: 32, class: gpr64common, preferred-register: '' }
  - { id: 33, class: fpr32, preferred-register: '' }
  - { id: 34, class: gpr32all, preferred-register: '' }
  - { id: 35, class: gpr32sp, preferred-register: '' }
  - { id: 36, class: gpr32, preferred-register: '' }
  - { id: 37, class: gpr64sp, preferred-register: '' }
  - { id: 38, class: gpr64all, preferred-register: '' }
  - { id: 39, class: gpr32all, preferred-register: '' }
  - { id: 40, class: gpr64common, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%7' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     true
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $x0
  
    %7:gpr64common = COPY $x0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %9:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s127, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s127
    $x0 = COPY %9
    BL @initialise_arrays, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %11:gpr64all = COPY $xzr
    $x0 = COPY %7
    $x1 = COPY %11
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %13:gpr32all = COPY $wzr
    %8:gpr32all = COPY %13
    %16:gpr32 = MOVi32imm 2000
    %17:gpr64common = MOVaddr target-flags(aarch64-page) @b, target-flags(aarch64-pageoff, aarch64-nc) @b
    %18:ppr_3b = PTRUE_S 31
    %22:gpr64common = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a
    %27:gpr64common = MOVaddr target-flags(aarch64-page) @c, target-flags(aarch64-pageoff, aarch64-nc) @c
    %28:gpr64common = MOVaddr target-flags(aarch64-page) @d, target-flags(aarch64-pageoff, aarch64-nc) @d
    %29:gpr64common = MOVaddr target-flags(aarch64-page) @e, target-flags(aarch64-pageoff, aarch64-nc) @e
    %30:gpr64common = MOVaddr target-flags(aarch64-page) @aa, target-flags(aarch64-pageoff, aarch64-nc) @aa
    %31:gpr64common = MOVaddr target-flags(aarch64-page) @bb, target-flags(aarch64-pageoff, aarch64-nc) @bb
    %32:gpr64common = MOVaddr target-flags(aarch64-page) @cc, target-flags(aarch64-pageoff, aarch64-nc) @cc
    %33:fpr32 = FMOVS0
  
  bb.1.vector.ph:
    successors: %bb.2(0x80000000)
  
    %0:gpr32sp = PHI %8, %bb.0, %6, %bb.4
    %15:gpr64all = COPY $xzr
    %14:gpr64all = COPY %15
    %1:gpr64all = SUBREG_TO_REG 0, %16, %subreg.sub_32
  
  bb.2.vector.body:
    successors: %bb.2(0x7c000000), %bb.4(0x04000000)
  
    %2:gpr64common = PHI %14, %bb.1, %4, %bb.2
    %3:gpr64sp = PHI %1, %bb.1, %5, %bb.2
    %19:zpr = LD1W %18, %17, %2 :: (load unknown-size from %ir.uglygep, align 64, !tbaa !6)
    %21:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_UNDEF_S %18, killed %19, 1
    ST1W killed %21, %18, %22, %2 :: (store unknown-size into %ir.uglygep23, align 64, !tbaa !6)
    %23:gpr64sp = nuw ADDXri %2, 16, 0
    %4:gpr64all = COPY %23
    %24:gpr64 = SUBSXri %3, 1, 0, implicit-def $nzcv
    %5:gpr64all = COPY %24
    Bcc 1, %bb.2, implicit $nzcv
    B %bb.4
  
  bb.3.for.cond.cleanup:
    %37:gpr64sp = nuw ADDXri %7, 16, 0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %38:gpr64all = COPY $xzr
    $x0 = COPY %37
    $x1 = COPY %38
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %40:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s127, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s127
    $x0 = COPY %40
    TCRETURNdi @calc_checksum, 0, csr_aarch64_aapcs, implicit $sp, implicit $x0
  
  bb.4.for.cond.cleanup4:
    successors: %bb.3(0x04000000), %bb.1(0x7c000000)
  
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    $x0 = COPY %22
    $x1 = COPY %17
    $x2 = COPY %27
    $x3 = COPY %28
    $x4 = COPY %29
    $x5 = COPY %30
    $x6 = COPY %31
    $x7 = COPY %32
    $s0 = COPY %33
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $s0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %35:gpr32sp = nuw nsw ADDWri %0, 1, 0
    %6:gpr32all = COPY %35
    dead $wzr = SUBSWri %35, 20, 0, implicit-def $nzcv
    Bcc 0, %bb.3, implicit $nzcv
    B %bb.1

...
