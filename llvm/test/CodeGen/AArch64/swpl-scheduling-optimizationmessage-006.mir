#RUN: llc %s -mcpu=a64fx -ffj-swp -O1  -start-before=aarch64-swpipeliner -swpl-max-ireg=3  -pass-remarks-missed=aarch64-swpipeliner -pass-remarks-analysis=aarch64-swpipeliner -o /dev/null 2>&1 | FileCheck %s


#CHECK:remark: tp/testprg.c:2:3: Trial at iteration-interval=10. This loop cannot be software pipelined because of shortage of integer registers.
#CHECK:remark: tp/testprg.c:2:3: Trial at iteration-interval=15. This loop cannot be software pipelined because of shortage of integer registers.
#CHECK:remark: tp/testprg.c:2:3: Trial at iteration-interval=20. This loop cannot be software pipelined because of shortage of integer registers.
#CHECK:remark: tp/testprg.c:2:3: Trial at iteration-interval=25. This loop cannot be software pipelined because of shortage of integer registers.
#CHECK:remark: tp/testprg.c:2:3: Trial at iteration-interval=30. This loop cannot be software pipelined because of shortage of integer registers.
#CHECK:remark: tp/testprg.c:2:3: Trial at iteration-interval=35. This loop cannot be software pipelined because of shortage of integer registers.
#CHECK:remark: tp/testprg.c:2:3: Trial at iteration-interval=40. This loop cannot be software pipelined because of shortage of integer registers.
#CHECK:remark: tp/testprg.c:2:3: Trial at iteration-interval=45. This loop cannot be software pipelined because of shortage of integer registers.
#CHECK:remark: tp/testprg.c:2:3: Trial at iteration-interval=50. This loop cannot be software pipelined because of shortage of integer registers.
#CHECK:remark: tp/testprg.c:2:3: Trial at iteration-interval=55. This loop cannot be software pipelined because of shortage of integer registers.
#CHECK:remark: tp/testprg.c:2:3: Trial at iteration-interval=60. This loop cannot be software pipelined because of shortage of integer registers.
#CHECK:remark: tp/testprg.c:2:3: Trial at iteration-interval=65. This loop cannot be software pipelined because of shortage of integer registers.
#CHECK:remark: tp/testprg.c:2:3: Trial at iteration-interval=70. This loop cannot be software pipelined because of shortage of integer registers.
#CHECK:remark: tp/testprg.c:2:3: Trial at iteration-interval=75. This loop cannot be software pipelined because of shortage of integer registers.
#CHECK:remark: tp/testprg.c:2:3: Trial at iteration-interval=80. This loop cannot be software pipelined because of shortage of integer registers.
#CHECK:remark: tp/testprg.c:2:3: Trial at iteration-interval=85. This loop cannot be software pipelined because of shortage of integer registers.
#CHECK:remark: tp/testprg.c:2:3: Trial at iteration-interval=90. This loop cannot be software pipelined because of shortage of integer registers.
#CHECK:remark: tp/testprg.c:2:3: Trial at iteration-interval=94. This loop cannot be software pipelined because of shortage of integer registers.
#CHECK:remark: tp/testprg.c:2:3: This loop is not software pipelined because no schedule is obtained.

--- |
  ; ModuleID = '/TEST/tp/testprg.c'
  source_filename = "/TEST/tp/testprg.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  ; Function Attrs: nofree norecurse nounwind
  define dso_local void @foo(i32* nocapture %0, i32* nocapture readonly %1, i32* nocapture readonly %2, i32 %3) local_unnamed_addr #0 !dbg !7 {
    %5 = add i32 %3, 1, !dbg !10
    %6 = zext i32 %5 to i64, !dbg !11
    call void @llvm.set.loop.iterations.i64(i64 %6), !dbg !10
    br label %8, !dbg !10
  
  7:                                                ; preds = %8
    ret void, !dbg !12
  
  8:                                                ; preds = %8, %4
    %9 = phi i32* [ %18, %8 ], [ %1, %4 ]
    %10 = phi i32* [ %17, %8 ], [ %2, %4 ]
    %11 = phi i32* [ %16, %8 ], [ %0, %4 ]
    %12 = phi i64 [ %6, %4 ], [ %19, %8 ], !dbg !13
    %13 = load i32, i32* %9, align 4, !dbg !13, !tbaa !14
    %14 = load i32, i32* %10, align 4, !dbg !18, !tbaa !14
    %15 = add nsw i32 %14, %13, !dbg !19
    store i32 %15, i32* %11, align 4, !dbg !20, !tbaa !14
    %16 = getelementptr i32, i32* %11, i64 1, !dbg !11
    %17 = getelementptr i32, i32* %10, i64 1, !dbg !11
    %18 = getelementptr i32, i32* %9, i64 1, !dbg !11
    %19 = call i64 @llvm.loop.decrement.reg.i64(i64 %12, i64 1), !dbg !10
    %20 = icmp ne i64 %19, 0, !dbg !10
    br i1 %20, label %8, label %7, !dbg !10, !llvm.loop !21
  }
  
  ; Function Attrs: noduplicate nounwind
  declare void @llvm.set.loop.iterations.i64(i64) #1
  
  ; Function Attrs: noduplicate nounwind
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #1
  
  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**) #2
  
  attributes #0 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="non-leaf" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { noduplicate nounwind }
  attributes #2 = { nounwind }
  
  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!3, !4, !5}
  !llvm.ident = !{!6}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 11.0.0 ", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly, enums: !2, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "/TEST/tp/testprg.c", directory: "/TEST")
  !2 = !{}
  !3 = !{i32 7, !"Dwarf Version", i32 4}
  !4 = !{i32 2, !"Debug Info Version", i32 3}
  !5 = !{i32 1, !"wchar_size", i32 4}
  !6 = !{!"clang version 11.0.0 "}
  !7 = distinct !DISubprogram(name: "foo", scope: !8, file: !8, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2)
  !8 = !DIFile(filename: "tp/testprg.c", directory: "/TEST")
  !9 = !DISubroutineType(types: !2)
  !10 = !DILocation(line: 2, column: 3, scope: !7)
  !11 = !DILocation(line: 2, column: 17, scope: !7)
  !12 = !DILocation(line: 5, column: 3, scope: !7)
  !13 = !DILocation(line: 3, column: 12, scope: !7)
  !14 = !{!15, !15, i64 0}
  !15 = !{!"int", !16, i64 0}
  !16 = !{!"omnipotent char", !17, i64 0}
  !17 = !{!"Simple C/C++ TBAA"}
  !18 = !DILocation(line: 3, column: 19, scope: !7)
  !19 = !DILocation(line: 3, column: 17, scope: !7)
  !20 = !DILocation(line: 3, column: 10, scope: !7)
  !21 = distinct !{!21, !10, !22, !23}
  !22 = !DILocation(line: 4, column: 3, scope: !7)
  !23 = !{!"llvm.loop.unroll.disable"}

...
---
name:            foo
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: gpr64all, preferred-register: '' }
  - { id: 1, class: gpr64sp, preferred-register: '' }
  - { id: 2, class: gpr64sp, preferred-register: '' }
  - { id: 3, class: gpr64sp, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: gpr64all, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr64all, preferred-register: '' }
  - { id: 8, class: gpr64all, preferred-register: '' }
  - { id: 9, class: gpr64, preferred-register: '' }
  - { id: 10, class: gpr64, preferred-register: '' }
  - { id: 11, class: gpr64, preferred-register: '' }
  - { id: 12, class: gpr32common, preferred-register: '' }
  - { id: 13, class: gpr32sp, preferred-register: '' }
  - { id: 14, class: gpr64sp, preferred-register: '' }
  - { id: 15, class: gpr32, preferred-register: '' }
  - { id: 16, class: gpr64sp, preferred-register: '' }
  - { id: 17, class: gpr32, preferred-register: '' }
  - { id: 18, class: gpr32, preferred-register: '' }
  - { id: 19, class: gpr64sp, preferred-register: '' }
  - { id: 20, class: gpr64, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%9' }
  - { reg: '$x1', virtual-reg: '%10' }
  - { reg: '$x2', virtual-reg: '%11' }
  - { reg: '$w3', virtual-reg: '%12' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.4):
    successors: %bb.2(0x80000000)
    liveins: $x0, $x1, $x2, $w3
  
    %12:gpr32common = COPY $w3
    %11:gpr64 = COPY $x2
    %10:gpr64 = COPY $x1
    %9:gpr64 = COPY $x0
    %13:gpr32sp = ADDWri %12, 1, 0, debug-location !10
    %0:gpr64all = SUBREG_TO_REG 0, killed %13, %subreg.sub_32, debug-location !11
    B %bb.2, debug-location !10
  
  bb.1 (%ir-block.7):
    RET_ReallyLR debug-location !12
  
  bb.2 (%ir-block.8):
    successors: %bb.2(0x7c000000), %bb.1(0x04000000)
  
    %1:gpr64sp = PHI %10, %bb.0, %7, %bb.2
    %2:gpr64sp = PHI %11, %bb.0, %6, %bb.2
    %3:gpr64sp = PHI %9, %bb.0, %5, %bb.2
    %4:gpr64sp = PHI %0, %bb.0, %8, %bb.2, debug-location !13
    early-clobber %14:gpr64sp, %15:gpr32 = LDRWpost %1, 4, debug-location !13
    early-clobber %16:gpr64sp, %17:gpr32 = LDRWpost %2, 4, debug-location !18
    %18:gpr32 = nsw ADDWrr killed %17, killed %15, debug-location !19
    early-clobber %19:gpr64sp = STRWpost killed %18, %3, 4, debug-location !20 :: (store 4 into %ir.11, !tbaa !14)
    %5:gpr64all = COPY %19, debug-location !11
    %6:gpr64all = COPY %16, debug-location !11
    %7:gpr64all = COPY %14, debug-location !11
    %20:gpr64 = SUBSXri %4, 1, 0, implicit-def $nzcv, debug-location !10
    %8:gpr64all = COPY %20, debug-location !10
    Bcc 1, %bb.2, implicit $nzcv, debug-location !10
    B %bb.1, debug-location !10

...
