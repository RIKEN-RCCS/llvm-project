#RUN: llc %s -mcpu=a64fx -fswp -O3 -start-before=aarch64-swpipeliner -swpl-enable-stagescheduling=true -swpl-debug-dump-ss-cyclicroots -o /dev/null 2>&1  | FileCheck %s
#CHECK:*** dump SwplSSSyclicInfo ***
#CHECK-NEXT:root : { ({{[A-Za-z0-9]+}}:MADDWrrr) ({{[A-Za-z0-9]+}}:LDRWroX) ({{[A-Za-z0-9]+}}:ADDXri) ({{[A-Za-z0-9]+}}:STRWroX) ({{[A-Za-z0-9]+}}:MADDWrrr) }
#CHECK-NEXT:root : { ({{[A-Za-z0-9]+}}:ADDWrr) ({{[A-Za-z0-9]+}}:MADDWrrr) ({{[A-Za-z0-9]+}}:COPY) ({{[A-Za-z0-9]+}}:COPY) ({{[A-Za-z0-9]+}}:ADDWrr) }
#CHECK-NEXT:root : { ({{[A-Za-z0-9]+}}:ADDWrr) ({{[A-Za-z0-9]+}}:ADDWrr) ({{[A-Za-z0-9]+}}:ADDWrr) ({{[A-Za-z0-9]+}}:ADDWrr) }
#CHECK-NEXT:root : { ({{[A-Za-z0-9]+}}:ADDWrr) ({{[A-Za-z0-9]+}}:ADDWrr) ({{[A-Za-z0-9]+}}:ADDWrr) ({{[A-Za-z0-9]+}}:ADDWrr) ({{[A-Za-z0-9]+}}:ADDWrr) }
#CHECK-NEXT:root : { ({{[A-Za-z0-9]+}}:ADDWrr) ({{[A-Za-z0-9]+}}:ADDWrr) ({{[A-Za-z0-9]+}}:ADDWrr) ({{[A-Za-z0-9]+}}:ADDWrr) ({{[A-Za-z0-9]+}}:ADDWrr) ({{[A-Za-z0-9]+}}:ADDWrr) ({{[A-Za-z0-9]+}}:ADDWrr) }
--- |
  ; ModuleID = '/home/xxxx/swpl-SS-cyclic-xxx.c'
  source_filename = "/home/xxxx/swpl-SS-cyclic-xxx.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-hurd-gnu"
  
  @a2 = dso_local local_unnamed_addr global i32 0, align 4
  @a3 = dso_local local_unnamed_addr global i32 0, align 4
  @a1 = dso_local local_unnamed_addr global i32 0, align 4
  @b2 = dso_local local_unnamed_addr global i32 0, align 4
  @b1 = dso_local local_unnamed_addr global i32 0, align 4
  @c2 = dso_local local_unnamed_addr global i32 0, align 4
  @c1 = dso_local local_unnamed_addr global i32 0, align 4
  @d2 = dso_local local_unnamed_addr global i32 0, align 4
  @d1 = dso_local local_unnamed_addr global i32 0, align 4
  @e2 = dso_local local_unnamed_addr global i32 0, align 4
  @e1 = dso_local local_unnamed_addr global i32 0, align 4
  @f2 = dso_local local_unnamed_addr global i32 0, align 4
  @f1 = dso_local local_unnamed_addr global i32 0, align 4
  @g2 = dso_local local_unnamed_addr global i32 0, align 4
  @g1 = dso_local local_unnamed_addr global i32 0, align 4
  @h1 = dso_local local_unnamed_addr global i32 0, align 4
  @.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
  @z = dso_local local_unnamed_addr global i32 0, align 4
  @h2 = dso_local local_unnamed_addr global i32 0, align 4
  
  ; Function Attrs: nofree nounwind uwtable vscale_range(1,16)
  define dso_local i32 @main() local_unnamed_addr #0 !dbg !8 {
  entry:
    %x1 = alloca [1000 x i32], align 4
    %y1 = alloca [1000 x i32], align 4
    call void @llvm.lifetime.start.p0(i64 4000, ptr nonnull %x1) #4, !dbg !12
    call void @llvm.lifetime.start.p0(i64 4000, ptr nonnull %y1) #4, !dbg !13
    %0 = load i32, ptr @a3, align 4, !tbaa !14
    %1 = load i32, ptr @b2, align 4, !tbaa !14
    %2 = load i32, ptr @c2, align 4, !tbaa !14
    %3 = load i32, ptr @d2, align 4, !tbaa !14
    %4 = load i32, ptr @e2, align 4, !tbaa !14
    %5 = load i32, ptr @f2, align 4, !tbaa !14
    %6 = load i32, ptr @g2, align 4, !tbaa !14
    %a2.promoted = load i32, ptr @a2, align 4, !tbaa !14
    %7 = call i64 @llvm.start.loop.iterations.i64(i64 1000), !dbg !18
    br label %for.body, !dbg !18
  
  for.body:                                         ; preds = %entry, %for.body
    %lsr.iv = phi i64 [ 0, %entry ], [ %lsr.iv.next, %for.body ]
    %mul1726 = phi i32 [ %a2.promoted, %entry ], [ %mul, %for.body ]
    %8 = phi i64 [ %7, %entry ], [ %10, %for.body ], !dbg !19
    %add = add nsw i32 %0, %mul1726, !dbg !19
    %add1 = add nsw i32 %1, %add, !dbg !20
    %add2 = add nsw i32 %2, %add1, !dbg !21
    %add3 = add nsw i32 %3, %add2, !dbg !22
    %add4 = add nsw i32 %4, %add3, !dbg !23
    %add5 = add nsw i32 %5, %add4, !dbg !24
    %add6 = add nsw i32 %6, %add5, !dbg !25
    %add7 = add nsw i32 %add6, %5, !dbg !26
    %scevgep29 = getelementptr i8, ptr %y1, i64 %lsr.iv, !dbg !27
    %9 = load i32, ptr %scevgep29, align 4, !dbg !27, !tbaa !14
    %mul = mul nsw i32 %9, %add7, !dbg !28
    %scevgep = getelementptr i8, ptr %x1, i64 %lsr.iv, !dbg !29
    store i32 %mul, ptr %scevgep, align 4, !dbg !29, !tbaa !14
    %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !30
    %10 = call i64 @llvm.loop.decrement.reg.i64(i64 %8, i64 1), !dbg !18
    %11 = icmp ne i64 %10, 0, !dbg !18
    br i1 %11, label %for.body, label %for.end, !dbg !18, !llvm.loop !31
  
  for.end:                                          ; preds = %for.body
    store i32 %mul, ptr @a2, align 4, !dbg !35, !tbaa !14
    store i32 %add, ptr @a1, align 4, !dbg !36, !tbaa !14
    store i32 %add1, ptr @b1, align 4, !dbg !37, !tbaa !14
    store i32 %add2, ptr @c1, align 4, !dbg !38, !tbaa !14
    store i32 %add3, ptr @d1, align 4, !dbg !39, !tbaa !14
    store i32 %add4, ptr @e1, align 4, !dbg !40, !tbaa !14
    store i32 %add5, ptr @f1, align 4, !dbg !41, !tbaa !14
    store i32 %add6, ptr @g1, align 4, !dbg !42, !tbaa !14
    store i32 %add7, ptr @h1, align 4, !dbg !43, !tbaa !14
    %12 = load i32, ptr %x1, align 4, !dbg !44, !tbaa !14
    %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %12), !dbg !45
    call void @llvm.lifetime.end.p0(i64 4000, ptr nonnull %y1) #4, !dbg !46
    call void @llvm.lifetime.end.p0(i64 4000, ptr nonnull %x1) #4, !dbg !46
    ret i32 0, !dbg !47
  }
  
  ; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
  declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1
  
  ; Function Attrs: nofree nounwind
  declare !dbg !48 dso_local noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #2
  
  ; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
  declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #3
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #3
  
  attributes #0 = { nofree nounwind uwtable vscale_range(1,16) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
  attributes #2 = { nofree nounwind "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #3 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #4 = { nounwind }
  
  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!2, !3, !4, !5, !6}
  !llvm.ident = !{!7}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 17.0.3", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "/home/xxxx/swpl-SS-cyclic-xxx.c", directory: "/home/xxxx", checksumkind: CSK_MD5, checksum: "c5fbc5126278ec2941b26e6431764664")
  !2 = !{i32 7, !"Dwarf Version", i32 5}
  !3 = !{i32 2, !"Debug Info Version", i32 3}
  !4 = !{i32 1, !"wchar_size", i32 4}
  !5 = !{i32 7, !"uwtable", i32 2}
  !6 = !{i32 7, !"frame-pointer", i32 1}
  !7 = !{!"clang version 17.0.3"}
  !8 = distinct !DISubprogram(name: "main", scope: !9, file: !9, line: 15, type: !10, scopeLine: 15, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
  !9 = !DIFile(filename: "swpl-SS-cyclic-xxx.c", directory: "/home/xxxx", checksumkind: CSK_MD5, checksum: "c5fbc5126278ec2941b26e6431764664")
  !10 = !DISubroutineType(types: !11)
  !11 = !{}
  !12 = !DILocation(line: 17, column: 5, scope: !8)
  !13 = !DILocation(line: 18, column: 5, scope: !8)
  !14 = !{!15, !15, i64 0}
  !15 = !{!"int", !16, i64 0}
  !16 = !{!"omnipotent char", !17, i64 0}
  !17 = !{!"Simple C/C++ TBAA"}
  !18 = !DILocation(line: 20, column: 5, scope: !8)
  !19 = !DILocation(line: 21, column: 17, scope: !8)
  !20 = !DILocation(line: 22, column: 17, scope: !8)
  !21 = !DILocation(line: 23, column: 17, scope: !8)
  !22 = !DILocation(line: 24, column: 17, scope: !8)
  !23 = !DILocation(line: 25, column: 17, scope: !8)
  !24 = !DILocation(line: 26, column: 17, scope: !8)
  !25 = !DILocation(line: 27, column: 17, scope: !8)
  !26 = !DILocation(line: 28, column: 17, scope: !8)
  !27 = !DILocation(line: 29, column: 17, scope: !8)
  !28 = !DILocation(line: 29, column: 23, scope: !8)
  !29 = !DILocation(line: 29, column: 15, scope: !8)
  !30 = !DILocation(line: 20, column: 19, scope: !8)
  !31 = distinct !{!31, !18, !32, !33, !34}
  !32 = !DILocation(line: 31, column: 5, scope: !8)
  !33 = !{!"llvm.loop.mustprogress"}
  !34 = !{!"llvm.loop.unroll.disable"}
  !35 = !DILocation(line: 0, scope: !8)
  !36 = !DILocation(line: 21, column: 12, scope: !8)
  !37 = !DILocation(line: 22, column: 12, scope: !8)
  !38 = !DILocation(line: 23, column: 12, scope: !8)
  !39 = !DILocation(line: 24, column: 12, scope: !8)
  !40 = !DILocation(line: 25, column: 12, scope: !8)
  !41 = !DILocation(line: 26, column: 12, scope: !8)
  !42 = !DILocation(line: 27, column: 12, scope: !8)
  !43 = !DILocation(line: 28, column: 12, scope: !8)
  !44 = !DILocation(line: 32, column: 17, scope: !8)
  !45 = !DILocation(line: 32, column: 2, scope: !8)
  !46 = !DILocation(line: 34, column: 1, scope: !8)
  !47 = !DILocation(line: 33, column: 5, scope: !8)
  !48 = !DISubprogram(name: "printf", scope: !9, file: !9, line: 3, type: !10, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized)

...
---
name:            main
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32, preferred-register: '' }
  - { id: 1, class: gpr32, preferred-register: '' }
  - { id: 2, class: gpr32, preferred-register: '' }
  - { id: 3, class: gpr32, preferred-register: '' }
  - { id: 4, class: gpr32, preferred-register: '' }
  - { id: 5, class: gpr32, preferred-register: '' }
  - { id: 6, class: gpr32, preferred-register: '' }
  - { id: 7, class: gpr32all, preferred-register: '' }
  - { id: 8, class: gpr64all, preferred-register: '' }
  - { id: 9, class: gpr64common, preferred-register: '' }
  - { id: 10, class: gpr32, preferred-register: '' }
  - { id: 11, class: gpr64sp, preferred-register: '' }
  - { id: 12, class: gpr32, preferred-register: '' }
  - { id: 13, class: gpr32, preferred-register: '' }
  - { id: 14, class: gpr32, preferred-register: '' }
  - { id: 15, class: gpr32, preferred-register: '' }
  - { id: 16, class: gpr32, preferred-register: '' }
  - { id: 17, class: gpr32, preferred-register: '' }
  - { id: 18, class: gpr32, preferred-register: '' }
  - { id: 19, class: gpr32, preferred-register: '' }
  - { id: 20, class: gpr32, preferred-register: '' }
  - { id: 21, class: gpr64all, preferred-register: '' }
  - { id: 22, class: gpr64all, preferred-register: '' }
  - { id: 23, class: gpr64all, preferred-register: '' }
  - { id: 24, class: gpr64common, preferred-register: '' }
  - { id: 25, class: gpr32, preferred-register: '' }
  - { id: 26, class: gpr64common, preferred-register: '' }
  - { id: 27, class: gpr32, preferred-register: '' }
  - { id: 28, class: gpr64common, preferred-register: '' }
  - { id: 29, class: gpr32, preferred-register: '' }
  - { id: 30, class: gpr64common, preferred-register: '' }
  - { id: 31, class: gpr32, preferred-register: '' }
  - { id: 32, class: gpr64common, preferred-register: '' }
  - { id: 33, class: gpr32, preferred-register: '' }
  - { id: 34, class: gpr64common, preferred-register: '' }
  - { id: 35, class: gpr32, preferred-register: '' }
  - { id: 36, class: gpr64common, preferred-register: '' }
  - { id: 37, class: gpr32, preferred-register: '' }
  - { id: 38, class: gpr64common, preferred-register: '' }
  - { id: 39, class: gpr32, preferred-register: '' }
  - { id: 40, class: gpr64all, preferred-register: '' }
  - { id: 41, class: gpr32, preferred-register: '' }
  - { id: 42, class: gpr32, preferred-register: '' }
  - { id: 43, class: gpr32, preferred-register: '' }
  - { id: 44, class: gpr32, preferred-register: '' }
  - { id: 45, class: gpr32, preferred-register: '' }
  - { id: 46, class: gpr32, preferred-register: '' }
  - { id: 47, class: gpr32, preferred-register: '' }
  - { id: 48, class: gpr32, preferred-register: '' }
  - { id: 49, class: gpr32, preferred-register: '' }
  - { id: 50, class: gpr64sp, preferred-register: '' }
  - { id: 51, class: gpr32, preferred-register: '' }
  - { id: 52, class: gpr32, preferred-register: '' }
  - { id: 53, class: gpr64sp, preferred-register: '' }
  - { id: 54, class: gpr64sp, preferred-register: '' }
  - { id: 55, class: gpr64, preferred-register: '' }
  - { id: 56, class: gpr64common, preferred-register: '' }
  - { id: 57, class: gpr64common, preferred-register: '' }
  - { id: 58, class: gpr64common, preferred-register: '' }
  - { id: 59, class: gpr64common, preferred-register: '' }
  - { id: 60, class: gpr64common, preferred-register: '' }
  - { id: 61, class: gpr64common, preferred-register: '' }
  - { id: 62, class: gpr64common, preferred-register: '' }
  - { id: 63, class: gpr64common, preferred-register: '' }
  - { id: 64, class: gpr64common, preferred-register: '' }
  - { id: 65, class: gpr32, preferred-register: '' }
  - { id: 66, class: gpr64common, preferred-register: '' }
  - { id: 67, class: gpr32all, preferred-register: '' }
  - { id: 68, class: gpr32all, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  8000
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: x1, type: default, offset: 0, size: 4000, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      local-offset: -4000, debug-info-variable: '', debug-info-expression: '', 
      debug-info-location: '' }
  - { id: 1, name: y1, type: default, offset: 0, size: 4000, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      local-offset: -8000, debug-info-variable: '', debug-info-expression: '', 
      debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
  
    %24:gpr64common = ADRP target-flags(aarch64-page) @a3
    %25:gpr32 = LDRWui killed %24, target-flags(aarch64-pageoff, aarch64-nc) @a3 :: (dereferenceable load (s32) from @a3, !tbaa !14)
    %26:gpr64common = ADRP target-flags(aarch64-page) @b2
    %27:gpr32 = LDRWui killed %26, target-flags(aarch64-pageoff, aarch64-nc) @b2 :: (dereferenceable load (s32) from @b2, !tbaa !14)
    %28:gpr64common = ADRP target-flags(aarch64-page) @c2
    %29:gpr32 = LDRWui killed %28, target-flags(aarch64-pageoff, aarch64-nc) @c2 :: (dereferenceable load (s32) from @c2, !tbaa !14)
    %30:gpr64common = ADRP target-flags(aarch64-page) @d2
    %31:gpr32 = LDRWui killed %30, target-flags(aarch64-pageoff, aarch64-nc) @d2 :: (dereferenceable load (s32) from @d2, !tbaa !14)
    %32:gpr64common = ADRP target-flags(aarch64-page) @e2
    %33:gpr32 = LDRWui killed %32, target-flags(aarch64-pageoff, aarch64-nc) @e2 :: (dereferenceable load (s32) from @e2, !tbaa !14)
    %34:gpr64common = ADRP target-flags(aarch64-page) @f2
    %35:gpr32 = LDRWui killed %34, target-flags(aarch64-pageoff, aarch64-nc) @f2 :: (dereferenceable load (s32) from @f2, !tbaa !14)
    %36:gpr64common = ADRP target-flags(aarch64-page) @g2
    %37:gpr32 = LDRWui killed %36, target-flags(aarch64-pageoff, aarch64-nc) @g2 :: (dereferenceable load (s32) from @g2, !tbaa !14)
    %38:gpr64common = ADRP target-flags(aarch64-page) @a2
    %39:gpr32 = LDRWui %38, target-flags(aarch64-pageoff, aarch64-nc) @a2 :: (dereferenceable load (s32) from @a2, !tbaa !14)
    %7:gpr32all = COPY %39
    %40:gpr64all = COPY $xzr
    %23:gpr64all = COPY %40
    %41:gpr32 = MOVi32imm 1000
    %8:gpr64all = SUBREG_TO_REG 0, killed %41, %subreg.sub_32
    %50:gpr64sp = ADDXri %stack.1.y1, 0, 0
    %53:gpr64sp = ADDXri %stack.0.x1, 0, 0
  
  bb.1.for.body:
    successors: %bb.1(0x7c000000), %bb.2(0x04000000)
  
    %9:gpr64common = PHI %23, %bb.0, %21, %bb.1
    %10:gpr32 = PHI %7, %bb.0, %20, %bb.1
    %11:gpr64sp = PHI %8, %bb.0, %22, %bb.1, debug-location !19
    %49:gpr32 = nsw ADDWrr %25, %10, debug-location !26
    %51:gpr32 = LDRWroX %50, %9, 0, 0, debug-location !27 :: (load (s32) from %ir.scevgep29, !tbaa !14)
    %52:gpr32 = nsw MADDWrrr killed %51, %49, $wzr, debug-location !28
    %20:gpr32 = COPY %52, debug-location !28
    STRWroX %52, %53, %9, 0, 0, debug-location !29 :: (store (s32) into %ir.scevgep, !tbaa !14)
    %54:gpr64sp = nuw nsw ADDXri %9, 4, 0, debug-location !30
    %21:gpr64all = COPY %54, debug-location !30
    %55:gpr64 = SUBSXri %11, 1, 0, implicit-def $nzcv, debug-location !18
    %22:gpr64all = COPY %55, debug-location !18
    %101:gpr32 = nsw ADDWrr %25, %27, debug-location !19
    %102:gpr32 = nsw ADDWrr %29, %101, debug-location !19
    %103:gpr32 = nsw ADDWrr %101, %102, debug-location !19
    %104:gpr32 = nsw ADDWrr %31, %103, debug-location !19
    %105:gpr32 = nsw ADDWrr %33, %104, debug-location !19
    %106:gpr32 = nsw ADDWrr %35, %104, debug-location !19
    %107:gpr32 = nsw ADDWrr %105, %106, debug-location !19
    %108:gpr32 = nsw ADDWrr %37, %103, debug-location !19
    %109:gpr32 = nsw ADDWrr %107, %108, debug-location !19
    %110:gpr32 = nsw ADDWrr %39, %109, debug-location !19
    %111:gpr32 = nsw ADDWrr %39, %109, debug-location !19
    Bcc 1, %bb.1, implicit $nzcv, debug-location !18
    B %bb.2, debug-location !18
  
  bb.2.for.end:
    %19:gpr32 = COPY %49, debug-location !35
    STRWui %20, %38, target-flags(aarch64-pageoff, aarch64-nc) @a2, debug-location !35 :: (store (s32) into @a2, !tbaa !14)
    %64:gpr64common = ADRP target-flags(aarch64-page) @h1, debug-location !43
    STRWui %19, killed %64, target-flags(aarch64-pageoff, aarch64-nc) @h1, debug-location !43 :: (store (s32) into @h1, !tbaa !14)
    %65:gpr32 = LDRWui %stack.0.x1, 0, debug-location !44 :: (dereferenceable load (s32) from %ir.x1, !tbaa !14)
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !45
    %66:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !45
    $x0 = COPY %66, debug-location !45
    $w1 = COPY %65, debug-location !45
    BL @printf, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !45
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !45
    %68:gpr32all = COPY $wzr
    $w0 = COPY %68, debug-location !47
    RET_ReallyLR implicit $w0, debug-location !47

...
