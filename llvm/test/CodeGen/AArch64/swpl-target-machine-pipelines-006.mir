#RUN: llc %s -mcpu=a64fx -ffj-swp -O1 -swpl-debug-dump-resource-filter="FADDA_VPZ_S" -start-before=aarch64-swpipeliner -o /dev/null 2>&1 | FileCheck %s

#CHECK:DBG(AArch64SwplTargetMachine::getPipelines): MI: %97:zpr = FADDA_VPZ_S %22:ppr_3b, %96:zpr(tied-def 0), killed %92:zpr
#CHECK-NEXT:  ResourceID: SIMDFP_SVE_OP+10
#CHECK-NEXT:  latency: 144
#CHECK-NEXT:  seqDecode: true
#CHECK-NEXT:  stage/resource(): 0/FLA, 1/FLA, 7/FLA, 9/FLA, 13/FLA, 18/FLA, 19/FLA, 25/FLA, 27/FLA, 31/FLA, 36/FLA, 37/FLA, 43/FLA, 45/FLA, 49/FLA, 54/FLA, 55/FLA, 61/FLA, 63/FLA, 67/FLA, 72/FLA, 73/FLA, 79/FLA, 81/FLA, 85/FLA, 90/FLA, 99/FLA, 108/FLA, 117/FLA, 126/FLA, 135/FLA
#CHECK-NEXT:  stage/resource(): 0/FLB, 0/FLA, 6/FLA, 9/FLB, 12/FLA, 18/FLB, 18/FLA, 24/FLA, 27/FLB, 30/FLA, 36/FLB, 36/FLA, 42/FLA, 45/FLB, 48/FLA, 54/FLB, 54/FLA, 60/FLA, 63/FLB, 66/FLA, 72/FLB, 72/FLA, 78/FLA, 81/FLB, 84/FLA, 90/FLB, 99/FLB, 108/FLB, 117/FLB, 126/FLB, 135/FLB

--- |
  ; ModuleID = '/TSVC_2/src_sep_optnone/s311.c'
  source_filename = "/TSVC_2/src_sep_optnone/s311.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  %struct.args_t = type { %struct.timeval, %struct.timeval, ptr }
  %struct.timeval = type { i64, i64 }
  
  @__func__.s311 = private unnamed_addr constant [5 x i8] c"s311\00", align 1
  @a = external global [32000 x float], align 64
  @b = external global [32000 x float], align 64
  @c = external global [32000 x float], align 64
  @d = external global [32000 x float], align 64
  @e = external global [32000 x float], align 64
  @aa = external global [256 x [256 x float]], align 64
  @bb = external global [256 x [256 x float]], align 64
  @cc = external global [256 x [256 x float]], align 64
  
  ; Function Attrs: nounwind uwtable vscale_range(4,4)
  define dso_local float @s311(ptr nocapture noundef %func_args) local_unnamed_addr #0 {
  entry:
    %call = tail call i32 @initialise_arrays(ptr noundef nonnull @__func__.s311) #5
    %call1 = tail call i32 @gettimeofday(ptr noundef %func_args, ptr noundef null) #5
    br label %vector.ph
  
  vector.ph:                                        ; preds = %for.cond.cleanup4, %entry
    %nl.019 = phi i32 [ 0, %entry ], [ %inc8, %for.cond.cleanup4 ]
    %0 = call i64 @llvm.start.loop.iterations.i64(i64 250)
    br label %vector.body
  
  vector.body:                                      ; preds = %vector.body, %vector.ph
    %index = phi i64 [ 0, %vector.ph ], [ %index.next.1, %vector.body ]
    %vec.phi = phi float [ 0.000000e+00, %vector.ph ], [ %17, %vector.body ]
    %1 = phi i64 [ %0, %vector.ph ], [ %18, %vector.body ]
    %2 = shl nuw nsw i64 %index, 2
    %uglygep32 = getelementptr i8, ptr @a, i64 %2
    %wide.load = load <vscale x 4 x float>, ptr %uglygep32, align 64, !tbaa !6
    %3 = shl nuw nsw i64 %index, 2
    %uglygep37 = getelementptr i8, ptr @a, i64 %3
    %uglygep38 = getelementptr i8, ptr %uglygep37, i64 64
    %wide.load22 = load <vscale x 4 x float>, ptr %uglygep38, align 64, !tbaa !6
    %4 = shl nuw nsw i64 %index, 2
    %uglygep35 = getelementptr i8, ptr @a, i64 %4
    %uglygep36 = getelementptr i8, ptr %uglygep35, i64 128
    %wide.load23 = load <vscale x 4 x float>, ptr %uglygep36, align 64, !tbaa !6
    %5 = shl nuw nsw i64 %index, 2
    %uglygep33 = getelementptr i8, ptr @a, i64 %5
    %uglygep34 = getelementptr i8, ptr %uglygep33, i64 192
    %wide.load24 = load <vscale x 4 x float>, ptr %uglygep34, align 64, !tbaa !6
    %6 = tail call float @llvm.vector.reduce.fadd.nxv4f32(float %vec.phi, <vscale x 4 x float> %wide.load)
    %7 = tail call float @llvm.vector.reduce.fadd.nxv4f32(float %6, <vscale x 4 x float> %wide.load22)
    %8 = tail call float @llvm.vector.reduce.fadd.nxv4f32(float %7, <vscale x 4 x float> %wide.load23)
    %9 = tail call float @llvm.vector.reduce.fadd.nxv4f32(float %8, <vscale x 4 x float> %wide.load24)
    %10 = shl nuw nsw i64 %index, 2
    %uglygep30 = getelementptr i8, ptr @a, i64 %10
    %uglygep31 = getelementptr i8, ptr %uglygep30, i64 256
    %wide.load.1 = load <vscale x 4 x float>, ptr %uglygep31, align 64, !tbaa !6
    %11 = shl nuw nsw i64 %index, 2
    %uglygep28 = getelementptr i8, ptr @a, i64 %11
    %uglygep29 = getelementptr i8, ptr %uglygep28, i64 320
    %wide.load22.1 = load <vscale x 4 x float>, ptr %uglygep29, align 64, !tbaa !6
    %12 = shl nuw nsw i64 %index, 2
    %uglygep26 = getelementptr i8, ptr @a, i64 %12
    %uglygep27 = getelementptr i8, ptr %uglygep26, i64 384
    %wide.load23.1 = load <vscale x 4 x float>, ptr %uglygep27, align 64, !tbaa !6
    %13 = shl nuw nsw i64 %index, 2
    %uglygep = getelementptr i8, ptr @a, i64 %13
    %uglygep25 = getelementptr i8, ptr %uglygep, i64 448
    %wide.load24.1 = load <vscale x 4 x float>, ptr %uglygep25, align 64, !tbaa !6
    %14 = tail call float @llvm.vector.reduce.fadd.nxv4f32(float %9, <vscale x 4 x float> %wide.load.1)
    %15 = tail call float @llvm.vector.reduce.fadd.nxv4f32(float %14, <vscale x 4 x float> %wide.load22.1)
    %16 = tail call float @llvm.vector.reduce.fadd.nxv4f32(float %15, <vscale x 4 x float> %wide.load23.1)
    %17 = tail call float @llvm.vector.reduce.fadd.nxv4f32(float %16, <vscale x 4 x float> %wide.load24.1)
    %index.next.1 = add nuw nsw i64 %index, 128
    %18 = call i64 @llvm.loop.decrement.reg.i64(i64 %1, i64 1)
    %19 = icmp ne i64 %18, 0
    br i1 %19, label %vector.body, label %for.cond.cleanup4, !llvm.loop !10
  
  for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
    %t2 = getelementptr inbounds %struct.args_t, ptr %func_args, i64 0, i32 1
    %call10 = tail call i32 @gettimeofday(ptr noundef nonnull %t2, ptr noundef null) #5
    %call11 = tail call float @calc_checksum(ptr noundef nonnull @__func__.s311) #5
    ret float %call11
  
  for.cond.cleanup4:                                ; preds = %vector.body
    %call6 = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, float noundef %17) #5
    %inc8 = add nuw nsw i32 %nl.019, 1
    %exitcond21.not = icmp eq i32 %inc8, 1000000
    br i1 %exitcond21.not, label %for.cond.cleanup, label %vector.ph, !llvm.loop !13
  }
  
  declare i32 @initialise_arrays(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nofree nounwind
  declare noundef i32 @gettimeofday(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #2
  
  declare i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, float noundef) local_unnamed_addr #1
  
  declare float @calc_checksum(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
  declare float @llvm.vector.reduce.fadd.nxv4f32(float, <vscale x 4 x float>) #3
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #4
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #4
  
  attributes #0 = { nounwind uwtable vscale_range(4,4) "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #1 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #2 = { nofree nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #3 = { nocallback nofree nosync nounwind readnone willreturn }
  attributes #4 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #5 = { nounwind }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 7, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"float", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C/C++ TBAA"}
  !10 = distinct !{!10, !11, !12}
  !11 = !{!"llvm.loop.mustprogress"}
  !12 = !{!"llvm.loop.isvectorized", i32 1}
  !13 = distinct !{!13, !11}

...
---
name:            s311
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32sp, preferred-register: '' }
  - { id: 1, class: gpr64all, preferred-register: '' }
  - { id: 2, class: gpr64common, preferred-register: '' }
  - { id: 3, class: fpr32, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: fpr32, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr64all, preferred-register: '' }
  - { id: 8, class: gpr32all, preferred-register: '' }
  - { id: 9, class: gpr64common, preferred-register: '' }
  - { id: 10, class: gpr32all, preferred-register: '' }
  - { id: 11, class: gpr64common, preferred-register: '' }
  - { id: 12, class: gpr32all, preferred-register: '' }
  - { id: 13, class: gpr64all, preferred-register: '' }
  - { id: 14, class: gpr32all, preferred-register: '' }
  - { id: 15, class: gpr32all, preferred-register: '' }
  - { id: 16, class: gpr64all, preferred-register: '' }
  - { id: 17, class: fpr32, preferred-register: '' }
  - { id: 18, class: gpr64all, preferred-register: '' }
  - { id: 19, class: gpr32, preferred-register: '' }
  - { id: 20, class: gpr64common, preferred-register: '' }
  - { id: 21, class: gpr64common, preferred-register: '' }
  - { id: 22, class: ppr_3b, preferred-register: '' }
  - { id: 23, class: zpr, preferred-register: '' }
  - { id: 24, class: gpr64common, preferred-register: '' }
  - { id: 25, class: zpr, preferred-register: '' }
  - { id: 26, class: gpr64common, preferred-register: '' }
  - { id: 27, class: zpr, preferred-register: '' }
  - { id: 28, class: gpr64common, preferred-register: '' }
  - { id: 29, class: zpr, preferred-register: '' }
  - { id: 30, class: zpr, preferred-register: '' }
  - { id: 31, class: zpr, preferred-register: '' }
  - { id: 32, class: ppr_3b, preferred-register: '' }
  - { id: 33, class: zpr, preferred-register: '' }
  - { id: 34, class: fpr32, preferred-register: '' }
  - { id: 35, class: zpr, preferred-register: '' }
  - { id: 36, class: zpr, preferred-register: '' }
  - { id: 37, class: zpr, preferred-register: '' }
  - { id: 38, class: fpr32, preferred-register: '' }
  - { id: 39, class: zpr, preferred-register: '' }
  - { id: 40, class: zpr, preferred-register: '' }
  - { id: 41, class: zpr, preferred-register: '' }
  - { id: 42, class: fpr32, preferred-register: '' }
  - { id: 43, class: zpr, preferred-register: '' }
  - { id: 44, class: zpr, preferred-register: '' }
  - { id: 45, class: zpr, preferred-register: '' }
  - { id: 46, class: fpr32, preferred-register: '' }
  - { id: 47, class: gpr64common, preferred-register: '' }
  - { id: 48, class: zpr, preferred-register: '' }
  - { id: 49, class: gpr64common, preferred-register: '' }
  - { id: 50, class: zpr, preferred-register: '' }
  - { id: 51, class: gpr64common, preferred-register: '' }
  - { id: 52, class: zpr, preferred-register: '' }
  - { id: 53, class: gpr64common, preferred-register: '' }
  - { id: 54, class: zpr, preferred-register: '' }
  - { id: 55, class: zpr, preferred-register: '' }
  - { id: 56, class: zpr, preferred-register: '' }
  - { id: 57, class: zpr, preferred-register: '' }
  - { id: 58, class: fpr32, preferred-register: '' }
  - { id: 59, class: zpr, preferred-register: '' }
  - { id: 60, class: zpr, preferred-register: '' }
  - { id: 61, class: zpr, preferred-register: '' }
  - { id: 62, class: fpr32, preferred-register: '' }
  - { id: 63, class: zpr, preferred-register: '' }
  - { id: 64, class: zpr, preferred-register: '' }
  - { id: 65, class: zpr, preferred-register: '' }
  - { id: 66, class: fpr32, preferred-register: '' }
  - { id: 67, class: zpr, preferred-register: '' }
  - { id: 68, class: zpr, preferred-register: '' }
  - { id: 69, class: zpr, preferred-register: '' }
  - { id: 70, class: gpr64sp, preferred-register: '' }
  - { id: 71, class: gpr64, preferred-register: '' }
  - { id: 72, class: gpr64common, preferred-register: '' }
  - { id: 73, class: gpr64common, preferred-register: '' }
  - { id: 74, class: gpr64common, preferred-register: '' }
  - { id: 75, class: gpr64common, preferred-register: '' }
  - { id: 76, class: gpr64common, preferred-register: '' }
  - { id: 77, class: gpr64common, preferred-register: '' }
  - { id: 78, class: gpr64common, preferred-register: '' }
  - { id: 79, class: gpr64common, preferred-register: '' }
  - { id: 80, class: gpr32all, preferred-register: '' }
  - { id: 81, class: gpr32common, preferred-register: '' }
  - { id: 82, class: gpr32, preferred-register: '' }
  - { id: 83, class: gpr32, preferred-register: '' }
  - { id: 84, class: gpr64sp, preferred-register: '' }
  - { id: 85, class: gpr64all, preferred-register: '' }
  - { id: 86, class: gpr32all, preferred-register: '' }
  - { id: 87, class: gpr64common, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%9' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     true
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $x0
  
    %9:gpr64common = COPY $x0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %11:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s311, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s311
    $x0 = COPY %11
    BL @initialise_arrays, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %13:gpr64all = COPY $xzr
    $x0 = COPY %9
    $x1 = COPY %13
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %15:gpr32all = COPY $wzr
    %10:gpr32all = COPY %15
    %19:gpr32 = MOVi32imm 250
    %20:gpr64common = LOADgot target-flags(aarch64-got) @a
    %22:ppr_3b = PTRUE_S 31
    %24:gpr64common = MOVi64imm 16
    %26:gpr64common = MOVi64imm 32
    %28:gpr64common = MOVi64imm 48
    %31:zpr = IMPLICIT_DEF
    %36:zpr = IMPLICIT_DEF
    %40:zpr = IMPLICIT_DEF
    %44:zpr = IMPLICIT_DEF
    %47:gpr64common = MOVi64imm 64
    %49:gpr64common = MOVi64imm 80
    %51:gpr64common = MOVi64imm 96
    %53:gpr64common = MOVi64imm 112
    %56:zpr = IMPLICIT_DEF
    %60:zpr = IMPLICIT_DEF
    %64:zpr = IMPLICIT_DEF
    %68:zpr = IMPLICIT_DEF
    %73:gpr64common = LOADgot target-flags(aarch64-got) @b
    %74:gpr64common = LOADgot target-flags(aarch64-got) @c
    %75:gpr64common = LOADgot target-flags(aarch64-got) @d
    %76:gpr64common = LOADgot target-flags(aarch64-got) @e
    %77:gpr64common = LOADgot target-flags(aarch64-got) @aa
    %78:gpr64common = LOADgot target-flags(aarch64-got) @bb
    %79:gpr64common = LOADgot target-flags(aarch64-got) @cc
    %82:gpr32 = MOVi32imm 1000000
  
  bb.1.vector.ph:
    successors: %bb.2(0x80000000)
  
    %0:gpr32sp = PHI %10, %bb.0, %8, %bb.4
    %17:fpr32 = FMOVS0
    %18:gpr64all = COPY $xzr
    %16:gpr64all = COPY %18
    %1:gpr64all = SUBREG_TO_REG 0, %19, %subreg.sub_32
  
  bb.2.vector.body:
    successors: %bb.2(0x7c000000), %bb.4(0x04000000)
  
    %2:gpr64common = PHI %16, %bb.1, %6, %bb.2
    %3:fpr32 = PHI %17, %bb.1, %5, %bb.2
    %4:gpr64sp = PHI %1, %bb.1, %7, %bb.2
    %21:gpr64common = ADDXrs %20, %2, 2
    %23:zpr = LD1W %22, %20, %2 :: (load unknown-size from %ir.uglygep32, align 64, !tbaa !6)
    %25:zpr = LD1W %22, %21, %24 :: (load unknown-size from %ir.uglygep38, align 64, !tbaa !6)
    %27:zpr = LD1W %22, %21, %26 :: (load unknown-size from %ir.uglygep36, align 64, !tbaa !6)
    %29:zpr = LD1W %22, %21, %28 :: (load unknown-size from %ir.uglygep34, align 64, !tbaa !6)
    %30:zpr = INSERT_SUBREG %31, %3, %subreg.ssub
    %33:zpr = FADDA_VPZ_S %22, %30, killed %23
    %34:fpr32 = COPY %33.ssub
    %35:zpr = INSERT_SUBREG %36, killed %34, %subreg.ssub
    %37:zpr = FADDA_VPZ_S %22, %35, killed %25
    %38:fpr32 = COPY %37.ssub
    %39:zpr = INSERT_SUBREG %40, killed %38, %subreg.ssub
    %41:zpr = FADDA_VPZ_S %22, %39, killed %27
    %42:fpr32 = COPY %41.ssub
    %43:zpr = INSERT_SUBREG %44, killed %42, %subreg.ssub
    %45:zpr = FADDA_VPZ_S %22, %43, killed %29
    %46:fpr32 = COPY %45.ssub
    %48:zpr = LD1W %22, %21, %47 :: (load unknown-size from %ir.uglygep31, align 64, !tbaa !6)
    %50:zpr = LD1W %22, %21, %49 :: (load unknown-size from %ir.uglygep29, align 64, !tbaa !6)
    %52:zpr = LD1W %22, %21, %51 :: (load unknown-size from %ir.uglygep27, align 64, !tbaa !6)
    %54:zpr = LD1W %22, %21, %53 :: (load unknown-size from %ir.uglygep25, align 64, !tbaa !6)
    %55:zpr = INSERT_SUBREG %56, killed %46, %subreg.ssub
    %57:zpr = FADDA_VPZ_S %22, %55, killed %48
    %58:fpr32 = COPY %57.ssub
    %59:zpr = INSERT_SUBREG %60, killed %58, %subreg.ssub
    %61:zpr = FADDA_VPZ_S %22, %59, killed %50
    %62:fpr32 = COPY %61.ssub
    %63:zpr = INSERT_SUBREG %64, killed %62, %subreg.ssub
    %65:zpr = FADDA_VPZ_S %22, %63, killed %52
    %66:fpr32 = COPY %65.ssub
    %67:zpr = INSERT_SUBREG %68, killed %66, %subreg.ssub
    %69:zpr = FADDA_VPZ_S %22, %67, killed %54
    %5:fpr32 = COPY %69.ssub
    %70:gpr64sp = nuw nsw ADDXri %2, 128, 0
    %6:gpr64all = COPY %70
    %71:gpr64 = SUBSXri %4, 1, 0, implicit-def $nzcv
    %7:gpr64all = COPY %71
    Bcc 1, %bb.2, implicit $nzcv
    B %bb.4
  
  bb.3.for.cond.cleanup:
    %84:gpr64sp = nuw ADDXri %9, 16, 0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %85:gpr64all = COPY $xzr
    $x0 = COPY %84
    $x1 = COPY %85
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %87:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s311, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s311
    $x0 = COPY %87
    TCRETURNdi @calc_checksum, 0, csr_aarch64_aapcs, implicit $sp, implicit $x0
  
  bb.4.for.cond.cleanup4:
    successors: %bb.3(0x04000000), %bb.1(0x7c000000)
  
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    $x0 = COPY %20
    $x1 = COPY %73
    $x2 = COPY %74
    $x3 = COPY %75
    $x4 = COPY %76
    $x5 = COPY %77
    $x6 = COPY %78
    $x7 = COPY %79
    $s0 = COPY %5
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $s0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %81:gpr32common = nuw nsw ADDWri %0, 1, 0
    %8:gpr32all = COPY %81
    dead $wzr = SUBSWrr %81, %82, implicit-def $nzcv
    Bcc 0, %bb.3, implicit $nzcv
    B %bb.1

...
