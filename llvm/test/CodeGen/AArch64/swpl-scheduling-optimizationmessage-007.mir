#RUN: llc %s -mcpu=a64fx -ffj-swp -O1  -start-before=aarch64-swpipeliner -swpl-max-preg=1  -pass-remarks=aarch64-swpipeliner -pass-remarks-missed=aarch64-swpipeliner -pass-remarks-analysis=aarch64-swpipeliner  -o /dev/null 2>&1 | FileCheck %s

#CHECK:remark: <unknown>:0:0: SVE instruction latency is calculated at 512bit.
#CHECK:remark: <unknown>:0:0: Trial at iteration-interval=81. This loop cannot be software pipelined because of shortage of predicate registers.
#CHECK:remark: <unknown>:0:0: Trial at iteration-interval=82. This loop cannot be software pipelined because of shortage of predicate registers.
#CHECK:remark: <unknown>:0:0: Trial at iteration-interval=86. This loop cannot be software pipelined because of shortage of predicate registers.
#CHECK:remark: <unknown>:0:0: Trial at iteration-interval=90. This loop cannot be software pipelined because of shortage of predicate registers.
#CHECK:remark: <unknown>:0:0: Trial at iteration-interval=94. This loop cannot be software pipelined because of shortage of predicate registers.
#CHECK:remark: <unknown>:0:0: This loop is not software pipelined because no schedule is obtained.

--- |
  ; ModuleID = 's3111.c'
  source_filename = "s3111.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  %struct.args_t = type { %struct.timeval, %struct.timeval, ptr }
  %struct.timeval = type { i64, i64 }
  
  @__func__.s3111 = private unnamed_addr constant [6 x i8] c"s3111\00", align 1
  @a = external global [32000 x double], align 64
  @b = external global [32000 x double], align 64
  @c = external global [32000 x double], align 64
  @d = external global [32000 x double], align 64
  @e = external global [32000 x double], align 64
  @aa = external global [256 x [256 x double]], align 64
  @bb = external global [256 x [256 x double]], align 64
  @cc = external global [256 x [256 x double]], align 64
  
  ; Function Attrs: nounwind uwtable vscale_range(4,4)
  define dso_local double @s3111(ptr nocapture noundef %0) local_unnamed_addr #0 {
    %2 = tail call i32 @initialise_arrays(ptr noundef nonnull @__func__.s3111) #5
    %3 = tail call i32 @gettimeofday(ptr noundef %0, ptr noundef null) #5
    br label %4
  
  4:                                                ; preds = %23, %1
    %5 = phi i32 [ 0, %1 ], [ %25, %23 ]
    %6 = call i64 @llvm.start.loop.iterations.i64(i64 4000)
    br label %7
  
  7:                                                ; preds = %7, %4
    %8 = phi i64 [ 0, %4 ], [ %17, %7 ]
    %9 = phi double [ 0.000000e+00, %4 ], [ %16, %7 ]
    %10 = phi i64 [ %6, %4 ], [ %18, %7 ]
    %11 = shl nuw nsw i64 %8, 3
    %12 = getelementptr i8, ptr @a, i64 %11
    %13 = load <vscale x 2 x double>, ptr %12, align 64, !tbaa !6
    %14 = fcmp ogt <vscale x 2 x double> %13, zeroinitializer
    %15 = select <vscale x 2 x i1> %14, <vscale x 2 x double> %13, <vscale x 2 x double> shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double -0.000000e+00, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer)
    %16 = tail call double @llvm.vector.reduce.fadd.nxv2f64(double %9, <vscale x 2 x double> %15)
    %17 = add nuw i64 %8, 8
    %18 = call i64 @llvm.loop.decrement.reg.i64(i64 %10, i64 1)
    %19 = icmp ne i64 %18, 0
    br i1 %19, label %7, label %23, !llvm.loop !10
  
  20:                                               ; preds = %23
    %21 = getelementptr inbounds %struct.args_t, ptr %0, i64 0, i32 1
    %22 = tail call i32 @gettimeofday(ptr noundef nonnull %21, ptr noundef null) #5
    ret double %16
  
  23:                                               ; preds = %7
    %24 = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, double noundef %16) #5
    %25 = add nuw nsw i32 %5, 1
    %26 = icmp eq i32 %25, 50000
    br i1 %26, label %20, label %4, !llvm.loop !14
  }
  
  declare i32 @initialise_arrays(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nofree nounwind
  declare noundef i32 @gettimeofday(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #2
  
  declare i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, double noundef) local_unnamed_addr #1
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
  declare double @llvm.vector.reduce.fadd.nxv2f64(double, <vscale x 2 x double>) #3
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #4
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #4
  
  attributes #0 = { nounwind uwtable vscale_range(4,4) "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #1 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #2 = { nofree nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #3 = { nocallback nofree nosync nounwind readnone willreturn }
  attributes #4 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #5 = { nounwind }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 7, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !5 = !{!"clang version 15.0.4 "}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"double", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C/C++ TBAA"}
  !10 = distinct !{!10, !11, !12, !13}
  !11 = !{!"llvm.loop.mustprogress"}
  !12 = !{!"llvm.loop.unroll.disable"}
  !13 = !{!"llvm.loop.isvectorized", i32 1}
  !14 = distinct !{!14, !11, !12}

...
---
name:            s3111
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32sp, preferred-register: '' }
  - { id: 1, class: gpr64all, preferred-register: '' }
  - { id: 2, class: gpr64common, preferred-register: '' }
  - { id: 3, class: fpr64, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: fpr64, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr64all, preferred-register: '' }
  - { id: 8, class: gpr32all, preferred-register: '' }
  - { id: 9, class: gpr64common, preferred-register: '' }
  - { id: 10, class: gpr32all, preferred-register: '' }
  - { id: 11, class: gpr64common, preferred-register: '' }
  - { id: 12, class: gpr32all, preferred-register: '' }
  - { id: 13, class: gpr64all, preferred-register: '' }
  - { id: 14, class: gpr32all, preferred-register: '' }
  - { id: 15, class: gpr32all, preferred-register: '' }
  - { id: 16, class: gpr64all, preferred-register: '' }
  - { id: 17, class: fpr64, preferred-register: '' }
  - { id: 18, class: gpr64all, preferred-register: '' }
  - { id: 19, class: gpr32, preferred-register: '' }
  - { id: 20, class: gpr64common, preferred-register: '' }
  - { id: 21, class: ppr_3b, preferred-register: '' }
  - { id: 22, class: zpr, preferred-register: '' }
  - { id: 23, class: ppr_3b, preferred-register: '' }
  - { id: 24, class: ppr_3b, preferred-register: '' }
  - { id: 25, class: zpr, preferred-register: '' }
  - { id: 26, class: zpr, preferred-register: '' }
  - { id: 27, class: zpr, preferred-register: '' }
  - { id: 28, class: gpr64sp, preferred-register: '' }
  - { id: 29, class: gpr64, preferred-register: '' }
  - { id: 30, class: gpr64common, preferred-register: '' }
  - { id: 31, class: gpr64common, preferred-register: '' }
  - { id: 32, class: gpr64common, preferred-register: '' }
  - { id: 33, class: gpr64common, preferred-register: '' }
  - { id: 34, class: gpr64common, preferred-register: '' }
  - { id: 35, class: gpr64common, preferred-register: '' }
  - { id: 36, class: gpr64common, preferred-register: '' }
  - { id: 37, class: gpr64common, preferred-register: '' }
  - { id: 38, class: gpr32all, preferred-register: '' }
  - { id: 39, class: gpr32common, preferred-register: '' }
  - { id: 40, class: gpr32, preferred-register: '' }
  - { id: 41, class: gpr32, preferred-register: '' }
  - { id: 42, class: gpr64sp, preferred-register: '' }
  - { id: 43, class: gpr64all, preferred-register: '' }
  - { id: 44, class: gpr32all, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%9' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.1):
    successors: %bb.1(0x80000000)
    liveins: $x0
  
    %9:gpr64common = COPY $x0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %11:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s3111, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s3111
    $x0 = COPY %11
    BL @initialise_arrays, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %13:gpr64all = COPY $xzr
    $x0 = COPY %9
    $x1 = COPY %13
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %15:gpr32all = COPY $wzr
    %10:gpr32all = COPY %15
    %19:gpr32 = MOVi32imm 4000
    %20:gpr64common = LOADgot target-flags(aarch64-got) @a
    %21:ppr_3b = PTRUE_D 31
    %26:zpr = IMPLICIT_DEF
    %31:gpr64common = LOADgot target-flags(aarch64-got) @b
    %32:gpr64common = LOADgot target-flags(aarch64-got) @c
    %33:gpr64common = LOADgot target-flags(aarch64-got) @d
    %34:gpr64common = LOADgot target-flags(aarch64-got) @e
    %35:gpr64common = LOADgot target-flags(aarch64-got) @aa
    %36:gpr64common = LOADgot target-flags(aarch64-got) @bb
    %37:gpr64common = LOADgot target-flags(aarch64-got) @cc
    %40:gpr32 = MOVi32imm 50000
  
  bb.1 (%ir-block.4):
    successors: %bb.2(0x80000000)
  
    %0:gpr32sp = PHI %10, %bb.0, %8, %bb.4
    %17:fpr64 = FMOVD0
    %18:gpr64all = COPY $xzr
    %16:gpr64all = COPY %18
    %1:gpr64all = SUBREG_TO_REG 0, %19, %subreg.sub_32
  
  bb.2 (%ir-block.7):
    successors: %bb.2(0x7c000000), %bb.4(0x04000000)
  
    %2:gpr64common = PHI %16, %bb.1, %6, %bb.2
    %3:fpr64 = PHI %17, %bb.1, %5, %bb.2
    %4:gpr64sp = PHI %1, %bb.1, %7, %bb.2
    %22:zpr = LD1D %21, %20, %2 :: (load unknown-size from %ir.12, align 64, !tbaa !6)
    %24:ppr_3b = FCMGT_PPzZ0_D %21, %22
    %25:zpr = INSERT_SUBREG %26, %3, %subreg.dsub
    %27:zpr = FADDA_VPZ_D killed %24, %25, %22
    %5:fpr64 = COPY %27.dsub
    %28:gpr64sp = nuw ADDXri %2, 8, 0
    %6:gpr64all = COPY %28
    %29:gpr64 = SUBSXri %4, 1, 0, implicit-def $nzcv
    %7:gpr64all = COPY %29
    Bcc 1, %bb.2, implicit $nzcv
    B %bb.4
  
  bb.3 (%ir-block.20):
    %42:gpr64sp = nuw ADDXri %9, 16, 0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %43:gpr64all = COPY $xzr
    $x0 = COPY %42
    $x1 = COPY %43
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    $d0 = COPY %5
    RET_ReallyLR implicit $d0
  
  bb.4 (%ir-block.23):
    successors: %bb.3(0x04000000), %bb.1(0x7c000000)
  
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    $x0 = COPY %20
    $x1 = COPY %31
    $x2 = COPY %32
    $x3 = COPY %33
    $x4 = COPY %34
    $x5 = COPY %35
    $x6 = COPY %36
    $x7 = COPY %37
    $d0 = COPY %5
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $d0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %39:gpr32common = nuw nsw ADDWri %0, 1, 0
    %8:gpr32all = COPY %39
    dead $wzr = SUBSWrr %39, %40, implicit-def $nzcv
    Bcc 0, %bb.3, implicit $nzcv
    B %bb.1

...
