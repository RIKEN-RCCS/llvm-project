#RUN: llc %s -mcpu=a64fx -fswp -O3 -start-before=aarch64-swpipeliner -swpl-enable-stagescheduling=true -swpl-debug-dump-ss-cyclicroots -o /dev/null 2>&1  | FileCheck %s
#CHECK:*** dump SwplSSSyclicInfo ***
#CHECK:root : {
#CHECK-DAG:	({{[A-Za-z0-9]+}}:FADDDrr)
#CHECK-DAG:	({{[A-Za-z0-9]+}}:FMULDrr)
#CHECK-DAG:	({{[A-Za-z0-9]+}}:FMULDrr)
#CHECK-DAG:	({{[A-Za-z0-9]+}}:STURDi)
#CHECK-DAG:	({{[A-Za-z0-9]+}}:LDURDi)
#CHECK-DAG:	({{[A-Za-z0-9]+}}:LDURDi)
#CHECK-DAG:	({{[A-Za-z0-9]+}}:ADDXri)
#CHECK-DAG:	({{[A-Za-z0-9]+}}:LDRDui)
#CHECK-DAG:	({{[A-Za-z0-9]+}}:COPY)
#CHECK:}
#CHECK:*** dump SwplSSSyclicInfo ***
#CHECK:root : {
#CHECK-DAG:	({{[A-Za-z0-9]+}}:FADDDrr)
#CHECK-DAG:	({{[A-Za-z0-9]+}}:FMULDrr)
#CHECK-DAG:	({{[A-Za-z0-9]+}}:FMULDrr)
#CHECK-DAG:	({{[A-Za-z0-9]+}}:STURDi)
#CHECK-DAG:	({{[A-Za-z0-9]+}}:LDURDi)
#CHECK-DAG:	({{[A-Za-z0-9]+}}:LDURDi)
#CHECK-DAG:	({{[A-Za-z0-9]+}}:ADDXri)
#CHECK-DAG:	({{[A-Za-z0-9]+}}:LDRDui)
#CHECK-DAG:	({{[A-Za-z0-9]+}}:COPY)
#CHECK:}
--- |
  ; ModuleID = '/home/XXXX/s3251.c'
  source_filename = "/home/XXXX/s3251.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  %struct.args_t = type { %struct.timeval, %struct.timeval, ptr }
  %struct.timeval = type { i64, i64 }
  
  @__func__.s3251 = private unnamed_addr constant [6 x i8] c"s3251\00", align 1
  @b = external global [32000 x double], align 64
  @c = external global [32000 x double], align 64
  @a = external global [32000 x double], align 64
  @e = external global [32000 x double], align 64
  @d = external global [32000 x double], align 64
  @aa = external global [256 x [256 x double]], align 64
  @bb = external global [256 x [256 x double]], align 64
  @cc = external global [256 x [256 x double]], align 64
  
  ; Function Attrs: nounwind uwtable vscale_range(4,4)
  define dso_local nofpclass(nan inf) double @s3251(ptr nocapture noundef %func_args) local_unnamed_addr #0 {
  entry:
    %call = tail call i32 @initialise_arrays(ptr noundef nonnull @__func__.s3251) #4
    %call1 = tail call i32 @gettimeofday(ptr noundef %func_args, ptr noundef null) #4
    br label %for.cond2.preheader
  
  for.cond2.preheader:                              ; preds = %entry, %for.cond.cleanup4
    %nl.043 = phi i32 [ 0, %entry ], [ %inc26, %for.cond.cleanup4 ]
    %.pre = load double, ptr @a, align 64, !tbaa !6
    %0 = call i64 @llvm.start.loop.iterations.i64(i64 31999)
    br label %for.body5
  
  for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
    %t2 = getelementptr inbounds %struct.args_t, ptr %func_args, i64 0, i32 1
    %call28 = tail call i32 @gettimeofday(ptr noundef nonnull %t2, ptr noundef null) #4
    %call29 = tail call fast nofpclass(nan inf) double @calc_checksum(ptr noundef nonnull @__func__.s3251) #4
    ret double %call29
  
  for.cond.cleanup4:                                ; preds = %for.body5
    %call24 = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, double noundef nofpclass(nan inf) 0.000000e+00) #4
    %inc26 = add nuw nsw i32 %nl.043, 1
    %exitcond45.not = icmp eq i32 %inc26, 100000
    br i1 %exitcond45.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !10
  
  for.body5:                                        ; preds = %for.cond2.preheader, %for.body5
    %lsr.iv53 = phi ptr [ getelementptr inbounds ([32000 x double], ptr @a, i64 0, i64 1), %for.cond2.preheader ], [ %scevgep54, %for.body5 ]
    %lsr.iv50 = phi ptr [ @b, %for.cond2.preheader ], [ %scevgep51, %for.body5 ]
    %lsr.iv48 = phi ptr [ @c, %for.cond2.preheader ], [ %scevgep49, %for.body5 ]
    %lsr.iv46 = phi ptr [ @e, %for.cond2.preheader ], [ %scevgep47, %for.body5 ]
    %lsr.iv = phi ptr [ @d, %for.cond2.preheader ], [ %scevgep, %for.body5 ]
    %1 = phi double [ %.pre, %for.cond2.preheader ], [ %add, %for.body5 ]
    %2 = phi i64 [ %0, %for.cond2.preheader ], [ %6, %for.body5 ]
    %3 = load double, ptr %lsr.iv50, align 8, !tbaa !6
    %4 = load double, ptr %lsr.iv48, align 8, !tbaa !6
    %add = fadd fast double %4, %3
    store double %add, ptr %lsr.iv53, align 8, !tbaa !6
    %5 = load double, ptr %lsr.iv46, align 8, !tbaa !6
    %mul = fmul fast double %5, %4
    store double %mul, ptr %lsr.iv50, align 8, !tbaa !6
    %mul21 = fmul fast double %1, %5
    store double %mul21, ptr %lsr.iv, align 8, !tbaa !6
    %scevgep = getelementptr i8, ptr %lsr.iv, i64 8
    %scevgep47 = getelementptr i8, ptr %lsr.iv46, i64 8
    %scevgep49 = getelementptr i8, ptr %lsr.iv48, i64 8
    %scevgep51 = getelementptr i8, ptr %lsr.iv50, i64 8
    %scevgep54 = getelementptr i8, ptr %lsr.iv53, i64 8
    %6 = call i64 @llvm.loop.decrement.reg.i64(i64 %2, i64 1)
    %7 = icmp ne i64 %6, 0
    br i1 %7, label %for.body5, label %for.cond.cleanup4, !llvm.loop !13
  }
  
  declare i32 @initialise_arrays(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nofree nounwind
  declare noundef i32 @gettimeofday(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #2
  
  declare i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, double noundef nofpclass(nan inf)) local_unnamed_addr #1
  
  declare nofpclass(nan inf) double @calc_checksum(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #3
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #3
  
  attributes #0 = { nounwind uwtable vscale_range(4,4) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #1 = { "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #2 = { nofree nounwind "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #3 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #4 = { nounwind }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !5 = !{!"clang version 17.0.3"}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"double", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C/C++ TBAA"}
  !10 = distinct !{!10, !11, !12}
  !11 = !{!"llvm.loop.mustprogress"}
  !12 = !{!"llvm.loop.unroll.disable"}
  !13 = distinct !{!13, !11, !12}

...
---
name:            s3251
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32sp, preferred-register: '' }
  - { id: 1, class: fpr64, preferred-register: '' }
  - { id: 2, class: gpr64all, preferred-register: '' }
  - { id: 3, class: gpr32all, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: gpr64sp, preferred-register: '' }
  - { id: 6, class: gpr64sp, preferred-register: '' }
  - { id: 7, class: gpr64sp, preferred-register: '' }
  - { id: 8, class: gpr64sp, preferred-register: '' }
  - { id: 9, class: fpr64, preferred-register: '' }
  - { id: 10, class: gpr64sp, preferred-register: '' }
  - { id: 11, class: fpr64, preferred-register: '' }
  - { id: 12, class: gpr64all, preferred-register: '' }
  - { id: 13, class: gpr64all, preferred-register: '' }
  - { id: 14, class: gpr64all, preferred-register: '' }
  - { id: 15, class: gpr64all, preferred-register: '' }
  - { id: 16, class: gpr64all, preferred-register: '' }
  - { id: 17, class: gpr64all, preferred-register: '' }
  - { id: 18, class: gpr64common, preferred-register: '' }
  - { id: 19, class: gpr32all, preferred-register: '' }
  - { id: 20, class: gpr64common, preferred-register: '' }
  - { id: 21, class: gpr32all, preferred-register: '' }
  - { id: 22, class: gpr64all, preferred-register: '' }
  - { id: 23, class: gpr32all, preferred-register: '' }
  - { id: 24, class: gpr32all, preferred-register: '' }
  - { id: 25, class: gpr64all, preferred-register: '' }
  - { id: 26, class: gpr64all, preferred-register: '' }
  - { id: 27, class: gpr64all, preferred-register: '' }
  - { id: 28, class: gpr64all, preferred-register: '' }
  - { id: 29, class: gpr64all, preferred-register: '' }
  - { id: 30, class: gpr64common, preferred-register: '' }
  - { id: 31, class: gpr64sp, preferred-register: '' }
  - { id: 32, class: gpr64common, preferred-register: '' }
  - { id: 33, class: gpr64common, preferred-register: '' }
  - { id: 34, class: gpr64common, preferred-register: '' }
  - { id: 35, class: gpr64common, preferred-register: '' }
  - { id: 36, class: gpr32, preferred-register: '' }
  - { id: 37, class: fpr64, preferred-register: '' }
  - { id: 38, class: gpr64sp, preferred-register: '' }
  - { id: 39, class: fpr64, preferred-register: '' }
  - { id: 40, class: gpr64sp, preferred-register: '' }
  - { id: 41, class: gpr64sp, preferred-register: '' }
  - { id: 42, class: fpr64, preferred-register: '' }
  - { id: 43, class: fpr64, preferred-register: '' }
  - { id: 44, class: gpr64sp, preferred-register: '' }
  - { id: 45, class: fpr64, preferred-register: '' }
  - { id: 46, class: gpr64sp, preferred-register: '' }
  - { id: 47, class: gpr64, preferred-register: '' }
  - { id: 48, class: gpr64common, preferred-register: '' }
  - { id: 49, class: gpr64common, preferred-register: '' }
  - { id: 50, class: gpr64common, preferred-register: '' }
  - { id: 51, class: gpr64common, preferred-register: '' }
  - { id: 52, class: gpr64common, preferred-register: '' }
  - { id: 53, class: gpr64common, preferred-register: '' }
  - { id: 54, class: gpr64common, preferred-register: '' }
  - { id: 55, class: gpr64common, preferred-register: '' }
  - { id: 56, class: fpr64, preferred-register: '' }
  - { id: 57, class: gpr32all, preferred-register: '' }
  - { id: 58, class: gpr32common, preferred-register: '' }
  - { id: 59, class: gpr32, preferred-register: '' }
  - { id: 60, class: gpr32, preferred-register: '' }
  - { id: 61, class: gpr64sp, preferred-register: '' }
  - { id: 62, class: gpr64all, preferred-register: '' }
  - { id: 63, class: gpr32all, preferred-register: '' }
  - { id: 64, class: gpr64common, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%18' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     true
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $x0
  
    %18:gpr64common = COPY $x0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %20:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s3251, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s3251
    $x0 = COPY %20
    BL @initialise_arrays, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %22:gpr64all = COPY $xzr
    $x0 = COPY %18
    $x1 = COPY %22
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %24:gpr32all = COPY $wzr
    %19:gpr32all = COPY %24
    %30:gpr64common = LOADgot target-flags(aarch64-got) @a
    %32:gpr64common = LOADgot target-flags(aarch64-got) @d
    %33:gpr64common = LOADgot target-flags(aarch64-got) @e
    %34:gpr64common = LOADgot target-flags(aarch64-got) @c
    %35:gpr64common = LOADgot target-flags(aarch64-got) @b
    %36:gpr32 = MOVi32imm 31999
    %53:gpr64common = LOADgot target-flags(aarch64-got) @aa
    %54:gpr64common = LOADgot target-flags(aarch64-got) @bb
    %55:gpr64common = LOADgot target-flags(aarch64-got) @cc
    %56:fpr64 = FMOVD0
    %59:gpr32 = MOVi32imm 100000
  
  bb.1.for.cond2.preheader:
    successors: %bb.4(0x80000000)
  
    %0:gpr32sp = PHI %19, %bb.0, %3, %bb.3
    early-clobber %31:gpr64sp, %1:fpr64 = LDRDpost %30, 8 :: (load (s64) from @a, align 64, !tbaa !6)
    %29:gpr64all = COPY %32
    %28:gpr64all = COPY %33
    %27:gpr64all = COPY %34
    %26:gpr64all = COPY %35
    %25:gpr64all = COPY %31
    %2:gpr64all = SUBREG_TO_REG 0, %36, %subreg.sub_32
    B %bb.4
  
  bb.2.for.cond.cleanup:
    %61:gpr64sp = nuw ADDXri %18, 16, 0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %62:gpr64all = COPY $xzr
    $x0 = COPY %61
    $x1 = COPY %62
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %64:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s3251, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s3251
    $x0 = COPY %64
    TCRETURNdi @calc_checksum, 0, csr_aarch64_aapcs, implicit $sp, implicit $x0
  
  bb.3.for.cond.cleanup4:
    successors: %bb.2(0x04000000), %bb.1(0x7c000000)
  
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    $x0 = COPY %30
    $x1 = COPY %35
    $x2 = COPY %34
    $x3 = COPY %32
    $x4 = COPY %33
    $x5 = COPY %53
    $x6 = COPY %54
    $x7 = COPY %55
    $d0 = COPY %56
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $d0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %58:gpr32common = nuw nsw ADDWri %0, 1, 0
    %3:gpr32all = COPY %58
    dead $wzr = SUBSWrr %58, %59, implicit-def $nzcv
    Bcc 0, %bb.2, implicit $nzcv
    B %bb.1
  
  bb.4.for.body5:
    successors: %bb.4(0x7c000000), %bb.3(0x04000000)
  
    %4:gpr64sp = PHI %25, %bb.1, %16, %bb.4
    %5:gpr64sp = PHI %26, %bb.1, %15, %bb.4
    %6:gpr64sp = PHI %27, %bb.1, %14, %bb.4
    %7:gpr64sp = PHI %28, %bb.1, %13, %bb.4
    %8:gpr64sp = PHI %29, %bb.1, %12, %bb.4
    %9:fpr64 = PHI %1, %bb.1, %11, %bb.4
    %10:gpr64sp = PHI %2, %bb.1, %17, %bb.4
    %37:fpr64 = LDRDui %5, 0 :: (load (s64) from %ir.lsr.iv50, !tbaa !6)
    early-clobber %38:gpr64sp, %39:fpr64 = LDRDpost %6, 8 :: (load (s64) from %ir.lsr.iv48, !tbaa !6)
    %11:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr %39, killed %37, implicit $fpcr
    early-clobber %40:gpr64sp = STRDpost %11, %4, 8 :: (store (s64) into %ir.lsr.iv53, !tbaa !6)
    early-clobber %41:gpr64sp, %42:fpr64 = LDRDpost %7, 8 :: (load (s64) from %ir.lsr.iv46, !tbaa !6)
    %43:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FMULDrr %42, %39, implicit $fpcr
    early-clobber %44:gpr64sp = STRDpost killed %43, %5, 8 :: (store (s64) into %ir.lsr.iv50, !tbaa !6)
    %45:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FMULDrr %9, %42, implicit $fpcr
    early-clobber %46:gpr64sp = STRDpost killed %45, %8, 8 :: (store (s64) into %ir.lsr.iv, !tbaa !6)
    %12:gpr64all = COPY %46
    %13:gpr64all = COPY %41
    %14:gpr64all = COPY %38
    %15:gpr64all = COPY %44
    %16:gpr64all = COPY %40
    %47:gpr64 = SUBSXri %10, 1, 0, implicit-def $nzcv
    %17:gpr64all = COPY %47
    Bcc 1, %bb.4, implicit $nzcv
    B %bb.3

...
