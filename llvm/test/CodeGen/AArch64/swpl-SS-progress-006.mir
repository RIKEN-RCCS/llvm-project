#RUN: llc %s -mcpu=a64fx -fswp -O3 -start-before=aarch64-swpipeliner -swpl-enable-stagescheduling=true -swpl-debug-dump-ss-progress -swpl-debug-dump-plan -pass-remarks=aarch64-swpipeliner -pass-remarks-analysis=aarch64-swpipeliner -o /dev/null 2>&1  | FileCheck %s
#CHECK:*** StageScheduling results rejected... ***

#CHECK:(plan {{[A-Za-z0-9]+}}:
#CHECK-NEXT:  iteration_interval  = 2
#CHECK-NEXT:  n_iteration_copies  = 14
#CHECK-NEXT:  n_renaming_versions = 5
#CHECK-NEXT:  begin_slot = 999840
#CHECK-NEXT:  end_slot   = 1000000
#CHECK-NEXT:  total_cycles  = 46
#CHECK-NEXT:  prolog_cycles = 18
#CHECK-NEXT:  kernel_cycles = 10
#CHECK-NEXT:  epilog_cycles = 18

#CHECK:	( MachineInstr* : OpcodeName )

#CHECK:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		({{[A-Za-z0-9]+}}:LDURDi)		--5--		--6--		--7--	

#CHECK:	--0--		--1--		--2--		--3--		({{[A-Za-z0-9]+}}:ADDXri)		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	

#CHECK:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	

#CHECK:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	

#CHECK:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		({{[A-Za-z0-9]+}}:FADDDrr)		--6--		--7--	

#CHECK:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	

#CHECK:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	

#CHECK:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	

#CHECK:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	

#CHECK:	--0--		--1--		--2--		--3--		--4--		({{[A-Za-z0-9]+}}:STURDi)		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		({{[A-Za-z0-9]+}}:ADDXri)		({{[A-Za-z0-9]+}}:SUBSXri)	
#CHECK-NEXT:)

#CHECK:remark: test.c:21:9: software pipelining (IPC: 3.00, ITR: 14, MVE: 5, II: 2, Stage: 10, (VReg Fp: 12/32, Int: 6/29, Pred: 1/8)), SRA(PReg Fp: 11/32, Int: 4/29, Pred: 0/8)

--- |
  ; ModuleID = '/home/XXXX/test.c'
  source_filename = "/home/XXXX/test.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-hurd-gnu"
  
  %struct.args_t = type { %struct.timeval, %struct.timeval, ptr }
  %struct.timeval = type { i64, i64 }
  
  @__func__.func = private unnamed_addr constant [5 x i8] c"func\00", align 1
  @b = external dso_local global [32000 x double], align 64
  @a = external dso_local global [32000 x double], align 64
  @c = external dso_local global [32000 x double], align 64
  @d = external dso_local global [32000 x double], align 64
  @e = external dso_local global [32000 x double], align 64
  @aa = external dso_local global [256 x [256 x double]], align 64
  @bb = external dso_local global [256 x [256 x double]], align 64
  @cc = external dso_local global [256 x [256 x double]], align 64
  
  ; Function Attrs: nounwind uwtable vscale_range(1,16)
  define dso_local nofpclass(nan inf) double @func(ptr nocapture noundef %func_args) local_unnamed_addr #0 !dbg !8 {
  entry:
    %call = tail call i32 @init_array(ptr noundef nonnull @__func__.func) #4, !dbg !12
    %call1 = tail call i32 @get_timeofday(ptr noundef %func_args, ptr noundef null) #4, !dbg !13
    br label %for.cond2.preheader, !dbg !14
  
  for.cond2.preheader:                              ; preds = %entry, %for.cond.cleanup4
    %nl.020 = phi i32 [ 0, %entry ], [ %inc10, %for.cond.cleanup4 ]
    %0 = call i64 @llvm.start.loop.iterations.i64(i64 32000), !dbg !15
    br label %for.body5, !dbg !15
  
  for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
    %t2 = getelementptr inbounds %struct.args_t, ptr %func_args, i64 0, i32 1, !dbg !16
    %call12 = tail call i32 @get_timeofday(ptr noundef nonnull %t2, ptr noundef null) #4, !dbg !17
    %call13 = tail call fast nofpclass(nan inf) double @check(ptr noundef nonnull @__func__.func) #4, !dbg !18
    ret double %call13, !dbg !19
  
  for.cond.cleanup4:                                ; preds = %for.body5
    %call8 = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, double noundef nofpclass(nan inf) 0.000000e+00) #4, !dbg !20
    %inc10 = add nuw nsw i32 %nl.020, 1, !dbg !21
    %exitcond22.not = icmp eq i32 %inc10, 200000, !dbg !22
    br i1 %exitcond22.not, label %for.cond.cleanup, label %for.cond2.preheader, !dbg !14, !llvm.loop !23
  
  for.body5:                                        ; preds = %for.cond2.preheader, %for.body5
    %lsr.iv23 = phi ptr [ @b, %for.cond2.preheader ], [ %scevgep24, %for.body5 ]
    %lsr.iv = phi ptr [ @a, %for.cond2.preheader ], [ %scevgep, %for.body5 ]
    %1 = phi i64 [ %0, %for.cond2.preheader ], [ %3, %for.body5 ], !dbg !27
    %2 = load double, ptr %lsr.iv23, align 8, !dbg !27, !tbaa !28
    %add = fadd fast double %2, 1.000000e+00, !dbg !32
    store double %add, ptr %lsr.iv, align 8, !dbg !33, !tbaa !28
    %scevgep = getelementptr i8, ptr %lsr.iv, i64 8, !dbg !34
    %scevgep24 = getelementptr i8, ptr %lsr.iv23, i64 8, !dbg !34
    %3 = call i64 @llvm.loop.decrement.reg.i64(i64 %1, i64 1), !dbg !15
    %4 = icmp ne i64 %3, 0, !dbg !15
    br i1 %4, label %for.body5, label %for.cond.cleanup4, !dbg !15, !llvm.loop !35
  }
  
  declare !dbg !37 dso_local i32 @init_array(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nofree nounwind
  declare !dbg !39 dso_local noundef i32 @get_timeofday(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #2
  
  declare !dbg !41 dso_local i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, double noundef nofpclass(nan inf)) local_unnamed_addr #1
  
  declare !dbg !42 dso_local nofpclass(nan inf) double @check(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #3
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #3
  
  attributes #0 = { nounwind uwtable vscale_range(1,16) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #1 = { "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #2 = { nofree nounwind "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #3 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #4 = { nounwind }
  
  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!2, !3, !4, !5, !6}
  !llvm.ident = !{!7}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 17.0.3", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "/home/XXXX/test.c", directory: "/home/XXXX", checksumkind: CSK_MD5, checksum: "568ac5cfbbb56f977dba224f792f4291")
  !2 = !{i32 7, !"Dwarf Version", i32 5}
  !3 = !{i32 2, !"Debug Info Version", i32 3}
  !4 = !{i32 1, !"wchar_size", i32 4}
  !5 = !{i32 7, !"uwtable", i32 2}
  !6 = !{i32 7, !"frame-pointer", i32 1}
  !7 = !{!"clang version 17.0.3"}
  !8 = distinct !DISubprogram(name: "func", scope: !9, file: !9, line: 11, type: !10, scopeLine: 12, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
  !9 = !DIFile(filename: "test.c", directory: "/home/XXXX", checksumkind: CSK_MD5, checksum: "568ac5cfbbb56f977dba224f792f4291")
  !10 = !DISubroutineType(types: !11)
  !11 = !{}
  !12 = !DILocation(line: 17, column: 5, scope: !8)
  !13 = !DILocation(line: 18, column: 5, scope: !8)
  !14 = !DILocation(line: 20, column: 5, scope: !8)
  !15 = !DILocation(line: 21, column: 9, scope: !8)
  !16 = !DILocation(line: 27, column: 30, scope: !8)
  !17 = !DILocation(line: 27, column: 5, scope: !8)
  !18 = !DILocation(line: 28, column: 12, scope: !8)
  !19 = !DILocation(line: 28, column: 5, scope: !8)
  !20 = !DILocation(line: 24, column: 9, scope: !8)
  !21 = !DILocation(line: 20, column: 43, scope: !8)
  !22 = !DILocation(line: 20, column: 25, scope: !8)
  !23 = distinct !{!23, !14, !24, !25, !26}
  !24 = !DILocation(line: 25, column: 5, scope: !8)
  !25 = !{!"llvm.loop.mustprogress"}
  !26 = !{!"llvm.loop.unroll.disable"}
  !27 = !DILocation(line: 22, column: 20, scope: !8)
  !28 = !{!29, !29, i64 0}
  !29 = !{!"double", !30, i64 0}
  !30 = !{!"omnipotent char", !31, i64 0}
  !31 = !{!"Simple C/C++ TBAA"}
  !32 = !DILocation(line: 22, column: 25, scope: !8)
  !33 = !DILocation(line: 22, column: 18, scope: !8)
  !34 = !DILocation(line: 21, column: 27, scope: !8)
  !35 = distinct !{!35, !15, !36, !25, !26}
  !36 = !DILocation(line: 23, column: 9, scope: !8)
  !37 = !DISubprogram(name: "init_array", scope: !38, file: !38, line: 29, type: !10, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized)
  !38 = !DIFile(filename: "dev/swpl-test/benchmark/TSVC_2/src_sep_optnone/common.h", directory: "/home/XXXX", checksumkind: CSK_MD5, checksum: "f7fbf9be95241c88dd1537b49380204f")
  !39 = !DISubprogram(name: "get_timeofday", scope: !40, file: !40, line: 67, type: !10, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized)
  !40 = !DIFile(filename: "/usr/lib/gcc-cross/aarch64-linux-gnu/11/../../../../aarch64-linux-gnu/include/sys/time.h", directory: "", checksumkind: CSK_MD5, checksum: "b36e339815f62ba7208e5294180e353c")
  !41 = !DISubprogram(name: "dummy", scope: !38, file: !38, line: 25, type: !10, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized)
  !42 = !DISubprogram(name: "check", scope: !38, file: !38, line: 30, type: !10, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized)

...
---
name:            func
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32sp, preferred-register: '' }
  - { id: 1, class: gpr64all, preferred-register: '' }
  - { id: 2, class: gpr32all, preferred-register: '' }
  - { id: 3, class: gpr64sp, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: gpr64sp, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr64all, preferred-register: '' }
  - { id: 8, class: gpr64all, preferred-register: '' }
  - { id: 9, class: gpr64common, preferred-register: '' }
  - { id: 10, class: gpr32all, preferred-register: '' }
  - { id: 11, class: gpr64common, preferred-register: '' }
  - { id: 12, class: gpr32all, preferred-register: '' }
  - { id: 13, class: gpr64all, preferred-register: '' }
  - { id: 14, class: gpr32all, preferred-register: '' }
  - { id: 15, class: gpr32all, preferred-register: '' }
  - { id: 16, class: gpr64all, preferred-register: '' }
  - { id: 17, class: gpr64all, preferred-register: '' }
  - { id: 18, class: gpr64common, preferred-register: '' }
  - { id: 19, class: gpr64common, preferred-register: '' }
  - { id: 20, class: gpr32, preferred-register: '' }
  - { id: 21, class: gpr64sp, preferred-register: '' }
  - { id: 22, class: fpr64, preferred-register: '' }
  - { id: 23, class: fpr64, preferred-register: '' }
  - { id: 24, class: fpr64, preferred-register: '' }
  - { id: 25, class: gpr64sp, preferred-register: '' }
  - { id: 26, class: gpr64, preferred-register: '' }
  - { id: 27, class: gpr64common, preferred-register: '' }
  - { id: 28, class: gpr64common, preferred-register: '' }
  - { id: 29, class: gpr64common, preferred-register: '' }
  - { id: 30, class: gpr64common, preferred-register: '' }
  - { id: 31, class: gpr64common, preferred-register: '' }
  - { id: 32, class: gpr64common, preferred-register: '' }
  - { id: 33, class: gpr64common, preferred-register: '' }
  - { id: 34, class: gpr64common, preferred-register: '' }
  - { id: 35, class: fpr64, preferred-register: '' }
  - { id: 36, class: gpr32all, preferred-register: '' }
  - { id: 37, class: gpr32common, preferred-register: '' }
  - { id: 38, class: gpr32, preferred-register: '' }
  - { id: 39, class: gpr32, preferred-register: '' }
  - { id: 40, class: gpr64sp, preferred-register: '' }
  - { id: 41, class: gpr64all, preferred-register: '' }
  - { id: 42, class: gpr32all, preferred-register: '' }
  - { id: 43, class: gpr64common, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%9' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     true
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $x0
  
    %9:gpr64common = COPY $x0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !12
    %11:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.func, target-flags(aarch64-pageoff, aarch64-nc) @__func__.func, debug-location !12
    $x0 = COPY %11, debug-location !12
    BL @init_array, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0, debug-location !12
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !12
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !13
    %13:gpr64all = COPY $xzr
    $x0 = COPY %9, debug-location !13
    $x1 = COPY %13, debug-location !13
    BL @get_timeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0, debug-location !13
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !13
    %15:gpr32all = COPY $wzr
    %10:gpr32all = COPY %15
    %18:gpr64common = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a
    %19:gpr64common = MOVaddr target-flags(aarch64-page) @b, target-flags(aarch64-pageoff, aarch64-nc) @b
    %20:gpr32 = MOVi32imm 32000
    %23:fpr64 = FMOVDi 112
    %29:gpr64common = MOVaddr target-flags(aarch64-page) @c, target-flags(aarch64-pageoff, aarch64-nc) @c
    %30:gpr64common = MOVaddr target-flags(aarch64-page) @d, target-flags(aarch64-pageoff, aarch64-nc) @d
    %31:gpr64common = MOVaddr target-flags(aarch64-page) @e, target-flags(aarch64-pageoff, aarch64-nc) @e
    %32:gpr64common = MOVaddr target-flags(aarch64-page) @aa, target-flags(aarch64-pageoff, aarch64-nc) @aa
    %33:gpr64common = MOVaddr target-flags(aarch64-page) @bb, target-flags(aarch64-pageoff, aarch64-nc) @bb
    %34:gpr64common = MOVaddr target-flags(aarch64-page) @cc, target-flags(aarch64-pageoff, aarch64-nc) @cc
    %35:fpr64 = FMOVD0
    %38:gpr32 = MOVi32imm 200000
  
  bb.1.for.cond2.preheader:
    successors: %bb.4(0x80000000)
  
    %0:gpr32sp = PHI %10, %bb.0, %2, %bb.3
    %17:gpr64all = COPY %18
    %16:gpr64all = COPY %19
    %1:gpr64all = SUBREG_TO_REG 0, %20, %subreg.sub_32
    B %bb.4, debug-location !15
  
  bb.2.for.cond.cleanup:
    %40:gpr64sp = nuw ADDXri %9, 16, 0, debug-location !16
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !17
    %41:gpr64all = COPY $xzr
    $x0 = COPY %40, debug-location !17
    $x1 = COPY %41, debug-location !17
    BL @get_timeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0, debug-location !17
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !17
    %43:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.func, target-flags(aarch64-pageoff, aarch64-nc) @__func__.func, debug-location !18
    $x0 = COPY %43, debug-location !18
    TCRETURNdi @check, 0, csr_aarch64_aapcs, implicit $sp, implicit $x0, debug-location !18
  
  bb.3.for.cond.cleanup4:
    successors: %bb.2(0x04000000), %bb.1(0x7c000000)
  
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !20
    $x0 = COPY %18, debug-location !20
    $x1 = COPY %19, debug-location !20
    $x2 = COPY %29, debug-location !20
    $x3 = COPY %30, debug-location !20
    $x4 = COPY %31, debug-location !20
    $x5 = COPY %32, debug-location !20
    $x6 = COPY %33, debug-location !20
    $x7 = COPY %34, debug-location !20
    $d0 = COPY %35, debug-location !20
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $d0, implicit-def $sp, implicit-def $w0, debug-location !20
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !20
    %37:gpr32common = nuw nsw ADDWri %0, 1, 0, debug-location !21
    %2:gpr32all = COPY %37, debug-location !21
    dead $wzr = SUBSWrr %37, %38, implicit-def $nzcv, debug-location !14
    Bcc 0, %bb.2, implicit $nzcv, debug-location !14
    B %bb.1, debug-location !14
  
  bb.4.for.body5:
    successors: %bb.4(0x7c000000), %bb.3(0x04000000)
  
    %3:gpr64sp = PHI %16, %bb.1, %7, %bb.4
    %4:gpr64sp = PHI %17, %bb.1, %6, %bb.4
    %5:gpr64sp = PHI %1, %bb.1, %8, %bb.4, debug-location !27
    early-clobber %21:gpr64sp, %22:fpr64 = LDRDpost %3, 8, debug-location !27 :: (load (s64) from %ir.lsr.iv23, !tbaa !28)
    %24:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %22, %23, implicit $fpcr, debug-location !32
    early-clobber %25:gpr64sp = STRDpost killed %24, %4, 8, debug-location !33 :: (store (s64) into %ir.lsr.iv, !tbaa !28)
    %6:gpr64all = COPY %25, debug-location !34
    %7:gpr64all = COPY %21, debug-location !34
    %26:gpr64 = SUBSXri %5, 1, 0, implicit-def $nzcv, debug-location !15
    %8:gpr64all = COPY %26, debug-location !15
    Bcc 1, %bb.4, implicit $nzcv, debug-location !15
    B %bb.3, debug-location !15

...
