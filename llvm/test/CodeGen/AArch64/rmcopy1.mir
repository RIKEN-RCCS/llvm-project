# RUN: llc -mcpu=a64fx -O3 -ffj-swp -start-before=aarch64-swpipeliner -o /dev/null  -swpl-debug %s 2>&1 | FileCheck %s
#
# CHECK: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:   target mi: %133:gpr64 = COPY $xzr
# CHECK-NEXT:   before: STRXui %133:gpr64, %132:gpr64common, 0 :: (store (s64) into %ir.uglygep330, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, %132:gpr64common, 0 :: (store (s64) into %ir.uglygep330, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, %132:gpr64common, 256 :: (store (s64) into %ir.uglygep331, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, %132:gpr64common, 256 :: (store (s64) into %ir.uglygep331, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, %132:gpr64common, 512 :: (store (s64) into %ir.uglygep333, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, %132:gpr64common, 512 :: (store (s64) into %ir.uglygep333, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, %132:gpr64common, 768 :: (store (s64) into %ir.uglygep334, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, %132:gpr64common, 768 :: (store (s64) into %ir.uglygep334, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, %132:gpr64common, 1024 :: (store (s64) into %ir.uglygep336, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, %132:gpr64common, 1024 :: (store (s64) into %ir.uglygep336, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, %132:gpr64common, 1280 :: (store (s64) into %ir.uglygep337, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, %132:gpr64common, 1280 :: (store (s64) into %ir.uglygep337, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, %132:gpr64common, 1536 :: (store (s64) into %ir.uglygep338, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, %132:gpr64common, 1536 :: (store (s64) into %ir.uglygep338, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, %132:gpr64common, 1792 :: (store (s64) into %ir.uglygep340, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, %132:gpr64common, 1792 :: (store (s64) into %ir.uglygep340, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, %132:gpr64common, 2048 :: (store (s64) into %ir.uglygep342, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, %132:gpr64common, 2048 :: (store (s64) into %ir.uglygep342, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, %132:gpr64common, 2304 :: (store (s64) into %ir.uglygep343, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, %132:gpr64common, 2304 :: (store (s64) into %ir.uglygep343, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, %132:gpr64common, 2560 :: (store (s64) into %ir.uglygep344, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, %132:gpr64common, 2560 :: (store (s64) into %ir.uglygep344, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, %132:gpr64common, 2816 :: (store (s64) into %ir.uglygep346, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, %132:gpr64common, 2816 :: (store (s64) into %ir.uglygep346, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, %132:gpr64common, 3072 :: (store (s64) into %ir.uglygep348, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, %132:gpr64common, 3072 :: (store (s64) into %ir.uglygep348, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, %132:gpr64common, 3328 :: (store (s64) into %ir.uglygep349, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, %132:gpr64common, 3328 :: (store (s64) into %ir.uglygep349, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, %132:gpr64common, 3584 :: (store (s64) into %ir.uglygep350, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, %132:gpr64common, 3584 :: (store (s64) into %ir.uglygep350, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, %132:gpr64common, 3840 :: (store (s64) into %ir.uglygep352, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, %132:gpr64common, 3840 :: (store (s64) into %ir.uglygep352, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %25:gpr64, 0, 0 :: (store (s64) into %ir.uglygep356, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %25:gpr64, 0, 0 :: (store (s64) into %ir.uglygep356, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %27:gpr64, 0, 0 :: (store (s64) into %ir.uglygep358, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %27:gpr64, 0, 0 :: (store (s64) into %ir.uglygep358, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %29:gpr64, 0, 0 :: (store (s64) into %ir.uglygep359, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %29:gpr64, 0, 0 :: (store (s64) into %ir.uglygep359, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %31:gpr64, 0, 0 :: (store (s64) into %ir.uglygep360, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %31:gpr64, 0, 0 :: (store (s64) into %ir.uglygep360, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %33:gpr64, 0, 0 :: (store (s64) into %ir.uglygep362, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %33:gpr64, 0, 0 :: (store (s64) into %ir.uglygep362, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %35:gpr64, 0, 0 :: (store (s64) into %ir.uglygep364, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %35:gpr64, 0, 0 :: (store (s64) into %ir.uglygep364, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %37:gpr64, 0, 0 :: (store (s64) into %ir.uglygep365, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %37:gpr64, 0, 0 :: (store (s64) into %ir.uglygep365, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %39:gpr64, 0, 0 :: (store (s64) into %ir.uglygep366, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %39:gpr64, 0, 0 :: (store (s64) into %ir.uglygep366, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %41:gpr64, 0, 0 :: (store (s64) into %ir.uglygep368, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %41:gpr64, 0, 0 :: (store (s64) into %ir.uglygep368, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %43:gpr64, 0, 0 :: (store (s64) into %ir.uglygep370, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %43:gpr64, 0, 0 :: (store (s64) into %ir.uglygep370, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %45:gpr64, 0, 0 :: (store (s64) into %ir.uglygep371, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %45:gpr64, 0, 0 :: (store (s64) into %ir.uglygep371, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %47:gpr64, 0, 0 :: (store (s64) into %ir.uglygep372, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %47:gpr64, 0, 0 :: (store (s64) into %ir.uglygep372, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %49:gpr64, 0, 0 :: (store (s64) into %ir.uglygep409, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %49:gpr64, 0, 0 :: (store (s64) into %ir.uglygep409, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %51:gpr64, 0, 0 :: (store (s64) into %ir.uglygep407, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %51:gpr64, 0, 0 :: (store (s64) into %ir.uglygep407, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %53:gpr64, 0, 0 :: (store (s64) into %ir.uglygep405, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %53:gpr64, 0, 0 :: (store (s64) into %ir.uglygep405, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %55:gpr64, 0, 0 :: (store (s64) into %ir.uglygep403, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %55:gpr64, 0, 0 :: (store (s64) into %ir.uglygep403, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %58:gpr64, 0, 0 :: (store (s64) into %ir.uglygep374, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %58:gpr64, 0, 0 :: (store (s64) into %ir.uglygep374, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %60:gpr64, 0, 0 :: (store (s64) into %ir.uglygep401, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %60:gpr64, 0, 0 :: (store (s64) into %ir.uglygep401, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, killed %134:gpr64sp, 0 :: (store (s64) into %ir.uglygep400, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, killed %134:gpr64sp, 0 :: (store (s64) into %ir.uglygep400, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %62:gpr64, 0, 0 :: (store (s64) into %ir.uglygep399, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %62:gpr64, 0, 0 :: (store (s64) into %ir.uglygep399, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, killed %135:gpr64sp, 0 :: (store (s64) into %ir.uglygep398, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, killed %135:gpr64sp, 0 :: (store (s64) into %ir.uglygep398, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %66:gpr64, 0, 0 :: (store (s64) into %ir.uglygep396, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %66:gpr64, 0, 0 :: (store (s64) into %ir.uglygep396, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, killed %136:gpr64sp, 0 :: (store (s64) into %ir.uglygep394, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, killed %136:gpr64sp, 0 :: (store (s64) into %ir.uglygep394, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %68:gpr64, 0, 0 :: (store (s64) into %ir.uglygep392, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %68:gpr64, 0, 0 :: (store (s64) into %ir.uglygep392, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, killed %137:gpr64sp, 0 :: (store (s64) into %ir.uglygep390, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, killed %137:gpr64sp, 0 :: (store (s64) into %ir.uglygep390, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %72:gpr64, 0, 0 :: (store (s64) into %ir.uglygep388, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %72:gpr64, 0, 0 :: (store (s64) into %ir.uglygep388, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, killed %138:gpr64sp, 0 :: (store (s64) into %ir.uglygep386, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, killed %138:gpr64sp, 0 :: (store (s64) into %ir.uglygep386, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %74:gpr64, 0, 0 :: (store (s64) into %ir.uglygep384, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %74:gpr64, 0, 0 :: (store (s64) into %ir.uglygep384, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, killed %139:gpr64sp, 0 :: (store (s64) into %ir.uglygep382, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, killed %139:gpr64sp, 0 :: (store (s64) into %ir.uglygep382, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %78:gpr64, 0, 0 :: (store (s64) into %ir.uglygep380, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %78:gpr64, 0, 0 :: (store (s64) into %ir.uglygep380, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, killed %140:gpr64sp, 0 :: (store (s64) into %ir.uglygep378, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, killed %140:gpr64sp, 0 :: (store (s64) into %ir.uglygep378, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %80:gpr64, 0, 0 :: (store (s64) into %ir.uglygep376, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %80:gpr64, 0, 0 :: (store (s64) into %ir.uglygep376, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, killed %141:gpr64sp, 0 :: (store (s64) into %ir.uglygep329, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, killed %141:gpr64sp, 0 :: (store (s64) into %ir.uglygep329, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %84:gpr64, 0, 0 :: (store (s64) into %ir.uglygep327, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %84:gpr64, 0, 0 :: (store (s64) into %ir.uglygep327, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, killed %142:gpr64sp, 0 :: (store (s64) into %ir.uglygep325, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, killed %142:gpr64sp, 0 :: (store (s64) into %ir.uglygep325, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %86:gpr64, 0, 0 :: (store (s64) into %ir.uglygep323, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %86:gpr64, 0, 0 :: (store (s64) into %ir.uglygep323, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, killed %143:gpr64sp, 0 :: (store (s64) into %ir.uglygep321, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, killed %143:gpr64sp, 0 :: (store (s64) into %ir.uglygep321, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %90:gpr64, 0, 0 :: (store (s64) into %ir.uglygep319, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %90:gpr64, 0, 0 :: (store (s64) into %ir.uglygep319, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, killed %144:gpr64sp, 0 :: (store (s64) into %ir.uglygep317, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, killed %144:gpr64sp, 0 :: (store (s64) into %ir.uglygep317, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %92:gpr64, 0, 0 :: (store (s64) into %ir.uglygep315, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %92:gpr64, 0, 0 :: (store (s64) into %ir.uglygep315, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, killed %145:gpr64sp, 0 :: (store (s64) into %ir.uglygep313, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, killed %145:gpr64sp, 0 :: (store (s64) into %ir.uglygep313, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %96:gpr64, 0, 0 :: (store (s64) into %ir.uglygep311, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %96:gpr64, 0, 0 :: (store (s64) into %ir.uglygep311, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, killed %146:gpr64sp, 0 :: (store (s64) into %ir.uglygep309, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, killed %146:gpr64sp, 0 :: (store (s64) into %ir.uglygep309, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %98:gpr64, 0, 0 :: (store (s64) into %ir.uglygep307, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %98:gpr64, 0, 0 :: (store (s64) into %ir.uglygep307, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, killed %147:gpr64sp, 0 :: (store (s64) into %ir.uglygep305, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, killed %147:gpr64sp, 0 :: (store (s64) into %ir.uglygep305, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %102:gpr64, 0, 0 :: (store (s64) into %ir.uglygep303, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %102:gpr64, 0, 0 :: (store (s64) into %ir.uglygep303, !tbaa !6)
# CHECK-NEXT:   before: STRXui %133:gpr64, killed %148:gpr64sp, 0 :: (store (s64) into %ir.uglygep301, !tbaa !6)
# CHECK-NEXT:   after: STRXui $xzr, killed %148:gpr64sp, 0 :: (store (s64) into %ir.uglygep301, !tbaa !6)
# CHECK-NEXT:   before: STRXroX %133:gpr64, %132:gpr64common, %104:gpr64, 0, 0 :: (store (s64) into %ir.uglygep299, !tbaa !6)
# CHECK-NEXT:   after: STRXroX $xzr, %132:gpr64common, %104:gpr64, 0, 0 :: (store (s64) into %ir.uglygep299, !tbaa !6)
# CHECK-NEXT:   removed!

--- |
  ; ModuleID = 's2102.c'
  source_filename = "s2102.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  %struct.args_t = type { %struct.timeval, %struct.timeval, ptr }
  %struct.timeval = type { i64, i64 }
  
  @__func__.s2102 = private unnamed_addr constant [6 x i8] c"s2102\00", align 1
  @aa = external global [256 x [256 x double]], align 64
  @a = external global [32000 x double], align 64
  @b = external global [32000 x double], align 64
  @c = external global [32000 x double], align 64
  @d = external global [32000 x double], align 64
  @e = external global [32000 x double], align 64
  @bb = external global [256 x [256 x double]], align 64
  @cc = external global [256 x [256 x double]], align 64
  
  ; Function Attrs: nounwind uwtable vscale_range(1,16)
  define dso_local double @s2102(ptr nocapture noundef %func_args) local_unnamed_addr #0 {
  entry:
    %call = tail call i32 @initialise_arrays(ptr noundef nonnull @__func__.s2102) #4
    %call1 = tail call i32 @gettimeofday(ptr noundef %func_args, ptr noundef null) #4
    br label %for.cond2.preheader
  
  for.cond2.preheader:                              ; preds = %entry, %for.cond.cleanup4
    %nl.035 = phi i32 [ 0, %entry ], [ %inc21, %for.cond.cleanup4 ]
    br label %vector.ph
  
  for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
    %t2 = getelementptr inbounds %struct.args_t, ptr %func_args, i64 0, i32 1
    %call23 = tail call i32 @gettimeofday(ptr noundef nonnull %t2, ptr noundef null) #4
    %call24 = tail call fast double @calc_checksum(ptr noundef nonnull @__func__.s2102) #4
    ret double %call24
  
  vector.ph:                                        ; preds = %for.cond.cleanup8, %for.cond2.preheader
    %lsr.iv = phi i64 [ %lsr.iv.next, %for.cond.cleanup8 ], [ 0, %for.cond2.preheader ]
    %indvars.iv37 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next38, %for.cond.cleanup8 ]
    %0 = call i64 @llvm.start.loop.iterations.i64(i64 4)
    br label %vector.body
  
  vector.body:                                      ; preds = %vector.body, %vector.ph
    %lsr.iv296 = phi i64 [ %lsr.iv.next297, %vector.body ], [ %lsr.iv, %vector.ph ]
    %1 = phi i64 [ %0, %vector.ph ], [ %2, %vector.body ]
    %uglygep330 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep331 = getelementptr i8, ptr %uglygep330, i64 2048
    %uglygep332 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep333 = getelementptr i8, ptr %uglygep332, i64 4096
    %uglygep334 = getelementptr i8, ptr %uglygep332, i64 6144
    store double 0.000000e+00, ptr %uglygep330, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep331, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep333, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep334, align 8, !tbaa !6
    %uglygep335 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep336 = getelementptr i8, ptr %uglygep335, i64 8192
    %uglygep337 = getelementptr i8, ptr %uglygep335, i64 10240
    %uglygep338 = getelementptr i8, ptr %uglygep335, i64 12288
    %uglygep339 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep340 = getelementptr i8, ptr %uglygep339, i64 14336
    store double 0.000000e+00, ptr %uglygep336, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep337, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep338, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep340, align 8, !tbaa !6
    %uglygep341 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep342 = getelementptr i8, ptr %uglygep341, i64 16384
    %uglygep343 = getelementptr i8, ptr %uglygep341, i64 18432
    %uglygep344 = getelementptr i8, ptr %uglygep341, i64 20480
    %uglygep345 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep346 = getelementptr i8, ptr %uglygep345, i64 22528
    store double 0.000000e+00, ptr %uglygep342, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep343, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep344, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep346, align 8, !tbaa !6
    %uglygep347 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep348 = getelementptr i8, ptr %uglygep347, i64 24576
    %uglygep349 = getelementptr i8, ptr %uglygep347, i64 26624
    %uglygep350 = getelementptr i8, ptr %uglygep347, i64 28672
    %uglygep351 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep352 = getelementptr i8, ptr %uglygep351, i64 30720
    store double 0.000000e+00, ptr %uglygep348, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep349, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep350, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep352, align 8, !tbaa !6
    %uglygep355 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep356 = getelementptr i8, ptr %uglygep355, i64 32768
    %uglygep357 = getelementptr i8, ptr getelementptr (i8, ptr @aa, i64 67584), i64 %lsr.iv296
    %uglygep358 = getelementptr i8, ptr %uglygep357, i64 -32768
    %uglygep359 = getelementptr i8, ptr %uglygep355, i64 36864
    %uglygep360 = getelementptr i8, ptr %uglygep357, i64 -28672
    store double 0.000000e+00, ptr %uglygep356, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep358, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep359, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep360, align 8, !tbaa !6
    %uglygep361 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep362 = getelementptr i8, ptr %uglygep361, i64 40960
    %uglygep363 = getelementptr i8, ptr getelementptr (i8, ptr @aa, i64 67584), i64 %lsr.iv296
    %uglygep364 = getelementptr i8, ptr %uglygep363, i64 -24576
    %uglygep365 = getelementptr i8, ptr %uglygep361, i64 45056
    %uglygep366 = getelementptr i8, ptr %uglygep363, i64 -20480
    store double 0.000000e+00, ptr %uglygep362, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep364, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep365, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep366, align 8, !tbaa !6
    %uglygep367 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep368 = getelementptr i8, ptr %uglygep367, i64 49152
    %uglygep369 = getelementptr i8, ptr getelementptr (i8, ptr @aa, i64 67584), i64 %lsr.iv296
    %uglygep370 = getelementptr i8, ptr %uglygep369, i64 -16384
    %uglygep371 = getelementptr i8, ptr %uglygep367, i64 53248
    %uglygep372 = getelementptr i8, ptr %uglygep369, i64 -12288
    store double 0.000000e+00, ptr %uglygep368, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep370, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep371, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep372, align 8, !tbaa !6
    %uglygep408 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep409 = getelementptr i8, ptr %uglygep408, i64 57344
    %uglygep406 = getelementptr i8, ptr getelementptr (i8, ptr @aa, i64 67584), i64 %lsr.iv296
    %uglygep407 = getelementptr i8, ptr %uglygep406, i64 -8192
    %uglygep404 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep405 = getelementptr i8, ptr %uglygep404, i64 61440
    %uglygep402 = getelementptr i8, ptr getelementptr (i8, ptr @aa, i64 67584), i64 %lsr.iv296
    %uglygep403 = getelementptr i8, ptr %uglygep402, i64 -4096
    store double 0.000000e+00, ptr %uglygep409, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep407, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep405, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep403, align 8, !tbaa !6
    %uglygep373 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep374 = getelementptr i8, ptr %uglygep373, i64 65536
    %uglygep401 = getelementptr i8, ptr %uglygep373, i64 67584
    %uglygep400 = getelementptr i8, ptr %uglygep373, i64 69632
    %uglygep399 = getelementptr i8, ptr %uglygep373, i64 71680
    store double 0.000000e+00, ptr %uglygep374, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep401, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep400, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep399, align 8, !tbaa !6
    %uglygep397 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep398 = getelementptr i8, ptr %uglygep397, i64 73728
    %uglygep395 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep396 = getelementptr i8, ptr %uglygep395, i64 75776
    %uglygep393 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep394 = getelementptr i8, ptr %uglygep393, i64 77824
    %uglygep391 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep392 = getelementptr i8, ptr %uglygep391, i64 79872
    store double 0.000000e+00, ptr %uglygep398, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep396, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep394, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep392, align 8, !tbaa !6
    %uglygep389 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep390 = getelementptr i8, ptr %uglygep389, i64 81920
    %uglygep387 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep388 = getelementptr i8, ptr %uglygep387, i64 83968
    %uglygep385 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep386 = getelementptr i8, ptr %uglygep385, i64 86016
    %uglygep383 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep384 = getelementptr i8, ptr %uglygep383, i64 88064
    store double 0.000000e+00, ptr %uglygep390, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep388, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep386, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep384, align 8, !tbaa !6
    %uglygep381 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep382 = getelementptr i8, ptr %uglygep381, i64 90112
    %uglygep379 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep380 = getelementptr i8, ptr %uglygep379, i64 92160
    %uglygep377 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep378 = getelementptr i8, ptr %uglygep377, i64 94208
    %uglygep375 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep376 = getelementptr i8, ptr %uglygep375, i64 96256
    store double 0.000000e+00, ptr %uglygep382, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep380, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep378, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep376, align 8, !tbaa !6
    %uglygep328 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep329 = getelementptr i8, ptr %uglygep328, i64 98304
    %uglygep326 = getelementptr i8, ptr getelementptr (i8, ptr @aa, i64 67584), i64 %lsr.iv296
    %uglygep327 = getelementptr i8, ptr %uglygep326, i64 32768
    %uglygep324 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep325 = getelementptr i8, ptr %uglygep324, i64 102400
    %uglygep322 = getelementptr i8, ptr getelementptr (i8, ptr @aa, i64 67584), i64 %lsr.iv296
    %uglygep323 = getelementptr i8, ptr %uglygep322, i64 36864
    store double 0.000000e+00, ptr %uglygep329, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep327, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep325, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep323, align 8, !tbaa !6
    %uglygep320 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep321 = getelementptr i8, ptr %uglygep320, i64 106496
    %uglygep318 = getelementptr i8, ptr getelementptr (i8, ptr @aa, i64 67584), i64 %lsr.iv296
    %uglygep319 = getelementptr i8, ptr %uglygep318, i64 40960
    %uglygep316 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep317 = getelementptr i8, ptr %uglygep316, i64 110592
    %uglygep314 = getelementptr i8, ptr getelementptr (i8, ptr @aa, i64 67584), i64 %lsr.iv296
    %uglygep315 = getelementptr i8, ptr %uglygep314, i64 45056
    store double 0.000000e+00, ptr %uglygep321, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep319, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep317, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep315, align 8, !tbaa !6
    %uglygep312 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep313 = getelementptr i8, ptr %uglygep312, i64 114688
    %uglygep310 = getelementptr i8, ptr getelementptr (i8, ptr @aa, i64 67584), i64 %lsr.iv296
    %uglygep311 = getelementptr i8, ptr %uglygep310, i64 49152
    %uglygep308 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep309 = getelementptr i8, ptr %uglygep308, i64 118784
    %uglygep306 = getelementptr i8, ptr getelementptr (i8, ptr @aa, i64 67584), i64 %lsr.iv296
    %uglygep307 = getelementptr i8, ptr %uglygep306, i64 53248
    store double 0.000000e+00, ptr %uglygep313, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep311, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep309, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep307, align 8, !tbaa !6
    %uglygep304 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep305 = getelementptr i8, ptr %uglygep304, i64 122880
    %uglygep302 = getelementptr i8, ptr getelementptr (i8, ptr @aa, i64 67584), i64 %lsr.iv296
    %uglygep303 = getelementptr i8, ptr %uglygep302, i64 57344
    %uglygep300 = getelementptr i8, ptr @aa, i64 %lsr.iv296
    %uglygep301 = getelementptr i8, ptr %uglygep300, i64 126976
    %uglygep298 = getelementptr i8, ptr getelementptr (i8, ptr @aa, i64 67584), i64 %lsr.iv296
    %uglygep299 = getelementptr i8, ptr %uglygep298, i64 61440
    store double 0.000000e+00, ptr %uglygep305, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep303, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep301, align 8, !tbaa !6
    store double 0.000000e+00, ptr %uglygep299, align 8, !tbaa !6
    %lsr.iv.next297 = add nuw nsw i64 %lsr.iv296, 131072
    %2 = call i64 @llvm.loop.decrement.reg.i64(i64 %1, i64 1)
    %3 = icmp ne i64 %2, 0
    br i1 %3, label %vector.body, label %for.cond.cleanup8, !llvm.loop !10
  
  for.cond.cleanup4:                                ; preds = %for.cond.cleanup8
    %call19 = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, double noundef 0.000000e+00) #4
    %inc21 = add nuw nsw i32 %nl.035, 1
    %exitcond41.not = icmp eq i32 %inc21, 39000
    br i1 %exitcond41.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !13
  
  for.cond.cleanup8:                                ; preds = %vector.body
    %arrayidx15 = getelementptr inbounds [256 x [256 x double]], ptr @aa, i64 0, i64 %indvars.iv37, i64 %indvars.iv37
    store double 1.000000e+00, ptr %arrayidx15, align 8, !tbaa !6
    %indvars.iv.next38 = add nuw nsw i64 %indvars.iv37, 1
    %lsr.iv.next = add nuw nsw i64 %lsr.iv, 8
    %exitcond40.not = icmp eq i64 %indvars.iv.next38, 256
    br i1 %exitcond40.not, label %for.cond.cleanup4, label %vector.ph, !llvm.loop !14
  }
  
  declare i32 @initialise_arrays(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nofree nounwind
  declare noundef i32 @gettimeofday(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #2
  
  declare i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, double noundef) local_unnamed_addr #1
  
  declare double @calc_checksum(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #3
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #3
  
  attributes #0 = { nounwind uwtable vscale_range(1,16) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #1 = { "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #2 = { nofree nounwind "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #3 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #4 = { nounwind }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 7, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !5 = !{!"clang version 15.0.4 ()"}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"double", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C/C++ TBAA"}
  !10 = distinct !{!10, !11, !12}
  !11 = !{!"llvm.loop.mustprogress"}
  !12 = !{!"llvm.loop.isvectorized", i32 1}
  !13 = distinct !{!13, !11}
  !14 = distinct !{!14, !11}

...
---
name:            s2102
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32sp, preferred-register: '' }
  - { id: 1, class: gpr64sp, preferred-register: '' }
  - { id: 2, class: gpr64common, preferred-register: '' }
  - { id: 3, class: gpr64all, preferred-register: '' }
  - { id: 4, class: gpr64common, preferred-register: '' }
  - { id: 5, class: gpr64sp, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr64all, preferred-register: '' }
  - { id: 8, class: gpr32all, preferred-register: '' }
  - { id: 9, class: gpr64all, preferred-register: '' }
  - { id: 10, class: gpr64all, preferred-register: '' }
  - { id: 11, class: gpr64common, preferred-register: '' }
  - { id: 12, class: gpr32all, preferred-register: '' }
  - { id: 13, class: gpr64common, preferred-register: '' }
  - { id: 14, class: gpr32all, preferred-register: '' }
  - { id: 15, class: gpr64all, preferred-register: '' }
  - { id: 16, class: gpr32all, preferred-register: '' }
  - { id: 17, class: gpr32all, preferred-register: '' }
  - { id: 18, class: gpr64all, preferred-register: '' }
  - { id: 19, class: gpr64all, preferred-register: '' }
  - { id: 20, class: gpr32, preferred-register: '' }
  - { id: 21, class: gpr64common, preferred-register: '' }
  - { id: 22, class: gpr64common, preferred-register: '' }
  - { id: 23, class: gpr64, preferred-register: '' }
  - { id: 24, class: gpr32, preferred-register: '' }
  - { id: 25, class: gpr64, preferred-register: '' }
  - { id: 26, class: gpr32, preferred-register: '' }
  - { id: 27, class: gpr64, preferred-register: '' }
  - { id: 28, class: gpr32, preferred-register: '' }
  - { id: 29, class: gpr64, preferred-register: '' }
  - { id: 30, class: gpr32, preferred-register: '' }
  - { id: 31, class: gpr64, preferred-register: '' }
  - { id: 32, class: gpr32, preferred-register: '' }
  - { id: 33, class: gpr64, preferred-register: '' }
  - { id: 34, class: gpr32, preferred-register: '' }
  - { id: 35, class: gpr64, preferred-register: '' }
  - { id: 36, class: gpr32, preferred-register: '' }
  - { id: 37, class: gpr64, preferred-register: '' }
  - { id: 38, class: gpr32, preferred-register: '' }
  - { id: 39, class: gpr64, preferred-register: '' }
  - { id: 40, class: gpr32, preferred-register: '' }
  - { id: 41, class: gpr64, preferred-register: '' }
  - { id: 42, class: gpr32, preferred-register: '' }
  - { id: 43, class: gpr64, preferred-register: '' }
  - { id: 44, class: gpr32, preferred-register: '' }
  - { id: 45, class: gpr64, preferred-register: '' }
  - { id: 46, class: gpr32, preferred-register: '' }
  - { id: 47, class: gpr64, preferred-register: '' }
  - { id: 48, class: gpr32, preferred-register: '' }
  - { id: 49, class: gpr64, preferred-register: '' }
  - { id: 50, class: gpr32, preferred-register: '' }
  - { id: 51, class: gpr64, preferred-register: '' }
  - { id: 52, class: gpr32, preferred-register: '' }
  - { id: 53, class: gpr64, preferred-register: '' }
  - { id: 54, class: gpr32, preferred-register: '' }
  - { id: 55, class: gpr64, preferred-register: '' }
  - { id: 56, class: gpr64sp, preferred-register: '' }
  - { id: 57, class: gpr32, preferred-register: '' }
  - { id: 58, class: gpr64, preferred-register: '' }
  - { id: 59, class: gpr32, preferred-register: '' }
  - { id: 60, class: gpr64, preferred-register: '' }
  - { id: 61, class: gpr32, preferred-register: '' }
  - { id: 62, class: gpr64, preferred-register: '' }
  - { id: 63, class: gpr64sp, preferred-register: '' }
  - { id: 64, class: gpr64sp, preferred-register: '' }
  - { id: 65, class: gpr32, preferred-register: '' }
  - { id: 66, class: gpr64, preferred-register: '' }
  - { id: 67, class: gpr32, preferred-register: '' }
  - { id: 68, class: gpr64, preferred-register: '' }
  - { id: 69, class: gpr64sp, preferred-register: '' }
  - { id: 70, class: gpr64sp, preferred-register: '' }
  - { id: 71, class: gpr32, preferred-register: '' }
  - { id: 72, class: gpr64, preferred-register: '' }
  - { id: 73, class: gpr32, preferred-register: '' }
  - { id: 74, class: gpr64, preferred-register: '' }
  - { id: 75, class: gpr64sp, preferred-register: '' }
  - { id: 76, class: gpr64sp, preferred-register: '' }
  - { id: 77, class: gpr32, preferred-register: '' }
  - { id: 78, class: gpr64, preferred-register: '' }
  - { id: 79, class: gpr32, preferred-register: '' }
  - { id: 80, class: gpr64, preferred-register: '' }
  - { id: 81, class: gpr64sp, preferred-register: '' }
  - { id: 82, class: gpr64sp, preferred-register: '' }
  - { id: 83, class: gpr32, preferred-register: '' }
  - { id: 84, class: gpr64, preferred-register: '' }
  - { id: 85, class: gpr32, preferred-register: '' }
  - { id: 86, class: gpr64, preferred-register: '' }
  - { id: 87, class: gpr64sp, preferred-register: '' }
  - { id: 88, class: gpr64sp, preferred-register: '' }
  - { id: 89, class: gpr32, preferred-register: '' }
  - { id: 90, class: gpr64, preferred-register: '' }
  - { id: 91, class: gpr32, preferred-register: '' }
  - { id: 92, class: gpr64, preferred-register: '' }
  - { id: 93, class: gpr64sp, preferred-register: '' }
  - { id: 94, class: gpr64sp, preferred-register: '' }
  - { id: 95, class: gpr32, preferred-register: '' }
  - { id: 96, class: gpr64, preferred-register: '' }
  - { id: 97, class: gpr32, preferred-register: '' }
  - { id: 98, class: gpr64, preferred-register: '' }
  - { id: 99, class: gpr64sp, preferred-register: '' }
  - { id: 100, class: gpr64sp, preferred-register: '' }
  - { id: 101, class: gpr32, preferred-register: '' }
  - { id: 102, class: gpr64, preferred-register: '' }
  - { id: 103, class: gpr32, preferred-register: '' }
  - { id: 104, class: gpr64, preferred-register: '' }
  - { id: 105, class: gpr64sp, preferred-register: '' }
  - { id: 106, class: gpr64, preferred-register: '' }
  - { id: 107, class: gpr64common, preferred-register: '' }
  - { id: 108, class: gpr64common, preferred-register: '' }
  - { id: 109, class: gpr64, preferred-register: '' }
  - { id: 110, class: gpr64sp, preferred-register: '' }
  - { id: 111, class: gpr64sp, preferred-register: '' }
  - { id: 112, class: gpr64, preferred-register: '' }
  - { id: 113, class: gpr64common, preferred-register: '' }
  - { id: 114, class: gpr64common, preferred-register: '' }
  - { id: 115, class: gpr64common, preferred-register: '' }
  - { id: 116, class: gpr64common, preferred-register: '' }
  - { id: 117, class: gpr64common, preferred-register: '' }
  - { id: 118, class: gpr64common, preferred-register: '' }
  - { id: 119, class: gpr64common, preferred-register: '' }
  - { id: 120, class: gpr64common, preferred-register: '' }
  - { id: 121, class: fpr64, preferred-register: '' }
  - { id: 122, class: gpr32all, preferred-register: '' }
  - { id: 123, class: gpr32common, preferred-register: '' }
  - { id: 124, class: gpr32, preferred-register: '' }
  - { id: 125, class: gpr32, preferred-register: '' }
  - { id: 126, class: gpr64sp, preferred-register: '' }
  - { id: 127, class: gpr64all, preferred-register: '' }
  - { id: 128, class: gpr32all, preferred-register: '' }
  - { id: 129, class: gpr64common, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%11' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     true
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $x0
  
    %11:gpr64common = COPY $x0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %13:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s2102, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s2102
    $x0 = COPY %13
    BL @initialise_arrays, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %15:gpr64all = COPY $xzr
    $x0 = COPY %11
    $x1 = COPY %15
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %17:gpr32all = COPY $wzr
    %12:gpr32all = COPY %17
    %20:gpr32 = MOVi32imm 4
    %21:gpr64common = LOADgot target-flags(aarch64-got) @aa
    %24:gpr32 = MOVi32imm 32768
    %25:gpr64 = SUBREG_TO_REG 0, %24, %subreg.sub_32
    %26:gpr32 = MOVi32imm 34816
    %27:gpr64 = SUBREG_TO_REG 0, %26, %subreg.sub_32
    %28:gpr32 = MOVi32imm 36864
    %29:gpr64 = SUBREG_TO_REG 0, %28, %subreg.sub_32
    %30:gpr32 = MOVi32imm 38912
    %31:gpr64 = SUBREG_TO_REG 0, %30, %subreg.sub_32
    %32:gpr32 = MOVi32imm 40960
    %33:gpr64 = SUBREG_TO_REG 0, %32, %subreg.sub_32
    %34:gpr32 = MOVi32imm 43008
    %35:gpr64 = SUBREG_TO_REG 0, %34, %subreg.sub_32
    %36:gpr32 = MOVi32imm 45056
    %37:gpr64 = SUBREG_TO_REG 0, %36, %subreg.sub_32
    %38:gpr32 = MOVi32imm 47104
    %39:gpr64 = SUBREG_TO_REG 0, %38, %subreg.sub_32
    %40:gpr32 = MOVi32imm 49152
    %41:gpr64 = SUBREG_TO_REG 0, %40, %subreg.sub_32
    %42:gpr32 = MOVi32imm 51200
    %43:gpr64 = SUBREG_TO_REG 0, %42, %subreg.sub_32
    %44:gpr32 = MOVi32imm 53248
    %45:gpr64 = SUBREG_TO_REG 0, %44, %subreg.sub_32
    %46:gpr32 = MOVi32imm 55296
    %47:gpr64 = SUBREG_TO_REG 0, %46, %subreg.sub_32
    %48:gpr32 = MOVi32imm 57344
    %49:gpr64 = SUBREG_TO_REG 0, %48, %subreg.sub_32
    %50:gpr32 = MOVi32imm 59392
    %51:gpr64 = SUBREG_TO_REG 0, %50, %subreg.sub_32
    %52:gpr32 = MOVi32imm 61440
    %53:gpr64 = SUBREG_TO_REG 0, %52, %subreg.sub_32
    %54:gpr32 = MOVi32imm 63488
    %55:gpr64 = SUBREG_TO_REG 0, %54, %subreg.sub_32
    %57:gpr32 = MOVi32imm 65536
    %58:gpr64 = SUBREG_TO_REG 0, %57, %subreg.sub_32
    %59:gpr32 = MOVi32imm 67584
    %60:gpr64 = SUBREG_TO_REG 0, %59, %subreg.sub_32
    %61:gpr32 = MOVi32imm 71680
    %62:gpr64 = SUBREG_TO_REG 0, %61, %subreg.sub_32
    %65:gpr32 = MOVi32imm 75776
    %66:gpr64 = SUBREG_TO_REG 0, %65, %subreg.sub_32
    %67:gpr32 = MOVi32imm 79872
    %68:gpr64 = SUBREG_TO_REG 0, %67, %subreg.sub_32
    %71:gpr32 = MOVi32imm 83968
    %72:gpr64 = SUBREG_TO_REG 0, %71, %subreg.sub_32
    %73:gpr32 = MOVi32imm 88064
    %74:gpr64 = SUBREG_TO_REG 0, %73, %subreg.sub_32
    %77:gpr32 = MOVi32imm 92160
    %78:gpr64 = SUBREG_TO_REG 0, %77, %subreg.sub_32
    %79:gpr32 = MOVi32imm 96256
    %80:gpr64 = SUBREG_TO_REG 0, %79, %subreg.sub_32
    %83:gpr32 = MOVi32imm 100352
    %84:gpr64 = SUBREG_TO_REG 0, %83, %subreg.sub_32
    %85:gpr32 = MOVi32imm 104448
    %86:gpr64 = SUBREG_TO_REG 0, %85, %subreg.sub_32
    %89:gpr32 = MOVi32imm 108544
    %90:gpr64 = SUBREG_TO_REG 0, %89, %subreg.sub_32
    %91:gpr32 = MOVi32imm 112640
    %92:gpr64 = SUBREG_TO_REG 0, %91, %subreg.sub_32
    %95:gpr32 = MOVi32imm 116736
    %96:gpr64 = SUBREG_TO_REG 0, %95, %subreg.sub_32
    %97:gpr32 = MOVi32imm 120832
    %98:gpr64 = SUBREG_TO_REG 0, %97, %subreg.sub_32
    %101:gpr32 = MOVi32imm 124928
    %102:gpr64 = SUBREG_TO_REG 0, %101, %subreg.sub_32
    %103:gpr32 = MOVi32imm 129024
    %104:gpr64 = SUBREG_TO_REG 0, %103, %subreg.sub_32
    %109:gpr64 = MOVi64imm 4607182418800017408
    %113:gpr64common = LOADgot target-flags(aarch64-got) @a
    %114:gpr64common = LOADgot target-flags(aarch64-got) @b
    %115:gpr64common = LOADgot target-flags(aarch64-got) @c
    %116:gpr64common = LOADgot target-flags(aarch64-got) @d
    %117:gpr64common = LOADgot target-flags(aarch64-got) @e
    %119:gpr64common = LOADgot target-flags(aarch64-got) @bb
    %120:gpr64common = LOADgot target-flags(aarch64-got) @cc
    %121:fpr64 = FMOVD0
    %124:gpr32 = MOVi32imm 39000
  
  bb.1.for.cond2.preheader:
    successors: %bb.3(0x80000000)
  
    %0:gpr32sp = PHI %12, %bb.0, %8, %bb.5
    %19:gpr64all = COPY $xzr
    %18:gpr64all = COPY %19
    B %bb.3
  
  bb.2.for.cond.cleanup:
    %126:gpr64sp = nuw ADDXri %11, 16, 0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %127:gpr64all = COPY $xzr
    $x0 = COPY %126
    $x1 = COPY %127
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %129:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s2102, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s2102
    $x0 = COPY %129
    TCRETURNdi @calc_checksum, 0, csr_aarch64_aapcs, implicit $sp, implicit $x0
  
  bb.3.vector.ph:
    successors: %bb.4(0x80000000)
  
    %1:gpr64sp = PHI %18, %bb.1, %10, %bb.6
    %2:gpr64common = PHI %18, %bb.1, %9, %bb.6
    %3:gpr64all = SUBREG_TO_REG 0, %20, %subreg.sub_32
  
  bb.4.vector.body:
    successors: %bb.4(0x7c000000), %bb.6(0x04000000)
  
    %4:gpr64common = PHI %1, %bb.3, %6, %bb.4
    %5:gpr64sp = PHI %3, %bb.3, %7, %bb.4
    %22:gpr64common = ADDXrr %21, %4
    %23:gpr64 = COPY $xzr
    STRXui %23, %22, 0 :: (store (s64) into %ir.uglygep330, !tbaa !6)
    STRXui %23, %22, 256 :: (store (s64) into %ir.uglygep331, !tbaa !6)
    STRXui %23, %22, 512 :: (store (s64) into %ir.uglygep333, !tbaa !6)
    STRXui %23, %22, 768 :: (store (s64) into %ir.uglygep334, !tbaa !6)
    STRXui %23, %22, 1024 :: (store (s64) into %ir.uglygep336, !tbaa !6)
    STRXui %23, %22, 1280 :: (store (s64) into %ir.uglygep337, !tbaa !6)
    STRXui %23, %22, 1536 :: (store (s64) into %ir.uglygep338, !tbaa !6)
    STRXui %23, %22, 1792 :: (store (s64) into %ir.uglygep340, !tbaa !6)
    STRXui %23, %22, 2048 :: (store (s64) into %ir.uglygep342, !tbaa !6)
    STRXui %23, %22, 2304 :: (store (s64) into %ir.uglygep343, !tbaa !6)
    STRXui %23, %22, 2560 :: (store (s64) into %ir.uglygep344, !tbaa !6)
    STRXui %23, %22, 2816 :: (store (s64) into %ir.uglygep346, !tbaa !6)
    STRXui %23, %22, 3072 :: (store (s64) into %ir.uglygep348, !tbaa !6)
    STRXui %23, %22, 3328 :: (store (s64) into %ir.uglygep349, !tbaa !6)
    STRXui %23, %22, 3584 :: (store (s64) into %ir.uglygep350, !tbaa !6)
    STRXui %23, %22, 3840 :: (store (s64) into %ir.uglygep352, !tbaa !6)
    STRXroX %23, %22, %25, 0, 0 :: (store (s64) into %ir.uglygep356, !tbaa !6)
    STRXroX %23, %22, %27, 0, 0 :: (store (s64) into %ir.uglygep358, !tbaa !6)
    STRXroX %23, %22, %29, 0, 0 :: (store (s64) into %ir.uglygep359, !tbaa !6)
    STRXroX %23, %22, %31, 0, 0 :: (store (s64) into %ir.uglygep360, !tbaa !6)
    STRXroX %23, %22, %33, 0, 0 :: (store (s64) into %ir.uglygep362, !tbaa !6)
    STRXroX %23, %22, %35, 0, 0 :: (store (s64) into %ir.uglygep364, !tbaa !6)
    STRXroX %23, %22, %37, 0, 0 :: (store (s64) into %ir.uglygep365, !tbaa !6)
    STRXroX %23, %22, %39, 0, 0 :: (store (s64) into %ir.uglygep366, !tbaa !6)
    STRXroX %23, %22, %41, 0, 0 :: (store (s64) into %ir.uglygep368, !tbaa !6)
    STRXroX %23, %22, %43, 0, 0 :: (store (s64) into %ir.uglygep370, !tbaa !6)
    STRXroX %23, %22, %45, 0, 0 :: (store (s64) into %ir.uglygep371, !tbaa !6)
    STRXroX %23, %22, %47, 0, 0 :: (store (s64) into %ir.uglygep372, !tbaa !6)
    STRXroX %23, %22, %49, 0, 0 :: (store (s64) into %ir.uglygep409, !tbaa !6)
    STRXroX %23, %22, %51, 0, 0 :: (store (s64) into %ir.uglygep407, !tbaa !6)
    STRXroX %23, %22, %53, 0, 0 :: (store (s64) into %ir.uglygep405, !tbaa !6)
    STRXroX %23, %22, %55, 0, 0 :: (store (s64) into %ir.uglygep403, !tbaa !6)
    %56:gpr64sp = ADDXri %22, 17, 12
    STRXroX %23, %22, %58, 0, 0 :: (store (s64) into %ir.uglygep374, !tbaa !6)
    STRXroX %23, %22, %60, 0, 0 :: (store (s64) into %ir.uglygep401, !tbaa !6)
    STRXui %23, killed %56, 0 :: (store (s64) into %ir.uglygep400, !tbaa !6)
    STRXroX %23, %22, %62, 0, 0 :: (store (s64) into %ir.uglygep399, !tbaa !6)
    %63:gpr64sp = ADDXri %22, 18, 12
    %64:gpr64sp = ADDXri %22, 19, 12
    STRXui %23, killed %63, 0 :: (store (s64) into %ir.uglygep398, !tbaa !6)
    STRXroX %23, %22, %66, 0, 0 :: (store (s64) into %ir.uglygep396, !tbaa !6)
    STRXui %23, killed %64, 0 :: (store (s64) into %ir.uglygep394, !tbaa !6)
    STRXroX %23, %22, %68, 0, 0 :: (store (s64) into %ir.uglygep392, !tbaa !6)
    %69:gpr64sp = ADDXri %22, 20, 12
    %70:gpr64sp = ADDXri %22, 21, 12
    STRXui %23, killed %69, 0 :: (store (s64) into %ir.uglygep390, !tbaa !6)
    STRXroX %23, %22, %72, 0, 0 :: (store (s64) into %ir.uglygep388, !tbaa !6)
    STRXui %23, killed %70, 0 :: (store (s64) into %ir.uglygep386, !tbaa !6)
    STRXroX %23, %22, %74, 0, 0 :: (store (s64) into %ir.uglygep384, !tbaa !6)
    %75:gpr64sp = ADDXri %22, 22, 12
    %76:gpr64sp = ADDXri %22, 23, 12
    STRXui %23, killed %75, 0 :: (store (s64) into %ir.uglygep382, !tbaa !6)
    STRXroX %23, %22, %78, 0, 0 :: (store (s64) into %ir.uglygep380, !tbaa !6)
    STRXui %23, killed %76, 0 :: (store (s64) into %ir.uglygep378, !tbaa !6)
    STRXroX %23, %22, %80, 0, 0 :: (store (s64) into %ir.uglygep376, !tbaa !6)
    %81:gpr64sp = ADDXri %22, 24, 12
    %82:gpr64sp = ADDXri %22, 25, 12
    STRXui %23, killed %81, 0 :: (store (s64) into %ir.uglygep329, !tbaa !6)
    STRXroX %23, %22, %84, 0, 0 :: (store (s64) into %ir.uglygep327, !tbaa !6)
    STRXui %23, killed %82, 0 :: (store (s64) into %ir.uglygep325, !tbaa !6)
    STRXroX %23, %22, %86, 0, 0 :: (store (s64) into %ir.uglygep323, !tbaa !6)
    %87:gpr64sp = ADDXri %22, 26, 12
    %88:gpr64sp = ADDXri %22, 27, 12
    STRXui %23, killed %87, 0 :: (store (s64) into %ir.uglygep321, !tbaa !6)
    STRXroX %23, %22, %90, 0, 0 :: (store (s64) into %ir.uglygep319, !tbaa !6)
    STRXui %23, killed %88, 0 :: (store (s64) into %ir.uglygep317, !tbaa !6)
    STRXroX %23, %22, %92, 0, 0 :: (store (s64) into %ir.uglygep315, !tbaa !6)
    %93:gpr64sp = ADDXri %22, 28, 12
    %94:gpr64sp = ADDXri %22, 29, 12
    STRXui %23, killed %93, 0 :: (store (s64) into %ir.uglygep313, !tbaa !6)
    STRXroX %23, %22, %96, 0, 0 :: (store (s64) into %ir.uglygep311, !tbaa !6)
    STRXui %23, killed %94, 0 :: (store (s64) into %ir.uglygep309, !tbaa !6)
    STRXroX %23, %22, %98, 0, 0 :: (store (s64) into %ir.uglygep307, !tbaa !6)
    %99:gpr64sp = ADDXri %22, 30, 12
    %100:gpr64sp = ADDXri %22, 31, 12
    STRXui %23, killed %99, 0 :: (store (s64) into %ir.uglygep305, !tbaa !6)
    STRXroX %23, %22, %102, 0, 0 :: (store (s64) into %ir.uglygep303, !tbaa !6)
    STRXui %23, killed %100, 0 :: (store (s64) into %ir.uglygep301, !tbaa !6)
    STRXroX %23, %22, %104, 0, 0 :: (store (s64) into %ir.uglygep299, !tbaa !6)
    %105:gpr64sp = nuw nsw ADDXri %4, 32, 12
    %6:gpr64all = COPY %105
    %106:gpr64 = SUBSXri %5, 1, 0, implicit-def $nzcv
    %7:gpr64all = COPY %106
    Bcc 1, %bb.4, implicit $nzcv
    B %bb.6
  
  bb.5.for.cond.cleanup4:
    successors: %bb.2(0x04000000), %bb.1(0x7c000000)
  
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    $x0 = COPY %113
    $x1 = COPY %114
    $x2 = COPY %115
    $x3 = COPY %116
    $x4 = COPY %117
    $x5 = COPY %21
    $x6 = COPY %119
    $x7 = COPY %120
    $d0 = COPY %121
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $d0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %123:gpr32common = nuw nsw ADDWri %0, 1, 0
    %8:gpr32all = COPY %123
    dead $wzr = SUBSWrr %123, %124, implicit-def $nzcv
    Bcc 0, %bb.2, implicit $nzcv
    B %bb.1
  
  bb.6.for.cond.cleanup8:
    successors: %bb.5(0x04000000), %bb.3(0x7c000000)
  
    %108:gpr64common = ADDXrs %21, %2, 11
    STRXroX %109, killed %108, %2, 0, 1 :: (store (s64) into %ir.arrayidx15, !tbaa !6)
    %110:gpr64sp = nuw nsw ADDXri %2, 1, 0
    %9:gpr64all = COPY %110
    %111:gpr64sp = nuw nsw ADDXri %1, 8, 0
    %10:gpr64all = COPY %111
    dead $xzr = SUBSXri %110, 256, 0, implicit-def $nzcv
    Bcc 0, %bb.5, implicit $nzcv
    B %bb.3

...
