#RUN: llc %s -mcpu=a64fx -fswp -fls -O3 -start-before=aarch64-swpipeliner -swpl-maxii=2 -ls-debug-dump-plan -o /dev/null 2>&1 | FileCheck %s
#CHECK:(plan {{0x[0-9a-f]+}}:
#CHECK-NEXT:  iteration_interval  = 19
#CHECK-NEXT:  n_iteration_copies  = 1
#CHECK-NEXT:  n_renaming_versions = 1
#CHECK-NEXT:  begin_slot = {{[0-9]+}}
#CHECK-NEXT:  end_slot   = {{[0-9]+}}
#CHECK-NEXT:  total_cycles  = 19
#CHECK-NEXT:  prolog_cycles = 0
#CHECK-NEXT:  kernel_cycles = 19
#CHECK-NEXT:  epilog_cycles = 0
#CHECK-EMPTY:
#CHECK-NEXT:	( MachineInstr* : OpcodeName )
#CHECK-EMPTY:
#CHECK-NEXT:	--0--		--1--		--2--		--3-- (0x{{[0-9a-f]+}}:{{[a-zA-Z]+}}) (0x{{[0-9a-f]+}}:{{[a-zA-Z]+}}) (0x{{[0-9a-f]+}}:{{[a-zA-Z]+}}) --7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		({{0x[0-9a-f]+}}:FADDSrr)		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		({{0x[0-9a-f]+}}:STRSroX)		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		({{0x[0-9a-f]+}}:ADDXri)		--5--		--6--		--7--	
#CHECK-NEXT:)


--- |
  ; ModuleID = 'schedule.cpp'
  source_filename = "schedule.cpp"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind memory(argmem: readwrite) uwtable vscale_range(1,16)
  define dso_local void @_Z3addPfS_S_(ptr nocapture noundef writeonly %a, ptr nocapture noundef readonly %b, ptr nocapture noundef readonly %c) local_unnamed_addr #0 {
  entry:
    %0 = call i64 @llvm.start.loop.iterations.i64(i64 100)
    br label %for.body
  
  for.cond.cleanup:                                 ; preds = %for.body
    ret void
  
  for.body:                                         ; preds = %entry, %for.body
    %lsr.iv = phi i64 [ 0, %entry ], [ %lsr.iv.next, %for.body ]
    %1 = phi i64 [ %0, %entry ], [ %4, %for.body ]
    %scevgep12 = getelementptr i8, ptr %b, i64 %lsr.iv
    %2 = load float, ptr %scevgep12, align 4, !tbaa !6
    %scevgep11 = getelementptr i8, ptr %c, i64 %lsr.iv
    %3 = load float, ptr %scevgep11, align 4, !tbaa !6
    %add = fadd float %2, %3
    %scevgep = getelementptr i8, ptr %a, i64 %lsr.iv
    store float %add, ptr %scevgep, align 4, !tbaa !6
    %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4
    %4 = call i64 @llvm.loop.decrement.reg.i64(i64 %1, i64 1)
    %5 = icmp ne i64 %4, 0
    br i1 %5, label %for.body, label %for.cond.cleanup, !llvm.loop !10
  }
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #1
  
  attributes #0 = { mustprogress nofree norecurse nosync nounwind memory(argmem: readwrite) uwtable vscale_range(1,16) "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" }
  attributes #1 = { nocallback noduplicate nofree nosync nounwind willreturn }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"float", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C++ TBAA"}
  !10 = distinct !{!10, !11, !12}
  !11 = !{!"llvm.loop.mustprogress"}
  !12 = !{!"llvm.loop.unroll.disable"}

...
---
name:            _Z3addPfS_S_
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr64all, preferred-register: '' }
  - { id: 1, class: gpr64common, preferred-register: '' }
  - { id: 2, class: gpr64sp, preferred-register: '' }
  - { id: 3, class: gpr64all, preferred-register: '' }
  - { id: 4, class: gpr64all, preferred-register: '' }
  - { id: 5, class: gpr64common, preferred-register: '' }
  - { id: 6, class: gpr64common, preferred-register: '' }
  - { id: 7, class: gpr64common, preferred-register: '' }
  - { id: 8, class: gpr64all, preferred-register: '' }
  - { id: 9, class: gpr64all, preferred-register: '' }
  - { id: 10, class: gpr32, preferred-register: '' }
  - { id: 11, class: fpr32, preferred-register: '' }
  - { id: 12, class: fpr32, preferred-register: '' }
  - { id: 13, class: fpr32, preferred-register: '' }
  - { id: 14, class: gpr64sp, preferred-register: '' }
  - { id: 15, class: gpr64, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%5' }
  - { reg: '$x1', virtual-reg: '%6' }
  - { reg: '$x2', virtual-reg: '%7' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.2(0x80000000)
    liveins: $x0, $x1, $x2
  
    %7:gpr64common = COPY $x2
    %6:gpr64common = COPY $x1
    %5:gpr64common = COPY $x0
    %9:gpr64all = COPY $xzr
    %8:gpr64all = COPY %9
    %10:gpr32 = MOVi32imm 100
    %0:gpr64all = SUBREG_TO_REG 0, killed %10, %subreg.sub_32
    B %bb.2
  
  bb.1.for.cond.cleanup:
    RET_ReallyLR
  
  bb.2.for.body:
    successors: %bb.2(0x7c000000), %bb.1(0x04000000)
  
    %1:gpr64common = PHI %8, %bb.0, %3, %bb.2
    %2:gpr64sp = PHI %0, %bb.0, %4, %bb.2
    %11:fpr32 = LDRSroX %6, %1, 0, 0 :: (load (s32) from %ir.scevgep12, !tbaa !6)
    %12:fpr32 = LDRSroX %7, %1, 0, 0 :: (load (s32) from %ir.scevgep11, !tbaa !6)
    %13:fpr32 = nofpexcept FADDSrr killed %11, killed %12, implicit $fpcr
    STRSroX killed %13, %5, %1, 0, 0 :: (store (s32) into %ir.scevgep, !tbaa !6)
    %14:gpr64sp = nuw nsw ADDXri %1, 4, 0
    %3:gpr64all = COPY %14
    %15:gpr64 = SUBSXri %2, 1, 0, implicit-def $nzcv
    %4:gpr64all = COPY %15
    Bcc 1, %bb.2, implicit $nzcv
    B %bb.1

...
