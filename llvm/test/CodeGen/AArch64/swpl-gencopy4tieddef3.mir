# RUN: llc %s -o /dev/null -O1 -mcpu=a64fx -fswp -swpl-enable-reg-alloc -start-before=aarch64-swpipeliner  -swpl-debug 2>&1 | FileCheck %s
# CHECK: DEBUG(SwplLoop::normalizeTiedDef): Copy is required.: %56:gpr64sp = ST2Twov2d_POST killed %54:qq, %46:gpr64sp(tied-def 0), $xzr

# The COPY reduction specification has changed, and the following messages no longer occur.
# : DEBUG(SwplLoop::check_need_copy4TiedUseReg): tiedUseReg(%45) eq tiedDef:%45:gpr64sp = ST2Twov2d_POST killed %53:qq, %45:gpr64sp(tied-def 0), $xzr
# : DEBUG(SwplLoop::normalizeTiedDef): Copy is not required.: %45:gpr64sp = ST2Twov2d_POST killed %53:qq, %45:gpr64sp(tied-def 0), $xzr

--- |
  ; ModuleID = 'swpl-gencopy4tieddef3.c'
  source_filename = "swpl-gencopy4tieddef3.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  @b = external global [32000 x double], align 64
  @c = external global [32000 x double], align 64
  @d = external global [32000 x double], align 64
  @a = external global [32000 x double], align 64
  @e = external global [32000 x double], align 64
  @aa = external global [256 x [256 x double]], align 64
  @bb = external global [256 x [256 x double]], align 64
  @cc = external global [256 x [256 x double]], align 64
  
  ; Function Attrs: nounwind uwtable vscale_range(1,16)
  define dso_local void @t() local_unnamed_addr #0 {
  entry:
    br label %vector.ph
  
  vector.ph:                                        ; preds = %for.cond.cleanup3, %entry
    %nl.039 = phi i32 [ 0, %entry ], [ %inc24, %for.cond.cleanup3 ]
    %0 = call i64 @llvm.start.loop.iterations.i64(i64 8000)
    br label %vector.body
  
  vector.body:                                      ; preds = %vector.body, %vector.ph
    %lsr.iv52 = phi i64 [ %lsr.iv.next, %vector.body ], [ 0, %vector.ph ]
    %lsr.iv = phi ptr [ %uglygep, %vector.body ], [ @a, %vector.ph ]
    %1 = phi i64 [ %0, %vector.ph ], [ %8, %vector.body ]
    %uglygep53 = getelementptr i8, ptr @b, i64 %lsr.iv52
    %wide.load = load <2 x double>, ptr %uglygep53, align 16, !tbaa !6
    %uglygep54 = getelementptr i8, ptr @c, i64 %lsr.iv52
    %wide.load48 = load <2 x double>, ptr %uglygep54, align 16, !tbaa !6
    %uglygep55 = getelementptr i8, ptr @d, i64 %lsr.iv52
    %wide.load49 = load <2 x double>, ptr %uglygep55, align 16, !tbaa !6
    %2 = fmul fast <2 x double> %wide.load49, %wide.load48
    %3 = fadd fast <2 x double> %2, %wide.load
    %uglygep56 = getelementptr i8, ptr @e, i64 %lsr.iv52
    %wide.load50 = load <2 x double>, ptr %uglygep56, align 16, !tbaa !6
    %4 = fmul fast <2 x double> %wide.load50, %wide.load49
    %5 = fadd fast <2 x double> %4, %wide.load
    %6 = shufflevector <2 x double> %3, <2 x double> %5, <2 x i32> <i32 0, i32 1>
    %7 = shufflevector <2 x double> %3, <2 x double> %5, <2 x i32> <i32 2, i32 3>
    call void @llvm.aarch64.neon.st2.v2f64.p0(<2 x double> %6, <2 x double> %7, ptr %lsr.iv)
    %uglygep = getelementptr i8, ptr %lsr.iv, i64 32
    %lsr.iv.next = add nuw nsw i64 %lsr.iv52, 16
    %8 = call i64 @llvm.loop.decrement.reg.i64(i64 %1, i64 1)
    %9 = icmp ne i64 %8, 0
    br i1 %9, label %vector.body, label %for.cond.cleanup3, !llvm.loop !10
  
  for.cond.cleanup:                                 ; preds = %for.cond.cleanup3
    ret void
  
  for.cond.cleanup3:                                ; preds = %vector.body
    %call = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, double noundef 0.000000e+00) #4
    %inc24 = add nuw nsw i32 %nl.039, 1
    %exitcond46.not = icmp eq i32 %inc24, 200
    br i1 %exitcond46.not, label %for.cond.cleanup, label %vector.ph, !llvm.loop !14
  }
  
  declare i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, double noundef) local_unnamed_addr #1
  
  ; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
  declare void @llvm.aarch64.neon.st2.v2f64.p0(<2 x double>, <2 x double>, ptr nocapture) #2
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #3
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #3
  
  attributes #0 = { nounwind uwtable vscale_range(1,16) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #1 = { "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #2 = { argmemonly nocallback nofree nosync nounwind willreturn }
  attributes #3 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #4 = { nounwind }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 7, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !5 = !{!"clang version 15.0.4 ()"}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"double", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C/C++ TBAA"}
  !10 = distinct !{!10, !11, !12, !13}
  !11 = !{!"llvm.loop.mustprogress"}
  !12 = !{!"llvm.loop.unroll.disable"}
  !13 = !{!"llvm.loop.isvectorized", i32 1}
  !14 = distinct !{!14, !11, !12}

...
---
name:            t
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32sp, preferred-register: '' }
  - { id: 1, class: gpr64all, preferred-register: '' }
  - { id: 2, class: gpr64common, preferred-register: '' }
  - { id: 3, class: gpr64sp, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: gpr64all, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr64all, preferred-register: '' }
  - { id: 8, class: gpr32all, preferred-register: '' }
  - { id: 9, class: gpr32all, preferred-register: '' }
  - { id: 10, class: gpr32all, preferred-register: '' }
  - { id: 11, class: gpr64all, preferred-register: '' }
  - { id: 12, class: gpr64all, preferred-register: '' }
  - { id: 13, class: gpr64common, preferred-register: '' }
  - { id: 14, class: gpr64all, preferred-register: '' }
  - { id: 15, class: gpr32, preferred-register: '' }
  - { id: 16, class: gpr64common, preferred-register: '' }
  - { id: 17, class: fpr128, preferred-register: '' }
  - { id: 18, class: gpr64common, preferred-register: '' }
  - { id: 19, class: fpr128, preferred-register: '' }
  - { id: 20, class: gpr64common, preferred-register: '' }
  - { id: 21, class: fpr128, preferred-register: '' }
  - { id: 22, class: fpr128, preferred-register: '' }
  - { id: 23, class: fpr128, preferred-register: '' }
  - { id: 24, class: gpr64common, preferred-register: '' }
  - { id: 25, class: fpr128, preferred-register: '' }
  - { id: 26, class: fpr128, preferred-register: '' }
  - { id: 27, class: fpr128, preferred-register: '' }
  - { id: 28, class: qq, preferred-register: '' }
  - { id: 29, class: gpr64sp, preferred-register: '' }
  - { id: 30, class: gpr64sp, preferred-register: '' }
  - { id: 31, class: gpr64, preferred-register: '' }
  - { id: 32, class: gpr64common, preferred-register: '' }
  - { id: 33, class: gpr64common, preferred-register: '' }
  - { id: 34, class: gpr64common, preferred-register: '' }
  - { id: 35, class: gpr64common, preferred-register: '' }
  - { id: 36, class: gpr64common, preferred-register: '' }
  - { id: 37, class: gpr64common, preferred-register: '' }
  - { id: 38, class: gpr64common, preferred-register: '' }
  - { id: 39, class: gpr64common, preferred-register: '' }
  - { id: 40, class: fpr64, preferred-register: '' }
  - { id: 41, class: gpr32all, preferred-register: '' }
  - { id: 42, class: gpr32sp, preferred-register: '' }
  - { id: 43, class: gpr32, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
  
    %10:gpr32all = COPY $wzr
    %9:gpr32all = COPY %10
    %13:gpr64common = LOADgot target-flags(aarch64-got) @a
    %15:gpr32 = MOVi32imm 8000
    %16:gpr64common = LOADgot target-flags(aarch64-got) @b
    %18:gpr64common = LOADgot target-flags(aarch64-got) @c
    %20:gpr64common = LOADgot target-flags(aarch64-got) @d
    %24:gpr64common = LOADgot target-flags(aarch64-got) @e
    %37:gpr64common = LOADgot target-flags(aarch64-got) @aa
    %38:gpr64common = LOADgot target-flags(aarch64-got) @bb
    %39:gpr64common = LOADgot target-flags(aarch64-got) @cc
    %40:fpr64 = FMOVD0
  
  bb.1.vector.ph:
    successors: %bb.2(0x80000000)
  
    %0:gpr32sp = PHI %9, %bb.0, %8, %bb.4
    %12:gpr64all = COPY %13
    %14:gpr64all = COPY $xzr
    %11:gpr64all = COPY %14
    %1:gpr64all = SUBREG_TO_REG 0, %15, %subreg.sub_32
  
  bb.2.vector.body:
    successors: %bb.2(0x7c000000), %bb.4(0x04000000)
  
    %2:gpr64common = PHI %11, %bb.1, %6, %bb.2
    %3:gpr64sp = PHI %12, %bb.1, %5, %bb.2
    %4:gpr64sp = PHI %1, %bb.1, %7, %bb.2
    %17:fpr128 = LDRQroX %16, %2, 0, 0 :: (load (s128) from %ir.uglygep53, !tbaa !6)
    %19:fpr128 = LDRQroX %18, %2, 0, 0 :: (load (s128) from %ir.uglygep54, !tbaa !6)
    %21:fpr128 = LDRQroX %20, %2, 0, 0 :: (load (s128) from %ir.uglygep55, !tbaa !6)
    %23:fpr128 = nnan ninf nsz arcp contract afn reassoc nofpexcept FMLAv2f64 %17, %21, killed %19
    %25:fpr128 = LDRQroX %24, %2, 0, 0 :: (load (s128) from %ir.uglygep56, !tbaa !6)
    %27:fpr128 = nnan ninf nsz arcp contract afn reassoc nofpexcept FMLAv2f64 %17, killed %25, %21
    %28:qq = REG_SEQUENCE killed %23, %subreg.qsub0, killed %27, %subreg.qsub1
    %A:gpr64sp = COPY %3
    %29:gpr64sp = ST2Twov2d_POST killed %28, %A, $xzr
    %5:gpr64all = COPY %29
    %30:gpr64sp = nuw nsw ADDXri %2, 16, 0
    %6:gpr64all = COPY %30
    %31:gpr64 = SUBSXri %4, 1, 0, implicit-def $nzcv
    %7:gpr64all = COPY %31
    Bcc 1, %bb.2, implicit $nzcv
    B %bb.4
  
  bb.3.for.cond.cleanup:
    RET_ReallyLR
  
  bb.4.for.cond.cleanup3:
    successors: %bb.3(0x04000000), %bb.1(0x7c000000)
  
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    $x0 = COPY %13
    $x1 = COPY %16
    $x2 = COPY %18
    $x3 = COPY %20
    $x4 = COPY %24
    $x5 = COPY %37
    $x6 = COPY %38
    $x7 = COPY %39
    $d0 = COPY %40
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $d0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %42:gpr32sp = nuw nsw ADDWri %0, 1, 0
    %8:gpr32all = COPY %42
    dead $wzr = SUBSWri %42, 200, 0, implicit-def $nzcv
    Bcc 0, %bb.3, implicit $nzcv
    B %bb.1

...
