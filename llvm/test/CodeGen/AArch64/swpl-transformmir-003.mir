# RUN: llc %s -mcpu=a64fx -O1 -fswp -swpl-debug-dump-mir=8 -start-before=aarch64-swpipeliner -o /dev/null 2>&1 | FileCheck %s

# CHECK:** SwplTransformedMIRInfo begin **
# CHECK-NEXT:originalDoVReg:%18
# CHECK-NEXT:originalDoInitVar:%15
# CHECK-NEXT:doVReg:%104
# CHECK-NEXT:iterationInterval:2
# CHECK-NEXT:minimumIterationInterval:2
# CHECK-NEXT:coefficient: 1
# CHECK-NEXT:minConstant: 0
# CHECK-NEXT:expansion: 14
# CHECK-NEXT:nVersions: 5
# CHECK-NEXT:nCopies: 14
# CHECK-NEXT:requiredKernelIteration: 14
# CHECK-NEXT:prologEndIndx: 144
# CHECK-NEXT:kernelEndIndx: 224
# CHECK-NEXT:epilogEndIndx: 368
# CHECK-NEXT:isIterationCountConstant: 0
# CHECK-NEXT:doVRegInitialValue: 0
# CHECK-NEXT:originalKernelIteration: 0
# CHECK-NEXT:transformedKernelIteration: 0
# CHECK-NEXT:transformedModIteration: 0
# CHECK-NEXT:updateDoVRegMI:%73:gpr64 = SUBSXri %18:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:branchDoVRegMI:Bcc 1, %bb.16, implicit $nzcv
# CHECK-NEXT:branchDoVRegMIKernel:Bcc 10, %bb.8, implicit $nzcv
# CHECK-NEXT:OrgPreHeader: %bb.6
# CHECK-NEXT:Check1: %bb.11
# CHECK-NEXT:Prolog: %bb.12
# CHECK-NEXT:OrgBody: %bb.8
# CHECK-NEXT:Epilog: %bb.13
# CHECK-NEXT:NewPreHeader: %bb.15
# CHECK-NEXT:Check2: %bb.14
# CHECK-NEXT:NewBody: %bb.16
# CHECK-NEXT:NewExit: %bb.17
# CHECK-NEXT:OrgExit: %bb.7
# CHECK-NEXT:mis:
# CHECK-NEXT:** SwplTransformedMIRInfo end   **
# CHECK-NEXT:target loop:Loop at depth 1 containing: %bb.8<header><latch><exiting>
# CHECK-NEXT:LAST:
# CHECK-NEXT:bb.0 (%ir-block.1):
# CHECK-NEXT:  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
# CHECK-NEXT:  liveins: $x0
# CHECK-NEXT:  %22:gpr64common = COPY $x0
# CHECK-NEXT:  TBNZX %22:gpr64common, 63, %bb.7
# CHECK-NEXT:  B %bb.1
# CHECK-NEXT:bb.1 (%ir-block.3):
# CHECK-NEXT:; predecessors: %bb.0
# CHECK-NEXT:  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

# CHECK:  %24:gpr64common = ADDXri %22:gpr64common, 1, 0
# CHECK-NEXT:  %25:gpr64 = RDVLI_XI 1
# CHECK-NEXT:  dead $xzr = SUBSXrr %24:gpr64common, %25:gpr64, implicit-def $nzcv
# CHECK-NEXT:  %74:gpr64common = LOADgot target-flags(aarch64-got) @A
# CHECK-NEXT:  %75:gpr64common = LOADgot target-flags(aarch64-got) @B
# CHECK-NEXT:  Bcc 2, %bb.3, implicit $nzcv
# CHECK-NEXT:bb.2:
# CHECK-NEXT:; predecessors: %bb.1
# CHECK-NEXT:  successors: %bb.6(0x80000000); %bb.6(100.00%)

# CHECK:  %26:gpr64all = COPY $xzr
# CHECK-NEXT:  %23:gpr64all = COPY %26:gpr64all
# CHECK-NEXT:  B %bb.6
# CHECK-NEXT:bb.3 (%ir-block.8):
# CHECK-NEXT:; predecessors: %bb.1
# CHECK-NEXT:  successors: %bb.4(0x80000000); %bb.4(100.00%)

# CHECK:  %29:gpr64 = UDIVXr %24:gpr64common, %25:gpr64
# CHECK-NEXT:  %30:gpr64 = MADDXrrr killed %29:gpr64, %25:gpr64, $xzr
# CHECK-NEXT:  %31:gpr64 = SUBXrr %24:gpr64common, %30:gpr64
# CHECK-NEXT:  %2:gpr64 = COPY %31:gpr64
# CHECK-NEXT:  %3:gpr64 = COPY %30:gpr64
# CHECK-NEXT:  %33:gpr64 = UBFMXri %25:gpr64, 4, 63
# CHECK-NEXT:  %34:gpr32 = COPY %33.sub_32:gpr64
# CHECK-NEXT:  %35:gpr64common = ANDXri %33:gpr64, 4127
# CHECK-NEXT:  %36:gpr64common = ADDXrx %35:gpr64common, killed %34:gpr32, 17
# CHECK-NEXT:  %37:gpr64 = UBFMXri killed %36:gpr64common, 60, 59
# CHECK-NEXT:  %39:gpr64 = ADDXrr %75:gpr64common, %37:gpr64
# CHECK-NEXT:  %4:gpr64sp = COPY %39:gpr64
# CHECK-NEXT:  %40:gpr64 = nuw nsw UBFMXri %35:gpr64common, 59, 58
# CHECK-NEXT:  %41:gpr64 = ADDXrr %75:gpr64common, %40:gpr64
# CHECK-NEXT:  %5:gpr64sp = COPY %41:gpr64
# CHECK-NEXT:  %42:gpr64 = nuw nsw UBFMXri %35:gpr64common, 60, 59
# CHECK-NEXT:  %43:gpr64 = ADDXrr %75:gpr64common, %42:gpr64
# CHECK-NEXT:  %6:gpr64sp = COPY %43:gpr64
# CHECK-NEXT:  %45:gpr64 = ADDXrr %74:gpr64common, %37:gpr64
# CHECK-NEXT:  %7:gpr64sp = COPY %45:gpr64
# CHECK-NEXT:  %46:gpr64 = ADDXrr %74:gpr64common, %40:gpr64
# CHECK-NEXT:  %8:gpr64sp = COPY %46:gpr64
# CHECK-NEXT:  %47:gpr64 = ADDXrr %74:gpr64common, %42:gpr64
# CHECK-NEXT:  %48:gpr64all = COPY $xzr
# CHECK-NEXT:  %28:gpr64all = COPY %48:gpr64all
# CHECK-NEXT:  %9:gpr64sp = COPY %47:gpr64
# CHECK-NEXT:  %50:ppr_3b = PTRUE_S 31
# CHECK-NEXT:bb.4 (%ir-block.22):
# CHECK-NEXT:; predecessors: %bb.3, %bb.4
# CHECK-NEXT:  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

# CHECK:  %10:gpr64common = PHI %28:gpr64all, %bb.3, %11:gpr64all, %bb.4
# CHECK-NEXT:  %51:zpr = LD1W %50:ppr_3b, %75:gpr64common, %10:gpr64common :: (load unknown-size from %ir.25, align 4, !tbaa !6)
# CHECK-NEXT:  %52:zpr = LD1W %50:ppr_3b, %6:gpr64sp, %10:gpr64common :: (load unknown-size from %ir.27, align 4, !tbaa !6)
# CHECK-NEXT:  %53:zpr = LD1W %50:ppr_3b, %5:gpr64sp, %10:gpr64common :: (load unknown-size from %ir.29, align 4, !tbaa !6)
# CHECK-NEXT:  %54:zpr = LD1W %50:ppr_3b, %4:gpr64sp, %10:gpr64common :: (load unknown-size from %ir.32, align 4, !tbaa !6)
# CHECK-NEXT:  %55:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZZZ_S %51:zpr, %51:zpr
# CHECK-NEXT:  %56:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZZZ_S %52:zpr, %52:zpr
# CHECK-NEXT:  %57:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZZZ_S %53:zpr, %53:zpr
# CHECK-NEXT:  %58:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZZZ_S %54:zpr, %54:zpr
# CHECK-NEXT:  ST1W killed %55:zpr, %50:ppr_3b, %74:gpr64common, %10:gpr64common :: (store unknown-size into %ir.39, align 4, !tbaa !6)
# CHECK-NEXT:  ST1W killed %56:zpr, %50:ppr_3b, %9:gpr64sp, %10:gpr64common :: (store unknown-size into %ir.40, align 4, !tbaa !6)
# CHECK-NEXT:  ST1W killed %57:zpr, %50:ppr_3b, %8:gpr64sp, %10:gpr64common :: (store unknown-size into %ir.41, align 4, !tbaa !6)
# CHECK-NEXT:  ST1W killed %58:zpr, %50:ppr_3b, %7:gpr64sp, %10:gpr64common :: (store unknown-size into %ir.43, align 4, !tbaa !6)
# CHECK-NEXT:  %60:gpr64 = nuw ADDXrr %10:gpr64common, %25:gpr64
# CHECK-NEXT:  %11:gpr64all = COPY %60:gpr64
# CHECK-NEXT:  dead $xzr = SUBSXrr %30:gpr64, %60:gpr64, implicit-def $nzcv
# CHECK-NEXT:  Bcc 1, %bb.4, implicit $nzcv
# CHECK-NEXT:  B %bb.5
# CHECK-NEXT:bb.5 (%ir-block.46):
# CHECK-NEXT:; predecessors: %bb.4
# CHECK-NEXT:  successors: %bb.7(0x30000000), %bb.6(0x50000000); %bb.7(37.50%), %bb.6(62.50%)

# CHECK:  CBZX %2:gpr64, %bb.7
# CHECK-NEXT:  B %bb.6
# CHECK-NEXT:bb.6 (%ir-block.48):
# CHECK-NEXT:; predecessors: %bb.2, %bb.5
# CHECK-NEXT:  successors: %bb.11(0x80000000); %bb.11(100.00%)

# CHECK:  %12:gpr64 = PHI %23:gpr64all, %bb.2, %3:gpr64, %bb.5
# CHECK-NEXT:  %62:gpr64common = SUBXrr %22:gpr64common, %12:gpr64
# CHECK-NEXT:  %63:gpr64sp = ADDXri killed %62:gpr64common, 1, 0
# CHECK-NEXT:  %64:gpr64 = UBFMXri %12:gpr64, 62, 61
# CHECK-NEXT:  %66:gpr64 = ADDXrr %74:gpr64common, %64:gpr64
# CHECK-NEXT:  %13:gpr64all = COPY %66:gpr64
# CHECK-NEXT:  %68:gpr64 = ADDXrr %75:gpr64common, %64:gpr64
# CHECK-NEXT:  %14:gpr64all = COPY %68:gpr64
# CHECK-NEXT:  %15:gpr64all = COPY %63:gpr64sp
# CHECK-NEXT:  B %bb.11
# CHECK-NEXT:bb.7 (%ir-block.56):
# CHECK-NEXT:; predecessors: %bb.0, %bb.5, %bb.17

# CHECK:  RET_ReallyLR
# CHECK-NEXT:bb.11 (%ir-block.57):
# CHECK-NEXT:; predecessors: %bb.6
# CHECK-NEXT:  successors: %bb.12(0x40000000), %bb.15(0x40000000); %bb.12(50.00%), %bb.15(50.00%)

# CHECK:  %107:gpr64sp = COPY %15:gpr64all
# CHECK-NEXT:  $xzr = SUBSXri %107:gpr64sp, 14, 0, implicit-def $nzcv
# CHECK-NEXT:  Bcc 11, %bb.15, implicit $nzcv
# CHECK-NEXT:bb.12 (%ir-block.57):
# CHECK-NEXT:; predecessors: %bb.11
# CHECK-NEXT:  successors: %bb.8(0x80000000); %bb.8(100.00%)

# CHECK:  %76:gpr64sp = COPY %14:gpr64all
# CHECK-NEXT:  %77:gpr64sp = COPY %13:gpr64all
# CHECK-NEXT:  %78:gpr64sp = COPY %15:gpr64all
# CHECK-NEXT:  %88:gpr64sp = COPY %76:gpr64sp
# CHECK-NEXT:  %99:gpr64sp = COPY %77:gpr64sp
# CHECK-NEXT:  %104:gpr64sp = COPY %78:gpr64sp
# CHECK-NEXT:  %87:fpr32 = LDURSi %88:gpr64sp, 0 :: (volatile load (s32) from %ir.58, !tbaa !6)
# CHECK-NEXT:  %90:gpr64sp = ADDXri %88:gpr64sp, 4, 0
# CHECK-NEXT:  %89:fpr32 = LDURSi %90:gpr64sp, 0 :: (volatile load (s32) from %ir.58, !tbaa !6)
# CHECK-NEXT:  %92:gpr64sp = ADDXri %90:gpr64sp, 4, 0
# CHECK-NEXT:  %91:fpr32 = LDURSi %92:gpr64sp, 0 :: (volatile load (s32) from %ir.58, !tbaa !6)
# CHECK-NEXT:  %93:gpr64sp = ADDXri %92:gpr64sp, 4, 0
# CHECK-NEXT:  %80:fpr32 = LDURSi %93:gpr64sp, 0 :: (volatile load (s32) from %ir.58, !tbaa !6)
# CHECK-NEXT:  %149:gpr64sp = ADDXri %93:gpr64sp, 4, 0
# CHECK-NEXT:  %94:fpr32 = LDURSi %149:gpr64sp, 0 :: (volatile load (s32) from %ir.58, !tbaa !6)
# CHECK-NEXT:  %95:fpr32 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDSrr %87:fpr32, %87:fpr32, implicit $fpcr
# CHECK-NEXT:  %150:gpr64sp = ADDXri %149:gpr64sp, 4, 0
# CHECK-NEXT:  %151:fpr32 = LDURSi %150:gpr64sp, 0 :: (volatile load (s32) from %ir.58, !tbaa !6)
# CHECK-NEXT:  %96:fpr32 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDSrr %89:fpr32, %89:fpr32, implicit $fpcr
# CHECK-NEXT:  %152:gpr64sp = ADDXri %150:gpr64sp, 4, 0
# CHECK-NEXT:  %153:fpr32 = LDURSi %152:gpr64sp, 0 :: (volatile load (s32) from %ir.58, !tbaa !6)
# CHECK-NEXT:  %97:fpr32 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDSrr %91:fpr32, %91:fpr32, implicit $fpcr
# CHECK-NEXT:  %154:gpr64sp = ADDXri %152:gpr64sp, 4, 0
# CHECK-NEXT:  %155:fpr32 = LDURSi %154:gpr64sp, 0 :: (volatile load (s32) from %ir.58, !tbaa !6)
# CHECK-NEXT:  %81:fpr32 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDSrr %80:fpr32, %80:fpr32, implicit $fpcr
# CHECK-NEXT:  %156:gpr64sp = ADDXri %154:gpr64sp, 4, 0
# CHECK-NEXT:  %157:fpr32 = LDURSi %156:gpr64sp, 0 :: (volatile load (s32) from %ir.58, !tbaa !6)
# CHECK-NEXT:  %98:fpr32 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDSrr %94:fpr32, %94:fpr32, implicit $fpcr
# CHECK-NEXT:  $x1 = COPY %156:gpr64sp
# CHECK-NEXT:  $s0 = COPY %95:fpr32
# CHECK-NEXT:  $x2 = COPY %99:gpr64sp
# CHECK-NEXT:  $s2 = COPY %151:fpr32
# CHECK-NEXT:  $x3 = COPY %104:gpr64sp
# CHECK-NEXT:  $s3 = COPY %96:fpr32
# CHECK-NEXT:  $s4 = COPY %153:fpr32
# CHECK-NEXT:  $s5 = COPY %97:fpr32
# CHECK-NEXT:  $s6 = COPY %155:fpr32
# CHECK-NEXT:  $s7 = COPY %81:fpr32
# CHECK-NEXT:  $s8 = COPY %157:fpr32
# CHECK-NEXT:  $s9 = COPY %98:fpr32
# CHECK-NEXT:  SWPLIVEOUT implicit $x1, implicit $s0, implicit $x2, implicit $s2, implicit $x3, implicit $s3, implicit $s4, implicit $s5, implicit $s6, implicit $s7, implicit $s8, implicit $s9
# CHECK-NEXT:bb.8 (%ir-block.57):
# CHECK-NEXT:; predecessors: %bb.8, %bb.12
# CHECK-NEXT:  successors: %bb.8(0x7c000000), %bb.13(0x04000000); %bb.8(96.88%), %bb.13(3.12%)

# CHECK:  SWPLIVEIN implicit-def $x1, implicit-def $s0, implicit-def $x2, implicit-def $s2, implicit-def $x3, implicit-def $s3, implicit-def $s4, implicit-def $s5, implicit-def $s6, implicit-def $s7, implicit-def $s8, implicit-def $s9
# CHECK-NEXT:  $x0 = ADDXri $x1, 4, 0
# CHECK-NEXT:  STURSi $s0, $x2, 0 :: (volatile store (s32) into %ir.59, !tbaa !6)
# CHECK-NEXT:  $s1 = LDURSi $x0, 0 :: (volatile load (s32) from %ir.58, !tbaa !6)
# CHECK-NEXT:  $s0 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDSrr $s2, $s2, implicit $fpcr
# CHECK-NEXT:  $x1 = ADDXri $x2, 4, 0
# CHECK-NEXT:  $x2 = SUBSXri $x3, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  $x3 = ADDXri $x0, 4, 0
# CHECK-NEXT:  STURSi $s3, $x1, 0 :: (volatile store (s32) into %ir.59, !tbaa !6)
# CHECK-NEXT:  $s2 = LDURSi $x3, 0 :: (volatile load (s32) from %ir.58, !tbaa !6)
# CHECK-NEXT:  $s3 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDSrr $s4, $s4, implicit $fpcr
# CHECK-NEXT:  $x0 = ADDXri $x1, 4, 0
# CHECK-NEXT:  $x1 = SUBSXri $x2, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  $x2 = ADDXri $x3, 4, 0
# CHECK-NEXT:  STURSi $s5, $x0, 0 :: (volatile store (s32) into %ir.59, !tbaa !6)
# CHECK-NEXT:  $s4 = LDURSi $x2, 0 :: (volatile load (s32) from %ir.58, !tbaa !6)
# CHECK-NEXT:  $s5 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDSrr $s6, $s6, implicit $fpcr
# CHECK-NEXT:  $x3 = ADDXri $x0, 4, 0
# CHECK-NEXT:  $x0 = SUBSXri $x1, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  $x4 = ADDXri $x2, 4, 0
# CHECK-NEXT:  STURSi $s7, $x3, 0 :: (volatile store (s32) into %ir.59, !tbaa !6)
# CHECK-NEXT:  $s6 = LDURSi $x4, 0 :: (volatile load (s32) from %ir.58, !tbaa !6)
# CHECK-NEXT:  $s7 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDSrr $s8, $s8, implicit $fpcr
# CHECK-NEXT:  $x5 = ADDXri $x3, 4, 0
# CHECK-NEXT:  $x6 = SUBSXri $x0, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  $x1 = ADDXri $x4, 4, 0
# CHECK-NEXT:  STURSi $s9, $x5, 0 :: (volatile store (s32) into %ir.59, !tbaa !6)
# CHECK-NEXT:  $s8 = LDURSi $x1, 0 :: (volatile load (s32) from %ir.58, !tbaa !6)
# CHECK-NEXT:  $s9 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDSrr $s1, $s1, implicit $fpcr
# CHECK-NEXT:  $x2 = ADDXri $x5, 4, 0
# CHECK-NEXT:  $x3 = SUBSXri $x6, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  SWPLIVEOUT implicit $x1, implicit $s0, implicit $x2, implicit $s2, implicit $x3, implicit $s3, implicit $s4, implicit $s5, implicit $s6, implicit $s7, implicit $s8, implicit $s9, implicit $x0, implicit $x5, implicit $x6
# CHECK-NEXT:  $xzr = SUBSXri $x3, 14, 0, implicit-def $nzcv
# CHECK-NEXT:  Bcc 10, %bb.8, implicit $nzcv
# CHECK-NEXT:bb.13 (%ir-block.57):
# CHECK-NEXT:; predecessors: %bb.8
# CHECK-NEXT:  successors: %bb.14(0x80000000); %bb.14(100.00%)

# CHECK:  SWPLIVEIN implicit-def $x0, implicit-def $x1, implicit-def $s0, implicit-def $x2, implicit-def $s2, implicit-def $x3, implicit-def $s3, implicit-def $s4, implicit-def $s5, implicit-def $s6, implicit-def $s7, implicit-def $s8, implicit-def $x5, implicit-def $x6, implicit-def $s9
# CHECK-NEXT:  %111:gpr64sp = COPY $x0
# CHECK-NEXT:  %112:gpr64sp = COPY $x1
# CHECK-NEXT:  %113:fpr32 = COPY $s0
# CHECK-NEXT:  %114:gpr64sp = COPY $x2
# CHECK-NEXT:  %115:fpr32 = COPY $s2
# CHECK-NEXT:  %116:gpr64sp = COPY $x3
# CHECK-NEXT:  %117:fpr32 = COPY $s3
# CHECK-NEXT:  %118:fpr32 = COPY $s4
# CHECK-NEXT:  %119:fpr32 = COPY $s5
# CHECK-NEXT:  %120:fpr32 = COPY $s6
# CHECK-NEXT:  %121:fpr32 = COPY $s7
# CHECK-NEXT:  %122:fpr32 = COPY $s8
# CHECK-NEXT:  %123:gpr64sp = COPY $x5
# CHECK-NEXT:  %124:gpr64sp = COPY $x6
# CHECK-NEXT:  %125:fpr32 = COPY $s9
# CHECK-NEXT:  %126:gpr64sp = ADDXri %112:gpr64sp, 4, 0
# CHECK-NEXT:  STURSi %113:fpr32, %114:gpr64sp, 0 :: (volatile store (s32) into %ir.59, !tbaa !6)
# CHECK-NEXT:  %127:fpr32 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDSrr %115:fpr32, %115:fpr32, implicit $fpcr
# CHECK-NEXT:  %128:gpr64sp = ADDXri %114:gpr64sp, 4, 0
# CHECK-NEXT:  %129:gpr64sp = SUBSXri %116:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  STURSi %117:fpr32, %128:gpr64sp, 0 :: (volatile store (s32) into %ir.59, !tbaa !6)
# CHECK-NEXT:  %130:fpr32 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDSrr %118:fpr32, %118:fpr32, implicit $fpcr
# CHECK-NEXT:  %131:gpr64sp = ADDXri %128:gpr64sp, 4, 0
# CHECK-NEXT:  %132:gpr64sp = SUBSXri %129:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  STURSi %119:fpr32, %131:gpr64sp, 0 :: (volatile store (s32) into %ir.59, !tbaa !6)
# CHECK-NEXT:  %133:fpr32 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDSrr %120:fpr32, %120:fpr32, implicit $fpcr
# CHECK-NEXT:  %134:gpr64sp = ADDXri %131:gpr64sp, 4, 0
# CHECK-NEXT:  %135:gpr64sp = SUBSXri %132:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  STURSi %121:fpr32, %134:gpr64sp, 0 :: (volatile store (s32) into %ir.59, !tbaa !6)
# CHECK-NEXT:  %136:fpr32 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDSrr %122:fpr32, %122:fpr32, implicit $fpcr
# CHECK-NEXT:  %137:gpr64sp = ADDXri %134:gpr64sp, 4, 0
# CHECK-NEXT:  %138:gpr64sp = SUBSXri %135:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  STURSi %125:fpr32, %137:gpr64sp, 0 :: (volatile store (s32) into %ir.59, !tbaa !6)
# CHECK-NEXT:  %139:gpr64sp = ADDXri %137:gpr64sp, 4, 0
# CHECK-NEXT:  %140:gpr64sp = SUBSXri %138:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  STURSi %127:fpr32, %139:gpr64sp, 0 :: (volatile store (s32) into %ir.59, !tbaa !6)
# CHECK-NEXT:  %141:gpr64sp = ADDXri %139:gpr64sp, 4, 0
# CHECK-NEXT:  %142:gpr64sp = SUBSXri %140:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  STURSi %130:fpr32, %141:gpr64sp, 0 :: (volatile store (s32) into %ir.59, !tbaa !6)
# CHECK-NEXT:  %143:gpr64sp = ADDXri %141:gpr64sp, 4, 0
# CHECK-NEXT:  %144:gpr64sp = SUBSXri %142:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  STURSi %133:fpr32, %143:gpr64sp, 0 :: (volatile store (s32) into %ir.59, !tbaa !6)
# CHECK-NEXT:  %145:gpr64sp = ADDXri %143:gpr64sp, 4, 0
# CHECK-NEXT:  %146:gpr64sp = SUBSXri %144:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  STURSi %136:fpr32, %145:gpr64sp, 0 :: (volatile store (s32) into %ir.59, !tbaa !6)
# CHECK-NEXT:  %147:gpr64sp = ADDXri %145:gpr64sp, 4, 0
# CHECK-NEXT:  %148:gpr64sp = SUBSXri %146:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:bb.14 (%ir-block.57):
# CHECK-NEXT:; predecessors: %bb.13
# CHECK-NEXT:  successors: %bb.15(0x40000000), %bb.17(0x40000000); %bb.15(50.00%), %bb.17(50.00%)

# CHECK:  $xzr = SUBSXri %148:gpr64sp, 0, 0, implicit-def $nzcv
# CHECK-NEXT:  Bcc 0, %bb.17, implicit $nzcv
# CHECK-NEXT:bb.15 (%ir-block.57):
# CHECK-NEXT:; predecessors: %bb.14, %bb.11
# CHECK-NEXT:  successors: %bb.16(0x80000000); %bb.16(100.00%)

# CHECK:  %108:gpr64sp = PHI %14:gpr64all, %bb.11, %126:gpr64sp, %bb.14
# CHECK-NEXT:  %109:gpr64sp = PHI %13:gpr64all, %bb.11, %147:gpr64sp, %bb.14
# CHECK-NEXT:  %110:gpr64sp = PHI %15:gpr64all, %bb.11, %148:gpr64sp, %bb.14
# CHECK-NEXT:bb.16 (%ir-block.57):
# CHECK-NEXT:; predecessors: %bb.16, %bb.15
# CHECK-NEXT:  successors: %bb.16(0x40000000), %bb.17(0x40000000); %bb.16(50.00%), %bb.17(50.00%)

# CHECK:  %16:gpr64sp = PHI %108:gpr64sp, %bb.15, %20:gpr64all, %bb.16
# CHECK-NEXT:  %17:gpr64sp = PHI %109:gpr64sp, %bb.15, %19:gpr64all, %bb.16
# CHECK-NEXT:  %18:gpr64sp = PHI %110:gpr64sp, %bb.15, %21:gpr64all, %bb.16
# CHECK-NEXT:  early-clobber %69:gpr64sp, %70:fpr32 = LDRSpost %16:gpr64sp(tied-def 0), 4 :: (volatile load (s32) from %ir.58, !tbaa !6)
# CHECK-NEXT:  %71:fpr32 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDSrr %70:fpr32, %70:fpr32, implicit $fpcr
# CHECK-NEXT:  early-clobber %72:gpr64sp = STRSpost killed %71:fpr32, %17:gpr64sp(tied-def 0), 4 :: (volatile store (s32) into %ir.59, !tbaa !6)
# CHECK-NEXT:  %19:gpr64all = COPY %72:gpr64sp
# CHECK-NEXT:  %20:gpr64all = COPY %69:gpr64sp
# CHECK-NEXT:  %73:gpr64 = SUBSXri %18:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  %21:gpr64all = COPY %73:gpr64
# CHECK-NEXT:  Bcc 1, %bb.16, implicit $nzcv
# CHECK-NEXT:  B %bb.17
# CHECK-NEXT:bb.17 (%ir-block.57):
# CHECK-NEXT:; predecessors: %bb.16, %bb.14
# CHECK-NEXT:  successors: %bb.7(0x80000000); %bb.7(100.00%)

# CHECK:  B %bb.7


--- |
  ; ModuleID = 'test3044-03.c'
  source_filename = "test3044-03.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  @B = external local_unnamed_addr global [100 x float], align 4
  @A = external local_unnamed_addr global [100 x float], align 4
  
  ; Function Attrs: nofree norecurse nosync nounwind uwtable vscale_range(1,16)
  define dso_local void @test3044(i64 noundef %0) local_unnamed_addr #0 {
    %2 = icmp slt i64 %0, 0
    br i1 %2, label %56, label %3
  
  3:                                                ; preds = %1
    %4 = add i64 %0, 1
    %5 = tail call i64 @llvm.vscale.i64()
    %6 = shl nuw nsw i64 %5, 4
    %7 = icmp ult i64 %4, %6
    br i1 %7, label %48, label %8
  
  8:                                                ; preds = %3
    %9 = urem i64 %4, %6
    %10 = sub i64 %4, %9
    %11 = tail call i32 @llvm.vscale.i32()
    %12 = zext i32 %11 to i64
    %13 = mul nuw nsw i64 %12, 48
    %14 = getelementptr i8, ptr @B, i64 %13
    %15 = shl nuw nsw i64 %12, 5
    %16 = getelementptr i8, ptr @B, i64 %15
    %17 = shl nuw nsw i64 %12, 4
    %18 = getelementptr i8, ptr @B, i64 %17
    %19 = getelementptr i8, ptr @A, i64 %13
    %20 = getelementptr i8, ptr @A, i64 %15
    %21 = getelementptr i8, ptr @A, i64 %17
    br label %22
  
  22:                                               ; preds = %22, %8
    %23 = phi i64 [ 0, %8 ], [ %44, %22 ]
    %24 = shl i64 %23, 2
    %25 = getelementptr i8, ptr @B, i64 %24
    %26 = load <vscale x 4 x float>, ptr %25, align 4, !tbaa !6
    %27 = getelementptr i8, ptr %18, i64 %24
    %28 = load <vscale x 4 x float>, ptr %27, align 4, !tbaa !6
    %29 = getelementptr i8, ptr %16, i64 %24
    %30 = load <vscale x 4 x float>, ptr %29, align 4, !tbaa !6
    %31 = shl i64 %23, 2
    %32 = getelementptr i8, ptr %14, i64 %31
    %33 = load <vscale x 4 x float>, ptr %32, align 4, !tbaa !6
    %34 = fmul fast <vscale x 4 x float> %26, shufflevector (<vscale x 4 x float> insertelement (<vscale x 4 x float> poison, float 2.000000e+00, i32 0), <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer)
    %35 = fmul fast <vscale x 4 x float> %28, shufflevector (<vscale x 4 x float> insertelement (<vscale x 4 x float> poison, float 2.000000e+00, i32 0), <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer)
    %36 = fmul fast <vscale x 4 x float> %30, shufflevector (<vscale x 4 x float> insertelement (<vscale x 4 x float> poison, float 2.000000e+00, i32 0), <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer)
    %37 = fmul fast <vscale x 4 x float> %33, shufflevector (<vscale x 4 x float> insertelement (<vscale x 4 x float> poison, float 2.000000e+00, i32 0), <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer)
    %38 = shl i64 %23, 2
    %39 = getelementptr i8, ptr @A, i64 %38
    store <vscale x 4 x float> %34, ptr %39, align 4, !tbaa !6
    %40 = getelementptr i8, ptr %21, i64 %38
    store <vscale x 4 x float> %35, ptr %40, align 4, !tbaa !6
    %41 = getelementptr i8, ptr %20, i64 %38
    store <vscale x 4 x float> %36, ptr %41, align 4, !tbaa !6
    %42 = shl i64 %23, 2
    %43 = getelementptr i8, ptr %19, i64 %42
    store <vscale x 4 x float> %37, ptr %43, align 4, !tbaa !6
    %44 = add nuw i64 %23, %6
    %45 = icmp eq i64 %10, %44
    br i1 %45, label %46, label %22, !llvm.loop !10
  
  46:                                               ; preds = %22
    %47 = icmp eq i64 %9, 0
    br i1 %47, label %56, label %48
  
  48:                                               ; preds = %3, %46
    %49 = phi i64 [ %10, %46 ], [ 0, %3 ]
    %50 = add i64 %0, 1
    %51 = sub i64 %50, %49
    %52 = shl i64 %49, 2
    %53 = getelementptr i8, ptr @A, i64 %52
    %54 = getelementptr i8, ptr @B, i64 %52
    %55 = call i64 @llvm.start.loop.iterations.i64(i64 %51)
    br label %57
  
  56:                                               ; preds = %57, %46, %1
    ret void
  
  57:                                               ; preds = %48, %57
    %58 = phi ptr [ %54, %48 ], [ %64, %57 ]
    %59 = phi ptr [ %53, %48 ], [ %63, %57 ]
    %60 = phi i64 [ %55, %48 ], [ %65, %57 ]
    %61 = load float, ptr %58, align 4, !tbaa !6
    %62 = fmul fast float %61, 2.000000e+00
    store float %62, ptr %59, align 4, !tbaa !6
    %63 = getelementptr i8, ptr %59, i64 4
    %64 = getelementptr i8, ptr %58, i64 4
    %65 = call i64 @llvm.loop.decrement.reg.i64(i64 %60, i64 1)
    %66 = icmp ne i64 %65, 0
    br i1 %66, label %57, label %56, !llvm.loop !13
  }
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
  declare i64 @llvm.vscale.i64() #1
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
  declare i32 @llvm.vscale.i32() #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #2
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #2
  
  attributes #0 = { nofree norecurse nosync nounwind uwtable vscale_range(1,16) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #1 = { nocallback nofree nosync nounwind readnone willreturn }
  attributes #2 = { nocallback noduplicate nofree nosync nounwind willreturn }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 7, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !5 = !{!"clang version 15.0.4 "}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"float", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C/C++ TBAA"}
  !10 = distinct !{!10, !11, !12}
  !11 = !{!"llvm.loop.mustprogress"}
  !12 = !{!"llvm.loop.isvectorized", i32 1}
  !13 = distinct !{!13, !11, !14, !12}
  !14 = !{!"llvm.loop.unroll.runtime.disable"}

...
---
name:            test3044
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr64, preferred-register: '' }
  - { id: 1, class: gpr64, preferred-register: '' }
  - { id: 2, class: gpr64, preferred-register: '' }
  - { id: 3, class: gpr64, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: gpr64sp, preferred-register: '' }
  - { id: 6, class: gpr64sp, preferred-register: '' }
  - { id: 7, class: gpr64sp, preferred-register: '' }
  - { id: 8, class: gpr64sp, preferred-register: '' }
  - { id: 9, class: gpr64sp, preferred-register: '' }
  - { id: 10, class: gpr64common, preferred-register: '' }
  - { id: 11, class: gpr64all, preferred-register: '' }
  - { id: 12, class: gpr64, preferred-register: '' }
  - { id: 13, class: gpr64all, preferred-register: '' }
  - { id: 14, class: gpr64all, preferred-register: '' }
  - { id: 15, class: gpr64all, preferred-register: '' }
  - { id: 16, class: gpr64sp, preferred-register: '' }
  - { id: 17, class: gpr64sp, preferred-register: '' }
  - { id: 18, class: gpr64sp, preferred-register: '' }
  - { id: 19, class: gpr64all, preferred-register: '' }
  - { id: 20, class: gpr64all, preferred-register: '' }
  - { id: 21, class: gpr64all, preferred-register: '' }
  - { id: 22, class: gpr64common, preferred-register: '' }
  - { id: 23, class: gpr64all, preferred-register: '' }
  - { id: 24, class: gpr64common, preferred-register: '' }
  - { id: 25, class: gpr64, preferred-register: '' }
  - { id: 26, class: gpr64all, preferred-register: '' }
  - { id: 27, class: gpr64, preferred-register: '' }
  - { id: 28, class: gpr64all, preferred-register: '' }
  - { id: 29, class: gpr64, preferred-register: '' }
  - { id: 30, class: gpr64, preferred-register: '' }
  - { id: 31, class: gpr64, preferred-register: '' }
  - { id: 32, class: gpr64, preferred-register: '' }
  - { id: 33, class: gpr64, preferred-register: '' }
  - { id: 34, class: gpr32, preferred-register: '' }
  - { id: 35, class: gpr64common, preferred-register: '' }
  - { id: 36, class: gpr64common, preferred-register: '' }
  - { id: 37, class: gpr64, preferred-register: '' }
  - { id: 38, class: gpr64common, preferred-register: '' }
  - { id: 39, class: gpr64, preferred-register: '' }
  - { id: 40, class: gpr64, preferred-register: '' }
  - { id: 41, class: gpr64, preferred-register: '' }
  - { id: 42, class: gpr64, preferred-register: '' }
  - { id: 43, class: gpr64, preferred-register: '' }
  - { id: 44, class: gpr64common, preferred-register: '' }
  - { id: 45, class: gpr64, preferred-register: '' }
  - { id: 46, class: gpr64, preferred-register: '' }
  - { id: 47, class: gpr64, preferred-register: '' }
  - { id: 48, class: gpr64all, preferred-register: '' }
  - { id: 49, class: gpr64common, preferred-register: '' }
  - { id: 50, class: ppr_3b, preferred-register: '' }
  - { id: 51, class: zpr, preferred-register: '' }
  - { id: 52, class: zpr, preferred-register: '' }
  - { id: 53, class: zpr, preferred-register: '' }
  - { id: 54, class: zpr, preferred-register: '' }
  - { id: 55, class: zpr, preferred-register: '' }
  - { id: 56, class: zpr, preferred-register: '' }
  - { id: 57, class: zpr, preferred-register: '' }
  - { id: 58, class: zpr, preferred-register: '' }
  - { id: 59, class: gpr64common, preferred-register: '' }
  - { id: 60, class: gpr64, preferred-register: '' }
  - { id: 61, class: gpr64, preferred-register: '' }
  - { id: 62, class: gpr64common, preferred-register: '' }
  - { id: 63, class: gpr64sp, preferred-register: '' }
  - { id: 64, class: gpr64, preferred-register: '' }
  - { id: 65, class: gpr64common, preferred-register: '' }
  - { id: 66, class: gpr64, preferred-register: '' }
  - { id: 67, class: gpr64common, preferred-register: '' }
  - { id: 68, class: gpr64, preferred-register: '' }
  - { id: 69, class: gpr64sp, preferred-register: '' }
  - { id: 70, class: fpr32, preferred-register: '' }
  - { id: 71, class: fpr32, preferred-register: '' }
  - { id: 72, class: gpr64sp, preferred-register: '' }
  - { id: 73, class: gpr64, preferred-register: '' }
  - { id: 74, class: gpr64common, preferred-register: '' }
  - { id: 75, class: gpr64common, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%22' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.1):
    successors: %bb.6(0x30000000), %bb.1(0x50000000)
    liveins: $x0
  
    %22:gpr64common = COPY $x0
    TBNZX %22, 63, %bb.6
    B %bb.1
  
  bb.1 (%ir-block.3):
    successors: %bb.8(0x40000000), %bb.2(0x40000000)
  
    %24:gpr64common = ADDXri %22, 1, 0
    %25:gpr64 = RDVLI_XI 1
    dead $xzr = SUBSXrr %24, %25, implicit-def $nzcv
    %74:gpr64common = LOADgot target-flags(aarch64-got) @A
    %75:gpr64common = LOADgot target-flags(aarch64-got) @B
    Bcc 2, %bb.2, implicit $nzcv
  
  bb.8:
    successors: %bb.5(0x80000000)
  
    %26:gpr64all = COPY $xzr
    %23:gpr64all = COPY %26
    B %bb.5
  
  bb.2 (%ir-block.8):
    successors: %bb.3(0x80000000)
  
    %29:gpr64 = UDIVXr %24, %25
    %30:gpr64 = MADDXrrr killed %29, %25, $xzr
    %31:gpr64 = SUBXrr %24, %30
    %2:gpr64 = COPY %31
    %3:gpr64 = COPY %30
    %33:gpr64 = UBFMXri %25, 4, 63
    %34:gpr32 = COPY %33.sub_32
    %35:gpr64common = ANDXri %33, 4127
    %36:gpr64common = ADDXrx %35, killed %34, 17
    %37:gpr64 = UBFMXri killed %36, 60, 59
    %39:gpr64 = ADDXrr %75, %37
    %4:gpr64sp = COPY %39
    %40:gpr64 = nuw nsw UBFMXri %35, 59, 58
    %41:gpr64 = ADDXrr %75, %40
    %5:gpr64sp = COPY %41
    %42:gpr64 = nuw nsw UBFMXri %35, 60, 59
    %43:gpr64 = ADDXrr %75, %42
    %6:gpr64sp = COPY %43
    %45:gpr64 = ADDXrr %74, %37
    %7:gpr64sp = COPY %45
    %46:gpr64 = ADDXrr %74, %40
    %8:gpr64sp = COPY %46
    %47:gpr64 = ADDXrr %74, %42
    %48:gpr64all = COPY $xzr
    %28:gpr64all = COPY %48
    %9:gpr64sp = COPY %47
    %50:ppr_3b = PTRUE_S 31
  
  bb.3 (%ir-block.22):
    successors: %bb.4(0x04000000), %bb.3(0x7c000000)
  
    %10:gpr64common = PHI %28, %bb.2, %11, %bb.3
    %51:zpr = LD1W %50, %75, %10 :: (load unknown-size from %ir.25, align 4, !tbaa !6)
    %52:zpr = LD1W %50, %6, %10 :: (load unknown-size from %ir.27, align 4, !tbaa !6)
    %53:zpr = LD1W %50, %5, %10 :: (load unknown-size from %ir.29, align 4, !tbaa !6)
    %54:zpr = LD1W %50, %4, %10 :: (load unknown-size from %ir.32, align 4, !tbaa !6)
    %55:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZZZ_S %51, %51
    %56:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZZZ_S %52, %52
    %57:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZZZ_S %53, %53
    %58:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZZZ_S %54, %54
    ST1W killed %55, %50, %74, %10 :: (store unknown-size into %ir.39, align 4, !tbaa !6)
    ST1W killed %56, %50, %9, %10 :: (store unknown-size into %ir.40, align 4, !tbaa !6)
    ST1W killed %57, %50, %8, %10 :: (store unknown-size into %ir.41, align 4, !tbaa !6)
    ST1W killed %58, %50, %7, %10 :: (store unknown-size into %ir.43, align 4, !tbaa !6)
    %60:gpr64 = nuw ADDXrr %10, %25
    %11:gpr64all = COPY %60
    dead $xzr = SUBSXrr %30, %60, implicit-def $nzcv
    Bcc 1, %bb.3, implicit $nzcv
    B %bb.4
  
  bb.4 (%ir-block.46):
    successors: %bb.6(0x30000000), %bb.5(0x50000000)
  
    CBZX %2, %bb.6
    B %bb.5
  
  bb.5 (%ir-block.48):
    successors: %bb.7(0x80000000)
  
    %12:gpr64 = PHI %23, %bb.8, %3, %bb.4
    %62:gpr64common = SUBXrr %22, %12
    %63:gpr64sp = ADDXri killed %62, 1, 0
    %64:gpr64 = UBFMXri %12, 62, 61
    %66:gpr64 = ADDXrr %74, %64
    %13:gpr64all = COPY %66
    %68:gpr64 = ADDXrr %75, %64
    %14:gpr64all = COPY %68
    %15:gpr64all = COPY %63
    B %bb.7
  
  bb.6 (%ir-block.56):
    RET_ReallyLR
  
  bb.7 (%ir-block.57):
    successors: %bb.7(0x7c000000), %bb.6(0x04000000)
  
    %16:gpr64sp = PHI %14, %bb.5, %20, %bb.7
    %17:gpr64sp = PHI %13, %bb.5, %19, %bb.7
    %18:gpr64sp = PHI %15, %bb.5, %21, %bb.7
    early-clobber %69:gpr64sp, %70:fpr32 = LDRSpost %16, 4 :: (load (s32) from %ir.58, !tbaa !6)
    %71:fpr32 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDSrr %70, %70, implicit $fpcr
    early-clobber %72:gpr64sp = STRSpost killed %71, %17, 4 :: (store (s32) into %ir.59, !tbaa !6)
    %19:gpr64all = COPY %72
    %20:gpr64all = COPY %69
    %73:gpr64 = SUBSXri %18, 1, 0, implicit-def $nzcv
    %21:gpr64all = COPY %73
    Bcc 1, %bb.7, implicit $nzcv
    B %bb.6

...
