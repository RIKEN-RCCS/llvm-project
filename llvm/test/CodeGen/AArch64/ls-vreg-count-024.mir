#RUN: llc %s -mcpu=a64fx -fswp -fls -pass-remarks=aarch64-swpipeliner -start-before=aarch64-swpipeliner -swpl-max-ireg=1 -o /dev/null 2>&1 | FileCheck %s
#CHECK:remark: <unknown>:0:0: local scheduling (VReg Fp: 3/32, Int: 2/29, Pred: 2/8)

--- |
  ; ModuleID = 'test.c'
  source_filename = "test.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  ; Function Attrs: nofree norecurse nosync nounwind memory(argmem: readwrite) uwtable vscale_range(1,16)
  define dso_local float @hoge(ptr nocapture noundef writeonly %a, ptr nocapture noundef readonly %b, ptr nocapture noundef readonly %c, i32 noundef %n) local_unnamed_addr #0 {
  entry:
    %cmp14 = icmp sgt i32 %n, 0
    br i1 %cmp14, label %for.body.preheader, label %for.cond.cleanup
  
  for.body.preheader:                               ; preds = %entry
    %wide.trip.count = zext i32 %n to i64
    %0 = call i64 @llvm.start.loop.iterations.i64(i64 %wide.trip.count)
    br label %for.body
  
  for.cond.cleanup:                                 ; preds = %for.body, %entry
    %t.0.lcssa = phi float [ 0.000000e+00, %entry ], [ %add, %for.body ]
    ret float %t.0.lcssa
  
  for.body:                                         ; preds = %for.body.preheader, %for.body
    %lsr.iv19 = phi ptr [ %b, %for.body.preheader ], [ %scevgep20, %for.body ]
    %lsr.iv17 = phi ptr [ %c, %for.body.preheader ], [ %scevgep18, %for.body ]
    %lsr.iv = phi ptr [ %a, %for.body.preheader ], [ %scevgep, %for.body ]
    %1 = phi i64 [ %0, %for.body.preheader ], [ %4, %for.body ]
    %2 = load float, ptr %lsr.iv19, align 4, !tbaa !6
    %3 = load float, ptr %lsr.iv17, align 4, !tbaa !6
    %add = fadd float %2, %3
    store float %add, ptr %lsr.iv, align 4, !tbaa !6
    %scevgep = getelementptr i8, ptr %lsr.iv, i64 4
    %scevgep18 = getelementptr i8, ptr %lsr.iv17, i64 4
    %scevgep20 = getelementptr i8, ptr %lsr.iv19, i64 4
    %4 = call i64 @llvm.loop.decrement.reg.i64(i64 %1, i64 1)
    %5 = icmp ne i64 %4, 0
    br i1 %5, label %for.body, label %for.cond.cleanup, !llvm.loop !10
  }
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #1
  
  attributes #0 = { nofree norecurse nosync nounwind memory(argmem: readwrite) uwtable vscale_range(1,16) "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" }
  attributes #1 = { nocallback noduplicate nofree nosync nounwind willreturn }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !5 = !{!"clang version 17.0.6"}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"float", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C/C++ TBAA"}
  !10 = distinct !{!10, !11, !12}
  !11 = !{!"llvm.loop.mustprogress"}
  !12 = !{!"llvm.loop.unroll.disable"}

...
---
name:            hoge
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr64all, preferred-register: '' }
  - { id: 1, class: fpr32, preferred-register: '' }
  - { id: 2, class: gpr64sp, preferred-register: '' }
  - { id: 3, class: gpr64sp, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: gpr64sp, preferred-register: '' }
  - { id: 6, class: fpr32, preferred-register: '' }
  - { id: 7, class: gpr64all, preferred-register: '' }
  - { id: 8, class: gpr64all, preferred-register: '' }
  - { id: 9, class: gpr64all, preferred-register: '' }
  - { id: 10, class: gpr64all, preferred-register: '' }
  - { id: 11, class: gpr64, preferred-register: '' }
  - { id: 12, class: gpr64, preferred-register: '' }
  - { id: 13, class: gpr64, preferred-register: '' }
  - { id: 14, class: gpr32common, preferred-register: '' }
  - { id: 15, class: fpr32, preferred-register: '' }
  - { id: 16, class: gpr32, preferred-register: '' }
  - { id: 17, class: gpr32, preferred-register: '' }
  - { id: 18, class: gpr64sp, preferred-register: '' }
  - { id: 19, class: fpr32, preferred-register: '' }
  - { id: 20, class: gpr64sp, preferred-register: '' }
  - { id: 21, class: fpr32, preferred-register: '' }
  - { id: 22, class: gpr64sp, preferred-register: '' }
  - { id: 23, class: gpr64, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%11' }
  - { reg: '$x1', virtual-reg: '%12' }
  - { reg: '$x2', virtual-reg: '%13' }
  - { reg: '$w3', virtual-reg: '%14' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x50000000), %bb.4(0x30000000)
    liveins: $x0, $x1, $x2, $w3
  
    %14:gpr32common = COPY $w3
    %13:gpr64 = COPY $x2
    %12:gpr64 = COPY $x1
    %11:gpr64 = COPY $x0
    dead $wzr = SUBSWri %14, 1, 0, implicit-def $nzcv
    Bcc 10, %bb.1, implicit $nzcv
  
  bb.4:
    successors: %bb.2(0x80000000)
  
    %15:fpr32 = FMOVS0
    %336:ppr_3b = PTRUE_D 31
    B %bb.2
  
  bb.1.for.body.preheader:
    successors: %bb.3(0x80000000)
  
    %17:gpr32 = ORRWrs $wzr, %14, 0
    %0:gpr64all = SUBREG_TO_REG 0, killed %17, %subreg.sub_32
    %400:fpr32 = IMPLICIT_DEF
    %401:fpr32 = IMPLICIT_DEF
    %332:ppr_3b = PTRUE_D 31
    B %bb.3
  
  bb.2.for.cond.cleanup:
    %500:ppr_3b = PHI %336, %bb.4, %333, %bb.3
    %501:ppr_3b = COPY %500
    RET_ReallyLR
  
  bb.3.for.body:
    successors: %bb.3(0x7c000000), %bb.2(0x04000000)
  
    %2:gpr64sp = PHI %12, %bb.1, %9, %bb.3
    %5:gpr64sp = PHI %12, %bb.1, %25, %bb.3
    %102:fpr32 = PHI %400, %bb.1, %122, %bb.3
    %202:fpr32 = PHI %401, %bb.1, %119, %bb.3
    %335:ppr_3b = PHI %332, %bb.1, %334, %bb.3
    %X1:zpr = LD1D_IMM %335, %2, 0
    %222:fpr32 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDSrr %102, %202, implicit $fpcr
    %23:gpr64 = SUBSXri %5, 1, 0, implicit-def $nzcv
    %19:fpr32 = LDURSi %2:gpr64sp, 0
    %333:ppr_3b = PTRUE_D 31
    %334:ppr_3b = COPY %333
    %9:gpr64all = COPY %2
    %25:gpr64all = COPY %23
    %122:fpr32 = COPY %222
    %119:fpr32 = COPY %19
    Bcc 1, %bb.3, implicit $nzcv
    B %bb.2

...
