# RUN: llc -mcpu=a64fx -O1 -ffj-swp -start-before=aarch64-swpipeliner -o /dev/null  -swpl-debug %s 2>&1 | FileCheck %s
# CHECK: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %116:fpr32 = COPY %113.ssub:fpr128
# CHECK-NEXT:  before: STRSui killed %116:fpr32, %106:gpr64common, 1 :: (store (s32) into %ir.uglygep88, !tbaa !6)
# CHECK-NEXT:  after: STRSui %113.ssub:fpr128, %106:gpr64common, 1 :: (store (s32) into %ir.uglygep88, !tbaa !6)
# CHECK-NEXT:  removed!
# CHECK-NEXT: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %117:fpr32 = COPY %112.ssub:fpr128
# CHECK-NEXT: before: STRSui killed %117:fpr32, %106:gpr64common, 5 :: ("aarch64-suppress-pair" store (s32) into %ir.uglygep90, !tbaa !6)
# CHECK-NEXT: after: STRSui %112.ssub:fpr128, %106:gpr64common, 5 :: ("aarch64-suppress-pair" store (s32) into %ir.uglygep90, !tbaa !6)
# CHECK-NEXT:  removed!
# CHECK-NEXT: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %126:fpr32 = COPY %123.ssub:fpr128
# CHECK-NEXT:  before: STRSui killed %126:fpr32, %106:gpr64common, 9 :: ("aarch64-suppress-pair" store (s32) into %ir.uglygep85, !tbaa !6)
# CHECK-NEXT:  after: STRSui %123.ssub:fpr128, %106:gpr64common, 9 :: ("aarch64-suppress-pair" store (s32) into %ir.uglygep85, !tbaa !6)
# CHECK-NEXT:  removed!
# CHECK-NEXT: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %127:fpr32 = COPY %122.ssub:fpr128
# CHECK-NEXT:  before: STRSui killed %127:fpr32, %106:gpr64common, 13 :: ("aarch64-suppress-pair" store (s32) into %ir.uglygep79, !tbaa !6)
# CHECK-NEXT:  after: STRSui %122.ssub:fpr128, %106:gpr64common, 13 :: ("aarch64-suppress-pair" store (s32) into %ir.uglygep79, !tbaa !6)
# CHECK-NEXT:  removed!
# CHECK-NEXT: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %136:fpr32 = COPY %133.ssub:fpr128
# CHECK-NEXT:  before: STRSui killed %136:fpr32, %106:gpr64common, 17 :: ("aarch64-suppress-pair" store (s32) into %ir.uglygep83, !tbaa !6)
# CHECK-NEXT:  after: STRSui %133.ssub:fpr128, %106:gpr64common, 17 :: ("aarch64-suppress-pair" store (s32) into %ir.uglygep83, !tbaa !6)
# CHECK-NEXT:  removed!
# CHECK-NEXT: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %137:fpr32 = COPY %132.ssub:fpr128
# CHECK-NEXT:  before: STRSui killed %137:fpr32, %106:gpr64common, 21 :: ("aarch64-suppress-pair" store (s32) into %ir.uglygep95, !tbaa !6)
# CHECK-NEXT:  after: STRSui %132.ssub:fpr128, %106:gpr64common, 21 :: ("aarch64-suppress-pair" store (s32) into %ir.uglygep95, !tbaa !6)
# CHECK-NEXT:  removed!
# CHECK-NEXT: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %139:gpr64all = COPY %138:gpr64sp
# CHECK-NEXT:  before: %104:gpr64common = PHI %14:gpr64all, %bb.1, %139:gpr64all, %bb.2
# CHECK-NEXT:  after: %104:gpr64common = PHI %14:gpr64all, %bb.1, %138:gpr64sp, %bb.2
# CHECK-NEXT:  removed!
# CHECK-NEXT: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %141:gpr64all = COPY %140:gpr64
# CHECK-NEXT:  before: %105:gpr64sp = PHI %1:gpr64all, %bb.1, %141:gpr64all, %bb.2
# CHECK-NEXT:  after: %105:gpr64sp = PHI %1:gpr64all, %bb.1, %140:gpr64, %bb.2
# CHECK-NEXT:  removed!
--- |
  ; ModuleID = 's111.c'
  source_filename = "s111.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  %struct.args_t = type { %struct.timeval, %struct.timeval, ptr }
  %struct.timeval = type { i64, i64 }
  
  @__func__.s111 = private unnamed_addr constant [5 x i8] c"s111\00", align 1
  @a = external global [32000 x float], align 64
  @b = external global [32000 x float], align 64
  @c = external global [32000 x float], align 64
  @d = external global [32000 x float], align 64
  @e = external global [32000 x float], align 64
  @aa = external global [256 x [256 x float]], align 64
  @bb = external global [256 x [256 x float]], align 64
  @cc = external global [256 x [256 x float]], align 64
  
  ; Function Attrs: nounwind uwtable vscale_range(1,16)
  define dso_local float @s111(ptr nocapture noundef %func_args) local_unnamed_addr #0 {
  entry:
    %call = tail call i32 @initialise_arrays(ptr noundef nonnull @__func__.s111) #4
    %call1 = tail call i32 @gettimeofday(ptr noundef %func_args, ptr noundef null) #4
    br label %vector.ph
  
  vector.ph:                                        ; preds = %for.body5, %entry
    %nl.023 = phi i32 [ 0, %entry ], [ %inc, %for.body5 ]
    %0 = call i64 @llvm.start.loop.iterations.i64(i64 1333)
    br label %vector.body
  
  vector.body:                                      ; preds = %vector.body, %vector.ph
    %lsr.iv = phi i64 [ %lsr.iv.next, %vector.body ], [ 0, %vector.ph ]
    %1 = phi i64 [ %0, %vector.ph ], [ %17, %vector.body ]
    %uglygep67 = getelementptr i8, ptr @a, i64 %lsr.iv
    %wide.vec = load <8 x float>, ptr %uglygep67, align 32, !tbaa !6
    %uglygep76 = getelementptr i8, ptr @b, i64 %lsr.iv
    %uglygep77 = getelementptr i8, ptr %uglygep76, i64 4
    %wide.vec26 = load <8 x float>, ptr %uglygep77, align 4, !tbaa !6
    %2 = fadd fast <8 x float> %wide.vec26, %wide.vec
    %uglygep87 = getelementptr i8, ptr @a, i64 %lsr.iv
    %uglygep88 = getelementptr i8, ptr %uglygep87, i64 4
    %uglygep89 = getelementptr i8, ptr %uglygep87, i64 12
    %uglygep90 = getelementptr i8, ptr %uglygep87, i64 20
    %uglygep91 = getelementptr i8, ptr @a, i64 %lsr.iv
    %uglygep92 = getelementptr i8, ptr %uglygep91, i64 28
    %3 = extractelement <8 x float> %2, i64 0
    store float %3, ptr %uglygep88, align 4, !tbaa !6
    %4 = extractelement <8 x float> %2, i64 2
    store float %4, ptr %uglygep89, align 4, !tbaa !6
    %5 = extractelement <8 x float> %2, i64 4
    store float %5, ptr %uglygep90, align 4, !tbaa !6
    %6 = extractelement <8 x float> %2, i64 6
    store float %6, ptr %uglygep92, align 4, !tbaa !6
    %uglygep68 = getelementptr i8, ptr @a, i64 %lsr.iv
    %uglygep69 = getelementptr i8, ptr %uglygep68, i64 32
    %wide.vec.1 = load <8 x float>, ptr %uglygep69, align 32, !tbaa !6
    %uglygep72 = getelementptr i8, ptr @b, i64 %lsr.iv
    %uglygep73 = getelementptr i8, ptr %uglygep72, i64 36
    %wide.vec26.1 = load <8 x float>, ptr %uglygep73, align 4, !tbaa !6
    %7 = fadd fast <8 x float> %wide.vec26.1, %wide.vec.1
    %uglygep84 = getelementptr i8, ptr @a, i64 %lsr.iv
    %uglygep85 = getelementptr i8, ptr %uglygep84, i64 36
    %uglygep94 = getelementptr i8, ptr %uglygep84, i64 44
    %uglygep78 = getelementptr i8, ptr @a, i64 %lsr.iv
    %uglygep79 = getelementptr i8, ptr %uglygep78, i64 52
    %uglygep93 = getelementptr i8, ptr %uglygep78, i64 60
    %8 = extractelement <8 x float> %7, i64 0
    store float %8, ptr %uglygep85, align 4, !tbaa !6
    %9 = extractelement <8 x float> %7, i64 2
    store float %9, ptr %uglygep94, align 4, !tbaa !6
    %10 = extractelement <8 x float> %7, i64 4
    store float %10, ptr %uglygep79, align 4, !tbaa !6
    %11 = extractelement <8 x float> %7, i64 6
    store float %11, ptr %uglygep93, align 4, !tbaa !6
    %uglygep70 = getelementptr i8, ptr @a, i64 %lsr.iv
    %uglygep71 = getelementptr i8, ptr %uglygep70, i64 64
    %wide.vec.2 = load <8 x float>, ptr %uglygep71, align 32, !tbaa !6
    %uglygep74 = getelementptr i8, ptr @b, i64 %lsr.iv
    %uglygep75 = getelementptr i8, ptr %uglygep74, i64 68
    %wide.vec26.2 = load <8 x float>, ptr %uglygep75, align 4, !tbaa !6
    %12 = fadd fast <8 x float> %wide.vec26.2, %wide.vec.2
    %uglygep82 = getelementptr i8, ptr @a, i64 %lsr.iv
    %uglygep83 = getelementptr i8, ptr %uglygep82, i64 68
    %uglygep86 = getelementptr i8, ptr %uglygep82, i64 76
    %uglygep95 = getelementptr i8, ptr %uglygep82, i64 84
    %uglygep80 = getelementptr i8, ptr @a, i64 %lsr.iv
    %uglygep81 = getelementptr i8, ptr %uglygep80, i64 92
    %13 = extractelement <8 x float> %12, i64 0
    store float %13, ptr %uglygep83, align 4, !tbaa !6
    %14 = extractelement <8 x float> %12, i64 2
    store float %14, ptr %uglygep86, align 4, !tbaa !6
    %15 = extractelement <8 x float> %12, i64 4
    store float %15, ptr %uglygep95, align 4, !tbaa !6
    %16 = extractelement <8 x float> %12, i64 6
    store float %16, ptr %uglygep81, align 4, !tbaa !6
    %lsr.iv.next = add nuw nsw i64 %lsr.iv, 96
    %17 = call i64 @llvm.loop.decrement.reg.i64(i64 %1, i64 1)
    %18 = icmp ne i64 %17, 0
    br i1 %18, label %vector.body, label %for.body5, !llvm.loop !10
  
  for.cond.cleanup:                                 ; preds = %for.body5
    %t2 = getelementptr inbounds %struct.args_t, ptr %func_args, i64 0, i32 1
    %call14 = tail call i32 @gettimeofday(ptr noundef nonnull %t2, ptr noundef null) #4
    %call15 = tail call fast float @calc_checksum(ptr noundef nonnull @__func__.s111) #4
    ret float %call15
  
  for.body5:                                        ; preds = %vector.body
    %19 = load float, ptr getelementptr inbounds ([32000 x float], ptr @a, i64 0, i64 31992), align 32, !tbaa !6
    %20 = load float, ptr getelementptr inbounds ([32000 x float], ptr @b, i64 0, i64 31993), align 4, !tbaa !6
    %add = fadd fast float %20, %19
    store float %add, ptr getelementptr inbounds ([32000 x float], ptr @a, i64 0, i64 31993), align 4, !tbaa !6
    %21 = load float, ptr getelementptr inbounds ([32000 x float], ptr @a, i64 0, i64 31994), align 8, !tbaa !6
    %22 = load float, ptr getelementptr inbounds ([32000 x float], ptr @b, i64 0, i64 31995), align 4, !tbaa !6
    %add.1 = fadd fast float %22, %21
    store float %add.1, ptr getelementptr inbounds ([32000 x float], ptr @a, i64 0, i64 31995), align 4, !tbaa !6
    %23 = load float, ptr getelementptr inbounds ([32000 x float], ptr @a, i64 0, i64 31996), align 16, !tbaa !6
    %24 = load float, ptr getelementptr inbounds ([32000 x float], ptr @b, i64 0, i64 31997), align 4, !tbaa !6
    %add.2 = fadd fast float %24, %23
    store float %add.2, ptr getelementptr inbounds ([32000 x float], ptr @a, i64 0, i64 31997), align 4, !tbaa !6
    %25 = load float, ptr getelementptr inbounds ([32000 x float], ptr @a, i64 0, i64 31998), align 8, !tbaa !6
    %26 = load float, ptr getelementptr inbounds ([32000 x float], ptr @b, i64 0, i64 31999), align 4, !tbaa !6
    %add.3 = fadd fast float %26, %25
    store float %add.3, ptr getelementptr inbounds ([32000 x float], ptr @a, i64 0, i64 31999), align 4, !tbaa !6
    %call11 = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, float noundef 0.000000e+00) #4
    %inc = add nuw nsw i32 %nl.023, 1
    %exitcond.not = icmp eq i32 %inc, 200000
    br i1 %exitcond.not, label %for.cond.cleanup, label %vector.ph, !llvm.loop !13
  }
  
  declare i32 @initialise_arrays(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nofree nounwind
  declare noundef i32 @gettimeofday(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #2
  
  declare i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, float noundef) local_unnamed_addr #1
  
  declare float @calc_checksum(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #3
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #3
  
  attributes #0 = { nounwind uwtable vscale_range(1,16) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #1 = { "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #2 = { nofree nounwind "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #3 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #4 = { nounwind }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 7, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !5 = !{!"clang version 15.0.4 ()"}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"float", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C/C++ TBAA"}
  !10 = distinct !{!10, !11, !12}
  !11 = !{!"llvm.loop.mustprogress"}
  !12 = !{!"llvm.loop.isvectorized", i32 1}
  !13 = distinct !{!13, !11}

...
---
name:            s111
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32sp, preferred-register: '' }
  - { id: 1, class: gpr64all, preferred-register: '' }
  - { id: 2, class: gpr64common, preferred-register: '' }
  - { id: 3, class: gpr64sp, preferred-register: '' }
  - { id: 4, class: gpr64all, preferred-register: '' }
  - { id: 5, class: gpr64all, preferred-register: '' }
  - { id: 6, class: gpr32all, preferred-register: '' }
  - { id: 7, class: gpr64common, preferred-register: '' }
  - { id: 8, class: gpr32all, preferred-register: '' }
  - { id: 9, class: gpr64common, preferred-register: '' }
  - { id: 10, class: gpr32all, preferred-register: '' }
  - { id: 11, class: gpr64all, preferred-register: '' }
  - { id: 12, class: gpr32all, preferred-register: '' }
  - { id: 13, class: gpr32all, preferred-register: '' }
  - { id: 14, class: gpr64all, preferred-register: '' }
  - { id: 15, class: gpr64all, preferred-register: '' }
  - { id: 16, class: gpr32, preferred-register: '' }
  - { id: 17, class: gpr64common, preferred-register: '' }
  - { id: 18, class: gpr64common, preferred-register: '' }
  - { id: 19, class: fpr128, preferred-register: '' }
  - { id: 20, class: fpr128, preferred-register: '' }
  - { id: 21, class: gpr64common, preferred-register: '' }
  - { id: 22, class: gpr64common, preferred-register: '' }
  - { id: 23, class: fpr128, preferred-register: '' }
  - { id: 24, class: fpr128, preferred-register: '' }
  - { id: 25, class: fpr128, preferred-register: '' }
  - { id: 26, class: fpr128, preferred-register: '' }
  - { id: 27, class: gpr64sp, preferred-register: '' }
  - { id: 28, class: gpr64sp, preferred-register: '' }
  - { id: 29, class: gpr32all, preferred-register: '' }
  - { id: 30, class: fpr32, preferred-register: '' }
  - { id: 31, class: gpr32all, preferred-register: '' }
  - { id: 32, class: fpr32, preferred-register: '' }
  - { id: 33, class: fpr128, preferred-register: '' }
  - { id: 34, class: fpr128, preferred-register: '' }
  - { id: 35, class: fpr128, preferred-register: '' }
  - { id: 36, class: fpr128, preferred-register: '' }
  - { id: 37, class: fpr128, preferred-register: '' }
  - { id: 38, class: fpr128, preferred-register: '' }
  - { id: 39, class: gpr64sp, preferred-register: '' }
  - { id: 40, class: gpr64sp, preferred-register: '' }
  - { id: 41, class: gpr32all, preferred-register: '' }
  - { id: 42, class: fpr32, preferred-register: '' }
  - { id: 43, class: gpr32all, preferred-register: '' }
  - { id: 44, class: fpr32, preferred-register: '' }
  - { id: 45, class: fpr128, preferred-register: '' }
  - { id: 46, class: fpr128, preferred-register: '' }
  - { id: 47, class: fpr128, preferred-register: '' }
  - { id: 48, class: fpr128, preferred-register: '' }
  - { id: 49, class: fpr128, preferred-register: '' }
  - { id: 50, class: fpr128, preferred-register: '' }
  - { id: 51, class: gpr64sp, preferred-register: '' }
  - { id: 52, class: gpr64sp, preferred-register: '' }
  - { id: 53, class: gpr32all, preferred-register: '' }
  - { id: 54, class: fpr32, preferred-register: '' }
  - { id: 55, class: gpr32all, preferred-register: '' }
  - { id: 56, class: fpr32, preferred-register: '' }
  - { id: 57, class: gpr64sp, preferred-register: '' }
  - { id: 58, class: gpr64, preferred-register: '' }
  - { id: 59, class: gpr64common, preferred-register: '' }
  - { id: 60, class: gpr32, preferred-register: '' }
  - { id: 61, class: gpr64, preferred-register: '' }
  - { id: 62, class: fpr32, preferred-register: '' }
  - { id: 63, class: gpr64common, preferred-register: '' }
  - { id: 64, class: gpr32, preferred-register: '' }
  - { id: 65, class: gpr64, preferred-register: '' }
  - { id: 66, class: fpr32, preferred-register: '' }
  - { id: 67, class: fpr32, preferred-register: '' }
  - { id: 68, class: gpr32, preferred-register: '' }
  - { id: 69, class: gpr64, preferred-register: '' }
  - { id: 70, class: fpr32, preferred-register: '' }
  - { id: 71, class: gpr32, preferred-register: '' }
  - { id: 72, class: gpr64, preferred-register: '' }
  - { id: 73, class: fpr32, preferred-register: '' }
  - { id: 74, class: fpr32, preferred-register: '' }
  - { id: 75, class: gpr32, preferred-register: '' }
  - { id: 76, class: gpr64, preferred-register: '' }
  - { id: 77, class: fpr32, preferred-register: '' }
  - { id: 78, class: gpr32, preferred-register: '' }
  - { id: 79, class: gpr64, preferred-register: '' }
  - { id: 80, class: fpr32, preferred-register: '' }
  - { id: 81, class: fpr32, preferred-register: '' }
  - { id: 82, class: gpr32, preferred-register: '' }
  - { id: 83, class: gpr64, preferred-register: '' }
  - { id: 84, class: fpr32, preferred-register: '' }
  - { id: 85, class: gpr32, preferred-register: '' }
  - { id: 86, class: gpr64, preferred-register: '' }
  - { id: 87, class: fpr32, preferred-register: '' }
  - { id: 88, class: fpr32, preferred-register: '' }
  - { id: 89, class: gpr64common, preferred-register: '' }
  - { id: 90, class: gpr64common, preferred-register: '' }
  - { id: 91, class: gpr64common, preferred-register: '' }
  - { id: 92, class: gpr64common, preferred-register: '' }
  - { id: 93, class: gpr64common, preferred-register: '' }
  - { id: 94, class: gpr64common, preferred-register: '' }
  - { id: 95, class: fpr32, preferred-register: '' }
  - { id: 96, class: gpr32all, preferred-register: '' }
  - { id: 97, class: gpr32common, preferred-register: '' }
  - { id: 98, class: gpr32, preferred-register: '' }
  - { id: 99, class: gpr32, preferred-register: '' }
  - { id: 100, class: gpr64sp, preferred-register: '' }
  - { id: 101, class: gpr64all, preferred-register: '' }
  - { id: 102, class: gpr32all, preferred-register: '' }
  - { id: 103, class: gpr64common, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%7' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     true
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $x0
  
    %7:gpr64common = COPY $x0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %9:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s111, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s111
    $x0 = COPY %9
    BL @initialise_arrays, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %11:gpr64all = COPY $xzr
    $x0 = COPY %7
    $x1 = COPY %11
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %13:gpr32all = COPY $wzr
    %8:gpr32all = COPY %13
    %16:gpr32 = MOVi32imm 1333
    %17:gpr64common = LOADgot target-flags(aarch64-got) @a
    %21:gpr64common = LOADgot target-flags(aarch64-got) @b
    %60:gpr32 = MOVi32imm 127968
    %61:gpr64 = SUBREG_TO_REG 0, %60, %subreg.sub_32
    %64:gpr32 = MOVi32imm 127972
    %65:gpr64 = SUBREG_TO_REG 0, %64, %subreg.sub_32
    %68:gpr32 = MOVi32imm 127976
    %69:gpr64 = SUBREG_TO_REG 0, %68, %subreg.sub_32
    %71:gpr32 = MOVi32imm 127980
    %72:gpr64 = SUBREG_TO_REG 0, %71, %subreg.sub_32
    %75:gpr32 = MOVi32imm 127984
    %76:gpr64 = SUBREG_TO_REG 0, %75, %subreg.sub_32
    %78:gpr32 = MOVi32imm 127988
    %79:gpr64 = SUBREG_TO_REG 0, %78, %subreg.sub_32
    %82:gpr32 = MOVi32imm 127992
    %83:gpr64 = SUBREG_TO_REG 0, %82, %subreg.sub_32
    %85:gpr32 = MOVi32imm 127996
    %86:gpr64 = SUBREG_TO_REG 0, %85, %subreg.sub_32
    %89:gpr64common = LOADgot target-flags(aarch64-got) @c
    %90:gpr64common = LOADgot target-flags(aarch64-got) @d
    %91:gpr64common = LOADgot target-flags(aarch64-got) @e
    %92:gpr64common = LOADgot target-flags(aarch64-got) @aa
    %93:gpr64common = LOADgot target-flags(aarch64-got) @bb
    %94:gpr64common = LOADgot target-flags(aarch64-got) @cc
    %95:fpr32 = FMOVS0
    %98:gpr32 = MOVi32imm 200000
  
  bb.1.vector.ph:
    successors: %bb.2(0x80000000)
  
    %0:gpr32sp = PHI %8, %bb.0, %6, %bb.4
    %15:gpr64all = COPY $xzr
    %14:gpr64all = COPY %15
    %1:gpr64all = SUBREG_TO_REG 0, %16, %subreg.sub_32
  
  bb.2.vector.body:
    successors: %bb.2(0x7c000000), %bb.4(0x04000000)
  
    %2:gpr64common = PHI %14, %bb.1, %4, %bb.2
    %3:gpr64sp = PHI %1, %bb.1, %5, %bb.2
    %18:gpr64common = ADDXrr %17, %2
    %19:fpr128 = LDRQui %18, 0 :: (load (s128) from %ir.uglygep67, align 32, !tbaa !6)
    %20:fpr128 = LDRQui %18, 1 :: (load (s128) from %ir.uglygep67 + 16, basealign 32, !tbaa !6)
    %22:gpr64common = ADDXrr %21, %2
    %23:fpr128 = LDURQi %22, 4 :: (load (s128) from %ir.uglygep77, align 4, !tbaa !6)
    %24:fpr128 = LDURQi %22, 20 :: (load (s128) from %ir.uglygep77 + 16, align 4, !tbaa !6)
    %25:fpr128 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDv4f32 killed %24, killed %20
    %26:fpr128 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDv4f32 killed %23, killed %19
    %27:gpr64sp = ADDXri %18, 12, 0
    %28:gpr64sp = ADDXri %18, 28, 0
    %30:fpr32 = COPY %26.ssub
    STRSui killed %30, %18, 1 :: (store (s32) into %ir.uglygep88, !tbaa !6)
    ST1i32 %26, 2, killed %27 :: (store (s32) into %ir.uglygep89, !tbaa !6)
    %32:fpr32 = COPY %25.ssub
    STRSui killed %32, %18, 5 :: ("aarch64-suppress-pair" store (s32) into %ir.uglygep90, !tbaa !6)
    ST1i32 %25, 2, killed %28 :: (store (s32) into %ir.uglygep92, !tbaa !6)
    %33:fpr128 = LDRQui %18, 2 :: (load (s128) from %ir.uglygep69, align 32, !tbaa !6)
    %34:fpr128 = LDRQui %18, 3 :: (load (s128) from %ir.uglygep69 + 16, basealign 32, !tbaa !6)
    %35:fpr128 = LDURQi %22, 36 :: (load (s128) from %ir.uglygep73, align 4, !tbaa !6)
    %36:fpr128 = LDURQi %22, 52 :: (load (s128) from %ir.uglygep73 + 16, align 4, !tbaa !6)
    %37:fpr128 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDv4f32 killed %36, killed %34
    %38:fpr128 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDv4f32 killed %35, killed %33
    %39:gpr64sp = ADDXri %18, 44, 0
    %40:gpr64sp = ADDXri %18, 60, 0
    %42:fpr32 = COPY %38.ssub
    STRSui killed %42, %18, 9 :: ("aarch64-suppress-pair" store (s32) into %ir.uglygep85, !tbaa !6)
    ST1i32 %38, 2, killed %39 :: (store (s32) into %ir.uglygep94, !tbaa !6)
    %44:fpr32 = COPY %37.ssub
    STRSui killed %44, %18, 13 :: ("aarch64-suppress-pair" store (s32) into %ir.uglygep79, !tbaa !6)
    ST1i32 %37, 2, killed %40 :: (store (s32) into %ir.uglygep93, !tbaa !6)
    %45:fpr128 = LDRQui %18, 4 :: (load (s128) from %ir.uglygep71, align 32, !tbaa !6)
    %46:fpr128 = LDRQui %18, 5 :: (load (s128) from %ir.uglygep71 + 16, basealign 32, !tbaa !6)
    %47:fpr128 = LDURQi %22, 68 :: (load (s128) from %ir.uglygep75, align 4, !tbaa !6)
    %48:fpr128 = LDURQi %22, 84 :: (load (s128) from %ir.uglygep75 + 16, align 4, !tbaa !6)
    %49:fpr128 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDv4f32 killed %48, killed %46
    %50:fpr128 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDv4f32 killed %47, killed %45
    %51:gpr64sp = ADDXri %18, 76, 0
    %52:gpr64sp = ADDXri %18, 92, 0
    %54:fpr32 = COPY %50.ssub
    STRSui killed %54, %18, 17 :: ("aarch64-suppress-pair" store (s32) into %ir.uglygep83, !tbaa !6)
    ST1i32 %50, 2, killed %51 :: (store (s32) into %ir.uglygep86, !tbaa !6)
    %56:fpr32 = COPY %49.ssub
    STRSui killed %56, %18, 21 :: ("aarch64-suppress-pair" store (s32) into %ir.uglygep95, !tbaa !6)
    ST1i32 %49, 2, killed %52 :: (store (s32) into %ir.uglygep81, !tbaa !6)
    %57:gpr64sp = nuw nsw ADDXri %2, 96, 0
    %4:gpr64all = COPY %57
    %58:gpr64 = SUBSXri %3, 1, 0, implicit-def $nzcv
    %5:gpr64all = COPY %58
    Bcc 1, %bb.2, implicit $nzcv
    B %bb.4
  
  bb.3.for.cond.cleanup:
    %100:gpr64sp = nuw ADDXri %7, 16, 0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %101:gpr64all = COPY $xzr
    $x0 = COPY %100
    $x1 = COPY %101
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %103:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s111, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s111
    $x0 = COPY %103
    TCRETURNdi @calc_checksum, 0, csr_aarch64_aapcs, implicit $sp, implicit $x0
  
  bb.4.for.body5:
    successors: %bb.3(0x04000000), %bb.1(0x7c000000)
  
    %62:fpr32 = LDRSroX %17, %61, 0, 0 :: (dereferenceable load (s32) from `ptr getelementptr inbounds ([32000 x float], ptr @a, i64 0, i64 31992)`, align 32, !tbaa !6)
    %66:fpr32 = LDRSroX %21, %65, 0, 0 :: (dereferenceable load (s32) from `ptr getelementptr inbounds ([32000 x float], ptr @b, i64 0, i64 31993)`, !tbaa !6)
    %67:fpr32 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDSrr killed %66, killed %62
    STRSroX killed %67, %17, %65, 0, 0 :: (store (s32) into `ptr getelementptr inbounds ([32000 x float], ptr @a, i64 0, i64 31993)`, !tbaa !6)
    %70:fpr32 = LDRSroX %17, %69, 0, 0 :: (dereferenceable load (s32) from `ptr getelementptr inbounds ([32000 x float], ptr @a, i64 0, i64 31994)`, align 8, !tbaa !6)
    %73:fpr32 = LDRSroX %21, %72, 0, 0 :: (dereferenceable load (s32) from `ptr getelementptr inbounds ([32000 x float], ptr @b, i64 0, i64 31995)`, !tbaa !6)
    %74:fpr32 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDSrr killed %73, killed %70
    STRSroX killed %74, %17, %72, 0, 0 :: (store (s32) into `ptr getelementptr inbounds ([32000 x float], ptr @a, i64 0, i64 31995)`, !tbaa !6)
    %77:fpr32 = LDRSroX %17, %76, 0, 0 :: (dereferenceable load (s32) from `ptr getelementptr inbounds ([32000 x float], ptr @a, i64 0, i64 31996)`, align 16, !tbaa !6)
    %80:fpr32 = LDRSroX %21, %79, 0, 0 :: (dereferenceable load (s32) from `ptr getelementptr inbounds ([32000 x float], ptr @b, i64 0, i64 31997)`, !tbaa !6)
    %81:fpr32 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDSrr killed %80, killed %77
    STRSroX killed %81, %17, %79, 0, 0 :: (store (s32) into `ptr getelementptr inbounds ([32000 x float], ptr @a, i64 0, i64 31997)`, !tbaa !6)
    %84:fpr32 = LDRSroX %17, %83, 0, 0 :: (dereferenceable load (s32) from `ptr getelementptr inbounds ([32000 x float], ptr @a, i64 0, i64 31998)`, align 8, !tbaa !6)
    %87:fpr32 = LDRSroX %21, %86, 0, 0 :: (dereferenceable load (s32) from `ptr getelementptr inbounds ([32000 x float], ptr @b, i64 0, i64 31999)`, !tbaa !6)
    %88:fpr32 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDSrr killed %87, killed %84
    STRSroX killed %88, %17, %86, 0, 0 :: (store (s32) into `ptr getelementptr inbounds ([32000 x float], ptr @a, i64 0, i64 31999)`, !tbaa !6)
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    $x0 = COPY %17
    $x1 = COPY %21
    $x2 = COPY %89
    $x3 = COPY %90
    $x4 = COPY %91
    $x5 = COPY %92
    $x6 = COPY %93
    $x7 = COPY %94
    $s0 = COPY %95
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $s0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %97:gpr32common = nuw nsw ADDWri %0, 1, 0
    %6:gpr32all = COPY %97
    dead $wzr = SUBSWrr %97, %98, implicit-def $nzcv
    Bcc 0, %bb.3, implicit $nzcv
    B %bb.1

...
