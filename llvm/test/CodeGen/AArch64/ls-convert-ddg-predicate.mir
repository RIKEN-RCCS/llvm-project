#RUN: llc %s -mcpu=a64fx -fswp -fls -ls-debug-dump-ddg -start-before=aarch64-swpipeliner -swpl-max-freg=1 -o /dev/null 2>&1 | FileCheck %s
#CHECK: DBG(LsDdg::print) LsDdg. 
#CHECK: ### from: %92:zpr = LD1D_IMM %33:ppr_3b, %86:gpr64sp, 0 :: (load unknown-size from %ir.lsr.iv98, align 64, !tbaa !6)
#CHECK-NEXT: ### to  : %94:zpr = nnan ninf nsz arcp contract afn reassoc FNMLS_ZPZZZ_D_UNDEF %33:ppr_3b, killed %92:zpr, %93:zpr, %93:zpr
#CHECK-NEXT: ### distance:0 delay:11 dep:reg(%92:Float)

#CHECK: ### from: %93:zpr = LD1D_IMM %33:ppr_3b, %85:gpr64sp, 0 :: (load unknown-size from %ir.lsr.iv100, align 64, !tbaa !6)
#CHECK-NEXT: ### to  : %94:zpr = nnan ninf nsz arcp contract afn reassoc FNMLS_ZPZZZ_D_UNDEF %33:ppr_3b, killed %92:zpr, %93:zpr, %93:zpr
#CHECK-NEXT: ### distance:0 delay:11 dep:reg(%93:Float)

#CHECK: ### from: %94:zpr = nnan ninf nsz arcp contract afn reassoc FNMLS_ZPZZZ_D_UNDEF %33:ppr_3b, killed %92:zpr, %93:zpr, %93:zpr
#CHECK-NEXT: ### to  : ST1D_IMM %94:zpr, %91:ppr_3b, %86:gpr64sp, 0 :: (store unknown-size into %ir.lsr.iv98, align 8, !tbaa !6)
#CHECK-NEXT: ### distance:0 delay:9 dep:reg(%94:Float)

#CHECK: ### from: %91:ppr_3b = nofpexcept FCMLE_PPzZ0_D %33:ppr_3b, %89:zpr
#CHECK-NEXT: ### to  : ST1D_IMM %94:zpr, %91:ppr_3b, %86:gpr64sp, 0 :: (store unknown-size into %ir.lsr.iv98, align 8, !tbaa !6)
#CHECK-NEXT: ### distance:0 delay:4 dep:reg(%91:Predicate)

#CHECK: ### from: %94:zpr = nnan ninf nsz arcp contract afn reassoc FNMLS_ZPZZZ_D_UNDEF %33:ppr_3b, killed %92:zpr, %93:zpr, %93:zpr
#CHECK-NEXT: ### to  : %95:ppr_3b = nnan ninf nsz arcp contract afn reassoc nofpexcept FCMGT_PPzZZ_D %33:ppr_3b, %94:zpr, %89:zpr
#CHECK-NEXT: ### distance:0 delay:9 dep:reg(%94:Float)

#CHECK: ### from: %96:zpr = LD1D_IMM %33:ppr_3b, %84:gpr64sp, 0 :: (load unknown-size from %ir.lsr.iv102, align 64, !tbaa !6)
#CHECK-NEXT: ### to  : %98:zpr = nnan ninf nsz arcp contract afn reassoc FMLA_ZPZZZ_D_UNDEF %33:ppr_3b, %96:zpr, %97:zpr, %93:zpr
#CHECK-NEXT: ### distance:0 delay:11 dep:reg(%96:Float)

#CHECK: ### from: %97:zpr = LD1D_IMM %33:ppr_3b, %83:gpr64sp, 0 :: (load unknown-size from %ir.lsr.iv104, align 64, !tbaa !6)
#CHECK-NEXT: ### to  : %98:zpr = nnan ninf nsz arcp contract afn reassoc FMLA_ZPZZZ_D_UNDEF %33:ppr_3b, %96:zpr, %97:zpr, %93:zpr
#CHECK-NEXT: ### distance:0 delay:11 dep:reg(%97:Float)

#CHECK: ### from: %93:zpr = LD1D_IMM %33:ppr_3b, %85:gpr64sp, 0 :: (load unknown-size from %ir.lsr.iv100, align 64, !tbaa !6)
#CHECK-NEXT: ### to  : %98:zpr = nnan ninf nsz arcp contract afn reassoc FMLA_ZPZZZ_D_UNDEF %33:ppr_3b, %96:zpr, %97:zpr, %93:zpr
#CHECK-NEXT: ### distance:0 delay:11 dep:reg(%93:Float)

#CHECK: ### from: %91:ppr_3b = nofpexcept FCMLE_PPzZ0_D %33:ppr_3b, %89:zpr
#CHECK-NEXT: ### to  : %99:ppr_3b = AND_PPzPP %91:ppr_3b, %91:ppr_3b, %95:ppr_3b
#CHECK-NEXT: ### distance:0 delay:4 dep:reg(%91:Predicate)

#CHECK: ### from: %95:ppr_3b = nnan ninf nsz arcp contract afn reassoc nofpexcept FCMGT_PPzZZ_D %33:ppr_3b, %94:zpr, %89:zpr
#CHECK-NEXT: ### to  : %99:ppr_3b = AND_PPzPP %91:ppr_3b, %91:ppr_3b, %95:ppr_3b
#CHECK-NEXT: ### distance:0 delay:4 dep:reg(%95:Predicate)

#CHECK: ### from: %98:zpr = nnan ninf nsz arcp contract afn reassoc FMLA_ZPZZZ_D_UNDEF %33:ppr_3b, %96:zpr, %97:zpr, %93:zpr
#CHECK-NEXT: ### to  : ST1D_IMM killed %98:zpr, killed %99:ppr_3b, %84:gpr64sp, 0 :: (store unknown-size into %ir.lsr.iv102, align 8, !tbaa !6)
#CHECK-NEXT: ### distance:0 delay:9 dep:reg(%98:Float)

#CHECK: ### from: %99:ppr_3b = AND_PPzPP %91:ppr_3b, %91:ppr_3b, %95:ppr_3b
#CHECK-NEXT: ### to  : ST1D_IMM killed %98:zpr, killed %99:ppr_3b, %84:gpr64sp, 0 :: (store unknown-size into %ir.lsr.iv102, align 8, !tbaa !6)
#CHECK-NEXT: ### distance:0 delay:3 dep:reg(%99:Predicate)

#CHECK: ### from: %100:zpr = LD1D_IMM %33:ppr_3b, %84:gpr64sp, 0 :: (load unknown-size from %ir.lsr.iv102, align 64, !tbaa !6)
#CHECK-NEXT: ### to  : %101:zpr = nnan ninf nsz arcp contract afn reassoc FNMLS_ZPZZZ_D_UNDEF %33:ppr_3b, killed %100:zpr, %97:zpr, %97:zpr
#CHECK-NEXT: ### distance:0 delay:11 dep:reg(%100:Float)

#CHECK: ### from: %97:zpr = LD1D_IMM %33:ppr_3b, %83:gpr64sp, 0 :: (load unknown-size from %ir.lsr.iv104, align 64, !tbaa !6)
#CHECK-NEXT: ### to  : %101:zpr = nnan ninf nsz arcp contract afn reassoc FNMLS_ZPZZZ_D_UNDEF %33:ppr_3b, killed %100:zpr, %97:zpr, %97:zpr
#CHECK-NEXT: ### distance:0 delay:11 dep:reg(%97:Float)

#CHECK: ### from: %101:zpr = nnan ninf nsz arcp contract afn reassoc FNMLS_ZPZZZ_D_UNDEF %33:ppr_3b, killed %100:zpr, %97:zpr, %97:zpr
#CHECK-NEXT: ### to  : ST1D_IMM %101:zpr, %90:ppr_3b, %84:gpr64sp, 0 :: (store unknown-size into %ir.lsr.iv102, align 8, !tbaa !6)
#CHECK-NEXT: ### distance:0 delay:9 dep:reg(%101:Float)

#CHECK: ### from: %103:zpr = LD1D_IMM %33:ppr_3b, %85:gpr64sp, 0 :: (load unknown-size from %ir.lsr.iv100, align 64, !tbaa !6)
#CHECK-NEXT: ### to  : %104:zpr = SEL_ZPZZ_D %90:ppr_3b, killed %103:zpr, %93:zpr
#CHECK-NEXT: ### distance:0 delay:11 dep:reg(%103:Float)

#CHECK: ### from: %93:zpr = LD1D_IMM %33:ppr_3b, %85:gpr64sp, 0 :: (load unknown-size from %ir.lsr.iv100, align 64, !tbaa !6)
#CHECK-NEXT: ### to  : %104:zpr = SEL_ZPZZ_D %90:ppr_3b, killed %103:zpr, %93:zpr
#CHECK-NEXT: ### distance:0 delay:11 dep:reg(%93:Float)

#CHECK: ### from: %96:zpr = LD1D_IMM %33:ppr_3b, %84:gpr64sp, 0 :: (load unknown-size from %ir.lsr.iv102, align 64, !tbaa !6)
#CHECK-NEXT: ### to  : %123:zpr = COPY %96:zpr
#CHECK-NEXT: ### distance:0 delay:11 dep:reg(%96:Float)

#CHECK: ### from: %95:ppr_3b = nnan ninf nsz arcp contract afn reassoc nofpexcept FCMGT_PPzZZ_D %33:ppr_3b, %94:zpr, %89:zpr
#CHECK-NEXT: ### to  : %105:zpr = nofpexcept FMLA_ZPmZZ_D %95:ppr_3b, %123:zpr(tied-def 0), %97:zpr, %93:zpr
#CHECK-NEXT: ### distance:0 delay:4 dep:reg(%95:Predicate)

#CHECK: ### from: %123:zpr = COPY %96:zpr
#CHECK-NEXT: ### to  : %105:zpr = nofpexcept FMLA_ZPmZZ_D %95:ppr_3b, %123:zpr(tied-def 0), %97:zpr, %93:zpr
#CHECK-NEXT: ### distance:0 delay:4 dep:reg(%123:Float)

#CHECK: ### from: %97:zpr = LD1D_IMM %33:ppr_3b, %83:gpr64sp, 0 :: (load unknown-size from %ir.lsr.iv104, align 64, !tbaa !6)
#CHECK-NEXT: ### to  : %105:zpr = nofpexcept FMLA_ZPmZZ_D %95:ppr_3b, %123:zpr(tied-def 0), %97:zpr, %93:zpr
#CHECK-NEXT: ### distance:0 delay:11 dep:reg(%97:Float)

#CHECK: ### from: %93:zpr = LD1D_IMM %33:ppr_3b, %85:gpr64sp, 0 :: (load unknown-size from %ir.lsr.iv100, align 64, !tbaa !6)
#CHECK-NEXT: ### to  : %105:zpr = nofpexcept FMLA_ZPmZZ_D %95:ppr_3b, %123:zpr(tied-def 0), %97:zpr, %93:zpr
#CHECK-NEXT: ### distance:0 delay:11 dep:reg(%93:Float)

#CHECK: ### from: %101:zpr = nnan ninf nsz arcp contract afn reassoc FNMLS_ZPZZZ_D_UNDEF %33:ppr_3b, killed %100:zpr, %97:zpr, %97:zpr
#CHECK-NEXT: ### to  : %106:zpr = SEL_ZPZZ_D %90:ppr_3b, %101:zpr, killed %105:zpr
#CHECK-NEXT: ### distance:0 delay:9 dep:reg(%101:Float)

#CHECK: ### from: %105:zpr = nofpexcept FMLA_ZPmZZ_D %95:ppr_3b, %123:zpr(tied-def 0), %97:zpr, %93:zpr
#CHECK-NEXT: ### to  : %106:zpr = SEL_ZPZZ_D %90:ppr_3b, %101:zpr, killed %105:zpr
#CHECK-NEXT: ### distance:0 delay:9 dep:reg(%105:Float)

#CHECK: ### from: %102:zpr = LD1D_IMM %33:ppr_3b, %86:gpr64sp, 0 :: (load unknown-size from %ir.lsr.iv98, align 64, !tbaa !6)
#CHECK-NEXT: ### to  : %107:zpr = SEL_ZPZZ_D %90:ppr_3b, killed %102:zpr, %94:zpr
#CHECK-NEXT: ### distance:0 delay:11 dep:reg(%102:Float)

#CHECK: ### from: %94:zpr = nnan ninf nsz arcp contract afn reassoc FNMLS_ZPZZZ_D_UNDEF %33:ppr_3b, killed %92:zpr, %93:zpr, %93:zpr
#CHECK-NEXT: ### to  : %107:zpr = SEL_ZPZZ_D %90:ppr_3b, killed %102:zpr, %94:zpr
#CHECK-NEXT: ### distance:0 delay:9 dep:reg(%94:Float)

#CHECK: ### from: %107:zpr = SEL_ZPZZ_D %90:ppr_3b, killed %102:zpr, %94:zpr
#CHECK-NEXT: ### to  : %108:zpr = nnan ninf nsz arcp contract afn reassoc FMLA_ZPZZZ_D_UNDEF %33:ppr_3b, killed %107:zpr, killed %104:zpr, killed %106:zpr
#CHECK-NEXT: ### distance:0 delay:4 dep:reg(%107:Float)

#CHECK: ### from: %104:zpr = SEL_ZPZZ_D %90:ppr_3b, killed %103:zpr, %93:zpr
#CHECK-NEXT: ### to  : %108:zpr = nnan ninf nsz arcp contract afn reassoc FMLA_ZPZZZ_D_UNDEF %33:ppr_3b, killed %107:zpr, killed %104:zpr, killed %106:zpr
#CHECK-NEXT: ### distance:0 delay:4 dep:reg(%104:Float)

#CHECK: ### from: %106:zpr = SEL_ZPZZ_D %90:ppr_3b, %101:zpr, killed %105:zpr
#CHECK-NEXT: ### to  : %108:zpr = nnan ninf nsz arcp contract afn reassoc FMLA_ZPZZZ_D_UNDEF %33:ppr_3b, killed %107:zpr, killed %104:zpr, killed %106:zpr
#CHECK-NEXT: ### distance:0 delay:4 dep:reg(%106:Float)

#CHECK: ### from: %108:zpr = nnan ninf nsz arcp contract afn reassoc FMLA_ZPZZZ_D_UNDEF %33:ppr_3b, killed %107:zpr, killed %104:zpr, killed %106:zpr
#CHECK-NEXT: ### to  : ST1D_IMM killed %108:zpr, %33:ppr_3b, %87:gpr64sp, 0 :: (store unknown-size into %ir.lsr.iv, align 64, !tbaa !6)
#CHECK-NEXT: ### distance:0 delay:9 dep:reg(%108:Float)

#CHECK: ### from: %109:zpr = LD1D_IMM %33:ppr_3b, %87:gpr64sp, 0 :: (load unknown-size from %ir.lsr.iv, align 64, !tbaa !6)
#CHECK-NEXT: ### to  : %90:ppr_3b = nnan ninf nsz arcp contract afn reassoc nofpexcept FCMGT_PPzZ0_D %33:ppr_3b, %109:zpr
#CHECK-NEXT: ### distance:0 delay:11 dep:reg(%109:Float)

#CHECK: ### from: %109:zpr = LD1D_IMM %33:ppr_3b, %87:gpr64sp, 0 :: (load unknown-size from %ir.lsr.iv, align 64, !tbaa !6)
#CHECK-NEXT: ### to  : %89:zpr = COPY %109:zpr
#CHECK-NEXT: ### distance:0 delay:11 dep:reg(%109:Float)

#CHECK: ### from: %91:ppr_3b = nofpexcept FCMLE_PPzZ0_D %33:ppr_3b, %89:zpr
#CHECK-NEXT: ### to  : %89:zpr = COPY %109:zpr
#CHECK-NEXT: ### distance:0 delay:1 dep:reg(%89:Float)

#CHECK: ### from: %92:zpr = LD1D_IMM %33:ppr_3b, %86:gpr64sp, 0 :: (load unknown-size from %ir.lsr.iv98, align 64, !tbaa !6)
#CHECK-NEXT: ### to  : %86:gpr64sp = ADDXri %86:gpr64sp, 64, 0
#CHECK-NEXT: ### distance:0 delay:1 dep:reg(%86:Int)

#CHECK: ### from: %93:zpr = LD1D_IMM %33:ppr_3b, %85:gpr64sp, 0 :: (load unknown-size from %ir.lsr.iv100, align 64, !tbaa !6)
#CHECK-NEXT: ### to  : %85:gpr64sp = ADDXri %85:gpr64sp, 64, 0
#CHECK-NEXT: ### distance:0 delay:1 dep:reg(%85:Int)

#CHECK: ### from: ST1D_IMM %94:zpr, %91:ppr_3b, %86:gpr64sp, 0 :: (store unknown-size into %ir.lsr.iv98, align 8, !tbaa !6)
#CHECK-NEXT: ### to  : %86:gpr64sp = ADDXri %86:gpr64sp, 64, 0
#CHECK-NEXT: ### distance:0 delay:1 dep:reg(%86:Int)

#CHECK: ### from: %95:ppr_3b = nnan ninf nsz arcp contract afn reassoc nofpexcept FCMGT_PPzZZ_D %33:ppr_3b, %94:zpr, %89:zpr
#CHECK-NEXT: ### to  : %89:zpr = COPY %109:zpr
#CHECK-NEXT: ### distance:0 delay:1 dep:reg(%89:Float)

#CHECK: ### from: %96:zpr = LD1D_IMM %33:ppr_3b, %84:gpr64sp, 0 :: (load unknown-size from %ir.lsr.iv102, align 64, !tbaa !6)
#CHECK-NEXT: ### to  : %84:gpr64sp = ADDXri %84:gpr64sp, 64, 0
#CHECK-NEXT: ### distance:0 delay:1 dep:reg(%84:Int)

#CHECK: ### from: %97:zpr = LD1D_IMM %33:ppr_3b, %83:gpr64sp, 0 :: (load unknown-size from %ir.lsr.iv104, align 64, !tbaa !6)
#CHECK-NEXT: ### to  : %83:gpr64sp = ADDXri %83:gpr64sp, 64, 0
#CHECK-NEXT: ### distance:0 delay:1 dep:reg(%83:Int)

#CHECK: ### from: ST1D_IMM killed %98:zpr, killed %99:ppr_3b, %84:gpr64sp, 0 :: (store unknown-size into %ir.lsr.iv102, align 8, !tbaa !6)
#CHECK-NEXT: ### to  : %84:gpr64sp = ADDXri %84:gpr64sp, 64, 0
#CHECK-NEXT: ### distance:0 delay:1 dep:reg(%84:Int)

#CHECK: ### from: %100:zpr = LD1D_IMM %33:ppr_3b, %84:gpr64sp, 0 :: (load unknown-size from %ir.lsr.iv102, align 64, !tbaa !6)
#CHECK-NEXT: ### to  : %84:gpr64sp = ADDXri %84:gpr64sp, 64, 0
#CHECK-NEXT: ### distance:0 delay:1 dep:reg(%84:Int)

#CHECK: ### from: ST1D_IMM %101:zpr, %90:ppr_3b, %84:gpr64sp, 0 :: (store unknown-size into %ir.lsr.iv102, align 8, !tbaa !6)
#CHECK-NEXT: ### to  : %90:ppr_3b = nnan ninf nsz arcp contract afn reassoc nofpexcept FCMGT_PPzZ0_D %33:ppr_3b, %109:zpr
#CHECK-NEXT: ### distance:0 delay:1 dep:reg(%90:Predicate)

#CHECK: ### from: ST1D_IMM %101:zpr, %90:ppr_3b, %84:gpr64sp, 0 :: (store unknown-size into %ir.lsr.iv102, align 8, !tbaa !6)
#CHECK-NEXT: ### to  : %84:gpr64sp = ADDXri %84:gpr64sp, 64, 0
#CHECK-NEXT: ### distance:0 delay:1 dep:reg(%84:Int)

#CHECK: ### from: %102:zpr = LD1D_IMM %33:ppr_3b, %86:gpr64sp, 0 :: (load unknown-size from %ir.lsr.iv98, align 64, !tbaa !6)
#CHECK-NEXT: ### to  : %86:gpr64sp = ADDXri %86:gpr64sp, 64, 0
#CHECK-NEXT: ### distance:0 delay:1 dep:reg(%86:Int)

#CHECK: ### from: %103:zpr = LD1D_IMM %33:ppr_3b, %85:gpr64sp, 0 :: (load unknown-size from %ir.lsr.iv100, align 64, !tbaa !6)
#CHECK-NEXT: ### to  : %85:gpr64sp = ADDXri %85:gpr64sp, 64, 0
#CHECK-NEXT: ### distance:0 delay:1 dep:reg(%85:Int)

#CHECK: ### from: %104:zpr = SEL_ZPZZ_D %90:ppr_3b, killed %103:zpr, %93:zpr
#CHECK-NEXT: ### to  : %90:ppr_3b = nnan ninf nsz arcp contract afn reassoc nofpexcept FCMGT_PPzZ0_D %33:ppr_3b, %109:zpr
#CHECK-NEXT: ### distance:0 delay:1 dep:reg(%90:Predicate)

#CHECK: ### from: %106:zpr = SEL_ZPZZ_D %90:ppr_3b, %101:zpr, killed %105:zpr
#CHECK-NEXT: ### to  : %90:ppr_3b = nnan ninf nsz arcp contract afn reassoc nofpexcept FCMGT_PPzZ0_D %33:ppr_3b, %109:zpr
#CHECK-NEXT: ### distance:0 delay:1 dep:reg(%90:Predicate)

#CHECK: ### from: %107:zpr = SEL_ZPZZ_D %90:ppr_3b, killed %102:zpr, %94:zpr
#CHECK-NEXT: ### to  : %90:ppr_3b = nnan ninf nsz arcp contract afn reassoc nofpexcept FCMGT_PPzZ0_D %33:ppr_3b, %109:zpr
#CHECK-NEXT: ### distance:0 delay:1 dep:reg(%90:Predicate)

--- |
  ; ModuleID = 's279.c'
  source_filename = "s279.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  %struct.args_t = type { %struct.timeval, %struct.timeval, ptr }
  %struct.timeval = type { i64, i64 }
  
  @__func__.s279 = private unnamed_addr constant [5 x i8] c"s279\00", align 1
  @a = external global [32000 x double], align 64
  @b = external global [32000 x double], align 64
  @d = external global [32000 x double], align 64
  @e = external global [32000 x double], align 64
  @c = external global [32000 x double], align 64
  @aa = external global [256 x [256 x double]], align 64
  @bb = external global [256 x [256 x double]], align 64
  @cc = external global [256 x [256 x double]], align 64
  
  ; Function Attrs: nounwind uwtable vscale_range(4,4)
  define dso_local nofpclass(nan inf) double @s279(ptr nocapture noundef %func_args) local_unnamed_addr #0 {
  entry:
    %call = tail call i32 @initialise_arrays(ptr noundef nonnull @__func__.s279) #5
    %call1 = tail call i32 @gettimeofday(ptr noundef %func_args, ptr noundef null) #5
    br label %vector.ph
  
  vector.ph:                                        ; preds = %for.cond.cleanup4, %entry
    %nl.079 = phi i32 [ 0, %entry ], [ %inc53, %for.cond.cleanup4 ]
    %0 = call i64 @llvm.start.loop.iterations.i64(i64 4000)
    br label %vector.body
  
  vector.body:                                      ; preds = %vector.body, %vector.ph
    %lsr.iv104 = phi ptr [ %scevgep105, %vector.body ], [ @e, %vector.ph ]
    %lsr.iv102 = phi ptr [ %scevgep103, %vector.body ], [ @c, %vector.ph ]
    %lsr.iv100 = phi ptr [ %scevgep101, %vector.body ], [ @d, %vector.ph ]
    %lsr.iv98 = phi ptr [ %scevgep99, %vector.body ], [ @b, %vector.ph ]
    %lsr.iv = phi ptr [ %scevgep, %vector.body ], [ @a, %vector.ph ]
    %1 = phi i64 [ %0, %vector.ph ], [ %14, %vector.body ]
    %wide.load = load <vscale x 2 x double>, ptr %lsr.iv, align 64, !tbaa !6
    %2 = fcmp fast ogt <vscale x 2 x double> %wide.load, zeroinitializer
    %wide.load84 = load <vscale x 2 x double>, ptr %lsr.iv98, align 64, !tbaa !6
    %wide.load85 = load <vscale x 2 x double>, ptr %lsr.iv100, align 64, !tbaa !6
    %3 = fmul fast <vscale x 2 x double> %wide.load85, %wide.load85
    %4 = fsub fast <vscale x 2 x double> %3, %wide.load84
    %5 = xor <vscale x 2 x i1> %2, shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer)
    tail call void @llvm.masked.store.nxv2f64.p0(<vscale x 2 x double> %4, ptr %lsr.iv98, i32 8, <vscale x 2 x i1> %5), !tbaa !6
    %6 = fcmp fast ugt <vscale x 2 x double> %4, %wide.load
    %wide.load86 = load <vscale x 2 x double>, ptr %lsr.iv102, align 64, !tbaa !6
    %wide.load87 = load <vscale x 2 x double>, ptr %lsr.iv104, align 64, !tbaa !6
    %7 = fmul fast <vscale x 2 x double> %wide.load87, %wide.load85
    %8 = fadd fast <vscale x 2 x double> %wide.load86, %7
    %9 = select <vscale x 2 x i1> %5, <vscale x 2 x i1> %6, <vscale x 2 x i1> zeroinitializer
    tail call void @llvm.masked.store.nxv2f64.p0(<vscale x 2 x double> %8, ptr %lsr.iv102, i32 8, <vscale x 2 x i1> %9), !tbaa !6
    %wide.load89 = load <vscale x 2 x double>, ptr %lsr.iv102, align 64, !tbaa !6
    %10 = fmul fast <vscale x 2 x double> %wide.load87, %wide.load87
    %11 = fsub fast <vscale x 2 x double> %10, %wide.load89
    tail call void @llvm.masked.store.nxv2f64.p0(<vscale x 2 x double> %11, ptr %lsr.iv102, i32 8, <vscale x 2 x i1> %2), !tbaa !6
    %wide.load91 = load <vscale x 2 x double>, ptr %lsr.iv98, align 64, !tbaa !6
    %wide.load92 = load <vscale x 2 x double>, ptr %lsr.iv100, align 64, !tbaa !6
    %predphi93 = select <vscale x 2 x i1> %2, <vscale x 2 x double> %wide.load92, <vscale x 2 x double> %wide.load85
    %predphi94 = select <vscale x 2 x i1> %6, <vscale x 2 x double> %8, <vscale x 2 x double> %wide.load86
    %predphi95 = select <vscale x 2 x i1> %2, <vscale x 2 x double> %11, <vscale x 2 x double> %predphi94
    %predphi97 = select <vscale x 2 x i1> %2, <vscale x 2 x double> %wide.load91, <vscale x 2 x double> %4
    %12 = fmul fast <vscale x 2 x double> %predphi93, %predphi95
    %13 = fadd fast <vscale x 2 x double> %12, %predphi97
    store <vscale x 2 x double> %13, ptr %lsr.iv, align 64, !tbaa !6
    %scevgep = getelementptr i8, ptr %lsr.iv, i64 64
    %scevgep99 = getelementptr i8, ptr %lsr.iv98, i64 64
    %scevgep101 = getelementptr i8, ptr %lsr.iv100, i64 64
    %scevgep103 = getelementptr i8, ptr %lsr.iv102, i64 64
    %scevgep105 = getelementptr i8, ptr %lsr.iv104, i64 64
    %14 = call i64 @llvm.loop.decrement.reg.i64(i64 %1, i64 1)
    %15 = icmp ne i64 %14, 0
    br i1 %15, label %vector.body, label %for.cond.cleanup4, !llvm.loop !10
  
  for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
    %t2 = getelementptr inbounds %struct.args_t, ptr %func_args, i64 0, i32 1
    %call55 = tail call i32 @gettimeofday(ptr noundef nonnull %t2, ptr noundef null) #5
    %call56 = tail call fast nofpclass(nan inf) double @calc_checksum(ptr noundef nonnull @__func__.s279) #5
    ret double %call56
  
  for.cond.cleanup4:                                ; preds = %vector.body
    %call51 = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, double noundef nofpclass(nan inf) 0.000000e+00) #5
    %inc53 = add nuw nsw i32 %nl.079, 1
    %exitcond81.not = icmp eq i32 %inc53, 50000
    br i1 %exitcond81.not, label %for.cond.cleanup, label %vector.ph, !llvm.loop !15
  }
  
  declare i32 @initialise_arrays(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nofree nounwind
  declare noundef i32 @gettimeofday(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #2
  
  declare i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, double noundef nofpclass(nan inf)) local_unnamed_addr #1
  
  declare nofpclass(nan inf) double @calc_checksum(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: write)
  declare void @llvm.masked.store.nxv2f64.p0(<vscale x 2 x double>, ptr nocapture, i32 immarg, <vscale x 2 x i1>) #3
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #4
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #4
  
  attributes #0 = { nounwind uwtable vscale_range(4,4) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #1 = { "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #2 = { nofree nounwind "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #3 = { nocallback nofree nosync nounwind willreturn memory(argmem: write) }
  attributes #4 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #5 = { nounwind }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !5 = !{!"clang version 17.0.6 ()"}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"double", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C/C++ TBAA"}
  !10 = distinct !{!10, !11, !12, !13, !14}
  !11 = !{!"llvm.loop.mustprogress"}
  !12 = !{!"llvm.loop.unroll.disable"}
  !13 = !{!"llvm.loop.isvectorized", i32 1}
  !14 = !{!"llvm.loop.unroll.runtime.disable"}
  !15 = distinct !{!15, !11, !12}

...
---
name:            s279
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32sp, preferred-register: '' }
  - { id: 1, class: gpr64all, preferred-register: '' }
  - { id: 2, class: gpr64sp, preferred-register: '' }
  - { id: 3, class: gpr64sp, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: gpr64sp, preferred-register: '' }
  - { id: 6, class: gpr64sp, preferred-register: '' }
  - { id: 7, class: gpr64sp, preferred-register: '' }
  - { id: 8, class: gpr64all, preferred-register: '' }
  - { id: 9, class: gpr64all, preferred-register: '' }
  - { id: 10, class: gpr64all, preferred-register: '' }
  - { id: 11, class: gpr64all, preferred-register: '' }
  - { id: 12, class: gpr64all, preferred-register: '' }
  - { id: 13, class: gpr64all, preferred-register: '' }
  - { id: 14, class: gpr32all, preferred-register: '' }
  - { id: 15, class: gpr64common, preferred-register: '' }
  - { id: 16, class: gpr32all, preferred-register: '' }
  - { id: 17, class: gpr64common, preferred-register: '' }
  - { id: 18, class: gpr32all, preferred-register: '' }
  - { id: 19, class: gpr64all, preferred-register: '' }
  - { id: 20, class: gpr32all, preferred-register: '' }
  - { id: 21, class: gpr32all, preferred-register: '' }
  - { id: 22, class: gpr64all, preferred-register: '' }
  - { id: 23, class: gpr64all, preferred-register: '' }
  - { id: 24, class: gpr64all, preferred-register: '' }
  - { id: 25, class: gpr64all, preferred-register: '' }
  - { id: 26, class: gpr64all, preferred-register: '' }
  - { id: 27, class: gpr64common, preferred-register: '' }
  - { id: 28, class: gpr64common, preferred-register: '' }
  - { id: 29, class: gpr64common, preferred-register: '' }
  - { id: 30, class: gpr64common, preferred-register: '' }
  - { id: 31, class: gpr64common, preferred-register: '' }
  - { id: 32, class: gpr32, preferred-register: '' }
  - { id: 33, class: ppr_3b, preferred-register: '' }
  - { id: 34, class: zpr, preferred-register: '' }
  - { id: 35, class: ppr_3b, preferred-register: '' }
  - { id: 36, class: ppr_3b, preferred-register: '' }
  - { id: 37, class: ppr_3b, preferred-register: '' }
  - { id: 38, class: zpr, preferred-register: '' }
  - { id: 39, class: zpr, preferred-register: '' }
  - { id: 40, class: zpr, preferred-register: '' }
  - { id: 41, class: ppr_3b, preferred-register: '' }
  - { id: 42, class: zpr, preferred-register: '' }
  - { id: 43, class: zpr, preferred-register: '' }
  - { id: 44, class: zpr, preferred-register: '' }
  - { id: 45, class: ppr_3b, preferred-register: '' }
  - { id: 46, class: zpr, preferred-register: '' }
  - { id: 47, class: zpr, preferred-register: '' }
  - { id: 48, class: zpr, preferred-register: '' }
  - { id: 49, class: zpr, preferred-register: '' }
  - { id: 50, class: zpr, preferred-register: '' }
  - { id: 51, class: zpr, preferred-register: '' }
  - { id: 52, class: zpr, preferred-register: '' }
  - { id: 53, class: zpr, preferred-register: '' }
  - { id: 54, class: zpr, preferred-register: '' }
  - { id: 55, class: gpr64sp, preferred-register: '' }
  - { id: 56, class: gpr64sp, preferred-register: '' }
  - { id: 57, class: gpr64sp, preferred-register: '' }
  - { id: 58, class: gpr64sp, preferred-register: '' }
  - { id: 59, class: gpr64sp, preferred-register: '' }
  - { id: 60, class: gpr64, preferred-register: '' }
  - { id: 61, class: gpr64common, preferred-register: '' }
  - { id: 62, class: gpr64common, preferred-register: '' }
  - { id: 63, class: gpr64common, preferred-register: '' }
  - { id: 64, class: gpr64common, preferred-register: '' }
  - { id: 65, class: gpr64common, preferred-register: '' }
  - { id: 66, class: gpr64common, preferred-register: '' }
  - { id: 67, class: gpr64common, preferred-register: '' }
  - { id: 68, class: gpr64common, preferred-register: '' }
  - { id: 69, class: fpr64, preferred-register: '' }
  - { id: 70, class: gpr32all, preferred-register: '' }
  - { id: 71, class: gpr32common, preferred-register: '' }
  - { id: 72, class: gpr32, preferred-register: '' }
  - { id: 73, class: gpr32, preferred-register: '' }
  - { id: 74, class: gpr64sp, preferred-register: '' }
  - { id: 75, class: gpr64all, preferred-register: '' }
  - { id: 76, class: gpr32all, preferred-register: '' }
  - { id: 77, class: gpr64common, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%15' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     true
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $x0
  
    %15:gpr64common = COPY $x0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %17:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s279, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s279
    $x0 = COPY %17
    BL @initialise_arrays, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %19:gpr64all = COPY $xzr
    $x0 = COPY %15
    $x1 = COPY %19
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %21:gpr32all = COPY $wzr
    %16:gpr32all = COPY %21
    %27:gpr64common = LOADgot target-flags(aarch64-got) @a
    %28:gpr64common = LOADgot target-flags(aarch64-got) @b
    %29:gpr64common = LOADgot target-flags(aarch64-got) @d
    %30:gpr64common = LOADgot target-flags(aarch64-got) @c
    %31:gpr64common = LOADgot target-flags(aarch64-got) @e
    %32:gpr32 = MOVi32imm 4000
    %33:ppr_3b = PTRUE_D 31
    %66:gpr64common = LOADgot target-flags(aarch64-got) @aa
    %67:gpr64common = LOADgot target-flags(aarch64-got) @bb
    %68:gpr64common = LOADgot target-flags(aarch64-got) @cc
    %69:fpr64 = FMOVD0
    %72:gpr32 = MOVi32imm 50000
  
  bb.1.vector.ph:
    successors: %bb.2(0x80000000)
  
    %0:gpr32sp = PHI %16, %bb.0, %14, %bb.4
    %26:gpr64all = COPY %27
    %X0:gpr64sp = COPY %27
    %25:gpr64all = COPY %28
    %24:gpr64all = COPY %29
    %23:gpr64all = COPY %30
    %22:gpr64all = COPY %31
    %1:gpr64all = SUBREG_TO_REG 0, %32, %subreg.sub_32
    %X1:zpr = LD1D_IMM %33, %X0, 0 :: (load unknown-size from %ir.lsr.iv, align 64, !tbaa !6)
    %X2:ppr_3b = nnan ninf nsz arcp contract afn reassoc nofpexcept FCMGT_PPzZ0_D %33, %X1
  
  bb.2.vector.body:
    successors: %bb.2(0x7c000000), %bb.4(0x04000000)
  
    %2:gpr64sp = PHI %22, %bb.1, %12, %bb.2
    %3:gpr64sp = PHI %23, %bb.1, %11, %bb.2
    %4:gpr64sp = PHI %24, %bb.1, %10, %bb.2
    %5:gpr64sp = PHI %25, %bb.1, %9, %bb.2
    %6:gpr64sp = PHI %26, %bb.1, %8, %bb.2
    %7:gpr64sp = PHI %1, %bb.1, %13, %bb.2
    %34:zpr = PHI %X1, %bb.1, %Y1, %bb.2
    %36:ppr_3b = PHI %X2, %bb.1, %Y2, %bb.2
    %37:ppr_3b = nofpexcept FCMLE_PPzZ0_D %33, %34
    %38:zpr = LD1D_IMM %33, %5, 0 :: (load unknown-size from %ir.lsr.iv98, align 64, !tbaa !6)
    %39:zpr = LD1D_IMM %33, %4, 0 :: (load unknown-size from %ir.lsr.iv100, align 64, !tbaa !6)
    %40:zpr = nnan ninf nsz arcp contract afn reassoc FNMLS_ZPZZZ_D_UNDEF %33, killed %38, %39, %39
    ST1D_IMM %40, %37, %5, 0 :: (store unknown-size into %ir.lsr.iv98, align 8, !tbaa !6)
    %41:ppr_3b = nnan ninf nsz arcp contract afn reassoc nofpexcept FCMGT_PPzZZ_D %33, %40, %34
    %42:zpr = LD1D_IMM %33, %3, 0 :: (load unknown-size from %ir.lsr.iv102, align 64, !tbaa !6)
    %43:zpr = LD1D_IMM %33, %2, 0 :: (load unknown-size from %ir.lsr.iv104, align 64, !tbaa !6)
    %44:zpr = nnan ninf nsz arcp contract afn reassoc FMLA_ZPZZZ_D_UNDEF %33, %42, %43, %39
    %45:ppr_3b = AND_PPzPP %37, %37, %41
    ST1D_IMM killed %44, killed %45, %3, 0 :: (store unknown-size into %ir.lsr.iv102, align 8, !tbaa !6)
    %46:zpr = LD1D_IMM %33, %3, 0 :: (load unknown-size from %ir.lsr.iv102, align 64, !tbaa !6)
    %47:zpr = nnan ninf nsz arcp contract afn reassoc FNMLS_ZPZZZ_D_UNDEF %33, killed %46, %43, %43
    ST1D_IMM %47, %36, %3, 0 :: (store unknown-size into %ir.lsr.iv102, align 8, !tbaa !6)
    %48:zpr = LD1D_IMM %33, %5, 0 :: (load unknown-size from %ir.lsr.iv98, align 64, !tbaa !6)
    %49:zpr = LD1D_IMM %33, %4, 0 :: (load unknown-size from %ir.lsr.iv100, align 64, !tbaa !6)
    %50:zpr = SEL_ZPZZ_D %36, killed %49, %39
    %51:zpr = nofpexcept FMLA_ZPmZZ_D %41, %42, %43, %39
    %52:zpr = SEL_ZPZZ_D %36, %47, killed %51
    %53:zpr = SEL_ZPZZ_D %36, killed %48, %40
    %54:zpr = nnan ninf nsz arcp contract afn reassoc FMLA_ZPZZZ_D_UNDEF %33, killed %53, killed %50, killed %52
    ST1D_IMM killed %54, %33, %6, 0 :: (store unknown-size into %ir.lsr.iv, align 64, !tbaa !6)
    %Y1:zpr = LD1D_IMM %33, %6, 0 :: (load unknown-size from %ir.lsr.iv, align 64, !tbaa !6)
    %Y2:ppr_3b = nnan ninf nsz arcp contract afn reassoc nofpexcept FCMGT_PPzZ0_D %33, %Y1
    %55:gpr64sp = ADDXri %6, 64, 0
    %8:gpr64all = COPY %55
    %56:gpr64sp = ADDXri %5, 64, 0
    %9:gpr64all = COPY %56
    %57:gpr64sp = ADDXri %4, 64, 0
    %10:gpr64all = COPY %57
    %58:gpr64sp = ADDXri %3, 64, 0
    %11:gpr64all = COPY %58
    %59:gpr64sp = ADDXri %2, 64, 0
    %12:gpr64all = COPY %59
    %60:gpr64 = SUBSXri %7, 1, 0, implicit-def $nzcv
    %13:gpr64all = COPY %60
    Bcc 1, %bb.2, implicit $nzcv
    B %bb.4
  
  bb.3.for.cond.cleanup:
    %74:gpr64sp = nuw ADDXri %15, 16, 0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %75:gpr64all = COPY $xzr
    $x0 = COPY %74
    $x1 = COPY %75
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %77:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s279, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s279
    $x0 = COPY %77
    TCRETURNdi @calc_checksum, 0, csr_aarch64_aapcs, implicit $sp, implicit $x0
  
  bb.4.for.cond.cleanup4:
    successors: %bb.3(0x04000000), %bb.1(0x7c000000)
  
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    $x0 = COPY %27
    $x1 = COPY %28
    $x2 = COPY %30
    $x3 = COPY %29
    $x4 = COPY %31
    $x5 = COPY %66
    $x6 = COPY %67
    $x7 = COPY %68
    $d0 = COPY %69
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $d0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %71:gpr32common = nuw nsw ADDWri %0, 1, 0
    %14:gpr32all = COPY %71
    dead $wzr = SUBSWrr %71, %72, implicit-def $nzcv
    Bcc 0, %bb.3, implicit $nzcv
    B %bb.1

...
