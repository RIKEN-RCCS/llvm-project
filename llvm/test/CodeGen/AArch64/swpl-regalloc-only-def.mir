# RUN: llc %s -fswp -mcpu=a64fx -start-before=aarch64-swpipeliner -pass-remarks=aarch64-swpipeliner -swpl-enable-reg-alloc -o /dev/null 2>&1 | FileCheck %s
# CHECK: remark: s315.c:35:5: software pipelining (IPC: 2.16, ITR: 6, MVE: 2, II: 6, Stage: 6, (VReg Fp: 13/32, Int: 5/32, Pred: 2/8)), SRA(PReg Fp: 11/32, Int: 3/29, Pred: 1/8)

--- |
  ; ModuleID = 's315.c'
  source_filename = "s315.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  %struct.args_t = type { %struct.timeval, %struct.timeval, ptr }
  %struct.timeval = type { i64, i64 }
  
  @__func__.s315 = private unnamed_addr constant [5 x i8] c"s315\00", align 1
  @a = external global [32000 x double], align 64
  @b = external global [32000 x double], align 64
  @c = external global [32000 x double], align 64
  @d = external global [32000 x double], align 64
  @e = external global [32000 x double], align 64
  @aa = external global [256 x [256 x double]], align 64
  @bb = external global [256 x [256 x double]], align 64
  @cc = external global [256 x [256 x double]], align 64
  
  ; Function Attrs: nounwind uwtable vscale_range(4,4)
  define dso_local double @s315(ptr nocapture noundef %func_args) local_unnamed_addr #0 !dbg !10 {
  entry:
    %call = tail call i32 @initialise_arrays(ptr noundef nonnull @__func__.s315) #5, !dbg !13
    %call1 = tail call i32 @gettimeofday(ptr noundef %func_args, ptr noundef null) #5, !dbg !14
    %0 = tail call <vscale x 2 x i32> @llvm.experimental.stepvector.nxv2i32(), !dbg !15
    %1 = call i64 @llvm.start.loop.iterations.i64(i64 4000), !dbg !15
    br label %vector.body, !dbg !15
  
  vector.body:                                      ; preds = %vector.body, %entry
    %index = phi i64 [ 0, %entry ], [ %index.next, %vector.body ], !dbg !16
    %vec.ind = phi <vscale x 2 x i32> [ %0, %entry ], [ %vec.ind.next, %vector.body ], !dbg !17
    %2 = phi i64 [ %1, %entry ], [ %7, %vector.body ], !dbg !17
    %3 = mul <vscale x 2 x i32> %vec.ind, shufflevector (<vscale x 2 x i32> insertelement (<vscale x 2 x i32> poison, i32 7, i32 0), <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer), !dbg !17
    %4 = urem <vscale x 2 x i32> %3, shufflevector (<vscale x 2 x i32> insertelement (<vscale x 2 x i32> poison, i32 32000, i32 0), <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer), !dbg !17
    %5 = sitofp <vscale x 2 x i32> %4 to <vscale x 2 x double>, !dbg !18
    %6 = shl nuw nsw i64 %index, 3, !dbg !19
    %uglygep55 = getelementptr i8, ptr @a, i64 %6, !dbg !19
    store <vscale x 2 x double> %5, ptr %uglygep55, align 64, !dbg !19, !tbaa !20
    %index.next = add nuw i64 %index, 8, !dbg !16
    %vec.ind.next = add <vscale x 2 x i32> %vec.ind, shufflevector (<vscale x 2 x i32> insertelement (<vscale x 2 x i32> poison, i32 8, i32 0), <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer), !dbg !17
    %7 = call i64 @llvm.loop.decrement.reg.i64(i64 %2, i64 1), !dbg !16
    %8 = icmp ne i64 %7, 0, !dbg !16
    br i1 %8, label %vector.body, label %for.body6.preheader, !dbg !16, !llvm.loop !24
  
  for.body6.preheader:                              ; preds = %vector.body
    br label %for.body6, !dbg !29
  
  for.cond.cleanup5:                                ; preds = %for.cond.cleanup11
    %t2 = getelementptr inbounds %struct.args_t, ptr %func_args, i64 0, i32 1, !dbg !30
    %call27 = tail call i32 @gettimeofday(ptr noundef nonnull %t2, ptr noundef null) #5, !dbg !31
    %add30 = fadd double %add, 1.000000e+00, !dbg !32
    ret double %add30, !dbg !33
  
  for.body6:                                        ; preds = %for.body6.preheader, %for.cond.cleanup11
    %nl.047 = phi i32 [ %inc25, %for.cond.cleanup11 ], [ 0, %for.body6.preheader ]
    %9 = load double, ptr @a, align 64, !dbg !34, !tbaa !20
    %10 = call i64 @llvm.start.loop.iterations.i64(i64 32000), !dbg !35
    br label %for.body12, !dbg !35
  
  for.cond.cleanup11:                               ; preds = %for.body12
    %conv22 = sitofp i32 %index.2 to double, !dbg !36
    %add = fadd double %x.2, %conv22, !dbg !37
    %call23 = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, double noundef %add) #5, !dbg !38
    %inc25 = add nuw nsw i32 %nl.047, 1, !dbg !39
    %exitcond54.not = icmp eq i32 %inc25, 1000, !dbg !40
    br i1 %exitcond54.not, label %for.cond.cleanup5, label %for.body6, !dbg !29, !llvm.loop !41
  
  for.body12:                                       ; preds = %for.body6, %for.body12
    %indvars.iv50 = phi i64 [ 0, %for.body6 ], [ %indvars.iv.next51, %for.body12 ]
    %index.145 = phi i32 [ 0, %for.body6 ], [ %index.2, %for.body12 ]
    %x.144 = phi double [ %9, %for.body6 ], [ %x.2, %for.body12 ]
    %11 = phi i64 [ %10, %for.body6 ], [ %14, %for.body12 ], !dbg !43
    %12 = shl nuw nsw i64 %indvars.iv50, 3, !dbg !43
    %uglygep = getelementptr i8, ptr @a, i64 %12, !dbg !43
    %13 = load double, ptr %uglygep, align 8, !dbg !43, !tbaa !20
    %cmp15 = fcmp ogt double %13, %x.144, !dbg !44
    %x.2 = select i1 %cmp15, double %13, double %x.144, !dbg !43
    %tmp = trunc i64 %indvars.iv50 to i32
    %index.2 = select i1 %cmp15, i32 %tmp, i32 %index.145, !dbg !43
    %indvars.iv.next51 = add nuw nsw i64 %indvars.iv50, 1, !dbg !45
    %14 = call i64 @llvm.loop.decrement.reg.i64(i64 %11, i64 1), !dbg !35
    %15 = icmp ne i64 %14, 0, !dbg !35
    br i1 %15, label %for.body12, label %for.cond.cleanup11, !dbg !35, !llvm.loop !46
  }
  
  declare !dbg !48 i32 @initialise_arrays(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nofree nounwind
  declare !dbg !50 noundef i32 @gettimeofday(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #2
  
  declare !dbg !52 i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, double noundef) local_unnamed_addr #1
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
  declare <vscale x 2 x i32> @llvm.experimental.stepvector.nxv2i32() #3
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #4
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #4
  
  attributes #0 = { nounwind uwtable vscale_range(4,4) "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #1 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #2 = { nofree nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #3 = { nocallback nofree nosync nounwind readnone willreturn }
  attributes #4 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #5 = { nounwind }
  
  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
  !llvm.ident = !{!9}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 15.0.4 (aa8c40be5a4067d6183bbf71b6e4e26681001eb9)", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "s315.c", checksumkind: CSK_MD5, checksum: "b86e8f8cdefa77391afbb11ae79121a6")
  !2 = !{i32 7, !"Dwarf Version", i32 5}
  !3 = !{i32 2, !"Debug Info Version", i32 3}
  !4 = !{i32 1, !"wchar_size", i32 4}
  !5 = !{i32 7, !"PIC Level", i32 2}
  !6 = !{i32 7, !"PIE Level", i32 2}
  !7 = !{i32 7, !"uwtable", i32 2}
  !8 = !{i32 7, !"frame-pointer", i32 1}
  !9 = !{!"clang version 15.0.4 (aa8c40be5a4067d6183bbf71b6e4e26681001eb9)"}
  !10 = distinct !DISubprogram(name: "s315", scope: !1, file: !1, line: 26, type: !11, scopeLine: 27, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !12)
  !11 = !DISubroutineType(types: !12)
  !12 = !{}
  !13 = !DILocation(line: 32, column: 5, scope: !10)
  !14 = !DILocation(line: 33, column: 5, scope: !10)
  !15 = !DILocation(line: 35, column: 5, scope: !10)
  !16 = !DILocation(line: 35, column: 34, scope: !10)
  !17 = !DILocation(line: 36, column: 24, scope: !10)
  !18 = !DILocation(line: 36, column: 16, scope: !10)
  !19 = !DILocation(line: 36, column: 14, scope: !10)
  !20 = !{!21, !21, i64 0}
  !21 = !{!"double", !22, i64 0}
  !22 = !{!"omnipotent char", !23, i64 0}
  !23 = !{!"Simple C/C++ TBAA"}
  !24 = distinct !{!24, !15, !25, !26, !27, !28}
  !25 = !DILocation(line: 36, column: 26, scope: !10)
  !26 = !{!"llvm.loop.mustprogress"}
  !27 = !{!"llvm.loop.unroll.disable"}
  !28 = !{!"llvm.loop.isvectorized", i32 1}
  !29 = !DILocation(line: 40, column: 5, scope: !10)
  !30 = !DILocation(line: 53, column: 30, scope: !10)
  !31 = !DILocation(line: 53, column: 5, scope: !10)
  !32 = !DILocation(line: 54, column: 22, scope: !10)
  !33 = !DILocation(line: 54, column: 5, scope: !10)
  !34 = !DILocation(line: 41, column: 13, scope: !10)
  !35 = !DILocation(line: 43, column: 9, scope: !10)
  !36 = !DILocation(line: 49, column: 22, scope: !10)
  !37 = !DILocation(line: 49, column: 20, scope: !10)
  !38 = !DILocation(line: 50, column: 9, scope: !10)
  !39 = !DILocation(line: 40, column: 41, scope: !10)
  !40 = !DILocation(line: 40, column: 25, scope: !10)
  !41 = distinct !{!41, !29, !42, !26, !27}
  !42 = !DILocation(line: 51, column: 5, scope: !10)
  !43 = !DILocation(line: 44, column: 17, scope: !10)
  !44 = !DILocation(line: 44, column: 22, scope: !10)
  !45 = !DILocation(line: 43, column: 37, scope: !10)
  !46 = distinct !{!46, !35, !47, !26, !27}
  !47 = !DILocation(line: 48, column: 9, scope: !10)
  !48 = !DISubprogram(name: "initialise_arrays", scope: !49, file: !49, line: 30, type: !11, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !12)
  !49 = !DIFile(filename: "./common.h", checksumkind: CSK_MD5, checksum: "00f8e9bcede7c87c47df4e7fec4e54f4")
  !50 = !DISubprogram(name: "gettimeofday", scope: !51, file: !51, line: 67, type: !11, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !12)
  !51 = !DIFile(filename: "/usr/lib/gcc-cross/aarch64-linux-gnu/11/../../../../aarch64-linux-gnu/include/sys/time.h", directory: "", checksumkind: CSK_MD5, checksum: "b36e339815f62ba7208e5294180e353c")
  !52 = !DISubprogram(name: "dummy", scope: !49, file: !49, line: 26, type: !11, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !12)

...
---
name:            s315
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: zpr, preferred-register: '' }
  - { id: 1, class: gpr64all, preferred-register: '' }
  - { id: 2, class: gpr64common, preferred-register: '' }
  - { id: 3, class: zpr, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: gpr64all, preferred-register: '' }
  - { id: 6, class: zpr, preferred-register: '' }
  - { id: 7, class: gpr64all, preferred-register: '' }
  - { id: 8, class: gpr32sp, preferred-register: '' }
  - { id: 9, class: fpr64, preferred-register: '' }
  - { id: 10, class: gpr64all, preferred-register: '' }
  - { id: 11, class: fpr64, preferred-register: '' }
  - { id: 12, class: gpr32all, preferred-register: '' }
  - { id: 13, class: gpr64common, preferred-register: '' }
  - { id: 14, class: gpr32, preferred-register: '' }
  - { id: 15, class: fpr64, preferred-register: '' }
  - { id: 16, class: gpr64sp, preferred-register: '' }
  - { id: 17, class: fpr64, preferred-register: '' }
  - { id: 18, class: gpr32, preferred-register: '' }
  - { id: 19, class: gpr64all, preferred-register: '' }
  - { id: 20, class: gpr64all, preferred-register: '' }
  - { id: 21, class: gpr64common, preferred-register: '' }
  - { id: 22, class: gpr64all, preferred-register: '' }
  - { id: 23, class: gpr64common, preferred-register: '' }
  - { id: 24, class: gpr32all, preferred-register: '' }
  - { id: 25, class: gpr64all, preferred-register: '' }
  - { id: 26, class: gpr32all, preferred-register: '' }
  - { id: 27, class: gpr32, preferred-register: '' }
  - { id: 28, class: zpr, preferred-register: '' }
  - { id: 29, class: zpr, preferred-register: '' }
  - { id: 30, class: ppr_3b, preferred-register: '' }
  - { id: 31, class: gpr64common, preferred-register: '' }
  - { id: 32, class: zpr, preferred-register: '' }
  - { id: 33, class: zpr, preferred-register: '' }
  - { id: 34, class: zpr, preferred-register: '' }
  - { id: 35, class: zpr, preferred-register: '' }
  - { id: 36, class: zpr, preferred-register: '' }
  - { id: 37, class: zpr, preferred-register: '' }
  - { id: 38, class: zpr, preferred-register: '' }
  - { id: 39, class: gpr64common, preferred-register: '' }
  - { id: 40, class: ppr_3b, preferred-register: '' }
  - { id: 41, class: gpr64sp, preferred-register: '' }
  - { id: 42, class: gpr64, preferred-register: '' }
  - { id: 43, class: gpr32all, preferred-register: '' }
  - { id: 44, class: gpr32all, preferred-register: '' }
  - { id: 45, class: gpr64all, preferred-register: '' }
  - { id: 46, class: gpr32all, preferred-register: '' }
  - { id: 47, class: gpr64common, preferred-register: '' }
  - { id: 48, class: gpr32all, preferred-register: '' }
  - { id: 49, class: gpr64all, preferred-register: '' }
  - { id: 50, class: gpr32, preferred-register: '' }
  - { id: 51, class: gpr64common, preferred-register: '' }
  - { id: 52, class: fpr64, preferred-register: '' }
  - { id: 53, class: gpr32, preferred-register: '' }
  - { id: 54, class: gpr32, preferred-register: '' }
  - { id: 55, class: gpr64sp, preferred-register: '' }
  - { id: 56, class: gpr64, preferred-register: '' }
  - { id: 57, class: fpr64, preferred-register: '' }
  - { id: 58, class: gpr64common, preferred-register: '' }
  - { id: 59, class: gpr64common, preferred-register: '' }
  - { id: 60, class: gpr64common, preferred-register: '' }
  - { id: 61, class: gpr64common, preferred-register: '' }
  - { id: 62, class: gpr64common, preferred-register: '' }
  - { id: 63, class: gpr64common, preferred-register: '' }
  - { id: 64, class: gpr64common, preferred-register: '' }
  - { id: 65, class: gpr64common, preferred-register: '' }
  - { id: 66, class: gpr32all, preferred-register: '' }
  - { id: 67, class: gpr32sp, preferred-register: '' }
  - { id: 68, class: gpr32, preferred-register: '' }
  - { id: 69, class: gpr64sp, preferred-register: '' }
  - { id: 70, class: gpr64all, preferred-register: '' }
  - { id: 71, class: gpr32all, preferred-register: '' }
  - { id: 72, class: fpr64, preferred-register: '' }
  - { id: 73, class: fpr64, preferred-register: '' }
  - { id: 74, class: gpr64all, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%21' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $x0
  
    %21:gpr64common = COPY $x0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !13
    %23:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s315, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s315, debug-location !13
    $x0 = COPY %23, debug-location !13
    BL @initialise_arrays, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0, debug-location !13
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !13
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !14
    %25:gpr64all = COPY $xzr
    $x0 = COPY %21, debug-location !14
    $x1 = COPY %25, debug-location !14
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0, debug-location !14
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !14
    %0:zpr = INDEX_II_D 0, 1, debug-location !15
    %22:gpr64all = COPY %25
    %27:gpr32 = MOVi32imm 4000
    %1:gpr64all = SUBREG_TO_REG 0, killed %27, %subreg.sub_32
    %30:ppr_3b = PTRUE_D 31
    %31:gpr64common = MOVi64imm 147573952589676413
    %32:zpr = DUP_ZR_D %31
    %35:zpr = DUP_ZI_D 125, 8
    %38:zpr = IMPLICIT_DEF
    %39:gpr64common = LOADgot target-flags(aarch64-got) @a
  
  bb.1.vector.body:
    successors: %bb.1(0x7c000000), %bb.2(0x04000000)
  
    %2:gpr64common = PHI %22, %bb.0, %5, %bb.1, debug-location !16
    %3:zpr = PHI %0, %bb.0, %6, %bb.1, debug-location !17
    %4:gpr64sp = PHI %1, %bb.0, %7, %bb.1, debug-location !17
    %28:zpr = MUL_ZI_D %3, 7, debug-location !17
    %29:zpr = AND_ZI %28, 4127, debug-location !17
    %33:zpr = LSR_ZZI_D %29, 8, debug-location !17
    %34:zpr = UMULH_ZPZZ_UNDEF_D %30, killed %33, %32, debug-location !17
    %36:zpr = MLS_ZPmZZ_D %30, %29, killed %34, %35, debug-location !17
    %37:zpr = SCVTF_ZPmZ_StoD_UNDEF %38, %30, killed %36, debug-location !18
    ST1D killed %37, %30, %39, %2, debug-location !19 :: (store unknown-size into %ir.uglygep55, align 64, !tbaa !20)
    %41:gpr64sp = nuw ADDXri %2, 8, 0, debug-location !16
    %5:gpr64all = COPY %41, debug-location !16
    %74:gpr64all = COPY %5
    %6:zpr = ADD_ZI_D %3, 8, 0, debug-location !17
    %42:gpr64 = SUBSXri %4, 1, 0, implicit-def $nzcv, debug-location !16
    %7:gpr64all = COPY %42, debug-location !16
    Bcc 1, %bb.1, implicit $nzcv, debug-location !16
    B %bb.2, debug-location !16
  
  bb.2.for.body6.preheader:
    successors: %bb.4(0x80000000)
  
    %44:gpr32all = COPY $wzr
    %43:gpr32all = COPY %44
    %50:gpr32 = MOVi32imm 32000
    %59:gpr64common = LOADgot target-flags(aarch64-got) @b
    %60:gpr64common = LOADgot target-flags(aarch64-got) @c
    %61:gpr64common = LOADgot target-flags(aarch64-got) @d
    %62:gpr64common = LOADgot target-flags(aarch64-got) @e
    %63:gpr64common = LOADgot target-flags(aarch64-got) @aa
    %64:gpr64common = LOADgot target-flags(aarch64-got) @bb
    %65:gpr64common = LOADgot target-flags(aarch64-got) @cc
    B %bb.4, debug-location !29
  
  bb.3.for.cond.cleanup5:
    %69:gpr64sp = nuw ADDXri %21, 16, 0, debug-location !30
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !31
    %70:gpr64all = COPY $xzr
    $x0 = COPY %69, debug-location !31
    $x1 = COPY %70, debug-location !31
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0, debug-location !31
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !31
    %72:fpr64 = FMOVDi 112
    %73:fpr64 = nofpexcept FADDDrr %11, killed %72, debug-location !32
    $d0 = COPY %73, debug-location !33
    RET_ReallyLR implicit $d0, debug-location !33
  
  bb.4.for.body6:
    successors: %bb.6(0x80000000)
  
    %8:gpr32sp = PHI %43, %bb.2, %12, %bb.5
    %9:fpr64 = LDRDui %39, 0, debug-location !34 :: (dereferenceable load (s64) from @a, align 64, !tbaa !20)
    %48:gpr32all = COPY $wzr
    %46:gpr32all = COPY %48
    %49:gpr64all = COPY $xzr
    %45:gpr64all = COPY %49
    %10:gpr64all = SUBREG_TO_REG 0, %50, %subreg.sub_32
    B %bb.6, debug-location !35
  
  bb.5.for.cond.cleanup11:
    successors: %bb.3(0x04000000), %bb.4(0x7c000000)
  
    %57:fpr64 = nofpexcept SCVTFUWDri %54, debug-location !36
    %11:fpr64 = nofpexcept FADDDrr %17, killed %57, debug-location !37
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !38
    $x0 = COPY %39, debug-location !38
    $x1 = COPY %59, debug-location !38
    $x2 = COPY %60, debug-location !38
    $x3 = COPY %61, debug-location !38
    $x4 = COPY %62, debug-location !38
    $x5 = COPY %63, debug-location !38
    $x6 = COPY %64, debug-location !38
    $x7 = COPY %65, debug-location !38
    $d0 = COPY %11, debug-location !38
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $d0, implicit-def $sp, implicit-def $w0, debug-location !38
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !38
    %67:gpr32sp = nuw nsw ADDWri %8, 1, 0, debug-location !39
    %12:gpr32all = COPY %67, debug-location !39
    dead $wzr = SUBSWri %67, 1000, 0, implicit-def $nzcv, debug-location !29
    Bcc 0, %bb.3, implicit $nzcv, debug-location !29
    B %bb.4, debug-location !29
  
  bb.6.for.body12:
    successors: %bb.6(0x7c000000), %bb.5(0x04000000)
  
    %13:gpr64common = PHI %45, %bb.4, %19, %bb.6
    %14:gpr32 = PHI %46, %bb.4, %18, %bb.6
    %15:fpr64 = PHI %9, %bb.4, %17, %bb.6
    %16:gpr64sp = PHI %10, %bb.4, %20, %bb.6, debug-location !43
    %52:fpr64 = LDRDroX %39, %13, 0, 1, debug-location !43 :: (load (s64) from %ir.uglygep, !tbaa !20)
    nofpexcept FCMPDrr %52, %15, implicit-def $nzcv, debug-location !43
    %17:fpr64 = FCSELDrrr %52, %15, 12, implicit $nzcv, debug-location !43
    %53:gpr32 = COPY %13.sub_32
    %54:gpr32 = CSELWr killed %53, %14, 12, implicit $nzcv, debug-location !43
    %18:gpr32 = COPY %54, debug-location !43
    %55:gpr64sp = nuw nsw ADDXri %13, 1, 0, debug-location !45
    %19:gpr64all = COPY %55, debug-location !45
    %56:gpr64 = SUBSXri %16, 1, 0, implicit-def $nzcv, debug-location !35
    %20:gpr64all = COPY %56, debug-location !35
    Bcc 1, %bb.6, implicit $nzcv, debug-location !35
    B %bb.5, debug-location !35

...
