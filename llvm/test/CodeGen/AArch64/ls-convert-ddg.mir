#RUN: llc %s -mcpu=a64fx -fswp -fls -swpl-debug -swpl-debug-dump-ddg -ls-debug-dump-ddg -O1 -start-before=aarch64-swpipeliner -o /dev/null 2>&1 | FileCheck %s

#CHECK:DBG(SwplDdg::print) SwplDdg. 

#CHECK:### from: %16:gpr64common = nuw ADDXri %16:gpr64common, 8, 0
#CHECK-NEXT:### to  : %18:zpr = LD1D %9:ppr_3b, %8:gpr64common, %16:gpr64common :: (load unknown-size from %ir.scevgep, align 8, !tbaa !3)
#CHECK-NEXT:### distance:1 delay:1 dep:reg(%16:Int)

#CHECK:### from: %16:gpr64common = nuw ADDXri %16:gpr64common, 8, 0
#CHECK-NEXT:### to  : %19:zpr = LD1D %9:ppr_3b, %11:gpr64common, %16:gpr64common :: (load unknown-size from %ir.scevgep12, align 8, !tbaa !3)
#CHECK-NEXT:### distance:1 delay:1 dep:reg(%16:Int)

#CHECK:### from: %19:zpr = LD1D %9:ppr_3b, %11:gpr64common, %16:gpr64common :: (load unknown-size from %ir.scevgep12, align 8, !tbaa !3)
#CHECK-NEXT:### to  : %20:zpr = nnan ninf nsz arcp contract afn reassoc nofpexcept FADD_ZZZ_D killed %19:zpr, killed %18:zpr
#CHECK-NEXT:### distance:0 delay:11 dep:reg(%19:Float)

#CHECK:### from: %18:zpr = LD1D %9:ppr_3b, %8:gpr64common, %16:gpr64common :: (load unknown-size from %ir.scevgep, align 8, !tbaa !3)
#CHECK-NEXT:### to  : %20:zpr = nnan ninf nsz arcp contract afn reassoc nofpexcept FADD_ZZZ_D killed %19:zpr, killed %18:zpr
#CHECK-NEXT:### distance:0 delay:11 dep:reg(%18:Float)

#CHECK:### from: %20:zpr = nnan ninf nsz arcp contract afn reassoc nofpexcept FADD_ZZZ_D killed %19:zpr, killed %18:zpr
#CHECK-NEXT:### to  : ST1D killed %20:zpr, %9:ppr_3b, %8:gpr64common, %16:gpr64common :: (store unknown-size into %ir.scevgep, align 8, !tbaa !3)
#CHECK-NEXT:### distance:0 delay:9 dep:reg(%20:Float)

#CHECK:### from: %16:gpr64common = nuw ADDXri %16:gpr64common, 8, 0
#CHECK-NEXT:### to  : ST1D killed %20:zpr, %9:ppr_3b, %8:gpr64common, %16:gpr64common :: (store unknown-size into %ir.scevgep, align 8, !tbaa !3)
#CHECK-NEXT:### distance:1 delay:1 dep:reg(%16:Int)

#CHECK:### from: %16:gpr64common = nuw ADDXri %16:gpr64common, 8, 0
#CHECK-NEXT:### to  : %16:gpr64common = nuw ADDXri %16:gpr64common, 8, 0
#CHECK-NEXT:### distance:1 delay:1 dep:reg(%16:Int)

#CHECK:### from: %17:gpr64sp = SUBSXri %17:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK-NEXT:### to  : %17:gpr64sp = SUBSXri %17:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK-NEXT:### distance:1 delay:1 dep:reg(%17:Int)

#CHECK:### from: %18:zpr = LD1D %9:ppr_3b, %8:gpr64common, %16:gpr64common :: (load unknown-size from %ir.scevgep, align 8, !tbaa !3)
#CHECK-NEXT:### to  : ST1D killed %20:zpr, %9:ppr_3b, %8:gpr64common, %16:gpr64common :: (store unknown-size into %ir.scevgep, align 8, !tbaa !3)
#CHECK-NEXT:### distance:0 delay:1 dep:memory

#CHECK:### from: %19:zpr = LD1D %9:ppr_3b, %11:gpr64common, %16:gpr64common :: (load unknown-size from %ir.scevgep12, align 8, !tbaa !3)
#CHECK-NEXT:### to  : ST1D killed %20:zpr, %9:ppr_3b, %8:gpr64common, %16:gpr64common :: (store unknown-size into %ir.scevgep, align 8, !tbaa !3)
#CHECK-NEXT:### distance:20 delay:1 dep:memory

#CHECK:### from: ST1D killed %20:zpr, %9:ppr_3b, %8:gpr64common, %16:gpr64common :: (store unknown-size into %ir.scevgep, align 8, !tbaa !3)
#CHECK-NEXT:### to  : %18:zpr = LD1D %9:ppr_3b, %8:gpr64common, %16:gpr64common :: (load unknown-size from %ir.scevgep, align 8, !tbaa !3)
#CHECK-NEXT:### distance:1 delay:6 dep:memory

#CHECK:### from: ST1D killed %20:zpr, %9:ppr_3b, %8:gpr64common, %16:gpr64common :: (store unknown-size into %ir.scevgep, align 8, !tbaa !3)
#CHECK-NEXT:### to  : %19:zpr = LD1D %9:ppr_3b, %11:gpr64common, %16:gpr64common :: (load unknown-size from %ir.scevgep12, align 8, !tbaa !3)
#CHECK-NEXT:### distance:20 delay:6 dep:memory

#CHECK:        : Loop isn't software pipelined because prologue is 0 cycle.

#CHECK:DBG(LsDdg::print) LsDdg. 

#CHECK:### from: %19:zpr = LD1D %9:ppr_3b, %11:gpr64common, %16:gpr64common :: (load unknown-size from %ir.scevgep12, align 8, !tbaa !3)
#CHECK-NEXT:### to  : %20:zpr = nnan ninf nsz arcp contract afn reassoc nofpexcept FADD_ZZZ_D killed %19:zpr, killed %18:zpr
#CHECK-NEXT:### distance:0 delay:11 dep:reg(%19:Float)

#CHECK:### from: %18:zpr = LD1D %9:ppr_3b, %8:gpr64common, %16:gpr64common :: (load unknown-size from %ir.scevgep, align 8, !tbaa !3)
#CHECK-NEXT:### to  : %20:zpr = nnan ninf nsz arcp contract afn reassoc nofpexcept FADD_ZZZ_D killed %19:zpr, killed %18:zpr
#CHECK-NEXT:### distance:0 delay:11 dep:reg(%18:Float)

#CHECK:### from: %20:zpr = nnan ninf nsz arcp contract afn reassoc nofpexcept FADD_ZZZ_D killed %19:zpr, killed %18:zpr
#CHECK-NEXT:### to  : ST1D killed %20:zpr, %9:ppr_3b, %8:gpr64common, %16:gpr64common :: (store unknown-size into %ir.scevgep, align 8, !tbaa !3)
#CHECK-NEXT:### distance:0 delay:9 dep:reg(%20:Float)

#CHECK:### from: %18:zpr = LD1D %9:ppr_3b, %8:gpr64common, %16:gpr64common :: (load unknown-size from %ir.scevgep, align 8, !tbaa !3)
#CHECK-NEXT:### to  : ST1D killed %20:zpr, %9:ppr_3b, %8:gpr64common, %16:gpr64common :: (store unknown-size into %ir.scevgep, align 8, !tbaa !3)
#CHECK-NEXT:### distance:0 delay:1 dep:memory

#CHECK:### from: %18:zpr = LD1D %9:ppr_3b, %8:gpr64common, %16:gpr64common :: (load unknown-size from %ir.scevgep, align 8, !tbaa !3)
#CHECK-NEXT:### to  : %16:gpr64common = nuw ADDXri %16:gpr64common, 8, 0
#CHECK-NEXT:### distance:0 delay:1 dep:reg(%16:Int)

#CHECK:### from: %19:zpr = LD1D %9:ppr_3b, %11:gpr64common, %16:gpr64common :: (load unknown-size from %ir.scevgep12, align 8, !tbaa !3)
#CHECK-NEXT:### to  : %16:gpr64common = nuw ADDXri %16:gpr64common, 8, 0
#CHECK-NEXT:### distance:0 delay:1 dep:reg(%16:Int)

#CHECK:### from: ST1D killed %20:zpr, %9:ppr_3b, %8:gpr64common, %16:gpr64common :: (store unknown-size into %ir.scevgep, align 8, !tbaa !3)
#CHECK-NEXT:### to  : %16:gpr64common = nuw ADDXri %16:gpr64common, 8, 0
#CHECK-NEXT:### distance:0 delay:1 dep:reg(%16:Int)

#CHECK:### Edge-less node
#CHECK-NEXT:### node: %17:gpr64sp = SUBSXri %17:gpr64sp, 1, 0, implicit-def $nzcv
--- |
  ; ModuleID = 'ls-convert-ddg.c'
  source_filename = "ls-convert-ddg.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-hurd-gnu"
  
  @a = dso_local local_unnamed_addr global [1000 x double] zeroinitializer, align 8
  @b = dso_local local_unnamed_addr global [1000 x double] zeroinitializer, align 8
  
  ; Function Attrs: nofree norecurse nosync nounwind memory(readwrite, argmem: none, inaccessiblemem: none) uwtable vscale_range(4,4)
  define dso_local void @func() local_unnamed_addr #0 {
  entry:
    %0 = call i64 @llvm.start.loop.iterations.i64(i64 125)
    br label %vector.body
  
  vector.body:                                      ; preds = %vector.body, %entry
    %index = phi i64 [ 0, %entry ], [ %index.next, %vector.body ]
    %1 = phi i64 [ %0, %entry ], [ %5, %vector.body ]
    %2 = shl nuw nsw i64 %index, 3
    %scevgep = getelementptr i8, ptr @a, i64 %2
    %wide.load = load <vscale x 2 x double>, ptr %scevgep, align 8, !tbaa !4
    %3 = shl nuw nsw i64 %index, 3
    %scevgep12 = getelementptr i8, ptr @b, i64 %3
    %wide.load11 = load <vscale x 2 x double>, ptr %scevgep12, align 8, !tbaa !4
    %4 = fadd fast <vscale x 2 x double> %wide.load11, %wide.load
    store <vscale x 2 x double> %4, ptr %scevgep, align 8, !tbaa !4
    %index.next = add nuw i64 %index, 8
    %5 = call i64 @llvm.loop.decrement.reg.i64(i64 %1, i64 1)
    %6 = icmp ne i64 %5, 0
    br i1 %6, label %vector.body, label %for.end, !llvm.loop !8
  
  for.end:                                          ; preds = %vector.body
    ret void
  }
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #1
  
  attributes #0 = { nofree norecurse nosync nounwind memory(readwrite, argmem: none, inaccessiblemem: none) uwtable vscale_range(4,4) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #1 = { nocallback noduplicate nofree nosync nounwind willreturn }
  
  !llvm.module.flags = !{!0, !1, !2}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 7, !"uwtable", i32 2}
  !2 = !{i32 7, !"frame-pointer", i32 1}
  !4 = !{!5, !5, i64 0}
  !5 = !{!"double", !6, i64 0}
  !6 = !{!"omnipotent char", !7, i64 0}
  !7 = !{!"Simple C/C++ TBAA"}
  !8 = distinct !{!8, !9, !10, !11, !12}
  !9 = !{!"llvm.loop.mustprogress"}
  !10 = !{!"llvm.loop.unroll.disable"}
  !11 = !{!"llvm.loop.isvectorized", i32 1}
  !12 = !{!"llvm.loop.unroll.runtime.disable"}

...
---
name:            func
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr64all, preferred-register: '' }
  - { id: 1, class: gpr64common, preferred-register: '' }
  - { id: 2, class: gpr64sp, preferred-register: '' }
  - { id: 3, class: gpr64all, preferred-register: '' }
  - { id: 4, class: gpr64all, preferred-register: '' }
  - { id: 5, class: gpr64all, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr32, preferred-register: '' }
  - { id: 8, class: gpr64common, preferred-register: '' }
  - { id: 9, class: ppr_3b, preferred-register: '' }
  - { id: 10, class: zpr, preferred-register: '' }
  - { id: 11, class: gpr64common, preferred-register: '' }
  - { id: 12, class: zpr, preferred-register: '' }
  - { id: 13, class: zpr, preferred-register: '' }
  - { id: 14, class: gpr64sp, preferred-register: '' }
  - { id: 15, class: gpr64, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
  
    %6:gpr64all = COPY $xzr
    %5:gpr64all = COPY %6
    %7:gpr32 = MOVi32imm 125
    %0:gpr64all = SUBREG_TO_REG 0, killed %7, %subreg.sub_32
    %8:gpr64common = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a
    %9:ppr_3b = PTRUE_D 31
    %11:gpr64common = MOVaddr target-flags(aarch64-page) @b, target-flags(aarch64-pageoff, aarch64-nc) @b
  
  bb.1.vector.body:
    successors: %bb.1(0x7c000000), %bb.2(0x04000000)
  
    %1:gpr64common = PHI %5, %bb.0, %3, %bb.1
    %2:gpr64sp = PHI %0, %bb.0, %4, %bb.1
    %10:zpr = LD1D %9, %8, %1 :: (load unknown-size from %ir.scevgep, align 8, !tbaa !4)
    %12:zpr = LD1D %9, %11, %1 :: (load unknown-size from %ir.scevgep12, align 8, !tbaa !4)
    %13:zpr = nnan ninf nsz arcp contract afn reassoc nofpexcept FADD_ZZZ_D killed %12, killed %10
    ST1D killed %13, %9, %8, %1 :: (store unknown-size into %ir.scevgep, align 8, !tbaa !4)
    %14:gpr64sp = nuw ADDXri %1, 8, 0
    %3:gpr64all = COPY %14
    %15:gpr64 = SUBSXri %2, 1, 0, implicit-def $nzcv
    %4:gpr64all = COPY %15
    Bcc 1, %bb.1, implicit $nzcv
    B %bb.2
  
  bb.2.for.end:
    RET_ReallyLR

...
