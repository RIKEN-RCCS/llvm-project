#RUN: llc %s -mcpu=a64fx -fswp -O3 -start-before=aarch64-swpipeliner -swpl-disable-stagescheduling=false -swpl-debug-dump-ss-progress -o /dev/null 2>&1  | FileCheck %s
#CHECK:*** before SS : dump SwplSSNumRegisters ***
#CHECK:estimate VReg  Fp: 13, Int: 8, Pre: 1
#CHECK:*** before SS : dump SwplSSEdges ***
#CHECK:[s1232] Edge:(0x{{[A-Za-z0-9]+}}:LDRDui) to (0x{{[A-Za-z0-9]+}}:FADDDrr), inCyclic:0, SkipFactor<0>, p_cycle:2, s_cycle:10, delay:8, distance:0, II:3
#CHECK:[s1232] Edge:(0x{{[A-Za-z0-9]+}}:LDRDui) to (0x{{[A-Za-z0-9]+}}:FADDDrr), inCyclic:0, SkipFactor<0>, p_cycle:2, s_cycle:10, delay:8, distance:0, II:3
#CHECK:[s1232] Edge:(0x{{[A-Za-z0-9]+}}:FADDDrr) to (0x{{[A-Za-z0-9]+}}:STRDui), inCyclic:0, SkipFactor<0>, p_cycle:10, s_cycle:19, delay:9, distance:0, II:3
#CHECK:[s1232] Edge:(0x{{[A-Za-z0-9]+}}:ADDXri) to (0x{{[A-Za-z0-9]+}}:LDRDui), inCyclic:0, SkipFactor<0>, p_cycle:4, s_cycle:2, delay:1, distance:1, II:3
#CHECK:[s1232] Edge:(0x{{[A-Za-z0-9]+}}:ADDXri) to (0x{{[A-Za-z0-9]+}}:ADDXri), inCyclic:0, SkipFactor<0>, p_cycle:4, s_cycle:4, delay:1, distance:1, II:3
#CHECK:[s1232] Edge:(0x{{[A-Za-z0-9]+}}:ADDXri) to (0x{{[A-Za-z0-9]+}}:LDRDui), inCyclic:0, SkipFactor<0>, p_cycle:4, s_cycle:2, delay:1, distance:1, II:3
#CHECK:[s1232] Edge:(0x{{[A-Za-z0-9]+}}:ADDXri) to (0x{{[A-Za-z0-9]+}}:ADDXri), inCyclic:0, SkipFactor<0>, p_cycle:4, s_cycle:4, delay:1, distance:1, II:3
#CHECK:[s1232] Edge:(0x{{[A-Za-z0-9]+}}:ADDXri) to (0x{{[A-Za-z0-9]+}}:STRDui), inCyclic:0, SkipFactor<1>, p_cycle:18, s_cycle:19, delay:1, distance:1, II:3
#CHECK:[s1232] Edge:(0x{{[A-Za-z0-9]+}}:ADDXri) to (0x{{[A-Za-z0-9]+}}:ADDXri), inCyclic:0, SkipFactor<0>, p_cycle:18, s_cycle:18, delay:1, distance:1, II:3
#CHECK:[s1232] Edge:(0x{{[A-Za-z0-9]+}}:SUBSXri) to (0x{{[A-Za-z0-9]+}}:SUBSXri), inCyclic:0, SkipFactor<0>, p_cycle:18, s_cycle:18, delay:1, distance:1, II:3
#CHECK:*** dump SwplSSMoveinfo after AC ***
#CHECK-DAG:0x{{[A-Za-z0-9]+}}:ADDXri : move val=-3
#CHECK-DAG:0x{{[A-Za-z0-9]+}}:LDRDui : move val=-3
#CHECK-DAG:0x{{[A-Za-z0-9]+}}:LDRDui : move val=-3
#CHECK-DAG:0x{{[A-Za-z0-9]+}}:STRDui : move val=-3
#CHECK-DAG:0x{{[A-Za-z0-9]+}}:FADDDrr : move val=-3
#CHECK-DAG:0x{{[A-Za-z0-9]+}}:ADDXri : move val=-3
#CHECK:*** after SS : dump SwplSSNumRegisters ***
#CHECK:estimate VReg  Fp: 13, Int: 7, Pre: 1
#CHECK:*** after SS : dump SwplSSEdges ***
#CHECK:[s1232] Edge:(0x{{[A-Za-z0-9]+}}:LDRDui) to (0x{{[A-Za-z0-9]+}}:FADDDrr), inCyclic:0, SkipFactor<0>, p_cycle:2, s_cycle:10, delay:8, distance:0, II:3
#CHECK:[s1232] Edge:(0x{{[A-Za-z0-9]+}}:LDRDui) to (0x{{[A-Za-z0-9]+}}:FADDDrr), inCyclic:0, SkipFactor<0>, p_cycle:2, s_cycle:10, delay:8, distance:0, II:3
#CHECK:[s1232] Edge:(0x{{[A-Za-z0-9]+}}:FADDDrr) to (0x{{[A-Za-z0-9]+}}:STRDui), inCyclic:0, SkipFactor<0>, p_cycle:10, s_cycle:19, delay:9, distance:0, II:3
#CHECK:[s1232] Edge:(0x{{[A-Za-z0-9]+}}:ADDXri) to (0x{{[A-Za-z0-9]+}}:LDRDui), inCyclic:0, SkipFactor<0>, p_cycle:4, s_cycle:2, delay:1, distance:1, II:3
#CHECK:[s1232] Edge:(0x{{[A-Za-z0-9]+}}:ADDXri) to (0x{{[A-Za-z0-9]+}}:ADDXri), inCyclic:0, SkipFactor<0>, p_cycle:4, s_cycle:4, delay:1, distance:1, II:3
#CHECK:[s1232] Edge:(0x{{[A-Za-z0-9]+}}:ADDXri) to (0x{{[A-Za-z0-9]+}}:LDRDui), inCyclic:0, SkipFactor<0>, p_cycle:4, s_cycle:2, delay:1, distance:1, II:3
#CHECK:[s1232] Edge:(0x{{[A-Za-z0-9]+}}:ADDXri) to (0x{{[A-Za-z0-9]+}}:ADDXri), inCyclic:0, SkipFactor<0>, p_cycle:4, s_cycle:4, delay:1, distance:1, II:3
#CHECK:[s1232] Edge:(0x{{[A-Za-z0-9]+}}:ADDXri) to (0x{{[A-Za-z0-9]+}}:STRDui), inCyclic:0, SkipFactor<0>, p_cycle:21, s_cycle:19, delay:1, distance:1, II:3
#CHECK:[s1232] Edge:(0x{{[A-Za-z0-9]+}}:ADDXri) to (0x{{[A-Za-z0-9]+}}:ADDXri), inCyclic:0, SkipFactor<0>, p_cycle:21, s_cycle:21, delay:1, distance:1, II:3
#CHECK:[s1232] Edge:(0x{{[A-Za-z0-9]+}}:SUBSXri) to (0x{{[A-Za-z0-9]+}}:SUBSXri), inCyclic:0, SkipFactor<0>, p_cycle:21, s_cycle:21, delay:1, distance:1, II:3
#CHECK:*** Adopt StageScheduling results!!! ***
--- |
  ; ModuleID = '/home/XXXX/s1232.c'
  source_filename = "/home/XXXX/s1232.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  %struct.args_t = type { %struct.timeval, %struct.timeval, ptr }
  %struct.timeval = type { i64, i64 }
  
  @__func__.s1232 = private unnamed_addr constant [6 x i8] c"s1232\00", align 1
  @bb = external global [256 x [256 x double]], align 64
  @cc = external global [256 x [256 x double]], align 64
  @aa = external global [256 x [256 x double]], align 64
  @a = external global [32000 x double], align 64
  @b = external global [32000 x double], align 64
  @c = external global [32000 x double], align 64
  @d = external global [32000 x double], align 64
  @e = external global [32000 x double], align 64
  
  ; Function Attrs: nounwind uwtable vscale_range(4,4)
  define dso_local nofpclass(nan inf) double @s1232(ptr nocapture noundef %func_args) local_unnamed_addr #0 {
  entry:
    %call = tail call i32 @initialise_arrays(ptr noundef nonnull @__func__.s1232) #4
    %call1 = tail call i32 @gettimeofday(ptr noundef %func_args, ptr noundef null) #4
    br label %for.cond2.preheader
  
  for.cond2.preheader:                              ; preds = %entry, %for.cond.cleanup4
    %nl.042 = phi i32 [ 0, %entry ], [ %inc25, %for.cond.cleanup4 ]
    br label %for.cond6.preheader
  
  for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
    %t2 = getelementptr inbounds %struct.args_t, ptr %func_args, i64 0, i32 1
    %call27 = tail call i32 @gettimeofday(ptr noundef nonnull %t2, ptr noundef null) #4
    %call28 = tail call fast nofpclass(nan inf) double @calc_checksum(ptr noundef nonnull @__func__.s1232) #4
    ret double %call28
  
  for.cond6.preheader:                              ; preds = %for.cond2.preheader, %for.cond.cleanup8
    %lsr.iv59 = phi i64 [ 256, %for.cond2.preheader ], [ %lsr.iv.next, %for.cond.cleanup8 ]
    %lsr.iv55 = phi ptr [ @aa, %for.cond2.preheader ], [ %scevgep56, %for.cond.cleanup8 ]
    %lsr.iv51 = phi ptr [ @cc, %for.cond2.preheader ], [ %scevgep52, %for.cond.cleanup8 ]
    %lsr.iv = phi ptr [ @bb, %for.cond2.preheader ], [ %scevgep, %for.cond.cleanup8 ]
    %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next, %for.cond.cleanup8 ]
    %0 = call i64 @llvm.start.loop.iterations.i64(i64 %lsr.iv59)
    br label %for.body9
  
  for.cond.cleanup4:                                ; preds = %for.cond.cleanup8
    %call23 = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, double noundef nofpclass(nan inf) 1.000000e+00) #4
    %inc25 = add nuw nsw i32 %nl.042, 1
    %exitcond48.not = icmp eq i32 %inc25, 39000
    br i1 %exitcond48.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !6
  
  for.cond.cleanup8:                                ; preds = %for.body9
    %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
    %scevgep = getelementptr i8, ptr %lsr.iv, i64 2056
    %scevgep52 = getelementptr i8, ptr %lsr.iv51, i64 2056
    %scevgep56 = getelementptr i8, ptr %lsr.iv55, i64 2056
    %lsr.iv.next = add nsw i64 %lsr.iv59, -1
    %exitcond47.not = icmp eq i64 %indvars.iv.next, 256
    br i1 %exitcond47.not, label %for.cond.cleanup4, label %for.cond6.preheader, !llvm.loop !9
  
  for.body9:                                        ; preds = %for.cond6.preheader, %for.body9
    %lsr.iv57 = phi ptr [ %lsr.iv55, %for.cond6.preheader ], [ %scevgep58, %for.body9 ]
    %lsr.iv53 = phi ptr [ %lsr.iv51, %for.cond6.preheader ], [ %scevgep54, %for.body9 ]
    %lsr.iv49 = phi ptr [ %lsr.iv, %for.cond6.preheader ], [ %scevgep50, %for.body9 ]
    %1 = phi i64 [ %0, %for.cond6.preheader ], [ %4, %for.body9 ]
    %2 = load double, ptr %lsr.iv49, align 8, !tbaa !10
    %3 = load double, ptr %lsr.iv53, align 8, !tbaa !10
    %add = fadd fast double %3, %2
    store double %add, ptr %lsr.iv57, align 8, !tbaa !10
    %scevgep50 = getelementptr i8, ptr %lsr.iv49, i64 2048
    %scevgep54 = getelementptr i8, ptr %lsr.iv53, i64 2048
    %scevgep58 = getelementptr i8, ptr %lsr.iv57, i64 2048
    %4 = call i64 @llvm.loop.decrement.reg.i64(i64 %1, i64 1)
    %5 = icmp ne i64 %4, 0
    br i1 %5, label %for.body9, label %for.cond.cleanup8, !llvm.loop !14
  }
  
  declare i32 @initialise_arrays(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nofree nounwind
  declare noundef i32 @gettimeofday(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #2
  
  declare i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, double noundef nofpclass(nan inf)) local_unnamed_addr #1
  
  declare nofpclass(nan inf) double @calc_checksum(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #3
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #3
  
  attributes #0 = { nounwind uwtable vscale_range(4,4) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #1 = { "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #2 = { nofree nounwind "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #3 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #4 = { nounwind }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !5 = !{!"clang version 17.0.3"}
  !6 = distinct !{!6, !7, !8}
  !7 = !{!"llvm.loop.mustprogress"}
  !8 = !{!"llvm.loop.unroll.disable"}
  !9 = distinct !{!9, !7, !8}
  !10 = !{!11, !11, i64 0}
  !11 = !{!"double", !12, i64 0}
  !12 = !{!"omnipotent char", !13, i64 0}
  !13 = !{!"Simple C/C++ TBAA"}
  !14 = distinct !{!14, !7, !8}

...
---
name:            s1232
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32sp, preferred-register: '' }
  - { id: 1, class: gpr64sp, preferred-register: '' }
  - { id: 2, class: gpr64sp, preferred-register: '' }
  - { id: 3, class: gpr64sp, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: gpr64sp, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr32all, preferred-register: '' }
  - { id: 8, class: gpr64all, preferred-register: '' }
  - { id: 9, class: gpr64all, preferred-register: '' }
  - { id: 10, class: gpr64all, preferred-register: '' }
  - { id: 11, class: gpr64all, preferred-register: '' }
  - { id: 12, class: gpr64all, preferred-register: '' }
  - { id: 13, class: gpr64sp, preferred-register: '' }
  - { id: 14, class: gpr64sp, preferred-register: '' }
  - { id: 15, class: gpr64sp, preferred-register: '' }
  - { id: 16, class: gpr64sp, preferred-register: '' }
  - { id: 17, class: gpr64all, preferred-register: '' }
  - { id: 18, class: gpr64all, preferred-register: '' }
  - { id: 19, class: gpr64all, preferred-register: '' }
  - { id: 20, class: gpr64all, preferred-register: '' }
  - { id: 21, class: gpr64common, preferred-register: '' }
  - { id: 22, class: gpr32all, preferred-register: '' }
  - { id: 23, class: gpr64common, preferred-register: '' }
  - { id: 24, class: gpr32all, preferred-register: '' }
  - { id: 25, class: gpr64all, preferred-register: '' }
  - { id: 26, class: gpr32all, preferred-register: '' }
  - { id: 27, class: gpr32all, preferred-register: '' }
  - { id: 28, class: gpr64all, preferred-register: '' }
  - { id: 29, class: gpr64all, preferred-register: '' }
  - { id: 30, class: gpr64all, preferred-register: '' }
  - { id: 31, class: gpr64all, preferred-register: '' }
  - { id: 32, class: gpr64all, preferred-register: '' }
  - { id: 33, class: gpr64all, preferred-register: '' }
  - { id: 34, class: gpr64common, preferred-register: '' }
  - { id: 35, class: gpr64common, preferred-register: '' }
  - { id: 36, class: gpr64common, preferred-register: '' }
  - { id: 37, class: gpr32, preferred-register: '' }
  - { id: 38, class: fpr64, preferred-register: '' }
  - { id: 39, class: fpr64, preferred-register: '' }
  - { id: 40, class: fpr64, preferred-register: '' }
  - { id: 41, class: gpr64sp, preferred-register: '' }
  - { id: 42, class: gpr64sp, preferred-register: '' }
  - { id: 43, class: gpr64sp, preferred-register: '' }
  - { id: 44, class: gpr64, preferred-register: '' }
  - { id: 45, class: gpr64sp, preferred-register: '' }
  - { id: 46, class: gpr64sp, preferred-register: '' }
  - { id: 47, class: gpr64sp, preferred-register: '' }
  - { id: 48, class: gpr64sp, preferred-register: '' }
  - { id: 49, class: gpr64common, preferred-register: '' }
  - { id: 50, class: gpr64, preferred-register: '' }
  - { id: 51, class: gpr64common, preferred-register: '' }
  - { id: 52, class: gpr64common, preferred-register: '' }
  - { id: 53, class: gpr64common, preferred-register: '' }
  - { id: 54, class: gpr64common, preferred-register: '' }
  - { id: 55, class: gpr64common, preferred-register: '' }
  - { id: 56, class: gpr64common, preferred-register: '' }
  - { id: 57, class: gpr64common, preferred-register: '' }
  - { id: 58, class: gpr64common, preferred-register: '' }
  - { id: 59, class: fpr64, preferred-register: '' }
  - { id: 60, class: gpr32all, preferred-register: '' }
  - { id: 61, class: gpr32common, preferred-register: '' }
  - { id: 62, class: gpr32, preferred-register: '' }
  - { id: 63, class: gpr32, preferred-register: '' }
  - { id: 64, class: gpr64sp, preferred-register: '' }
  - { id: 65, class: gpr64all, preferred-register: '' }
  - { id: 66, class: gpr32all, preferred-register: '' }
  - { id: 67, class: gpr64common, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%21' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     true
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $x0
  
    %21:gpr64common = COPY $x0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %23:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s1232, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s1232
    $x0 = COPY %23
    BL @initialise_arrays, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %25:gpr64all = COPY $xzr
    $x0 = COPY %21
    $x1 = COPY %25
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %27:gpr32all = COPY $wzr
    %22:gpr32all = COPY %27
    %34:gpr64common = LOADgot target-flags(aarch64-got) @bb
    %35:gpr64common = LOADgot target-flags(aarch64-got) @cc
    %36:gpr64common = LOADgot target-flags(aarch64-got) @aa
    %37:gpr32 = MOVi32imm 256
    %51:gpr64common = LOADgot target-flags(aarch64-got) @a
    %52:gpr64common = LOADgot target-flags(aarch64-got) @b
    %53:gpr64common = LOADgot target-flags(aarch64-got) @c
    %54:gpr64common = LOADgot target-flags(aarch64-got) @d
    %55:gpr64common = LOADgot target-flags(aarch64-got) @e
    %59:fpr64 = FMOVDi 112
    %62:gpr32 = MOVi32imm 39000
  
  bb.1.for.cond2.preheader:
    successors: %bb.3(0x80000000)
  
    %0:gpr32sp = PHI %22, %bb.0, %7, %bb.4
    %33:gpr64all = COPY $xzr
    %32:gpr64all = COPY %33
    %31:gpr64all = COPY %34
    %30:gpr64all = COPY %35
    %29:gpr64all = COPY %36
    %28:gpr64all = SUBREG_TO_REG 0, %37, %subreg.sub_32
    B %bb.3
  
  bb.2.for.cond.cleanup:
    %64:gpr64sp = nuw ADDXri %21, 16, 0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %65:gpr64all = COPY $xzr
    $x0 = COPY %64
    $x1 = COPY %65
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %67:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s1232, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s1232
    $x0 = COPY %67
    TCRETURNdi @calc_checksum, 0, csr_aarch64_aapcs, implicit $sp, implicit $x0
  
  bb.3.for.cond6.preheader:
    successors: %bb.6(0x80000000)
  
    %1:gpr64sp = PHI %28, %bb.1, %12, %bb.5
    %2:gpr64sp = PHI %29, %bb.1, %11, %bb.5
    %3:gpr64sp = PHI %30, %bb.1, %10, %bb.5
    %4:gpr64sp = PHI %31, %bb.1, %9, %bb.5
    %5:gpr64sp = PHI %32, %bb.1, %8, %bb.5
    %6:gpr64all = COPY %1
    B %bb.6
  
  bb.4.for.cond.cleanup4:
    successors: %bb.2(0x04000000), %bb.1(0x7c000000)
  
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    $x0 = COPY %51
    $x1 = COPY %52
    $x2 = COPY %53
    $x3 = COPY %54
    $x4 = COPY %55
    $x5 = COPY %36
    $x6 = COPY %34
    $x7 = COPY %35
    $d0 = COPY %59
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $d0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %61:gpr32common = nuw nsw ADDWri %0, 1, 0
    %7:gpr32all = COPY %61
    dead $wzr = SUBSWrr %61, %62, implicit-def $nzcv
    Bcc 0, %bb.2, implicit $nzcv
    B %bb.1
  
  bb.5.for.cond.cleanup8:
    successors: %bb.4(0x04000000), %bb.3(0x7c000000)
  
    %45:gpr64sp = nuw nsw ADDXri %5, 1, 0
    %8:gpr64all = COPY %45
    %46:gpr64sp = ADDXri %4, 2056, 0
    %9:gpr64all = COPY %46
    %47:gpr64sp = ADDXri %3, 2056, 0
    %10:gpr64all = COPY %47
    %48:gpr64sp = ADDXri %2, 2056, 0
    %11:gpr64all = COPY %48
    %49:gpr64common = nsw SUBXri %1, 1, 0
    %12:gpr64all = COPY %49
    dead $xzr = SUBSXri %45, 256, 0, implicit-def $nzcv
    Bcc 0, %bb.4, implicit $nzcv
    B %bb.3
  
  bb.6.for.body9:
    successors: %bb.6(0x7c000000), %bb.5(0x04000000)
  
    %13:gpr64sp = PHI %2, %bb.3, %19, %bb.6
    %14:gpr64sp = PHI %3, %bb.3, %18, %bb.6
    %15:gpr64sp = PHI %4, %bb.3, %17, %bb.6
    %16:gpr64sp = PHI %6, %bb.3, %20, %bb.6
    %38:fpr64 = LDRDui %15, 0 :: (load (s64) from %ir.lsr.iv49, !tbaa !10)
    %39:fpr64 = LDRDui %14, 0 :: (load (s64) from %ir.lsr.iv53, !tbaa !10)
    %40:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %39, killed %38, implicit $fpcr
    STRDui killed %40, %13, 0 :: (store (s64) into %ir.lsr.iv57, !tbaa !10)
    %41:gpr64sp = ADDXri %15, 2048, 0
    %17:gpr64all = COPY %41
    %42:gpr64sp = ADDXri %14, 2048, 0
    %18:gpr64all = COPY %42
    %43:gpr64sp = ADDXri %13, 2048, 0
    %19:gpr64all = COPY %43
    %44:gpr64 = SUBSXri %16, 1, 0, implicit-def $nzcv
    %20:gpr64all = COPY %44
    Bcc 1, %bb.6, implicit $nzcv
    B %bb.5

...
