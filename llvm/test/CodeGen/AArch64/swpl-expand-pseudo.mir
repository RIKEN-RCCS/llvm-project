# RUN: llc -o /dev/null -mcpu=a64fx -O1 %s -o /dev/null -start-before=aarch64-swpl-expand-pseudo -print-after=aarch64-swpl-expand-pseudo -fswp 2>&1 | FileCheck %s

# CHECK:  bb.4.for.body5:
# CHECK-NOT:SWPLIVEOUT

# CHECK:  bb.5.for.body5:
# CHECK:  liveins: $d11, $w19, $w28, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x1, $d0, $x2, $d2, $d3, $x3, $d4, $d5, $d6, $d7, $d8, $d9, $d10
# CHECK-NOT:SWPLIVEIN
# CHECK-NOT:SWPLIVEOUT

# CHECK:  bb.6.for.body5:
# CHECK:  liveins: $d11, $w19, $w28, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x0, $x1, $d0, $x2, $d2, $x3, $d4, $d5, $d6, $d7, $d8, $d9, $x5, $x6, $d10
# CHECK-NOT:SWPLIVEIN

--- |
  ; ModuleID = 's000.c'
  source_filename = "s000.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  %struct.args_t = type { %struct.timeval, %struct.timeval, ptr }
  %struct.timeval = type { i64, i64 }
  
  @__func__.s000 = private unnamed_addr constant [5 x i8] c"s000\00", align 1
  @b = external global [32000 x double], align 64
  @a = external global [32000 x double], align 64
  @c = external global [32000 x double], align 64
  @d = external global [32000 x double], align 64
  @e = external global [32000 x double], align 64
  @aa = external global [256 x [256 x double]], align 64
  @bb = external global [256 x [256 x double]], align 64
  @cc = external global [256 x [256 x double]], align 64
  
  ; Function Attrs: nounwind uwtable vscale_range(1,16)
  define dso_local double @s000(ptr nocapture noundef %func_args) local_unnamed_addr #0 {
  entry:
    %call = tail call i32 @initialise_arrays(ptr noundef nonnull @__func__.s000) #4
    %call1 = tail call i32 @gettimeofday(ptr noundef %func_args, ptr noundef null) #4
    br label %for.cond2.preheader
  
  for.cond2.preheader:                              ; preds = %entry, %for.cond.cleanup4
    %nl.020 = phi i32 [ 0, %entry ], [ %inc10, %for.cond.cleanup4 ]
    %0 = call i64 @llvm.start.loop.iterations.i64(i64 32000)
    br label %for.body5
  
  for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
    %t2 = getelementptr inbounds %struct.args_t, ptr %func_args, i64 0, i32 1
    %call12 = tail call i32 @gettimeofday(ptr noundef nonnull %t2, ptr noundef null) #4
    %call13 = tail call double @calc_checksum(ptr noundef nonnull @__func__.s000) #4
    ret double %call13
  
  for.cond.cleanup4:                                ; preds = %for.body5
    %call8 = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, double noundef 0.000000e+00) #4
    %inc10 = add nuw nsw i32 %nl.020, 1
    %exitcond22.not = icmp eq i32 %inc10, 200000
    br i1 %exitcond22.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !6
  
  for.body5:                                        ; preds = %for.cond2.preheader, %for.body5
    %lsr.iv23 = phi ptr [ @b, %for.cond2.preheader ], [ %scevgep24, %for.body5 ]
    %lsr.iv = phi ptr [ @a, %for.cond2.preheader ], [ %scevgep, %for.body5 ]
    %1 = phi i64 [ %0, %for.cond2.preheader ], [ %3, %for.body5 ]
    %2 = load double, ptr %lsr.iv23, align 8, !tbaa !9
    %add = fadd double %2, 1.000000e+00
    store double %add, ptr %lsr.iv, align 8, !tbaa !9
    %scevgep = getelementptr i8, ptr %lsr.iv, i64 8
    %scevgep24 = getelementptr i8, ptr %lsr.iv23, i64 8
    %3 = call i64 @llvm.loop.decrement.reg.i64(i64 %1, i64 1)
    %4 = icmp ne i64 %3, 0
    br i1 %4, label %for.body5, label %for.cond.cleanup4, !llvm.loop !13
  }
  
  declare i32 @initialise_arrays(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nofree nounwind
  declare noundef i32 @gettimeofday(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #2
  
  declare i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, double noundef) local_unnamed_addr #1
  
  declare double @calc_checksum(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #3
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #3
  
  attributes #0 = { nounwind uwtable vscale_range(1,16) "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" }
  attributes #1 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" }
  attributes #2 = { nofree nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" }
  attributes #3 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #4 = { nounwind }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !6 = distinct !{!6, !7, !8}
  !7 = !{!"llvm.loop.mustprogress"}
  !8 = !{!"llvm.loop.unroll.disable"}
  !9 = !{!10, !10, i64 0}
  !10 = !{!"double", !11, i64 0}
  !11 = !{!"omnipotent char", !12, i64 0}
  !12 = !{!"Simple C/C++ TBAA"}
  !13 = distinct !{!13, !7, !8}

...
---
name:            s000
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$x0', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     true
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $x0
  
    renamable $x19 = COPY $x0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    renamable $x0 = MOVaddr target-flags(aarch64-page) @__func__.s000, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s000
    BL @initialise_arrays, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    STRXui renamable $x19, %stack.0, 0 :: (store (s64) into %stack.0)
    $x0 = COPY killed renamable $x19
    $x1 = COPY $xzr
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def dead $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    renamable $w28 = COPY $wzr
    renamable $x20 = LOADgot target-flags(aarch64-got) @a
    renamable $x21 = LOADgot target-flags(aarch64-got) @b
    renamable $x22 = LOADgot target-flags(aarch64-got) @c
    renamable $w19 = MOVi32imm 200000
    renamable $d11 = FMOVDi 112
    renamable $x23 = LOADgot target-flags(aarch64-got) @d
    renamable $x24 = LOADgot target-flags(aarch64-got) @e
    renamable $x25 = LOADgot target-flags(aarch64-got) @aa
    renamable $x26 = LOADgot target-flags(aarch64-got) @bb
    renamable $x27 = LOADgot target-flags(aarch64-got) @cc
  
  bb.1.for.cond2.preheader:
    successors: %bb.4(0x80000000)
    liveins: $d11, $w19, $w28, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27
  
    B %bb.4
  
  bb.2.for.cond.cleanup:
    renamable $x8 = LDRXui %stack.0, 0 :: (load (s64) from %stack.0)
    renamable $x0 = nuw ADDXri killed renamable $x8, 16, 0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    $x1 = COPY $xzr
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def dead $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    renamable $x0 = MOVaddr target-flags(aarch64-page) @__func__.s000, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s000
    TCRETURNdi @calc_checksum, 0, csr_aarch64_aapcs, implicit $sp, implicit $x0
  
  bb.3.for.cond.cleanup4:
    successors: %bb.2(0x04000000), %bb.1(0x7c000000)
    liveins: $d11, $w19, $w28, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27
  
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    $d0 = FMOVD0
    $x0 = COPY renamable $x20
    $x1 = COPY renamable $x21
    $x2 = COPY renamable $x22
    $x3 = COPY renamable $x23
    $x4 = COPY renamable $x24
    $x5 = COPY renamable $x25
    $x6 = COPY renamable $x26
    $x7 = COPY renamable $x27
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $d0, implicit-def $sp, implicit-def dead $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    renamable $w28 = nuw nsw ADDWri killed renamable $w28, 1, 0
    dead $wzr = SUBSWrr renamable $w28, renamable $w19, implicit-def $nzcv
    Bcc 0, %bb.2, implicit killed $nzcv
    B %bb.1
  
  bb.4.for.body5:
    successors: %bb.5(0x80000000)
    liveins: $d11, $w19, $w28, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27
  
    renamable $d0 = LDURDi renamable $x21, 0 :: (volatile load (s64) from %ir.lsr.iv23, !tbaa !9)
    renamable $x8 = ADDXri renamable $x21, 8, 0
    renamable $d1 = LDURDi renamable $x8, 0 :: (volatile load (s64) from %ir.lsr.iv23, !tbaa !9)
    renamable $x8 = ADDXri killed renamable $x8, 8, 0
    renamable $d3 = LDURDi renamable $x8, 0 :: (volatile load (s64) from %ir.lsr.iv23, !tbaa !9)
    renamable $x8 = ADDXri killed renamable $x8, 8, 0
    renamable $d16 = LDURDi renamable $x8, 0 :: (volatile load (s64) from %ir.lsr.iv23, !tbaa !9)
    renamable $x8 = ADDXri killed renamable $x8, 8, 0
    renamable $d17 = LDURDi renamable $x8, 0 :: (volatile load (s64) from %ir.lsr.iv23, !tbaa !9)
    renamable $d0 = nofpexcept FADDDrr killed renamable $d0, renamable $d11, implicit $fpcr
    renamable $x8 = ADDXri killed renamable $x8, 8, 0
    renamable $d2 = LDURDi renamable $x8, 0 :: (volatile load (s64) from %ir.lsr.iv23, !tbaa !9)
    renamable $d4 = nofpexcept FADDDrr killed renamable $d1, renamable $d11, implicit $fpcr
    renamable $x8 = ADDXri killed renamable $x8, 8, 0
    renamable $d5 = LDURDi renamable $x8, 0 :: (volatile load (s64) from %ir.lsr.iv23, !tbaa !9)
    renamable $d6 = nofpexcept FADDDrr killed renamable $d3, renamable $d11, implicit $fpcr
    renamable $x8 = ADDXri killed renamable $x8, 8, 0
    renamable $d7 = LDURDi renamable $x8, 0 :: (volatile load (s64) from %ir.lsr.iv23, !tbaa !9)
    renamable $d8 = nofpexcept FADDDrr killed renamable $d16, renamable $d11, implicit $fpcr
    renamable $x1 = ADDXri killed renamable $x8, 8, 0
    renamable $d9 = LDURDi renamable $x1, 0 :: (volatile load (s64) from %ir.lsr.iv23, !tbaa !9)
    renamable $d10 = nofpexcept FADDDrr killed renamable $d17, renamable $d11, implicit $fpcr
    $d3 = FMOVDi 112
    $x2 = COPY renamable $x20
    dead $w3 = MOVi32imm 32000, implicit-def $x3
    SWPLIVEOUT implicit $x1, implicit $d0, implicit $x2, implicit $d2, implicit $d3, implicit $x3, implicit $d4, implicit $d5, implicit $d6, implicit $d7, implicit $d8, implicit $d9, implicit $d10
  
  bb.5.for.body5:
    successors: %bb.5(0x7c000000), %bb.6(0x04000000)
    liveins: $d11, $w19, $w28, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27
  
    SWPLIVEIN implicit-def $x1, implicit-def $d0, implicit-def $x2, implicit-def $d2, implicit-def $d3, implicit-def $x3, implicit-def $d4, implicit-def $d5, implicit-def $d6, implicit-def $d7, implicit-def $d8, implicit-def $d9, implicit-def $d10
    renamable $x0 = ADDXri renamable $x1, 8, 0
    STURDi renamable $d0, renamable $x2, 0 :: (volatile store (s64) into %ir.lsr.iv, !tbaa !9)
    renamable $d0 = nofpexcept FADDDrr renamable $d2, renamable $d3, implicit $fpcr
    renamable $d1 = LDURDi renamable $x0, 0 :: (volatile load (s64) from %ir.lsr.iv23, !tbaa !9)
    renamable $x1 = ADDXri renamable $x2, 8, 0
    renamable $x2 = SUBSXri renamable $x3, 1, 0, implicit-def dead $nzcv
    renamable $x3 = ADDXri renamable $x0, 8, 0
    STURDi renamable $d4, renamable $x1, 0 :: (volatile store (s64) into %ir.lsr.iv, !tbaa !9)
    renamable $d4 = nofpexcept FADDDrr renamable $d5, renamable $d3, implicit $fpcr
    renamable $d2 = LDURDi renamable $x3, 0 :: (volatile load (s64) from %ir.lsr.iv23, !tbaa !9)
    renamable $x0 = ADDXri renamable $x1, 8, 0
    renamable $x1 = SUBSXri renamable $x2, 1, 0, implicit-def dead $nzcv
    renamable $x2 = ADDXri renamable $x3, 8, 0
    STURDi renamable $d6, renamable $x0, 0 :: (volatile store (s64) into %ir.lsr.iv, !tbaa !9)
    renamable $d6 = nofpexcept FADDDrr renamable $d7, renamable $d3, implicit $fpcr
    renamable $d5 = LDURDi renamable $x2, 0 :: (volatile load (s64) from %ir.lsr.iv23, !tbaa !9)
    renamable $x3 = ADDXri renamable $x0, 8, 0
    renamable $x0 = SUBSXri renamable $x1, 1, 0, implicit-def dead $nzcv
    renamable $x4 = ADDXri renamable $x2, 8, 0
    STURDi renamable $d8, renamable $x3, 0 :: (volatile store (s64) into %ir.lsr.iv, !tbaa !9)
    renamable $d8 = nofpexcept FADDDrr renamable $d9, renamable $d3, implicit $fpcr
    renamable $d7 = LDURDi renamable $x4, 0 :: (volatile load (s64) from %ir.lsr.iv23, !tbaa !9)
    renamable $x5 = ADDXri renamable $x3, 8, 0
    renamable $x6 = SUBSXri renamable $x0, 1, 0, implicit-def dead $nzcv
    renamable $x1 = ADDXri renamable $x4, 8, 0
    STURDi renamable $d10, renamable $x5, 0 :: (volatile store (s64) into %ir.lsr.iv, !tbaa !9)
    renamable $d9 = LDURDi renamable $x1, 0 :: (volatile load (s64) from %ir.lsr.iv23, !tbaa !9)
    renamable $d10 = nofpexcept FADDDrr renamable $d1, renamable $d3, implicit $fpcr
    renamable $x2 = ADDXri renamable $x5, 8, 0
    renamable $x3 = SUBSXri renamable $x6, 1, 0, implicit-def dead $nzcv
    SWPLIVEOUT implicit $x0, implicit $x1, implicit $d0, implicit $x2, implicit $d2, implicit $x3, implicit $d4, implicit $d5, implicit $d6, implicit $d7, implicit $d8, implicit $d9, implicit $x5, implicit $x6, implicit $d10
    $xzr = SUBSXri $x3, 14, 0, implicit-def $nzcv
    Bcc 10, %bb.5, implicit killed $nzcv
  
  bb.6.for.body5:
    successors: %bb.7(0x80000000)
    liveins: $d11, $w19, $w28, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27
  
    SWPLIVEIN implicit-def $x0, implicit-def $x1, implicit-def $d0, implicit-def $x2, implicit-def $d2, implicit-def $x3, implicit-def $d4, implicit-def $d5, implicit-def $d6, implicit-def $d7, implicit-def $d8, implicit-def $d9, implicit-def $x5, implicit-def $x6, implicit-def $d10
    KILL $x3
    renamable $x8 = ADDXri killed renamable $x1, 8, 0
    STURDi killed renamable $d0, renamable $x2, 0 :: (volatile store (s64) into %ir.lsr.iv, !tbaa !9)
    renamable $d0 = nofpexcept FADDDrr killed renamable $d2, renamable $d11, implicit $fpcr
    renamable $x9 = ADDXri killed renamable $x2, 8, 0
    STURDi killed renamable $d4, renamable $x9, 0 :: (volatile store (s64) into %ir.lsr.iv, !tbaa !9)
    renamable $d1 = nofpexcept FADDDrr killed renamable $d5, renamable $d11, implicit $fpcr
    renamable $x9 = ADDXri killed renamable $x9, 8, 0
    STURDi killed renamable $d6, renamable $x9, 0 :: (volatile store (s64) into %ir.lsr.iv, !tbaa !9)
    renamable $d2 = nofpexcept FADDDrr killed renamable $d7, renamable $d11, implicit $fpcr
    renamable $x9 = ADDXri killed renamable $x9, 8, 0
    STURDi killed renamable $d8, renamable $x9, 0 :: (volatile store (s64) into %ir.lsr.iv, !tbaa !9)
    renamable $d3 = nofpexcept FADDDrr killed renamable $d9, renamable $d11, implicit $fpcr
    renamable $x9 = ADDXri killed renamable $x9, 8, 0
    STURDi killed renamable $d10, renamable $x9, 0 :: (volatile store (s64) into %ir.lsr.iv, !tbaa !9)
    renamable $x9 = ADDXri killed renamable $x9, 8, 0
    STURDi killed renamable $d0, renamable $x9, 0 :: (volatile store (s64) into %ir.lsr.iv, !tbaa !9)
    renamable $x9 = ADDXri killed renamable $x9, 8, 0
    STURDi killed renamable $d1, renamable $x9, 0 :: (volatile store (s64) into %ir.lsr.iv, !tbaa !9)
    renamable $x9 = ADDXri killed renamable $x9, 8, 0
    STURDi killed renamable $d2, renamable $x9, 0 :: (volatile store (s64) into %ir.lsr.iv, !tbaa !9)
    renamable $x9 = ADDXri killed renamable $x9, 8, 0
    STURDi killed renamable $d3, renamable $x9, 0 :: (volatile store (s64) into %ir.lsr.iv, !tbaa !9)
    renamable $x9 = ADDXri killed renamable $x9, 8, 0
  
  bb.7.for.body5:
    successors: %bb.8(0x80000000)
    liveins: $d11, $w19, $w28, $x8, $x9, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27
  
  
  bb.8.for.body5:
    successors: %bb.9(0x80000000)
    liveins: $d11, $w19, $w28, $x8, $x9, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27
  
    dead early-clobber renamable $x8, renamable $d0 = LDRDpost killed renamable $x8, 8 :: (volatile load (s64) from %ir.lsr.iv23, !tbaa !9)
    renamable $d0 = nofpexcept FADDDrr killed renamable $d0, renamable $d11, implicit $fpcr
    dead early-clobber renamable $x9 = STRDpost killed renamable $d0, killed renamable $x9, 8 :: (volatile store (s64) into %ir.lsr.iv, !tbaa !9)
    B %bb.9
  
  bb.9.for.body5:
    successors: %bb.3(0x80000000)
    liveins: $d11, $w19, $w28, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27
  
    B %bb.3

...
