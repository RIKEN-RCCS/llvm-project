# RUN: llc -mcpu=a64fx -O1 -ffj-swp -start-before=aarch64-swpipeliner -o /dev/null  -swpl-debug %s 2>&1 | FileCheck %s
# CHECK: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %364:gpr64sp = COPY %363:gpr64sp
# CHECK-NEXT:  before: %345:gpr64sp = PHI %204:gpr64all, %bb.5, %364:gpr64sp, %bb.28
# CHECK-NEXT:  after: %345:gpr64sp = PHI %204:gpr64all, %bb.5, %363:gpr64sp, %bb.28
# CHECK-NEXT:  removed!
# CHECK-NEXT: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %366:gpr64all = COPY %365:gpr64sp
# CHECK-NEXT:  before: %343:gpr64sp = PHI %15:gpr64, %bb.5, %366:gpr64all, %bb.28
# CHECK-NEXT:  after: %343:gpr64sp = PHI %15:gpr64, %bb.5, %365:gpr64sp, %bb.28
# CHECK-NEXT:  removed!
# CHECK-NEXT: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %368:gpr64all = COPY %367:gpr64sp
# CHECK-NEXT:  before: %342:gpr64sp = PHI %14:gpr64, %bb.5, %368:gpr64all, %bb.28
# CHECK-NEXT:  after: %342:gpr64sp = PHI %14:gpr64, %bb.5, %367:gpr64sp, %bb.28
# CHECK-NEXT:  removed!
# CHECK-NEXT: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %370:gpr64all = COPY %369:gpr64
# CHECK-NEXT:  before: %346:gpr64sp = PHI %26:gpr64all, %bb.5, %370:gpr64all, %bb.28
# CHECK-NEXT:  after: %346:gpr64sp = PHI %26:gpr64all, %bb.5, %369:gpr64, %bb.28
# CHECK-NEXT:  removed!
# CHECK: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %492:gpr64all = COPY %491:gpr64sp
# CHECK-NEXT:  before: %485:gpr64sp = PHI %31:gpr64all, %bb.9, %492:gpr64all, %bb.10
# CHECK-NEXT:  after: %485:gpr64sp = PHI %31:gpr64all, %bb.9, %491:gpr64sp, %bb.10
# CHECK-NEXT:  removed!
# CHECK-NEXT: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %493:gpr64all = COPY %488:gpr64sp
# CHECK-NEXT:  before: %484:gpr64sp = PHI %32:gpr64all, %bb.9, %493:gpr64all, %bb.10
# CHECK-NEXT:  after: %484:gpr64sp = PHI %32:gpr64all, %bb.9, %488:gpr64sp, %bb.10
# CHECK-NEXT:  removed!
# CHECK-NEXT: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %495:gpr64all = COPY %494:gpr64
# CHECK-NEXT:  before: %487:gpr64sp = PHI %33:gpr64all, %bb.9, %495:gpr64all, %bb.10
# CHECK-NEXT:  after: %487:gpr64sp = PHI %33:gpr64all, %bb.9, %494:gpr64, %bb.10
# CHECK-NEXT:  removed!
# CHECK: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %562:gpr64sp = COPY %561:gpr64sp
# CHECK-NEXT:  before: %543:gpr64sp = PHI %240:gpr64all, %bb.13, %562:gpr64sp, %bb.14
# CHECK-NEXT:  after: %543:gpr64sp = PHI %240:gpr64all, %bb.13, %561:gpr64sp, %bb.14
# CHECK-NEXT:  removed!
# CHECK-NEXT: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %564:gpr64all = COPY %563:gpr64sp
# CHECK-NEXT:  before: %541:gpr64sp = PHI %10:gpr64, %bb.13, %564:gpr64all, %bb.14
# CHECK-NEXT:  after: %541:gpr64sp = PHI %10:gpr64, %bb.13, %563:gpr64sp, %bb.14
# CHECK-NEXT:  removed!
# CHECK-NEXT: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %566:gpr64all = COPY %565:gpr64sp
# CHECK-NEXT:  before: %540:gpr64sp = PHI %9:gpr64, %bb.13, %566:gpr64all, %bb.14
# CHECK-NEXT:  after: %540:gpr64sp = PHI %9:gpr64, %bb.13, %565:gpr64sp, %bb.14
# CHECK-NEXT:  removed!
# CHECK-NEXT: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %568:gpr64all = COPY %567:gpr64
# CHECK-NEXT:  before: %544:gpr64sp = PHI %44:gpr64all, %bb.13, %568:gpr64all, %bb.14
# CHECK-NEXT:  after: %544:gpr64sp = PHI %44:gpr64all, %bb.13, %567:gpr64, %bb.14
# CHECK-NEXT:  removed!
# CHECK: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %690:gpr64all = COPY %689:gpr64sp
# CHECK-NEXT:  before: %683:gpr64sp = PHI %58:gpr64all, %bb.17, %690:gpr64all, %bb.18
# CHECK-NEXT:  after: %683:gpr64sp = PHI %58:gpr64all, %bb.17, %689:gpr64sp, %bb.18
# CHECK-NEXT:  removed!
# CHECK-NEXT: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %691:gpr64all = COPY %686:gpr64sp
# CHECK-NEXT:  before: %682:gpr64sp = PHI %59:gpr64all, %bb.17, %691:gpr64all, %bb.18
# CHECK-NEXT:  after: %682:gpr64sp = PHI %59:gpr64all, %bb.17, %686:gpr64sp, %bb.18
# CHECK-NEXT:  removed!
# CHECK-NEXT: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %693:gpr64all = COPY %692:gpr64
# CHECK-NEXT:  before: %685:gpr64sp = PHI %60:gpr64all, %bb.17, %693:gpr64all, %bb.18
# CHECK-NEXT:  after: %685:gpr64sp = PHI %60:gpr64all, %bb.17, %692:gpr64, %bb.18
# CHECK-NEXT:  removed!
# CHECK: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %760:gpr64sp = COPY %759:gpr64sp
# CHECK-NEXT:  before: %741:gpr64sp = PHI %276:gpr64all, %bb.21, %760:gpr64sp, %bb.22
# CHECK-NEXT:  after: %741:gpr64sp = PHI %276:gpr64all, %bb.21, %759:gpr64sp, %bb.22
# CHECK-NEXT:  removed!
# CHECK-NEXT: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %762:gpr64all = COPY %761:gpr64sp
# CHECK-NEXT:  before: %739:gpr64sp = PHI %5:gpr64, %bb.21, %762:gpr64all, %bb.22
# CHECK-NEXT:  after: %739:gpr64sp = PHI %5:gpr64, %bb.21, %761:gpr64sp, %bb.22
# CHECK-NEXT:  removed!
# CHECK-NEXT: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %764:gpr64all = COPY %763:gpr64sp
# CHECK-NEXT:  before: %738:gpr64sp = PHI %4:gpr64, %bb.21, %764:gpr64all, %bb.22
# CHECK-NEXT:  after: %738:gpr64sp = PHI %4:gpr64, %bb.21, %763:gpr64sp, %bb.22
# CHECK-NEXT:  removed!
# CHECK-NEXT: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %766:gpr64all = COPY %765:gpr64
# CHECK-NEXT:  before: %742:gpr64sp = PHI %71:gpr64all, %bb.21, %766:gpr64all, %bb.22
# CHECK-NEXT:  after: %742:gpr64sp = PHI %71:gpr64all, %bb.21, %765:gpr64, %bb.22
# CHECK-NEXT:  removed!
# CHECK: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %888:gpr64all = COPY %887:gpr64sp
# CHECK-NEXT:  before: %881:gpr64sp = PHI %85:gpr64all, %bb.25, %888:gpr64all, %bb.26
# CHECK-NEXT:  after: %881:gpr64sp = PHI %85:gpr64all, %bb.25, %887:gpr64sp, %bb.26
# CHECK-NEXT:  removed!
# CHECK-NEXT: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %889:gpr64all = COPY %884:gpr64sp
# CHECK-NEXT:  before: %880:gpr64sp = PHI %86:gpr64all, %bb.25, %889:gpr64all, %bb.26
# CHECK-NEXT:  after: %880:gpr64sp = PHI %86:gpr64all, %bb.25, %884:gpr64sp, %bb.26
# CHECK-NEXT:  removed!
# CHECK-NEXT: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %891:gpr64all = COPY %890:gpr64
# CHECK-NEXT:  before: %883:gpr64sp = PHI %87:gpr64all, %bb.25, %891:gpr64all, %bb.26
# CHECK-NEXT:  after: %883:gpr64sp = PHI %87:gpr64all, %bb.25, %890:gpr64, %bb.26
# CHECK-NEXT:  removed!
--- |
  ; ModuleID = 's232.c'
  source_filename = "s232.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  %struct.args_t = type { %struct.timeval, %struct.timeval, ptr }
  %struct.timeval = type { i64, i64 }
  
  @__func__.s232 = private unnamed_addr constant [5 x i8] c"s232\00", align 1
  @aa = external global [256 x [256 x double]], align 64
  @bb = external global [256 x [256 x double]], align 64
  @a = external global [32000 x double], align 64
  @b = external global [32000 x double], align 64
  @c = external global [32000 x double], align 64
  @d = external global [32000 x double], align 64
  @e = external global [32000 x double], align 64
  @cc = external global [256 x [256 x double]], align 64
  
  ; Function Attrs: nounwind uwtable vscale_range(1,16)
  define dso_local double @s232(ptr nocapture noundef %func_args) local_unnamed_addr #0 {
  entry:
    %call = tail call i32 @initialise_arrays(ptr noundef nonnull @__func__.s232) #5
    %call1 = tail call i32 @gettimeofday(ptr noundef %func_args, ptr noundef null) #5
    br label %for.cond2.preheader
  
  for.cond2.preheader:                              ; preds = %entry, %for.cond.cleanup4
    %nl.049 = phi i32 [ 0, %entry ], [ %inc30, %for.cond.cleanup4 ]
    br label %for.cond6.preheader
  
  for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
    %t2 = getelementptr inbounds %struct.args_t, ptr %func_args, i64 0, i32 1
    %call32 = tail call i32 @gettimeofday(ptr noundef nonnull %t2, ptr noundef null) #5
    %call33 = tail call double @calc_checksum(ptr noundef nonnull @__func__.s232) #5
    ret double %call33
  
  for.cond6.preheader:                              ; preds = %for.cond.cleanup8.2, %for.cond2.preheader
    %indvar187 = phi i3 [ %indvar.next, %for.cond.cleanup8.2 ], [ 0, %for.cond2.preheader ]
    %lsr.iv173 = phi ptr [ %uglygep174, %for.cond.cleanup8.2 ], [ getelementptr (i8, ptr @bb, i64 6144), %for.cond2.preheader ]
    %lsr.iv168 = phi ptr [ %uglygep169, %for.cond.cleanup8.2 ], [ getelementptr (i8, ptr @aa, i64 6144), %for.cond2.preheader ]
    %lsr.iv157 = phi ptr [ %uglygep158, %for.cond.cleanup8.2 ], [ getelementptr (i8, ptr @aa, i64 6208), %for.cond2.preheader ]
    %lsr.iv146 = phi ptr [ %uglygep147, %for.cond.cleanup8.2 ], [ getelementptr (i8, ptr @bb, i64 6208), %for.cond2.preheader ]
    %lsr.iv144 = phi i64 [ %lsr.iv.next145, %for.cond.cleanup8.2 ], [ 3, %for.cond2.preheader ]
    %lsr.iv135 = phi ptr [ %uglygep136, %for.cond.cleanup8.2 ], [ getelementptr (i8, ptr @bb, i64 4096), %for.cond2.preheader ]
    %lsr.iv130 = phi ptr [ %uglygep131, %for.cond.cleanup8.2 ], [ getelementptr (i8, ptr @aa, i64 4096), %for.cond2.preheader ]
    %lsr.iv119 = phi ptr [ %uglygep120, %for.cond.cleanup8.2 ], [ getelementptr (i8, ptr @aa, i64 4160), %for.cond2.preheader ]
    %lsr.iv108 = phi ptr [ %uglygep109, %for.cond.cleanup8.2 ], [ getelementptr (i8, ptr @bb, i64 4160), %for.cond2.preheader ]
    %lsr.iv106 = phi i64 [ %lsr.iv.next107, %for.cond.cleanup8.2 ], [ 2, %for.cond2.preheader ]
    %lsr.iv98 = phi ptr [ %uglygep99, %for.cond.cleanup8.2 ], [ getelementptr (i8, ptr @bb, i64 2048), %for.cond2.preheader ]
    %lsr.iv93 = phi ptr [ %uglygep94, %for.cond.cleanup8.2 ], [ getelementptr (i8, ptr @aa, i64 2048), %for.cond2.preheader ]
    %lsr.iv82 = phi ptr [ %uglygep83, %for.cond.cleanup8.2 ], [ getelementptr (i8, ptr @bb, i64 2112), %for.cond2.preheader ]
    %lsr.iv = phi ptr [ %uglygep, %for.cond.cleanup8.2 ], [ getelementptr (i8, ptr @aa, i64 2112), %for.cond2.preheader ]
    %indvar = phi i64 [ 0, %for.cond2.preheader ], [ %indvar.next.2, %for.cond.cleanup8.2 ]
    %indvars.iv56 = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next57.2, %for.cond.cleanup8.2 ]
    %0 = mul i3 %indvar187, 3
    %1 = add i3 %0, 3
    %2 = zext i3 %1 to i64
    %3 = lshr i64 %lsr.iv144, 3
    %4 = shl nuw nsw i64 %3, 3
    %5 = add nsw i64 %4, -8
    %6 = lshr i64 %5, 3
    %7 = add nuw nsw i64 %6, 1
    %8 = mul i3 %indvar187, 3
    %9 = add i3 %8, 2
    %10 = zext i3 %9 to i64
    %11 = lshr i64 %lsr.iv106, 3
    %12 = shl nuw nsw i64 %11, 3
    %13 = add nsw i64 %12, -8
    %14 = lshr i64 %13, 3
    %15 = add nuw nsw i64 %14, 1
    %16 = mul i3 %indvar187, 3
    %17 = add i3 %16, 1
    %18 = zext i3 %17 to i64
    %19 = add i64 %indvar, 1
    %20 = lshr i64 %19, 3
    %21 = shl nuw nsw i64 %20, 3
    %22 = add nsw i64 %21, -8
    %23 = lshr i64 %22, 3
    %24 = add nuw nsw i64 %23, 1
    %arrayidx11.phi.trans.insert = getelementptr inbounds [256 x [256 x double]], ptr @aa, i64 0, i64 %indvars.iv56, i64 0
    %.pre = load double, ptr %arrayidx11.phi.trans.insert, align 64, !tbaa !6
    %xtraiter = and i64 %indvars.iv56, 7
    %25 = icmp ult i64 %indvar, 7
    br i1 %25, label %for.cond.cleanup8.unr-lcssa, label %for.cond6.preheader.new
  
  for.cond6.preheader.new:                          ; preds = %for.cond6.preheader
    %26 = call i64 @llvm.start.loop.iterations.i64(i64 %24)
    br label %for.body9
  
  for.cond.cleanup4:                                ; preds = %for.cond.cleanup8.2
    %call28 = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, double noundef 1.000000e+00) #5
    %inc30 = add nuw nsw i32 %nl.049, 1
    %exitcond62.not = icmp eq i32 %inc30, 39000
    br i1 %exitcond62.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !10
  
  for.cond.cleanup8.unr-lcssa.loopexit:             ; preds = %for.body9
    %27 = add i64 %niter.next.7, 1
    br label %for.cond.cleanup8.unr-lcssa
  
  for.cond.cleanup8.unr-lcssa:                      ; preds = %for.cond.cleanup8.unr-lcssa.loopexit, %for.cond6.preheader
    %.unr = phi double [ %.pre, %for.cond6.preheader ], [ %115, %for.cond.cleanup8.unr-lcssa.loopexit ]
    %indvars.iv.unr = phi i64 [ 1, %for.cond6.preheader ], [ %27, %for.cond.cleanup8.unr-lcssa.loopexit ]
    %lcmp.mod.not = icmp eq i64 %xtraiter, 0
    br i1 %lcmp.mod.not, label %for.cond.cleanup8, label %for.body9.epil.preheader
  
  for.body9.epil.preheader:                         ; preds = %for.cond.cleanup8.unr-lcssa
    %28 = shl i64 %indvars.iv.unr, 3
    %uglygep95 = getelementptr i8, ptr %lsr.iv93, i64 %28
    %uglygep100 = getelementptr i8, ptr %lsr.iv98, i64 %28
    %29 = call i64 @llvm.start.loop.iterations.i64(i64 %18)
    br label %for.body9.epil
  
  for.body9.epil:                                   ; preds = %for.body9.epil.preheader, %for.body9.epil
    %lsr.iv101 = phi ptr [ %uglygep100, %for.body9.epil.preheader ], [ %uglygep102, %for.body9.epil ]
    %lsr.iv96 = phi ptr [ %uglygep95, %for.body9.epil.preheader ], [ %uglygep97, %for.body9.epil ]
    %30 = phi double [ %33, %for.body9.epil ], [ %.unr, %for.body9.epil.preheader ]
    %31 = phi i64 [ %29, %for.body9.epil.preheader ], [ %34, %for.body9.epil ]
    %32 = load double, ptr %lsr.iv101, align 8, !tbaa !6
    %33 = tail call double @llvm.fmuladd.f64(double %30, double %30, double %32)
    store double %33, ptr %lsr.iv96, align 8, !tbaa !6
    %uglygep97 = getelementptr i8, ptr %lsr.iv96, i64 8
    %uglygep102 = getelementptr i8, ptr %lsr.iv101, i64 8
    %34 = call i64 @llvm.loop.decrement.reg.i64(i64 %31, i64 1)
    %35 = icmp ne i64 %34, 0
    br i1 %35, label %for.body9.epil, label %for.cond.cleanup8, !llvm.loop !12
  
  for.cond.cleanup8:                                ; preds = %for.body9.epil, %for.cond.cleanup8.unr-lcssa
    %indvars.iv.next57 = add nuw nsw i64 %indvars.iv56, 1
    %arrayidx11.phi.trans.insert.1 = getelementptr inbounds [256 x [256 x double]], ptr @aa, i64 0, i64 %indvars.iv.next57, i64 0
    %.pre.1 = load double, ptr %arrayidx11.phi.trans.insert.1, align 64, !tbaa !6
    %xtraiter.1 = and i64 %indvars.iv.next57, 7
    %36 = icmp ult i64 %indvar, 6
    br i1 %36, label %for.cond.cleanup8.unr-lcssa.1, label %for.cond6.preheader.new.1
  
  for.cond6.preheader.new.1:                        ; preds = %for.cond.cleanup8
    %37 = call i64 @llvm.start.loop.iterations.i64(i64 %15)
    br label %for.body9.1
  
  for.body9.1:                                      ; preds = %for.body9.1, %for.cond6.preheader.new.1
    %lsr.iv121 = phi ptr [ %uglygep122, %for.body9.1 ], [ %lsr.iv119, %for.cond6.preheader.new.1 ]
    %lsr.iv110 = phi ptr [ %uglygep111, %for.body9.1 ], [ %lsr.iv108, %for.cond6.preheader.new.1 ]
    %38 = phi double [ %.pre.1, %for.cond6.preheader.new.1 ], [ %55, %for.body9.1 ]
    %niter.1 = phi i64 [ 0, %for.cond6.preheader.new.1 ], [ %niter.next.7.1, %for.body9.1 ]
    %39 = phi i64 [ %37, %for.cond6.preheader.new.1 ], [ %56, %for.body9.1 ]
    %uglygep112 = getelementptr i8, ptr %lsr.iv110, i64 -56
    %40 = load double, ptr %uglygep112, align 8, !tbaa !6
    %41 = tail call double @llvm.fmuladd.f64(double %38, double %38, double %40)
    %uglygep123 = getelementptr i8, ptr %lsr.iv121, i64 -56
    store double %41, ptr %uglygep123, align 8, !tbaa !6
    %uglygep114 = getelementptr i8, ptr %lsr.iv110, i64 -48
    %42 = load double, ptr %uglygep114, align 8, !tbaa !6
    %43 = tail call double @llvm.fmuladd.f64(double %41, double %41, double %42)
    %uglygep125 = getelementptr i8, ptr %lsr.iv121, i64 -48
    store double %43, ptr %uglygep125, align 8, !tbaa !6
    %uglygep115 = getelementptr i8, ptr %lsr.iv110, i64 -40
    %44 = load double, ptr %uglygep115, align 8, !tbaa !6
    %45 = tail call double @llvm.fmuladd.f64(double %43, double %43, double %44)
    %uglygep126 = getelementptr i8, ptr %lsr.iv121, i64 -40
    store double %45, ptr %uglygep126, align 8, !tbaa !6
    %uglygep116 = getelementptr i8, ptr %lsr.iv110, i64 -32
    %46 = load double, ptr %uglygep116, align 8, !tbaa !6
    %47 = tail call double @llvm.fmuladd.f64(double %45, double %45, double %46)
    %uglygep127 = getelementptr i8, ptr %lsr.iv121, i64 -32
    store double %47, ptr %uglygep127, align 8, !tbaa !6
    %uglygep117 = getelementptr i8, ptr %lsr.iv110, i64 -24
    %48 = load double, ptr %uglygep117, align 8, !tbaa !6
    %49 = tail call double @llvm.fmuladd.f64(double %47, double %47, double %48)
    %uglygep128 = getelementptr i8, ptr %lsr.iv121, i64 -24
    store double %49, ptr %uglygep128, align 8, !tbaa !6
    %uglygep118 = getelementptr i8, ptr %lsr.iv110, i64 -16
    %50 = load double, ptr %uglygep118, align 8, !tbaa !6
    %51 = tail call double @llvm.fmuladd.f64(double %49, double %49, double %50)
    %uglygep129 = getelementptr i8, ptr %lsr.iv121, i64 -16
    store double %51, ptr %uglygep129, align 8, !tbaa !6
    %uglygep113 = getelementptr i8, ptr %lsr.iv110, i64 -8
    %52 = load double, ptr %uglygep113, align 8, !tbaa !6
    %53 = tail call double @llvm.fmuladd.f64(double %51, double %51, double %52)
    %uglygep124 = getelementptr i8, ptr %lsr.iv121, i64 -8
    store double %53, ptr %uglygep124, align 8, !tbaa !6
    %54 = load double, ptr %lsr.iv110, align 8, !tbaa !6
    %55 = tail call double @llvm.fmuladd.f64(double %53, double %53, double %54)
    store double %55, ptr %lsr.iv121, align 8, !tbaa !6
    %niter.next.7.1 = add nuw i64 %niter.1, 8
    %uglygep111 = getelementptr i8, ptr %lsr.iv110, i64 64
    %uglygep122 = getelementptr i8, ptr %lsr.iv121, i64 64
    %56 = call i64 @llvm.loop.decrement.reg.i64(i64 %39, i64 1)
    %57 = icmp ne i64 %56, 0
    br i1 %57, label %for.body9.1, label %for.cond.cleanup8.unr-lcssa.1.loopexit, !llvm.loop !14
  
  for.cond.cleanup8.unr-lcssa.1.loopexit:           ; preds = %for.body9.1
    %58 = add i64 %niter.next.7.1, 1
    br label %for.cond.cleanup8.unr-lcssa.1
  
  for.cond.cleanup8.unr-lcssa.1:                    ; preds = %for.cond.cleanup8.unr-lcssa.1.loopexit, %for.cond.cleanup8
    %.unr.1 = phi double [ %.pre.1, %for.cond.cleanup8 ], [ %55, %for.cond.cleanup8.unr-lcssa.1.loopexit ]
    %indvars.iv.unr.1 = phi i64 [ 1, %for.cond.cleanup8 ], [ %58, %for.cond.cleanup8.unr-lcssa.1.loopexit ]
    %lcmp.mod.1.not = icmp eq i64 %xtraiter.1, 0
    br i1 %lcmp.mod.1.not, label %for.cond.cleanup8.1, label %for.body9.epil.1.preheader
  
  for.body9.epil.1.preheader:                       ; preds = %for.cond.cleanup8.unr-lcssa.1
    %59 = shl i64 %indvars.iv.unr.1, 3
    %uglygep132 = getelementptr i8, ptr %lsr.iv130, i64 %59
    %uglygep137 = getelementptr i8, ptr %lsr.iv135, i64 %59
    %60 = call i64 @llvm.start.loop.iterations.i64(i64 %10)
    br label %for.body9.epil.1
  
  for.body9.epil.1:                                 ; preds = %for.body9.epil.1.preheader, %for.body9.epil.1
    %lsr.iv138 = phi ptr [ %uglygep137, %for.body9.epil.1.preheader ], [ %uglygep139, %for.body9.epil.1 ]
    %lsr.iv133 = phi ptr [ %uglygep132, %for.body9.epil.1.preheader ], [ %uglygep134, %for.body9.epil.1 ]
    %61 = phi double [ %64, %for.body9.epil.1 ], [ %.unr.1, %for.body9.epil.1.preheader ]
    %62 = phi i64 [ %60, %for.body9.epil.1.preheader ], [ %65, %for.body9.epil.1 ]
    %63 = load double, ptr %lsr.iv138, align 8, !tbaa !6
    %64 = tail call double @llvm.fmuladd.f64(double %61, double %61, double %63)
    store double %64, ptr %lsr.iv133, align 8, !tbaa !6
    %uglygep134 = getelementptr i8, ptr %lsr.iv133, i64 8
    %uglygep139 = getelementptr i8, ptr %lsr.iv138, i64 8
    %65 = call i64 @llvm.loop.decrement.reg.i64(i64 %62, i64 1)
    %66 = icmp ne i64 %65, 0
    br i1 %66, label %for.body9.epil.1, label %for.cond.cleanup8.1, !llvm.loop !12
  
  for.cond.cleanup8.1:                              ; preds = %for.body9.epil.1, %for.cond.cleanup8.unr-lcssa.1
    %indvars.iv.next57.1 = add nuw nsw i64 %indvars.iv56, 2
    %arrayidx11.phi.trans.insert.2 = getelementptr inbounds [256 x [256 x double]], ptr @aa, i64 0, i64 %indvars.iv.next57.1, i64 0
    %.pre.2 = load double, ptr %arrayidx11.phi.trans.insert.2, align 64, !tbaa !6
    %xtraiter.2 = and i64 %indvars.iv.next57.1, 7
    %67 = icmp ult i64 %indvar, 5
    br i1 %67, label %for.cond.cleanup8.unr-lcssa.2, label %for.cond6.preheader.new.2
  
  for.cond6.preheader.new.2:                        ; preds = %for.cond.cleanup8.1
    %68 = call i64 @llvm.start.loop.iterations.i64(i64 %7)
    br label %for.body9.2
  
  for.body9.2:                                      ; preds = %for.body9.2, %for.cond6.preheader.new.2
    %lsr.iv159 = phi ptr [ %uglygep160, %for.body9.2 ], [ %lsr.iv157, %for.cond6.preheader.new.2 ]
    %lsr.iv148 = phi ptr [ %uglygep149, %for.body9.2 ], [ %lsr.iv146, %for.cond6.preheader.new.2 ]
    %69 = phi double [ %.pre.2, %for.cond6.preheader.new.2 ], [ %86, %for.body9.2 ]
    %niter.2 = phi i64 [ 0, %for.cond6.preheader.new.2 ], [ %niter.next.7.2, %for.body9.2 ]
    %70 = phi i64 [ %68, %for.cond6.preheader.new.2 ], [ %87, %for.body9.2 ]
    %uglygep150 = getelementptr i8, ptr %lsr.iv148, i64 -56
    %71 = load double, ptr %uglygep150, align 8, !tbaa !6
    %72 = tail call double @llvm.fmuladd.f64(double %69, double %69, double %71)
    %uglygep161 = getelementptr i8, ptr %lsr.iv159, i64 -56
    store double %72, ptr %uglygep161, align 8, !tbaa !6
    %uglygep152 = getelementptr i8, ptr %lsr.iv148, i64 -48
    %73 = load double, ptr %uglygep152, align 8, !tbaa !6
    %74 = tail call double @llvm.fmuladd.f64(double %72, double %72, double %73)
    %uglygep163 = getelementptr i8, ptr %lsr.iv159, i64 -48
    store double %74, ptr %uglygep163, align 8, !tbaa !6
    %uglygep153 = getelementptr i8, ptr %lsr.iv148, i64 -40
    %75 = load double, ptr %uglygep153, align 8, !tbaa !6
    %76 = tail call double @llvm.fmuladd.f64(double %74, double %74, double %75)
    %uglygep164 = getelementptr i8, ptr %lsr.iv159, i64 -40
    store double %76, ptr %uglygep164, align 8, !tbaa !6
    %uglygep154 = getelementptr i8, ptr %lsr.iv148, i64 -32
    %77 = load double, ptr %uglygep154, align 8, !tbaa !6
    %78 = tail call double @llvm.fmuladd.f64(double %76, double %76, double %77)
    %uglygep165 = getelementptr i8, ptr %lsr.iv159, i64 -32
    store double %78, ptr %uglygep165, align 8, !tbaa !6
    %uglygep155 = getelementptr i8, ptr %lsr.iv148, i64 -24
    %79 = load double, ptr %uglygep155, align 8, !tbaa !6
    %80 = tail call double @llvm.fmuladd.f64(double %78, double %78, double %79)
    %uglygep166 = getelementptr i8, ptr %lsr.iv159, i64 -24
    store double %80, ptr %uglygep166, align 8, !tbaa !6
    %uglygep156 = getelementptr i8, ptr %lsr.iv148, i64 -16
    %81 = load double, ptr %uglygep156, align 8, !tbaa !6
    %82 = tail call double @llvm.fmuladd.f64(double %80, double %80, double %81)
    %uglygep167 = getelementptr i8, ptr %lsr.iv159, i64 -16
    store double %82, ptr %uglygep167, align 8, !tbaa !6
    %uglygep151 = getelementptr i8, ptr %lsr.iv148, i64 -8
    %83 = load double, ptr %uglygep151, align 8, !tbaa !6
    %84 = tail call double @llvm.fmuladd.f64(double %82, double %82, double %83)
    %uglygep162 = getelementptr i8, ptr %lsr.iv159, i64 -8
    store double %84, ptr %uglygep162, align 8, !tbaa !6
    %85 = load double, ptr %lsr.iv148, align 8, !tbaa !6
    %86 = tail call double @llvm.fmuladd.f64(double %84, double %84, double %85)
    store double %86, ptr %lsr.iv159, align 8, !tbaa !6
    %niter.next.7.2 = add nuw i64 %niter.2, 8
    %uglygep149 = getelementptr i8, ptr %lsr.iv148, i64 64
    %uglygep160 = getelementptr i8, ptr %lsr.iv159, i64 64
    %87 = call i64 @llvm.loop.decrement.reg.i64(i64 %70, i64 1)
    %88 = icmp ne i64 %87, 0
    br i1 %88, label %for.body9.2, label %for.cond.cleanup8.unr-lcssa.2.loopexit, !llvm.loop !14
  
  for.cond.cleanup8.unr-lcssa.2.loopexit:           ; preds = %for.body9.2
    %89 = add i64 %niter.next.7.2, 1
    br label %for.cond.cleanup8.unr-lcssa.2
  
  for.cond.cleanup8.unr-lcssa.2:                    ; preds = %for.cond.cleanup8.unr-lcssa.2.loopexit, %for.cond.cleanup8.1
    %.unr.2 = phi double [ %.pre.2, %for.cond.cleanup8.1 ], [ %86, %for.cond.cleanup8.unr-lcssa.2.loopexit ]
    %indvars.iv.unr.2 = phi i64 [ 1, %for.cond.cleanup8.1 ], [ %89, %for.cond.cleanup8.unr-lcssa.2.loopexit ]
    %lcmp.mod.2.not = icmp eq i64 %xtraiter.2, 0
    br i1 %lcmp.mod.2.not, label %for.cond.cleanup8.2, label %for.body9.epil.2.preheader
  
  for.body9.epil.2.preheader:                       ; preds = %for.cond.cleanup8.unr-lcssa.2
    %90 = shl i64 %indvars.iv.unr.2, 3
    %uglygep170 = getelementptr i8, ptr %lsr.iv168, i64 %90
    %uglygep175 = getelementptr i8, ptr %lsr.iv173, i64 %90
    %91 = call i64 @llvm.start.loop.iterations.i64(i64 %2)
    br label %for.body9.epil.2
  
  for.body9.epil.2:                                 ; preds = %for.body9.epil.2.preheader, %for.body9.epil.2
    %lsr.iv176 = phi ptr [ %uglygep175, %for.body9.epil.2.preheader ], [ %uglygep177, %for.body9.epil.2 ]
    %lsr.iv171 = phi ptr [ %uglygep170, %for.body9.epil.2.preheader ], [ %uglygep172, %for.body9.epil.2 ]
    %92 = phi double [ %95, %for.body9.epil.2 ], [ %.unr.2, %for.body9.epil.2.preheader ]
    %93 = phi i64 [ %91, %for.body9.epil.2.preheader ], [ %96, %for.body9.epil.2 ]
    %94 = load double, ptr %lsr.iv176, align 8, !tbaa !6
    %95 = tail call double @llvm.fmuladd.f64(double %92, double %92, double %94)
    store double %95, ptr %lsr.iv171, align 8, !tbaa !6
    %uglygep172 = getelementptr i8, ptr %lsr.iv171, i64 8
    %uglygep177 = getelementptr i8, ptr %lsr.iv176, i64 8
    %96 = call i64 @llvm.loop.decrement.reg.i64(i64 %93, i64 1)
    %97 = icmp ne i64 %96, 0
    br i1 %97, label %for.body9.epil.2, label %for.cond.cleanup8.2, !llvm.loop !12
  
  for.cond.cleanup8.2:                              ; preds = %for.body9.epil.2, %for.cond.cleanup8.unr-lcssa.2
    %indvars.iv.next57.2 = add nuw nsw i64 %indvars.iv56, 3
    %indvar.next.2 = add nuw nsw i64 %indvar, 3
    %uglygep = getelementptr i8, ptr %lsr.iv, i64 6144
    %uglygep83 = getelementptr i8, ptr %lsr.iv82, i64 6144
    %uglygep94 = getelementptr i8, ptr %lsr.iv93, i64 6144
    %uglygep99 = getelementptr i8, ptr %lsr.iv98, i64 6144
    %lsr.iv.next107 = add nuw nsw i64 %lsr.iv106, 3
    %uglygep109 = getelementptr i8, ptr %lsr.iv108, i64 6144
    %uglygep120 = getelementptr i8, ptr %lsr.iv119, i64 6144
    %uglygep131 = getelementptr i8, ptr %lsr.iv130, i64 6144
    %uglygep136 = getelementptr i8, ptr %lsr.iv135, i64 6144
    %lsr.iv.next145 = add nuw nsw i64 %lsr.iv144, 3
    %uglygep147 = getelementptr i8, ptr %lsr.iv146, i64 6144
    %uglygep158 = getelementptr i8, ptr %lsr.iv157, i64 6144
    %uglygep169 = getelementptr i8, ptr %lsr.iv168, i64 6144
    %uglygep174 = getelementptr i8, ptr %lsr.iv173, i64 6144
    %exitcond61.not.2 = icmp eq i64 %indvars.iv.next57.2, 256
    %indvar.next = add i3 %indvar187, 1
    br i1 %exitcond61.not.2, label %for.cond.cleanup4, label %for.cond6.preheader, !llvm.loop !15
  
  for.body9:                                        ; preds = %for.body9, %for.cond6.preheader.new
    %lsr.iv84 = phi ptr [ %uglygep85, %for.body9 ], [ %lsr.iv82, %for.cond6.preheader.new ]
    %lsr.iv73 = phi ptr [ %uglygep74, %for.body9 ], [ %lsr.iv, %for.cond6.preheader.new ]
    %98 = phi double [ %.pre, %for.cond6.preheader.new ], [ %115, %for.body9 ]
    %niter = phi i64 [ 0, %for.cond6.preheader.new ], [ %niter.next.7, %for.body9 ]
    %99 = phi i64 [ %26, %for.cond6.preheader.new ], [ %116, %for.body9 ]
    %uglygep86 = getelementptr i8, ptr %lsr.iv84, i64 -56
    %100 = load double, ptr %uglygep86, align 8, !tbaa !6
    %101 = tail call double @llvm.fmuladd.f64(double %98, double %98, double %100)
    %uglygep75 = getelementptr i8, ptr %lsr.iv73, i64 -56
    store double %101, ptr %uglygep75, align 8, !tbaa !6
    %uglygep87 = getelementptr i8, ptr %lsr.iv84, i64 -48
    %102 = load double, ptr %uglygep87, align 8, !tbaa !6
    %103 = tail call double @llvm.fmuladd.f64(double %101, double %101, double %102)
    %uglygep76 = getelementptr i8, ptr %lsr.iv73, i64 -48
    store double %103, ptr %uglygep76, align 8, !tbaa !6
    %uglygep89 = getelementptr i8, ptr %lsr.iv84, i64 -40
    %104 = load double, ptr %uglygep89, align 8, !tbaa !6
    %105 = tail call double @llvm.fmuladd.f64(double %103, double %103, double %104)
    %uglygep78 = getelementptr i8, ptr %lsr.iv73, i64 -40
    store double %105, ptr %uglygep78, align 8, !tbaa !6
    %uglygep90 = getelementptr i8, ptr %lsr.iv84, i64 -32
    %106 = load double, ptr %uglygep90, align 8, !tbaa !6
    %107 = tail call double @llvm.fmuladd.f64(double %105, double %105, double %106)
    %uglygep79 = getelementptr i8, ptr %lsr.iv73, i64 -32
    store double %107, ptr %uglygep79, align 8, !tbaa !6
    %uglygep91 = getelementptr i8, ptr %lsr.iv84, i64 -24
    %108 = load double, ptr %uglygep91, align 8, !tbaa !6
    %109 = tail call double @llvm.fmuladd.f64(double %107, double %107, double %108)
    %uglygep80 = getelementptr i8, ptr %lsr.iv73, i64 -24
    store double %109, ptr %uglygep80, align 8, !tbaa !6
    %uglygep92 = getelementptr i8, ptr %lsr.iv84, i64 -16
    %110 = load double, ptr %uglygep92, align 8, !tbaa !6
    %111 = tail call double @llvm.fmuladd.f64(double %109, double %109, double %110)
    %uglygep81 = getelementptr i8, ptr %lsr.iv73, i64 -16
    store double %111, ptr %uglygep81, align 8, !tbaa !6
    %uglygep88 = getelementptr i8, ptr %lsr.iv84, i64 -8
    %112 = load double, ptr %uglygep88, align 8, !tbaa !6
    %113 = tail call double @llvm.fmuladd.f64(double %111, double %111, double %112)
    %uglygep77 = getelementptr i8, ptr %lsr.iv73, i64 -8
    store double %113, ptr %uglygep77, align 8, !tbaa !6
    %114 = load double, ptr %lsr.iv84, align 8, !tbaa !6
    %115 = tail call double @llvm.fmuladd.f64(double %113, double %113, double %114)
    store double %115, ptr %lsr.iv73, align 8, !tbaa !6
    %niter.next.7 = add nuw i64 %niter, 8
    %uglygep74 = getelementptr i8, ptr %lsr.iv73, i64 64
    %uglygep85 = getelementptr i8, ptr %lsr.iv84, i64 64
    %116 = call i64 @llvm.loop.decrement.reg.i64(i64 %99, i64 1)
    %117 = icmp ne i64 %116, 0
    br i1 %117, label %for.body9, label %for.cond.cleanup8.unr-lcssa.loopexit, !llvm.loop !14
  }
  
  declare i32 @initialise_arrays(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nofree nounwind
  declare noundef i32 @gettimeofday(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #2
  
  ; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
  declare double @llvm.fmuladd.f64(double, double, double) #3
  
  declare i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, double noundef) local_unnamed_addr #1
  
  declare double @calc_checksum(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #4
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #4
  
  attributes #0 = { nounwind uwtable vscale_range(1,16) "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #1 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #2 = { nofree nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #3 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
  attributes #4 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #5 = { nounwind }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 7, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !5 = !{!"clang version 15.0.4 (git@172.16.1.70:a64fx-swpl/llvm-project.git 5ae2b22778f0c22f953e4c2f14fc0a7ae56d8e11)"}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"double", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C/C++ TBAA"}
  !10 = distinct !{!10, !11}
  !11 = !{!"llvm.loop.mustprogress"}
  !12 = distinct !{!12, !13}
  !13 = !{!"llvm.loop.unroll.disable"}
  !14 = distinct !{!14, !11}
  !15 = distinct !{!15, !11}

...
---
name:            s232
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32sp, preferred-register: '' }
  - { id: 1, class: gpr32common, preferred-register: '' }
  - { id: 2, class: gpr64, preferred-register: '' }
  - { id: 3, class: gpr64, preferred-register: '' }
  - { id: 4, class: gpr64, preferred-register: '' }
  - { id: 5, class: gpr64, preferred-register: '' }
  - { id: 6, class: gpr64common, preferred-register: '' }
  - { id: 7, class: gpr64, preferred-register: '' }
  - { id: 8, class: gpr64, preferred-register: '' }
  - { id: 9, class: gpr64, preferred-register: '' }
  - { id: 10, class: gpr64, preferred-register: '' }
  - { id: 11, class: gpr64common, preferred-register: '' }
  - { id: 12, class: gpr64, preferred-register: '' }
  - { id: 13, class: gpr64, preferred-register: '' }
  - { id: 14, class: gpr64, preferred-register: '' }
  - { id: 15, class: gpr64, preferred-register: '' }
  - { id: 16, class: gpr64sp, preferred-register: '' }
  - { id: 17, class: gpr64common, preferred-register: '' }
  - { id: 18, class: gpr64all, preferred-register: '' }
  - { id: 19, class: gpr64all, preferred-register: '' }
  - { id: 20, class: gpr64all, preferred-register: '' }
  - { id: 21, class: gpr64all, preferred-register: '' }
  - { id: 22, class: gpr64all, preferred-register: '' }
  - { id: 23, class: gpr64all, preferred-register: '' }
  - { id: 24, class: fpr64, preferred-register: '' }
  - { id: 25, class: gpr64, preferred-register: '' }
  - { id: 26, class: gpr64all, preferred-register: '' }
  - { id: 27, class: gpr32all, preferred-register: '' }
  - { id: 28, class: gpr64all, preferred-register: '' }
  - { id: 29, class: fpr64, preferred-register: '' }
  - { id: 30, class: gpr64, preferred-register: '' }
  - { id: 31, class: gpr64all, preferred-register: '' }
  - { id: 32, class: gpr64all, preferred-register: '' }
  - { id: 33, class: gpr64all, preferred-register: '' }
  - { id: 34, class: gpr64sp, preferred-register: '' }
  - { id: 35, class: gpr64sp, preferred-register: '' }
  - { id: 36, class: fpr64, preferred-register: '' }
  - { id: 37, class: gpr64sp, preferred-register: '' }
  - { id: 38, class: fpr64, preferred-register: '' }
  - { id: 39, class: gpr64all, preferred-register: '' }
  - { id: 40, class: gpr64all, preferred-register: '' }
  - { id: 41, class: gpr64all, preferred-register: '' }
  - { id: 42, class: fpr64, preferred-register: '' }
  - { id: 43, class: gpr64, preferred-register: '' }
  - { id: 44, class: gpr64all, preferred-register: '' }
  - { id: 45, class: gpr64sp, preferred-register: '' }
  - { id: 46, class: gpr64sp, preferred-register: '' }
  - { id: 47, class: fpr64, preferred-register: '' }
  - { id: 48, class: gpr64sp, preferred-register: '' }
  - { id: 49, class: gpr64sp, preferred-register: '' }
  - { id: 50, class: fpr64, preferred-register: '' }
  - { id: 51, class: gpr64sp, preferred-register: '' }
  - { id: 52, class: gpr64all, preferred-register: '' }
  - { id: 53, class: gpr64all, preferred-register: '' }
  - { id: 54, class: gpr64all, preferred-register: '' }
  - { id: 55, class: gpr64all, preferred-register: '' }
  - { id: 56, class: fpr64, preferred-register: '' }
  - { id: 57, class: gpr64, preferred-register: '' }
  - { id: 58, class: gpr64all, preferred-register: '' }
  - { id: 59, class: gpr64all, preferred-register: '' }
  - { id: 60, class: gpr64all, preferred-register: '' }
  - { id: 61, class: gpr64sp, preferred-register: '' }
  - { id: 62, class: gpr64sp, preferred-register: '' }
  - { id: 63, class: fpr64, preferred-register: '' }
  - { id: 64, class: gpr64sp, preferred-register: '' }
  - { id: 65, class: fpr64, preferred-register: '' }
  - { id: 66, class: gpr64all, preferred-register: '' }
  - { id: 67, class: gpr64all, preferred-register: '' }
  - { id: 68, class: gpr64all, preferred-register: '' }
  - { id: 69, class: fpr64, preferred-register: '' }
  - { id: 70, class: gpr64, preferred-register: '' }
  - { id: 71, class: gpr64all, preferred-register: '' }
  - { id: 72, class: gpr64sp, preferred-register: '' }
  - { id: 73, class: gpr64sp, preferred-register: '' }
  - { id: 74, class: fpr64, preferred-register: '' }
  - { id: 75, class: gpr64sp, preferred-register: '' }
  - { id: 76, class: gpr64sp, preferred-register: '' }
  - { id: 77, class: fpr64, preferred-register: '' }
  - { id: 78, class: gpr64sp, preferred-register: '' }
  - { id: 79, class: gpr64all, preferred-register: '' }
  - { id: 80, class: gpr64all, preferred-register: '' }
  - { id: 81, class: gpr64all, preferred-register: '' }
  - { id: 82, class: gpr64all, preferred-register: '' }
  - { id: 83, class: fpr64, preferred-register: '' }
  - { id: 84, class: gpr64, preferred-register: '' }
  - { id: 85, class: gpr64all, preferred-register: '' }
  - { id: 86, class: gpr64all, preferred-register: '' }
  - { id: 87, class: gpr64all, preferred-register: '' }
  - { id: 88, class: gpr64sp, preferred-register: '' }
  - { id: 89, class: gpr64sp, preferred-register: '' }
  - { id: 90, class: fpr64, preferred-register: '' }
  - { id: 91, class: gpr64sp, preferred-register: '' }
  - { id: 92, class: fpr64, preferred-register: '' }
  - { id: 93, class: gpr64all, preferred-register: '' }
  - { id: 94, class: gpr64all, preferred-register: '' }
  - { id: 95, class: gpr64all, preferred-register: '' }
  - { id: 96, class: gpr64all, preferred-register: '' }
  - { id: 97, class: gpr64all, preferred-register: '' }
  - { id: 98, class: gpr64all, preferred-register: '' }
  - { id: 99, class: gpr64all, preferred-register: '' }
  - { id: 100, class: gpr64all, preferred-register: '' }
  - { id: 101, class: gpr64all, preferred-register: '' }
  - { id: 102, class: gpr64all, preferred-register: '' }
  - { id: 103, class: gpr64all, preferred-register: '' }
  - { id: 104, class: gpr64all, preferred-register: '' }
  - { id: 105, class: gpr64all, preferred-register: '' }
  - { id: 106, class: gpr64all, preferred-register: '' }
  - { id: 107, class: gpr64all, preferred-register: '' }
  - { id: 108, class: gpr64all, preferred-register: '' }
  - { id: 109, class: gpr64all, preferred-register: '' }
  - { id: 110, class: gpr64all, preferred-register: '' }
  - { id: 111, class: gpr64all, preferred-register: '' }
  - { id: 112, class: gpr32all, preferred-register: '' }
  - { id: 113, class: gpr64sp, preferred-register: '' }
  - { id: 114, class: gpr64sp, preferred-register: '' }
  - { id: 115, class: fpr64, preferred-register: '' }
  - { id: 116, class: gpr64sp, preferred-register: '' }
  - { id: 117, class: gpr64sp, preferred-register: '' }
  - { id: 118, class: fpr64, preferred-register: '' }
  - { id: 119, class: gpr64sp, preferred-register: '' }
  - { id: 120, class: gpr64all, preferred-register: '' }
  - { id: 121, class: gpr64all, preferred-register: '' }
  - { id: 122, class: gpr64all, preferred-register: '' }
  - { id: 123, class: gpr64common, preferred-register: '' }
  - { id: 124, class: gpr32all, preferred-register: '' }
  - { id: 125, class: gpr64common, preferred-register: '' }
  - { id: 126, class: gpr32all, preferred-register: '' }
  - { id: 127, class: gpr64all, preferred-register: '' }
  - { id: 128, class: gpr32all, preferred-register: '' }
  - { id: 129, class: gpr32all, preferred-register: '' }
  - { id: 130, class: gpr32all, preferred-register: '' }
  - { id: 131, class: gpr64all, preferred-register: '' }
  - { id: 132, class: gpr64all, preferred-register: '' }
  - { id: 133, class: gpr64all, preferred-register: '' }
  - { id: 134, class: gpr64all, preferred-register: '' }
  - { id: 135, class: gpr64all, preferred-register: '' }
  - { id: 136, class: gpr64all, preferred-register: '' }
  - { id: 137, class: gpr64all, preferred-register: '' }
  - { id: 138, class: gpr64all, preferred-register: '' }
  - { id: 139, class: gpr64all, preferred-register: '' }
  - { id: 140, class: gpr64all, preferred-register: '' }
  - { id: 141, class: gpr64all, preferred-register: '' }
  - { id: 142, class: gpr64all, preferred-register: '' }
  - { id: 143, class: gpr64all, preferred-register: '' }
  - { id: 144, class: gpr64all, preferred-register: '' }
  - { id: 145, class: gpr64all, preferred-register: '' }
  - { id: 146, class: gpr64all, preferred-register: '' }
  - { id: 147, class: gpr64common, preferred-register: '' }
  - { id: 148, class: gpr32, preferred-register: '' }
  - { id: 149, class: gpr64, preferred-register: '' }
  - { id: 150, class: gpr64, preferred-register: '' }
  - { id: 151, class: gpr64common, preferred-register: '' }
  - { id: 152, class: gpr64, preferred-register: '' }
  - { id: 153, class: gpr32, preferred-register: '' }
  - { id: 154, class: gpr64, preferred-register: '' }
  - { id: 155, class: gpr64, preferred-register: '' }
  - { id: 156, class: gpr64, preferred-register: '' }
  - { id: 157, class: gpr32, preferred-register: '' }
  - { id: 158, class: gpr64, preferred-register: '' }
  - { id: 159, class: gpr64, preferred-register: '' }
  - { id: 160, class: gpr64, preferred-register: '' }
  - { id: 161, class: gpr64sp, preferred-register: '' }
  - { id: 162, class: gpr64sp, preferred-register: '' }
  - { id: 163, class: gpr64sp, preferred-register: '' }
  - { id: 164, class: gpr64sp, preferred-register: '' }
  - { id: 165, class: gpr64sp, preferred-register: '' }
  - { id: 166, class: gpr64sp, preferred-register: '' }
  - { id: 167, class: gpr64all, preferred-register: '' }
  - { id: 168, class: gpr32all, preferred-register: '' }
  - { id: 169, class: gpr32, preferred-register: '' }
  - { id: 170, class: gpr32, preferred-register: '' }
  - { id: 171, class: gpr32, preferred-register: '' }
  - { id: 172, class: gpr64all, preferred-register: '' }
  - { id: 173, class: gpr32common, preferred-register: '' }
  - { id: 174, class: gpr32sp, preferred-register: '' }
  - { id: 175, class: gpr64, preferred-register: '' }
  - { id: 176, class: gpr64all, preferred-register: '' }
  - { id: 177, class: gpr64sp, preferred-register: '' }
  - { id: 178, class: gpr64sp, preferred-register: '' }
  - { id: 179, class: gpr64common, preferred-register: '' }
  - { id: 180, class: gpr64common, preferred-register: '' }
  - { id: 181, class: gpr64sp, preferred-register: '' }
  - { id: 182, class: gpr32sp, preferred-register: '' }
  - { id: 183, class: gpr64, preferred-register: '' }
  - { id: 184, class: gpr64all, preferred-register: '' }
  - { id: 185, class: gpr64sp, preferred-register: '' }
  - { id: 186, class: gpr64sp, preferred-register: '' }
  - { id: 187, class: gpr64common, preferred-register: '' }
  - { id: 188, class: gpr64common, preferred-register: '' }
  - { id: 189, class: gpr64sp, preferred-register: '' }
  - { id: 190, class: gpr32sp, preferred-register: '' }
  - { id: 191, class: gpr64, preferred-register: '' }
  - { id: 192, class: gpr64all, preferred-register: '' }
  - { id: 193, class: gpr64sp, preferred-register: '' }
  - { id: 194, class: gpr64common, preferred-register: '' }
  - { id: 195, class: gpr64sp, preferred-register: '' }
  - { id: 196, class: gpr64common, preferred-register: '' }
  - { id: 197, class: gpr64common, preferred-register: '' }
  - { id: 198, class: gpr64sp, preferred-register: '' }
  - { id: 199, class: gpr64, preferred-register: '' }
  - { id: 200, class: gpr64common, preferred-register: '' }
  - { id: 201, class: gpr64sp, preferred-register: '' }
  - { id: 202, class: gpr32, preferred-register: '' }
  - { id: 203, class: gpr64, preferred-register: '' }
  - { id: 204, class: gpr64all, preferred-register: '' }
  - { id: 205, class: gpr64all, preferred-register: '' }
  - { id: 206, class: fpr64, preferred-register: '' }
  - { id: 207, class: fpr64, preferred-register: '' }
  - { id: 208, class: fpr64, preferred-register: '' }
  - { id: 209, class: fpr64, preferred-register: '' }
  - { id: 210, class: fpr64, preferred-register: '' }
  - { id: 211, class: fpr64, preferred-register: '' }
  - { id: 212, class: fpr64, preferred-register: '' }
  - { id: 213, class: fpr64, preferred-register: '' }
  - { id: 214, class: fpr64, preferred-register: '' }
  - { id: 215, class: fpr64, preferred-register: '' }
  - { id: 216, class: fpr64, preferred-register: '' }
  - { id: 217, class: fpr64, preferred-register: '' }
  - { id: 218, class: fpr64, preferred-register: '' }
  - { id: 219, class: fpr64, preferred-register: '' }
  - { id: 220, class: fpr64, preferred-register: '' }
  - { id: 221, class: gpr64sp, preferred-register: '' }
  - { id: 222, class: gpr64sp, preferred-register: '' }
  - { id: 223, class: gpr64sp, preferred-register: '' }
  - { id: 224, class: gpr64, preferred-register: '' }
  - { id: 225, class: gpr64sp, preferred-register: '' }
  - { id: 226, class: gpr64, preferred-register: '' }
  - { id: 227, class: gpr64, preferred-register: '' }
  - { id: 228, class: gpr64, preferred-register: '' }
  - { id: 229, class: gpr64sp, preferred-register: '' }
  - { id: 230, class: fpr64, preferred-register: '' }
  - { id: 231, class: gpr64sp, preferred-register: '' }
  - { id: 232, class: gpr64, preferred-register: '' }
  - { id: 233, class: gpr64all, preferred-register: '' }
  - { id: 234, class: gpr64common, preferred-register: '' }
  - { id: 235, class: gpr64, preferred-register: '' }
  - { id: 236, class: gpr64common, preferred-register: '' }
  - { id: 237, class: gpr64sp, preferred-register: '' }
  - { id: 238, class: gpr32, preferred-register: '' }
  - { id: 239, class: gpr64, preferred-register: '' }
  - { id: 240, class: gpr64all, preferred-register: '' }
  - { id: 241, class: gpr64all, preferred-register: '' }
  - { id: 242, class: fpr64, preferred-register: '' }
  - { id: 243, class: fpr64, preferred-register: '' }
  - { id: 244, class: fpr64, preferred-register: '' }
  - { id: 245, class: fpr64, preferred-register: '' }
  - { id: 246, class: fpr64, preferred-register: '' }
  - { id: 247, class: fpr64, preferred-register: '' }
  - { id: 248, class: fpr64, preferred-register: '' }
  - { id: 249, class: fpr64, preferred-register: '' }
  - { id: 250, class: fpr64, preferred-register: '' }
  - { id: 251, class: fpr64, preferred-register: '' }
  - { id: 252, class: fpr64, preferred-register: '' }
  - { id: 253, class: fpr64, preferred-register: '' }
  - { id: 254, class: fpr64, preferred-register: '' }
  - { id: 255, class: fpr64, preferred-register: '' }
  - { id: 256, class: fpr64, preferred-register: '' }
  - { id: 257, class: gpr64sp, preferred-register: '' }
  - { id: 258, class: gpr64sp, preferred-register: '' }
  - { id: 259, class: gpr64sp, preferred-register: '' }
  - { id: 260, class: gpr64, preferred-register: '' }
  - { id: 261, class: gpr64sp, preferred-register: '' }
  - { id: 262, class: gpr64, preferred-register: '' }
  - { id: 263, class: gpr64, preferred-register: '' }
  - { id: 264, class: gpr64, preferred-register: '' }
  - { id: 265, class: gpr64sp, preferred-register: '' }
  - { id: 266, class: fpr64, preferred-register: '' }
  - { id: 267, class: gpr64sp, preferred-register: '' }
  - { id: 268, class: gpr64, preferred-register: '' }
  - { id: 269, class: gpr64all, preferred-register: '' }
  - { id: 270, class: gpr64common, preferred-register: '' }
  - { id: 271, class: gpr64, preferred-register: '' }
  - { id: 272, class: gpr64common, preferred-register: '' }
  - { id: 273, class: gpr64sp, preferred-register: '' }
  - { id: 274, class: gpr32, preferred-register: '' }
  - { id: 275, class: gpr64, preferred-register: '' }
  - { id: 276, class: gpr64all, preferred-register: '' }
  - { id: 277, class: gpr64all, preferred-register: '' }
  - { id: 278, class: fpr64, preferred-register: '' }
  - { id: 279, class: fpr64, preferred-register: '' }
  - { id: 280, class: fpr64, preferred-register: '' }
  - { id: 281, class: fpr64, preferred-register: '' }
  - { id: 282, class: fpr64, preferred-register: '' }
  - { id: 283, class: fpr64, preferred-register: '' }
  - { id: 284, class: fpr64, preferred-register: '' }
  - { id: 285, class: fpr64, preferred-register: '' }
  - { id: 286, class: fpr64, preferred-register: '' }
  - { id: 287, class: fpr64, preferred-register: '' }
  - { id: 288, class: fpr64, preferred-register: '' }
  - { id: 289, class: fpr64, preferred-register: '' }
  - { id: 290, class: fpr64, preferred-register: '' }
  - { id: 291, class: fpr64, preferred-register: '' }
  - { id: 292, class: fpr64, preferred-register: '' }
  - { id: 293, class: gpr64sp, preferred-register: '' }
  - { id: 294, class: gpr64sp, preferred-register: '' }
  - { id: 295, class: gpr64sp, preferred-register: '' }
  - { id: 296, class: gpr64, preferred-register: '' }
  - { id: 297, class: gpr64sp, preferred-register: '' }
  - { id: 298, class: gpr64, preferred-register: '' }
  - { id: 299, class: gpr64, preferred-register: '' }
  - { id: 300, class: gpr64, preferred-register: '' }
  - { id: 301, class: gpr64sp, preferred-register: '' }
  - { id: 302, class: fpr64, preferred-register: '' }
  - { id: 303, class: gpr64sp, preferred-register: '' }
  - { id: 304, class: gpr64, preferred-register: '' }
  - { id: 305, class: gpr64sp, preferred-register: '' }
  - { id: 306, class: gpr64sp, preferred-register: '' }
  - { id: 307, class: gpr32, preferred-register: '' }
  - { id: 308, class: gpr64, preferred-register: '' }
  - { id: 309, class: gpr64, preferred-register: '' }
  - { id: 310, class: gpr64, preferred-register: '' }
  - { id: 311, class: gpr64, preferred-register: '' }
  - { id: 312, class: gpr64, preferred-register: '' }
  - { id: 313, class: gpr64sp, preferred-register: '' }
  - { id: 314, class: gpr64, preferred-register: '' }
  - { id: 315, class: gpr64, preferred-register: '' }
  - { id: 316, class: gpr64, preferred-register: '' }
  - { id: 317, class: gpr64, preferred-register: '' }
  - { id: 318, class: gpr64sp, preferred-register: '' }
  - { id: 319, class: gpr64, preferred-register: '' }
  - { id: 320, class: gpr64, preferred-register: '' }
  - { id: 321, class: gpr64, preferred-register: '' }
  - { id: 322, class: gpr64, preferred-register: '' }
  - { id: 323, class: gpr32sp, preferred-register: '' }
  - { id: 324, class: gpr64, preferred-register: '' }
  - { id: 325, class: gpr64common, preferred-register: '' }
  - { id: 326, class: gpr64common, preferred-register: '' }
  - { id: 327, class: gpr64common, preferred-register: '' }
  - { id: 328, class: gpr64common, preferred-register: '' }
  - { id: 329, class: gpr64common, preferred-register: '' }
  - { id: 330, class: gpr64common, preferred-register: '' }
  - { id: 331, class: gpr64common, preferred-register: '' }
  - { id: 332, class: gpr64common, preferred-register: '' }
  - { id: 333, class: fpr64, preferred-register: '' }
  - { id: 334, class: gpr32all, preferred-register: '' }
  - { id: 335, class: gpr32common, preferred-register: '' }
  - { id: 336, class: gpr32, preferred-register: '' }
  - { id: 337, class: gpr32, preferred-register: '' }
  - { id: 338, class: gpr64sp, preferred-register: '' }
  - { id: 339, class: gpr64all, preferred-register: '' }
  - { id: 340, class: gpr32all, preferred-register: '' }
  - { id: 341, class: gpr64common, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%123' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     true
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $x0
  
    %123:gpr64common = COPY $x0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %125:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s232, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s232
    $x0 = COPY %125
    BL @initialise_arrays, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %127:gpr64all = COPY $xzr
    $x0 = COPY %123
    $x1 = COPY %127
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %129:gpr32all = COPY $wzr
    %124:gpr32all = COPY %129
    %147:gpr64common = LOADgot target-flags(aarch64-got) @bb
    %148:gpr32 = MOVi32imm 4160
    %149:gpr64 = SUBREG_TO_REG 0, %148, %subreg.sub_32
    %151:gpr64common = LOADgot target-flags(aarch64-got) @aa
    %153:gpr32 = MOVi32imm 6208
    %154:gpr64 = SUBREG_TO_REG 0, %153, %subreg.sub_32
    %157:gpr32 = MOVi32imm 6144
    %158:gpr64 = SUBREG_TO_REG 0, %157, %subreg.sub_32
    %169:gpr32 = MOVi32imm 1
    %170:gpr32 = MOVi32imm 2
    %171:gpr32 = MOVi32imm 3
    %176:gpr64all = IMPLICIT_DEF
    %184:gpr64all = IMPLICIT_DEF
    %192:gpr64all = IMPLICIT_DEF
    %325:gpr64common = LOADgot target-flags(aarch64-got) @a
    %326:gpr64common = LOADgot target-flags(aarch64-got) @b
    %327:gpr64common = LOADgot target-flags(aarch64-got) @c
    %328:gpr64common = LOADgot target-flags(aarch64-got) @d
    %329:gpr64common = LOADgot target-flags(aarch64-got) @e
    %332:gpr64common = LOADgot target-flags(aarch64-got) @cc
    %333:fpr64 = FMOVDi 112
    %336:gpr32 = MOVi32imm 39000
  
  bb.1.for.cond2.preheader:
    successors: %bb.3(0x80000000)
  
    %0:gpr32sp = PHI %124, %bb.0, %27, %bb.5
    %150:gpr64 = ADDXrr %147, %149
    %152:gpr64 = ADDXrr %151, %149
    %155:gpr64 = ADDXrr %147, %154
    %156:gpr64 = ADDXrr %151, %154
    %159:gpr64 = ADDXrr %151, %158
    %160:gpr64 = ADDXrr %147, %158
    %161:gpr64sp = ADDXri %151, 2112, 0
    %162:gpr64sp = ADDXri %147, 2112, 0
    %163:gpr64sp = ADDXri %151, 2048, 0
    %164:gpr64sp = ADDXri %147, 2048, 0
    %165:gpr64sp = ADDXri %151, 1, 12
    %166:gpr64sp = ADDXri %147, 1, 12
    %167:gpr64all = COPY $xzr
    %145:gpr64all = COPY %167
    %168:gpr32all = COPY $wzr
    %130:gpr32all = COPY %168
    %146:gpr64all = SUBREG_TO_REG 0, %169, %subreg.sub_32
    %144:gpr64all = COPY %161
    %143:gpr64all = COPY %162
    %142:gpr64all = COPY %163
    %141:gpr64all = COPY %164
    %140:gpr64all = SUBREG_TO_REG 0, %170, %subreg.sub_32
    %137:gpr64all = COPY %165
    %136:gpr64all = COPY %166
    %135:gpr64all = SUBREG_TO_REG 0, %171, %subreg.sub_32
    %139:gpr64all = COPY %150
    %138:gpr64all = COPY %152
    %134:gpr64all = COPY %155
    %133:gpr64all = COPY %156
    %132:gpr64all = COPY %159
    %131:gpr64all = COPY %160
    B %bb.3
  
  bb.2.for.cond.cleanup:
    %338:gpr64sp = nuw ADDXri %123, 16, 0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %339:gpr64all = COPY $xzr
    $x0 = COPY %338
    $x1 = COPY %339
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %341:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s232, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s232
    $x0 = COPY %341
    TCRETURNdi @calc_checksum, 0, csr_aarch64_aapcs, implicit $sp, implicit $x0
  
  bb.3.for.cond6.preheader:
    successors: %bb.26(0x40000000), %bb.4(0x40000000)
  
    %1:gpr32common = PHI %130, %bb.1, %112, %bb.24
    %2:gpr64 = PHI %131, %bb.1, %111, %bb.24
    %3:gpr64 = PHI %132, %bb.1, %110, %bb.24
    %4:gpr64 = PHI %133, %bb.1, %109, %bb.24
    %5:gpr64 = PHI %134, %bb.1, %108, %bb.24
    %6:gpr64common = PHI %135, %bb.1, %107, %bb.24
    %7:gpr64 = PHI %136, %bb.1, %106, %bb.24
    %8:gpr64 = PHI %137, %bb.1, %105, %bb.24
    %9:gpr64 = PHI %138, %bb.1, %104, %bb.24
    %10:gpr64 = PHI %139, %bb.1, %103, %bb.24
    %11:gpr64common = PHI %140, %bb.1, %102, %bb.24
    %12:gpr64 = PHI %141, %bb.1, %101, %bb.24
    %13:gpr64 = PHI %142, %bb.1, %100, %bb.24
    %14:gpr64 = PHI %143, %bb.1, %99, %bb.24
    %15:gpr64 = PHI %144, %bb.1, %98, %bb.24
    %16:gpr64sp = PHI %145, %bb.1, %97, %bb.24
    %17:gpr64common = PHI %146, %bb.1, %96, %bb.24
    %199:gpr64 = UBFMXri %17, 53, 52
    %24:fpr64 = LDRDroX %151, killed %199, 0, 0 :: (load (s64) from %ir.arrayidx11.phi.trans.insert, align 64, !tbaa !6)
    dead $xzr = SUBSXri %16, 7, 0, implicit-def $nzcv
    Bcc 2, %bb.4, implicit $nzcv
  
  bb.26:
    successors: %bb.7(0x80000000)
  
    %172:gpr64all = SUBREG_TO_REG 0, %169, %subreg.sub_32
    B %bb.7
  
  bb.4.for.cond6.preheader.new:
    successors: %bb.25(0x80000000)
  
    %194:gpr64common = ADDXri %16, 1, 0
    %195:gpr64sp = ANDXri %194, 8060
    %196:gpr64common = nsw SUBXri %195, 8, 0
    %197:gpr64common = UBFMXri %196, 3, 63
    %198:gpr64sp = nuw nsw ADDXri %197, 1, 0
    %23:gpr64all = COPY %198
    %205:gpr64all = COPY $xzr
    %204:gpr64all = COPY %205
    %26:gpr64all = COPY %23
    B %bb.25
  
  bb.5.for.cond.cleanup4:
    successors: %bb.2(0x04000000), %bb.1(0x7c000000)
  
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    $x0 = COPY %325
    $x1 = COPY %326
    $x2 = COPY %327
    $x3 = COPY %328
    $x4 = COPY %329
    $x5 = COPY %151
    $x6 = COPY %147
    $x7 = COPY %332
    $d0 = COPY %333
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $d0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %335:gpr32common = nuw nsw ADDWri %0, 1, 0
    %27:gpr32all = COPY %335
    dead $wzr = SUBSWrr %335, %336, implicit-def $nzcv
    Bcc 0, %bb.2, implicit $nzcv
    B %bb.1
  
  bb.6.for.cond.cleanup8.unr-lcssa.loopexit:
    successors: %bb.7(0x80000000)
  
    %225:gpr64sp = ADDXri %221, 1, 0
    %28:gpr64all = COPY %225
  
  bb.7.for.cond.cleanup8.unr-lcssa:
    successors: %bb.10(0x30000000), %bb.8(0x50000000)
  
    %29:fpr64 = PHI %24, %bb.26, %118, %bb.6
    %30:gpr64 = PHI %172, %bb.26, %28, %bb.6
    %173:gpr32common = ADDWrs %1, %1, 1
    %201:gpr64sp = ANDXri %17, 4098
    %25:gpr64 = COPY %201
    CBZX %25, %bb.10
    B %bb.8
  
  bb.8.for.body9.epil.preheader:
    successors: %bb.9(0x80000000)
  
    %190:gpr32sp = ADDWri %173, 1, 0
    %191:gpr64 = INSERT_SUBREG %192, %190, %subreg.sub_32
    %193:gpr64sp = ANDXri %191, 4098
    %22:gpr64all = COPY %193
    %226:gpr64 = UBFMXri %30, 61, 60
    %227:gpr64 = ADDXrr %13, %226
    %31:gpr64all = COPY %227
    %228:gpr64 = ADDXrr %12, %226
    %32:gpr64all = COPY %228
    %33:gpr64all = COPY %22
  
  bb.9.for.body9.epil:
    successors: %bb.9(0x7c000000), %bb.10(0x04000000)
  
    %34:gpr64sp = PHI %32, %bb.8, %40, %bb.9
    %35:gpr64sp = PHI %31, %bb.8, %39, %bb.9
    %36:fpr64 = PHI %29, %bb.8, %38, %bb.9
    %37:gpr64sp = PHI %33, %bb.8, %41, %bb.9
    early-clobber %229:gpr64sp, %230:fpr64 = LDRDpost %34, 8 :: (load (s64) from %ir.lsr.iv101, !tbaa !6)
    %38:fpr64 = nofpexcept FMADDDrrr %36, %36, killed %230
    early-clobber %231:gpr64sp = STRDpost %38, %35, 8 :: (store (s64) into %ir.lsr.iv96, !tbaa !6)
    %39:gpr64all = COPY %231
    %40:gpr64all = COPY %229
    %232:gpr64 = SUBSXri %37, 1, 0, implicit-def $nzcv
    %41:gpr64all = COPY %232
    Bcc 1, %bb.9, implicit $nzcv
    B %bb.10
  
  bb.10.for.cond.cleanup8:
    successors: %bb.27(0x40000000), %bb.11(0x40000000)
  
    %234:gpr64common = nuw nsw ADDXri %17, 1, 0
    %235:gpr64 = UBFMXri %234, 53, 52
    %42:fpr64 = LDRDroX %151, killed %235, 0, 0 :: (load (s64) from %ir.arrayidx11.phi.trans.insert.1, align 64, !tbaa !6)
    dead $xzr = SUBSXri %16, 6, 0, implicit-def $nzcv
    Bcc 2, %bb.11, implicit $nzcv
  
  bb.27:
    successors: %bb.14(0x80000000)
  
    %233:gpr64all = SUBREG_TO_REG 0, %169, %subreg.sub_32
    B %bb.14
  
  bb.11.for.cond6.preheader.new.1:
    successors: %bb.12(0x80000000)
  
    %186:gpr64sp = ANDXri %11, 8060
    %187:gpr64common = nsw SUBXri %186, 8, 0
    %188:gpr64common = UBFMXri %187, 3, 63
    %189:gpr64sp = nuw nsw ADDXri %188, 1, 0
    %21:gpr64all = COPY %189
    %241:gpr64all = COPY $xzr
    %240:gpr64all = COPY %241
    %44:gpr64all = COPY %21
  
  bb.12.for.body9.1:
    successors: %bb.12(0x7c000000), %bb.13(0x04000000)
  
    %45:gpr64sp = PHI %9, %bb.11, %53, %bb.12
    %46:gpr64sp = PHI %10, %bb.11, %52, %bb.12
    %47:fpr64 = PHI %42, %bb.11, %50, %bb.12
    %48:gpr64sp = PHI %240, %bb.11, %51, %bb.12
    %49:gpr64sp = PHI %44, %bb.11, %54, %bb.12
    %242:fpr64 = LDURDi %46, -56 :: (load (s64) from %ir.uglygep112, !tbaa !6)
    %243:fpr64 = nofpexcept FMADDDrrr %47, %47, killed %242
    STURDi %243, %45, -56 :: (store (s64) into %ir.uglygep123, !tbaa !6)
    %244:fpr64 = LDURDi %46, -48 :: (load (s64) from %ir.uglygep114, !tbaa !6)
    %245:fpr64 = nofpexcept FMADDDrrr %243, %243, killed %244
    STURDi %245, %45, -48 :: (store (s64) into %ir.uglygep125, !tbaa !6)
    %246:fpr64 = LDURDi %46, -40 :: (load (s64) from %ir.uglygep115, !tbaa !6)
    %247:fpr64 = nofpexcept FMADDDrrr %245, %245, killed %246
    STURDi %247, %45, -40 :: (store (s64) into %ir.uglygep126, !tbaa !6)
    %248:fpr64 = LDURDi %46, -32 :: (load (s64) from %ir.uglygep116, !tbaa !6)
    %249:fpr64 = nofpexcept FMADDDrrr %247, %247, killed %248
    STURDi %249, %45, -32 :: (store (s64) into %ir.uglygep127, !tbaa !6)
    %250:fpr64 = LDURDi %46, -24 :: (load (s64) from %ir.uglygep117, !tbaa !6)
    %251:fpr64 = nofpexcept FMADDDrrr %249, %249, killed %250
    STURDi %251, %45, -24 :: (store (s64) into %ir.uglygep128, !tbaa !6)
    %252:fpr64 = LDURDi %46, -16 :: (load (s64) from %ir.uglygep118, !tbaa !6)
    %253:fpr64 = nofpexcept FMADDDrrr %251, %251, killed %252
    STURDi %253, %45, -16 :: (store (s64) into %ir.uglygep129, !tbaa !6)
    %254:fpr64 = LDURDi %46, -8 :: (load (s64) from %ir.uglygep113, !tbaa !6)
    %255:fpr64 = nofpexcept FMADDDrrr %253, %253, killed %254
    STURDi %255, %45, -8 :: (store (s64) into %ir.uglygep124, !tbaa !6)
    %256:fpr64 = LDRDui %46, 0 :: (load (s64) from %ir.lsr.iv110, !tbaa !6)
    %50:fpr64 = nofpexcept FMADDDrrr %255, %255, killed %256
    STRDui %50, %45, 0 :: (store (s64) into %ir.lsr.iv121, !tbaa !6)
    %257:gpr64sp = nuw ADDXri %48, 8, 0
    %51:gpr64sp = COPY %257
    %258:gpr64sp = ADDXri %46, 64, 0
    %52:gpr64all = COPY %258
    %259:gpr64sp = ADDXri %45, 64, 0
    %53:gpr64all = COPY %259
    %260:gpr64 = SUBSXri %49, 1, 0, implicit-def $nzcv
    %54:gpr64all = COPY %260
    Bcc 1, %bb.12, implicit $nzcv
    B %bb.13
  
  bb.13.for.cond.cleanup8.unr-lcssa.1.loopexit:
    successors: %bb.14(0x80000000)
  
    %261:gpr64sp = ADDXri %257, 1, 0
    %55:gpr64all = COPY %261
  
  bb.14.for.cond.cleanup8.unr-lcssa.1:
    successors: %bb.17(0x30000000), %bb.15(0x50000000)
  
    %56:fpr64 = PHI %42, %bb.27, %50, %bb.13
    %57:gpr64 = PHI %233, %bb.27, %55, %bb.13
    %237:gpr64sp = ANDXri %234, 4098
    %43:gpr64 = COPY %237
    CBZX %43, %bb.17
    B %bb.15
  
  bb.15.for.body9.epil.1.preheader:
    successors: %bb.16(0x80000000)
  
    %182:gpr32sp = ADDWri %173, 2, 0
    %183:gpr64 = INSERT_SUBREG %184, %182, %subreg.sub_32
    %185:gpr64sp = ANDXri %183, 4098
    %20:gpr64all = COPY %185
    %262:gpr64 = UBFMXri %57, 61, 60
    %263:gpr64 = ADDXrr %8, %262
    %58:gpr64all = COPY %263
    %264:gpr64 = ADDXrr %7, %262
    %59:gpr64all = COPY %264
    %60:gpr64all = COPY %20
  
  bb.16.for.body9.epil.1:
    successors: %bb.16(0x7c000000), %bb.17(0x04000000)
  
    %61:gpr64sp = PHI %59, %bb.15, %67, %bb.16
    %62:gpr64sp = PHI %58, %bb.15, %66, %bb.16
    %63:fpr64 = PHI %56, %bb.15, %65, %bb.16
    %64:gpr64sp = PHI %60, %bb.15, %68, %bb.16
    early-clobber %265:gpr64sp, %266:fpr64 = LDRDpost %61, 8 :: (load (s64) from %ir.lsr.iv138, !tbaa !6)
    %65:fpr64 = nofpexcept FMADDDrrr %63, %63, killed %266
    early-clobber %267:gpr64sp = STRDpost %65, %62, 8 :: (store (s64) into %ir.lsr.iv133, !tbaa !6)
    %66:gpr64all = COPY %267
    %67:gpr64all = COPY %265
    %268:gpr64 = SUBSXri %64, 1, 0, implicit-def $nzcv
    %68:gpr64all = COPY %268
    Bcc 1, %bb.16, implicit $nzcv
    B %bb.17
  
  bb.17.for.cond.cleanup8.1:
    successors: %bb.28(0x40000000), %bb.18(0x40000000)
  
    %270:gpr64common = nuw nsw ADDXri %17, 2, 0
    %271:gpr64 = UBFMXri %270, 53, 52
    %69:fpr64 = LDRDroX %151, killed %271, 0, 0 :: (load (s64) from %ir.arrayidx11.phi.trans.insert.2, align 64, !tbaa !6)
    dead $xzr = SUBSXri %16, 5, 0, implicit-def $nzcv
    Bcc 2, %bb.18, implicit $nzcv
  
  bb.28:
    successors: %bb.21(0x80000000)
  
    %269:gpr64all = SUBREG_TO_REG 0, %169, %subreg.sub_32
    B %bb.21
  
  bb.18.for.cond6.preheader.new.2:
    successors: %bb.19(0x80000000)
  
    %178:gpr64sp = ANDXri %6, 8060
    %179:gpr64common = nsw SUBXri %178, 8, 0
    %180:gpr64common = UBFMXri %179, 3, 63
    %181:gpr64sp = nuw nsw ADDXri %180, 1, 0
    %19:gpr64all = COPY %181
    %277:gpr64all = COPY $xzr
    %276:gpr64all = COPY %277
    %71:gpr64all = COPY %19
  
  bb.19.for.body9.2:
    successors: %bb.19(0x7c000000), %bb.20(0x04000000)
  
    %72:gpr64sp = PHI %4, %bb.18, %80, %bb.19
    %73:gpr64sp = PHI %5, %bb.18, %79, %bb.19
    %74:fpr64 = PHI %69, %bb.18, %77, %bb.19
    %75:gpr64sp = PHI %276, %bb.18, %78, %bb.19
    %76:gpr64sp = PHI %71, %bb.18, %81, %bb.19
    %278:fpr64 = LDURDi %73, -56 :: (load (s64) from %ir.uglygep150, !tbaa !6)
    %279:fpr64 = nofpexcept FMADDDrrr %74, %74, killed %278
    STURDi %279, %72, -56 :: (store (s64) into %ir.uglygep161, !tbaa !6)
    %280:fpr64 = LDURDi %73, -48 :: (load (s64) from %ir.uglygep152, !tbaa !6)
    %281:fpr64 = nofpexcept FMADDDrrr %279, %279, killed %280
    STURDi %281, %72, -48 :: (store (s64) into %ir.uglygep163, !tbaa !6)
    %282:fpr64 = LDURDi %73, -40 :: (load (s64) from %ir.uglygep153, !tbaa !6)
    %283:fpr64 = nofpexcept FMADDDrrr %281, %281, killed %282
    STURDi %283, %72, -40 :: (store (s64) into %ir.uglygep164, !tbaa !6)
    %284:fpr64 = LDURDi %73, -32 :: (load (s64) from %ir.uglygep154, !tbaa !6)
    %285:fpr64 = nofpexcept FMADDDrrr %283, %283, killed %284
    STURDi %285, %72, -32 :: (store (s64) into %ir.uglygep165, !tbaa !6)
    %286:fpr64 = LDURDi %73, -24 :: (load (s64) from %ir.uglygep155, !tbaa !6)
    %287:fpr64 = nofpexcept FMADDDrrr %285, %285, killed %286
    STURDi %287, %72, -24 :: (store (s64) into %ir.uglygep166, !tbaa !6)
    %288:fpr64 = LDURDi %73, -16 :: (load (s64) from %ir.uglygep156, !tbaa !6)
    %289:fpr64 = nofpexcept FMADDDrrr %287, %287, killed %288
    STURDi %289, %72, -16 :: (store (s64) into %ir.uglygep167, !tbaa !6)
    %290:fpr64 = LDURDi %73, -8 :: (load (s64) from %ir.uglygep151, !tbaa !6)
    %291:fpr64 = nofpexcept FMADDDrrr %289, %289, killed %290
    STURDi %291, %72, -8 :: (store (s64) into %ir.uglygep162, !tbaa !6)
    %292:fpr64 = LDRDui %73, 0 :: (load (s64) from %ir.lsr.iv148, !tbaa !6)
    %77:fpr64 = nofpexcept FMADDDrrr %291, %291, killed %292
    STRDui %77, %72, 0 :: (store (s64) into %ir.lsr.iv159, !tbaa !6)
    %293:gpr64sp = nuw ADDXri %75, 8, 0
    %78:gpr64sp = COPY %293
    %294:gpr64sp = ADDXri %73, 64, 0
    %79:gpr64all = COPY %294
    %295:gpr64sp = ADDXri %72, 64, 0
    %80:gpr64all = COPY %295
    %296:gpr64 = SUBSXri %76, 1, 0, implicit-def $nzcv
    %81:gpr64all = COPY %296
    Bcc 1, %bb.19, implicit $nzcv
    B %bb.20
  
  bb.20.for.cond.cleanup8.unr-lcssa.2.loopexit:
    successors: %bb.21(0x80000000)
  
    %297:gpr64sp = ADDXri %293, 1, 0
    %82:gpr64all = COPY %297
  
  bb.21.for.cond.cleanup8.unr-lcssa.2:
    successors: %bb.24(0x30000000), %bb.22(0x50000000)
  
    %83:fpr64 = PHI %69, %bb.28, %77, %bb.20
    %84:gpr64 = PHI %269, %bb.28, %82, %bb.20
    %273:gpr64sp = ANDXri %270, 4098
    %70:gpr64 = COPY %273
    CBZX %70, %bb.24
    B %bb.22
  
  bb.22.for.body9.epil.2.preheader:
    successors: %bb.23(0x80000000)
  
    %174:gpr32sp = ADDWri %173, 3, 0
    %175:gpr64 = INSERT_SUBREG %176, %174, %subreg.sub_32
    %177:gpr64sp = ANDXri %175, 4098
    %18:gpr64all = COPY %177
    %298:gpr64 = UBFMXri %84, 61, 60
    %299:gpr64 = ADDXrr %3, %298
    %85:gpr64all = COPY %299
    %300:gpr64 = ADDXrr %2, %298
    %86:gpr64all = COPY %300
    %87:gpr64all = COPY %18
  
  bb.23.for.body9.epil.2:
    successors: %bb.23(0x7c000000), %bb.24(0x04000000)
  
    %88:gpr64sp = PHI %86, %bb.22, %94, %bb.23
    %89:gpr64sp = PHI %85, %bb.22, %93, %bb.23
    %90:fpr64 = PHI %83, %bb.22, %92, %bb.23
    %91:gpr64sp = PHI %87, %bb.22, %95, %bb.23
    early-clobber %301:gpr64sp, %302:fpr64 = LDRDpost %88, 8 :: (load (s64) from %ir.lsr.iv176, !tbaa !6)
    %92:fpr64 = nofpexcept FMADDDrrr %90, %90, killed %302
    early-clobber %303:gpr64sp = STRDpost %92, %89, 8 :: (store (s64) into %ir.lsr.iv171, !tbaa !6)
    %93:gpr64all = COPY %303
    %94:gpr64all = COPY %301
    %304:gpr64 = SUBSXri %91, 1, 0, implicit-def $nzcv
    %95:gpr64all = COPY %304
    Bcc 1, %bb.23, implicit $nzcv
    B %bb.24
  
  bb.24.for.cond.cleanup8.2:
    successors: %bb.5(0x04000000), %bb.3(0x7c000000)
  
    %305:gpr64sp = nuw nsw ADDXri %17, 3, 0
    %96:gpr64all = COPY %305
    %306:gpr64sp = nuw nsw ADDXri %16, 3, 0
    %97:gpr64all = COPY %306
    %308:gpr64 = SUBREG_TO_REG 0, %157, %subreg.sub_32
    %309:gpr64 = ADDXrr %15, %308
    %98:gpr64all = COPY %309
    %310:gpr64 = ADDXrr %14, %308
    %99:gpr64all = COPY %310
    %311:gpr64 = ADDXrr %13, %308
    %100:gpr64all = COPY %311
    %312:gpr64 = ADDXrr %12, %308
    %101:gpr64all = COPY %312
    %313:gpr64sp = nuw nsw ADDXri %11, 3, 0
    %102:gpr64all = COPY %313
    %314:gpr64 = ADDXrr %10, %308
    %103:gpr64all = COPY %314
    %315:gpr64 = ADDXrr %9, %308
    %104:gpr64all = COPY %315
    %316:gpr64 = ADDXrr %8, %308
    %105:gpr64all = COPY %316
    %317:gpr64 = ADDXrr %7, %308
    %106:gpr64all = COPY %317
    %318:gpr64sp = nuw nsw ADDXri %6, 3, 0
    %107:gpr64all = COPY %318
    %319:gpr64 = ADDXrr %5, %308
    %108:gpr64all = COPY %319
    %320:gpr64 = ADDXrr %4, %308
    %109:gpr64all = COPY %320
    %321:gpr64 = ADDXrr %3, %308
    %110:gpr64all = COPY %321
    %322:gpr64 = ADDXrr %2, %308
    %111:gpr64all = COPY %322
    %323:gpr32sp = ADDWri %1, 1, 0
    %112:gpr32all = COPY %323
    dead $xzr = SUBSXri %305, 256, 0, implicit-def $nzcv
    Bcc 0, %bb.5, implicit $nzcv
    B %bb.3
  
  bb.25.for.body9:
    successors: %bb.25(0x7c000000), %bb.6(0x04000000)
  
    %113:gpr64sp = PHI %14, %bb.4, %121, %bb.25
    %114:gpr64sp = PHI %15, %bb.4, %120, %bb.25
    %115:fpr64 = PHI %24, %bb.4, %118, %bb.25
    %116:gpr64sp = PHI %204, %bb.4, %119, %bb.25
    %117:gpr64sp = PHI %26, %bb.4, %122, %bb.25
    %206:fpr64 = LDURDi %113, -56 :: (load (s64) from %ir.uglygep86, !tbaa !6)
    %207:fpr64 = nofpexcept FMADDDrrr %115, %115, killed %206
    STURDi %207, %114, -56 :: (store (s64) into %ir.uglygep75, !tbaa !6)
    %208:fpr64 = LDURDi %113, -48 :: (load (s64) from %ir.uglygep87, !tbaa !6)
    %209:fpr64 = nofpexcept FMADDDrrr %207, %207, killed %208
    STURDi %209, %114, -48 :: ("aarch64-suppress-pair" store (s64) into %ir.uglygep76, !tbaa !6)
    %210:fpr64 = LDURDi %113, -40 :: (load (s64) from %ir.uglygep89, !tbaa !6)
    %211:fpr64 = nofpexcept FMADDDrrr %209, %209, killed %210
    STURDi %211, %114, -40 :: ("aarch64-suppress-pair" store (s64) into %ir.uglygep78, !tbaa !6)
    %212:fpr64 = LDURDi %113, -32 :: (load (s64) from %ir.uglygep90, !tbaa !6)
    %213:fpr64 = nofpexcept FMADDDrrr %211, %211, killed %212
    STURDi %213, %114, -32 :: ("aarch64-suppress-pair" store (s64) into %ir.uglygep79, !tbaa !6)
    %214:fpr64 = LDURDi %113, -24 :: (load (s64) from %ir.uglygep91, !tbaa !6)
    %215:fpr64 = nofpexcept FMADDDrrr %213, %213, killed %214
    STURDi %215, %114, -24 :: ("aarch64-suppress-pair" store (s64) into %ir.uglygep80, !tbaa !6)
    %216:fpr64 = LDURDi %113, -16 :: (load (s64) from %ir.uglygep92, !tbaa !6)
    %217:fpr64 = nofpexcept FMADDDrrr %215, %215, killed %216
    STURDi %217, %114, -16 :: ("aarch64-suppress-pair" store (s64) into %ir.uglygep81, !tbaa !6)
    %218:fpr64 = LDURDi %113, -8 :: (load (s64) from %ir.uglygep88, !tbaa !6)
    %219:fpr64 = nofpexcept FMADDDrrr %217, %217, killed %218
    STURDi %219, %114, -8 :: ("aarch64-suppress-pair" store (s64) into %ir.uglygep77, !tbaa !6)
    %220:fpr64 = LDRDui %113, 0 :: (load (s64) from %ir.lsr.iv84, !tbaa !6)
    %118:fpr64 = nofpexcept FMADDDrrr %219, %219, killed %220
    STRDui %118, %114, 0 :: ("aarch64-suppress-pair" store (s64) into %ir.lsr.iv73, !tbaa !6)
    %221:gpr64sp = nuw ADDXri %116, 8, 0
    %119:gpr64sp = COPY %221
    %222:gpr64sp = ADDXri %114, 64, 0
    %120:gpr64all = COPY %222
    %223:gpr64sp = ADDXri %113, 64, 0
    %121:gpr64all = COPY %223
    %224:gpr64 = SUBSXri %117, 1, 0, implicit-def $nzcv
    %122:gpr64all = COPY %224
    Bcc 1, %bb.25, implicit $nzcv
    B %bb.6

...
