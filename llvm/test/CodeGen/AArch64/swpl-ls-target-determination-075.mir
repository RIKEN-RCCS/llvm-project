# RUN: llc %s -fls -mcpu=a64fx -start-before=aarch64-swpipeliner -pass-remarks=aarch64-swpipeliner -pass-remarks-missed=aarch64-swpipeliner -o /dev/null 2>&1 | FileCheck %s
# CHECK-NOT: cannot be software pipelined
# CHECK: remark: <unknown>:0:0: This loop cannot be local scheduled because the shape of the loop is not covered.
# CHECK-NOT: softwere pipelining
# CHECK-NOT: local scheduling 
--- |
  ; ModuleID = 'test.029.base.ll'
  source_filename = "2912_step_n.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  @b = dso_local local_unnamed_addr global [100 x double] zeroinitializer, align 8
  @c = dso_local local_unnamed_addr global [100 x double] zeroinitializer, align 8
  @a = dso_local local_unnamed_addr global [100 x double] zeroinitializer, align 8
  
  ; Function Attrs: nofree norecurse nounwind
  define dso_local void @test(i32 %n, i32 %k) local_unnamed_addr #0 {
  entry:
    %cmp11 = icmp sgt i32 %n, 0
    br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup
  
  for.body.preheader:                               ; preds = %entry
    %0 = sext i32 %k to i64
    %1 = zext i32 %n to i64
    br label %for.body
  
  for.cond.cleanup:                                 ; preds = %for.body, %entry
    ret void
  
  for.body:                                         ; preds = %for.body, %for.body.preheader
    %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
    %scevgep2 = getelementptr [100 x double], [100 x double]* @b, i64 0, i64 %indvars.iv
    %2 = load double, double* %scevgep2, align 8, !tbaa !2
    %scevgep1 = getelementptr [100 x double], [100 x double]* @c, i64 0, i64 %indvars.iv
    %3 = load double, double* %scevgep1, align 8, !tbaa !2
    %add = fadd fast double %3, %2
    %scevgep = getelementptr [100 x double], [100 x double]* @a, i64 0, i64 %indvars.iv
    store double %add, double* %scevgep, align 8, !tbaa !2
    %indvars.iv.next = add i64 %indvars.iv, %0
    %cmp = icmp slt i64 %indvars.iv.next, %1
    br i1 %cmp, label %for.body, label %for.cond.cleanup
  }
  
  attributes #0 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="non-leaf" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+neon" "unsafe-fp-math"="true" "use-soft-float"="false" }
  
  !llvm.module.flags = !{!0}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !2 = !{!3, !3, i64 0}
  !3 = !{!"double", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}

...
---
name:            test
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: gpr64, preferred-register: '' }
  - { id: 1, class: gpr64, preferred-register: '' }
  - { id: 2, class: gpr64, preferred-register: '' }
  - { id: 3, class: gpr64all, preferred-register: '' }
  - { id: 4, class: gpr32common, preferred-register: '' }
  - { id: 5, class: gpr32, preferred-register: '' }
  - { id: 6, class: gpr32, preferred-register: '' }
  - { id: 7, class: gpr64all, preferred-register: '' }
  - { id: 8, class: gpr64, preferred-register: '' }
  - { id: 9, class: gpr64all, preferred-register: '' }
  - { id: 10, class: gpr64, preferred-register: '' }
  - { id: 11, class: gpr32, preferred-register: '' }
  - { id: 12, class: gpr64all, preferred-register: '' }
  - { id: 13, class: gpr64, preferred-register: '' }
  - { id: 14, class: gpr64common, preferred-register: '' }
  - { id: 15, class: fpr64, preferred-register: '' }
  - { id: 16, class: gpr64common, preferred-register: '' }
  - { id: 17, class: fpr64, preferred-register: '' }
  - { id: 18, class: fpr64, preferred-register: '' }
  - { id: 19, class: gpr64common, preferred-register: '' }
  - { id: 20, class: gpr64, preferred-register: '' }
  - { id: 21, class: gpr64, preferred-register: '' }
liveins:
  - { reg: '$w0', virtual-reg: '%4' }
  - { reg: '$w1', virtual-reg: '%5' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x50000000), %bb.2(0x30000000)
    liveins: $w0, $w1
  
    %5:gpr32 = COPY $w1
    %4:gpr32common = COPY $w0
    dead $wzr = SUBSWri %4, 1, 0, implicit-def $nzcv
    Bcc 11, %bb.2, implicit $nzcv
    B %bb.1
  
  bb.1.for.body.preheader:
    successors: %bb.3(0x80000000)
  
    %9:gpr64all = IMPLICIT_DEF
    %8:gpr64 = INSERT_SUBREG %9, %5, %subreg.sub_32
    %10:gpr64 = SBFMXri killed %8, 0, 31
    %11:gpr32 = ORRWrs $wzr, %4, 0
    %1:gpr64 = SUBREG_TO_REG 0, killed %11, %subreg.sub_32
    %12:gpr64all = COPY $xzr
    %7:gpr64all = COPY %12
    %14:gpr64common = MOVaddr target-flags(aarch64-page) @b, target-flags(aarch64-pageoff, aarch64-nc) @b
    %16:gpr64common = MOVaddr target-flags(aarch64-page) @c, target-flags(aarch64-pageoff, aarch64-nc) @c
    %19:gpr64common = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a
    B %bb.3
  
  bb.2.for.cond.cleanup:
    RET_ReallyLR
  
  bb.3.for.body:
    successors: %bb.3(0x7c000000), %bb.2(0x04000000)
  
    %2:gpr64 = PHI %7, %bb.1, %3, %bb.3
    %13:gpr64 = UBFMXri %2, 61, 60
    %15:fpr64 = LDRDroX %14, %13, 0, 0 :: (load 8 from %ir.scevgep2, !tbaa !2)
    %17:fpr64 = LDRDroX %16, %13, 0, 0 :: (load 8 from %ir.scevgep1, !tbaa !2)
    %18:fpr64 = nnan ninf nsz arcp contract afn reassoc FADDDrr killed %17, killed %15, implicit $fpcr
    STRDroX killed %18, %19, %13, 0, 0 :: (store 8 into %ir.scevgep, !tbaa !2)
    %20:gpr64 = ADDXrr %2, %10
    %3:gpr64all = COPY %20
    dead $xzr = ADDSXrr %20, %1, implicit-def $nzcv
    Bcc 0, %bb.3, implicit $nzcv
    B %bb.2

...
