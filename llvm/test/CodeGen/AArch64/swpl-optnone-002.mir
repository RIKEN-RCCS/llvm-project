# RUN: llc -o /dev/null -mcpu=a64fx -fswp  -swpl-debug -start-before=aarch64-swpipeliner  %s 2>&1 | FileCheck %s

# CHECK: (Iterative Modulo Scheduling. 

--- |
  ; ModuleID = 'b.cpp'
  source_filename = "b.cpp"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  @.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
  
  ; Function Attrs: mustprogress norecurse uwtable vscale_range(4,4)
  define dso_local noundef i32 @main(i32 noundef %argc, ptr nocapture noundef readonly %argv) local_unnamed_addr #0 {
  entry:
    %cmp6 = icmp sgt i32 %argc, 0
    br i1 %cmp6, label %for.body.lr.ph, label %for.cond.cleanup
  
  for.body.lr.ph:                                   ; preds = %entry
    %0 = load ptr, ptr %argv, align 8, !tbaa !6
    %1 = load i8, ptr %0, align 1, !tbaa !10
    %conv = zext i8 %1 to i32
    %2 = add i32 %argc, -1
    %3 = zext i32 %2 to i64
    %4 = add nuw nsw i64 %3, 1
    %5 = call i64 @llvm.start.loop.iterations.i64(i64 %4)
    br label %for.body
  
  for.cond.cleanup.loopexit:                        ; preds = %for.body
    %6 = mul i32 %conv, %sum.07
    %7 = add i32 %6, %inc
    %8 = add i32 %7, -1
    br label %for.cond.cleanup
  
  for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
    %sum.0.lcssa = phi i32 [ 0, %entry ], [ %8, %for.cond.cleanup.loopexit ]
    %call = tail call noundef i32 (ptr, ...) @_Z6printfPKcz(ptr noundef nonnull @.str, i32 noundef %sum.0.lcssa)
    ret i32 0
  
  for.body:                                         ; preds = %for.body.lr.ph, %for.body
    %i.08 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
    %sum.07 = phi i32 [ 0, %for.body.lr.ph ], [ %10, %for.body ]
    %9 = phi i64 [ %5, %for.body.lr.ph ], [ %11, %for.body ]
    %mul = mul i32 %sum.07, %conv
    %10 = add i32 %i.08, %mul
    %inc = add nuw nsw i32 %i.08, 1
    %11 = call i64 @llvm.loop.decrement.reg.i64(i64 %9, i64 1)
    %12 = icmp ne i64 %11, 0
    br i1 %12, label %for.body, label %for.cond.cleanup.loopexit, !llvm.loop !11
  }
  
  declare noundef i32 @_Z6printfPKcz(ptr noundef, ...) local_unnamed_addr #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #2
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #2
  
  attributes #0 = { mustprogress norecurse uwtable vscale_range(4,4) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #1 = { "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #2 = { nocallback noduplicate nofree nosync nounwind willreturn }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !5 = !{!"clang version 17.0.3 ()"}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"any pointer", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C++ TBAA"}
  !10 = !{!8, !8, i64 0}
  !11 = distinct !{!11, !12, !13}
  !12 = !{!"llvm.loop.mustprogress"}
  !13 = !{!"llvm.loop.unroll.disable"}

...
---
name:            main
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32, preferred-register: '' }
  - { id: 1, class: gpr64all, preferred-register: '' }
  - { id: 2, class: gpr32all, preferred-register: '' }
  - { id: 3, class: gpr32all, preferred-register: '' }
  - { id: 4, class: gpr32common, preferred-register: '' }
  - { id: 5, class: gpr32, preferred-register: '' }
  - { id: 6, class: gpr64sp, preferred-register: '' }
  - { id: 7, class: gpr32all, preferred-register: '' }
  - { id: 8, class: gpr32, preferred-register: '' }
  - { id: 9, class: gpr64all, preferred-register: '' }
  - { id: 10, class: gpr32common, preferred-register: '' }
  - { id: 11, class: gpr64common, preferred-register: '' }
  - { id: 12, class: gpr32all, preferred-register: '' }
  - { id: 13, class: gpr32all, preferred-register: '' }
  - { id: 14, class: gpr32, preferred-register: '' }
  - { id: 15, class: gpr32all, preferred-register: '' }
  - { id: 16, class: gpr64common, preferred-register: '' }
  - { id: 17, class: gpr32, preferred-register: '' }
  - { id: 18, class: gpr32, preferred-register: '' }
  - { id: 19, class: gpr32, preferred-register: '' }
  - { id: 20, class: gpr64sp, preferred-register: '' }
  - { id: 21, class: gpr64sp, preferred-register: '' }
  - { id: 22, class: gpr32all, preferred-register: '' }
  - { id: 23, class: gpr32, preferred-register: '' }
  - { id: 24, class: gpr32, preferred-register: '' }
  - { id: 25, class: gpr32common, preferred-register: '' }
  - { id: 26, class: gpr64, preferred-register: '' }
  - { id: 27, class: gpr32, preferred-register: '' }
  - { id: 28, class: gpr32common, preferred-register: '' }
  - { id: 29, class: gpr32common, preferred-register: '' }
  - { id: 30, class: gpr64common, preferred-register: '' }
  - { id: 31, class: gpr32all, preferred-register: '' }
  - { id: 32, class: gpr32all, preferred-register: '' }
liveins:
  - { reg: '$w0', virtual-reg: '%10' }
  - { reg: '$x1', virtual-reg: '%11' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x50000000), %bb.5(0x30000000)
    liveins: $w0, $x1
  
    %11:gpr64common = COPY $x1
    %10:gpr32common = COPY $w0
    %14:gpr32 = SUBSWri %10, 1, 0, implicit-def $nzcv
    Bcc 10, %bb.1, implicit $nzcv
  
  bb.5:
    successors: %bb.3(0x80000000)
  
    %13:gpr32all = COPY $wzr
    %12:gpr32all = COPY %13
    B %bb.3
  
  bb.1.for.body.lr.ph:
    successors: %bb.4(0x80000000)
  
    %16:gpr64common = LDRXui %11, 0 :: (load (s64) from %ir.argv, !tbaa !6)
    %17:gpr32 = LDRBBui killed %16, 0 :: (load (s8) from %ir.0, !tbaa !10)
    %20:gpr64sp = SUBREG_TO_REG 0, %14, %subreg.sub_32
    %21:gpr64sp = nuw nsw ADDXri killed %20, 1, 0
    %22:gpr32all = COPY $wzr
    %15:gpr32all = COPY %22
    %1:gpr64all = COPY %21
    B %bb.4
  
  bb.2.for.cond.cleanup.loopexit:
    successors: %bb.3(0x80000000)
  
    %28:gpr32common = MADDWrrr %17, %5, %25
    %29:gpr32common = SUBWri killed %28, 1, 0
    %2:gpr32all = COPY %29
  
  bb.3.for.cond.cleanup:
    %3:gpr32all = PHI %12, %bb.5, %2, %bb.2
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %30:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
    $x0 = COPY %30
    $w1 = COPY %3
    BL @_Z6printfPKcz, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %32:gpr32all = COPY $wzr
    $w0 = COPY %32
    RET_ReallyLR implicit $w0
  
  bb.4.for.body:
    successors: %bb.4(0x7c000000), %bb.2(0x04000000)
  
    %4:gpr32common = PHI %15, %bb.1, %8, %bb.4
    %5:gpr32 = PHI %15, %bb.1, %7, %bb.4
    %6:gpr64sp = PHI %1, %bb.1, %9, %bb.4
    %24:gpr32 = MADDWrrr %5, %17, %4
    %7:gpr32all = COPY %24
    %25:gpr32common = nuw nsw ADDWri %4, 1, 0
    %8:gpr32 = COPY %25
    %26:gpr64 = SUBSXri %6, 1, 0, implicit-def $nzcv
    %9:gpr64all = COPY %26
    Bcc 1, %bb.4, implicit $nzcv
    B %bb.2

...
