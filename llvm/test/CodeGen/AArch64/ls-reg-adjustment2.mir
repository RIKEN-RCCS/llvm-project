#RUN: llc %s -mcpu=a64fx -fswp -fls -ls-reg-adjustment -pass-remarks=aarch64-swpipeliner -pass-remarks-missed=aarch64-swpipeliner -pass-remarks-analysis=aarch64-swpipeliner -o /dev/null 2>&1 | FileCheck %s
#CHECK: remark: <unknown>:0:0: SVE instruction latency is calculated at 512bit.
#CHECK-NEXT: remark: regadj.c:19:9: Trial at iteration-interval=999. This loop cannot be software pipelined because of shortage of integer registers.
#CHECK-NEXT: remark: regadj.c:19:9: Adding 8 dependencies as a result of adjusting registers.
#CHECK-NEXT: remark: regadj.c:19:9: local scheduling

--- |
  ; ModuleID = 'regadj.c'
  source_filename = "regadj.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  @b = external local_unnamed_addr global [32000 x double], align 64
  @a = external local_unnamed_addr global [32000 x double], align 64
  
  ; Function Attrs: nofree norecurse nosync nounwind memory(readwrite, argmem: none, inaccessiblemem: none) uwtable vscale_range(4,4)
  define dso_local void @s() local_unnamed_addr #0 !dbg !9 {
  entry:
    br label %vector.ph, !dbg !12
  
  vector.ph:                                        ; preds = %for.cond.cleanup3, %entry
    %nl.015 = phi i32 [ 0, %entry ], [ %inc8, %for.cond.cleanup3 ]
    %0 = call i64 @llvm.start.loop.iterations.i64(i64 100), !dbg !13
    br label %vector.body, !dbg !13
  
  vector.body:                                      ; preds = %vector.body, %vector.ph
    %lsr.iv = phi i64 [ %lsr.iv.next, %vector.body ], [ 0, %vector.ph ]
    %1 = phi i64 [ %0, %vector.ph ], [ %42, %vector.body ], !dbg !14
    %scevgep30 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep31 = getelementptr i8, ptr %scevgep30, i64 4864, !dbg !14
    %scevgep32 = getelementptr i8, ptr %scevgep30, i64 4608, !dbg !14
    %scevgep35 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep36 = getelementptr i8, ptr %scevgep35, i64 4352, !dbg !14
    %scevgep37 = getelementptr i8, ptr %scevgep35, i64 4096, !dbg !14
    %scevgep38 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep39 = getelementptr i8, ptr %scevgep38, i64 3840, !dbg !14
    %scevgep40 = getelementptr i8, ptr %scevgep38, i64 3584, !dbg !14
    %scevgep41 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep42 = getelementptr i8, ptr %scevgep41, i64 3328, !dbg !14
    %scevgep43 = getelementptr i8, ptr %scevgep41, i64 3072, !dbg !14
    %scevgep44 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep45 = getelementptr i8, ptr %scevgep44, i64 2816, !dbg !14
    %scevgep46 = getelementptr i8, ptr %scevgep44, i64 2560, !dbg !14
    %scevgep191 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    call void @llvm.prefetch.p0(ptr %scevgep46, i32 0, i32 3, i32 1), !dbg !14
    %wide.load = load <vscale x 2 x double>, ptr %scevgep191, align 64, !dbg !14, !tbaa !15
    %scevgep195 = getelementptr i8, ptr %scevgep191, i64 64, !dbg !14
    %wide.load18 = load <vscale x 2 x double>, ptr %scevgep195, align 64, !dbg !14, !tbaa !15
    %scevgep194 = getelementptr i8, ptr %scevgep191, i64 128, !dbg !14
    %wide.load19 = load <vscale x 2 x double>, ptr %scevgep194, align 64, !dbg !14, !tbaa !15
    %scevgep192 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep193 = getelementptr i8, ptr %scevgep192, i64 192, !dbg !14
    %wide.load20 = load <vscale x 2 x double>, ptr %scevgep193, align 64, !dbg !14, !tbaa !15
    %2 = fadd fast <vscale x 2 x double> %wide.load, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %3 = fadd fast <vscale x 2 x double> %wide.load18, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %4 = fadd fast <vscale x 2 x double> %wide.load19, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %5 = fadd fast <vscale x 2 x double> %wide.load20, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %scevgep196 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    store <vscale x 2 x double> %2, ptr %scevgep196, align 64, !dbg !20, !tbaa !15
    %scevgep33 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep34 = getelementptr i8, ptr %scevgep33, i64 64, !dbg !20
    store <vscale x 2 x double> %3, ptr %scevgep34, align 64, !dbg !20, !tbaa !15
    %scevgep198 = getelementptr i8, ptr %scevgep33, i64 128, !dbg !20
    store <vscale x 2 x double> %4, ptr %scevgep198, align 64, !dbg !20, !tbaa !15
    %scevgep197 = getelementptr i8, ptr %scevgep33, i64 192, !dbg !20
    store <vscale x 2 x double> %5, ptr %scevgep197, align 64, !dbg !20, !tbaa !15
    %scevgep53 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep54 = getelementptr i8, ptr %scevgep53, i64 256, !dbg !14
    call void @llvm.prefetch.p0(ptr %scevgep45, i32 0, i32 3, i32 1), !dbg !14
    %wide.load.1 = load <vscale x 2 x double>, ptr %scevgep54, align 64, !dbg !14, !tbaa !15
    %scevgep51 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep52 = getelementptr i8, ptr %scevgep51, i64 320, !dbg !14
    %wide.load18.1 = load <vscale x 2 x double>, ptr %scevgep52, align 64, !dbg !14, !tbaa !15
    %scevgep49 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep50 = getelementptr i8, ptr %scevgep49, i64 384, !dbg !14
    %wide.load19.1 = load <vscale x 2 x double>, ptr %scevgep50, align 64, !dbg !14, !tbaa !15
    %scevgep47 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep48 = getelementptr i8, ptr %scevgep47, i64 448, !dbg !14
    %wide.load20.1 = load <vscale x 2 x double>, ptr %scevgep48, align 64, !dbg !14, !tbaa !15
    %6 = fadd fast <vscale x 2 x double> %wide.load.1, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %7 = fadd fast <vscale x 2 x double> %wide.load18.1, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %8 = fadd fast <vscale x 2 x double> %wide.load19.1, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %9 = fadd fast <vscale x 2 x double> %wide.load20.1, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %scevgep61 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep62 = getelementptr i8, ptr %scevgep61, i64 256, !dbg !20
    store <vscale x 2 x double> %6, ptr %scevgep62, align 64, !dbg !20, !tbaa !15
    %scevgep59 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep60 = getelementptr i8, ptr %scevgep59, i64 320, !dbg !20
    store <vscale x 2 x double> %7, ptr %scevgep60, align 64, !dbg !20, !tbaa !15
    %scevgep57 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep58 = getelementptr i8, ptr %scevgep57, i64 384, !dbg !20
    store <vscale x 2 x double> %8, ptr %scevgep58, align 64, !dbg !20, !tbaa !15
    %scevgep55 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep56 = getelementptr i8, ptr %scevgep55, i64 448, !dbg !20
    store <vscale x 2 x double> %9, ptr %scevgep56, align 64, !dbg !20, !tbaa !15
    %scevgep189 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep190 = getelementptr i8, ptr %scevgep189, i64 512, !dbg !14
    call void @llvm.prefetch.p0(ptr %scevgep43, i32 0, i32 3, i32 1), !dbg !14
    %wide.load.2 = load <vscale x 2 x double>, ptr %scevgep190, align 64, !dbg !14, !tbaa !15
    %scevgep187 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep188 = getelementptr i8, ptr %scevgep187, i64 576, !dbg !14
    %wide.load18.2 = load <vscale x 2 x double>, ptr %scevgep188, align 64, !dbg !14, !tbaa !15
    %scevgep185 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep186 = getelementptr i8, ptr %scevgep185, i64 640, !dbg !14
    %wide.load19.2 = load <vscale x 2 x double>, ptr %scevgep186, align 64, !dbg !14, !tbaa !15
    %scevgep183 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep184 = getelementptr i8, ptr %scevgep183, i64 704, !dbg !14
    %wide.load20.2 = load <vscale x 2 x double>, ptr %scevgep184, align 64, !dbg !14, !tbaa !15
    %10 = fadd fast <vscale x 2 x double> %wide.load.2, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %11 = fadd fast <vscale x 2 x double> %wide.load18.2, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %12 = fadd fast <vscale x 2 x double> %wide.load19.2, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %13 = fadd fast <vscale x 2 x double> %wide.load20.2, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %scevgep181 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep182 = getelementptr i8, ptr %scevgep181, i64 512, !dbg !20
    store <vscale x 2 x double> %10, ptr %scevgep182, align 64, !dbg !20, !tbaa !15
    %scevgep179 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep180 = getelementptr i8, ptr %scevgep179, i64 576, !dbg !20
    store <vscale x 2 x double> %11, ptr %scevgep180, align 64, !dbg !20, !tbaa !15
    %scevgep177 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep178 = getelementptr i8, ptr %scevgep177, i64 640, !dbg !20
    store <vscale x 2 x double> %12, ptr %scevgep178, align 64, !dbg !20, !tbaa !15
    %scevgep175 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep176 = getelementptr i8, ptr %scevgep175, i64 704, !dbg !20
    store <vscale x 2 x double> %13, ptr %scevgep176, align 64, !dbg !20, !tbaa !15
    %scevgep173 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep174 = getelementptr i8, ptr %scevgep173, i64 768, !dbg !14
    call void @llvm.prefetch.p0(ptr %scevgep42, i32 0, i32 3, i32 1), !dbg !14
    %wide.load.3 = load <vscale x 2 x double>, ptr %scevgep174, align 64, !dbg !14, !tbaa !15
    %scevgep171 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep172 = getelementptr i8, ptr %scevgep171, i64 832, !dbg !14
    %wide.load18.3 = load <vscale x 2 x double>, ptr %scevgep172, align 64, !dbg !14, !tbaa !15
    %scevgep169 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep170 = getelementptr i8, ptr %scevgep169, i64 896, !dbg !14
    %wide.load19.3 = load <vscale x 2 x double>, ptr %scevgep170, align 64, !dbg !14, !tbaa !15
    %scevgep167 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep168 = getelementptr i8, ptr %scevgep167, i64 960, !dbg !14
    %wide.load20.3 = load <vscale x 2 x double>, ptr %scevgep168, align 64, !dbg !14, !tbaa !15
    %14 = fadd fast <vscale x 2 x double> %wide.load.3, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %15 = fadd fast <vscale x 2 x double> %wide.load18.3, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %16 = fadd fast <vscale x 2 x double> %wide.load19.3, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %17 = fadd fast <vscale x 2 x double> %wide.load20.3, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %scevgep165 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep166 = getelementptr i8, ptr %scevgep165, i64 768, !dbg !20
    store <vscale x 2 x double> %14, ptr %scevgep166, align 64, !dbg !20, !tbaa !15
    %scevgep163 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep164 = getelementptr i8, ptr %scevgep163, i64 832, !dbg !20
    store <vscale x 2 x double> %15, ptr %scevgep164, align 64, !dbg !20, !tbaa !15
    %scevgep161 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep162 = getelementptr i8, ptr %scevgep161, i64 896, !dbg !20
    store <vscale x 2 x double> %16, ptr %scevgep162, align 64, !dbg !20, !tbaa !15
    %scevgep159 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep160 = getelementptr i8, ptr %scevgep159, i64 960, !dbg !20
    store <vscale x 2 x double> %17, ptr %scevgep160, align 64, !dbg !20, !tbaa !15
    %scevgep157 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep158 = getelementptr i8, ptr %scevgep157, i64 1024, !dbg !14
    call void @llvm.prefetch.p0(ptr %scevgep40, i32 0, i32 3, i32 1), !dbg !14
    %wide.load.4 = load <vscale x 2 x double>, ptr %scevgep158, align 64, !dbg !14, !tbaa !15
    %scevgep155 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep156 = getelementptr i8, ptr %scevgep155, i64 1088, !dbg !14
    %wide.load18.4 = load <vscale x 2 x double>, ptr %scevgep156, align 64, !dbg !14, !tbaa !15
    %scevgep153 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep154 = getelementptr i8, ptr %scevgep153, i64 1152, !dbg !14
    %wide.load19.4 = load <vscale x 2 x double>, ptr %scevgep154, align 64, !dbg !14, !tbaa !15
    %scevgep151 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep152 = getelementptr i8, ptr %scevgep151, i64 1216, !dbg !14
    %wide.load20.4 = load <vscale x 2 x double>, ptr %scevgep152, align 64, !dbg !14, !tbaa !15
    %18 = fadd fast <vscale x 2 x double> %wide.load.4, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %19 = fadd fast <vscale x 2 x double> %wide.load18.4, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %20 = fadd fast <vscale x 2 x double> %wide.load19.4, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %21 = fadd fast <vscale x 2 x double> %wide.load20.4, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %scevgep149 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep150 = getelementptr i8, ptr %scevgep149, i64 1024, !dbg !20
    store <vscale x 2 x double> %18, ptr %scevgep150, align 64, !dbg !20, !tbaa !15
    %scevgep147 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep148 = getelementptr i8, ptr %scevgep147, i64 1088, !dbg !20
    store <vscale x 2 x double> %19, ptr %scevgep148, align 64, !dbg !20, !tbaa !15
    %scevgep145 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep146 = getelementptr i8, ptr %scevgep145, i64 1152, !dbg !20
    store <vscale x 2 x double> %20, ptr %scevgep146, align 64, !dbg !20, !tbaa !15
    %scevgep143 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep144 = getelementptr i8, ptr %scevgep143, i64 1216, !dbg !20
    store <vscale x 2 x double> %21, ptr %scevgep144, align 64, !dbg !20, !tbaa !15
    %scevgep141 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep142 = getelementptr i8, ptr %scevgep141, i64 1280, !dbg !14
    call void @llvm.prefetch.p0(ptr %scevgep39, i32 0, i32 3, i32 1), !dbg !14
    %wide.load.5 = load <vscale x 2 x double>, ptr %scevgep142, align 64, !dbg !14, !tbaa !15
    %scevgep139 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep140 = getelementptr i8, ptr %scevgep139, i64 1344, !dbg !14
    %wide.load18.5 = load <vscale x 2 x double>, ptr %scevgep140, align 64, !dbg !14, !tbaa !15
    %scevgep137 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep138 = getelementptr i8, ptr %scevgep137, i64 1408, !dbg !14
    %wide.load19.5 = load <vscale x 2 x double>, ptr %scevgep138, align 64, !dbg !14, !tbaa !15
    %scevgep135 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep136 = getelementptr i8, ptr %scevgep135, i64 1472, !dbg !14
    %wide.load20.5 = load <vscale x 2 x double>, ptr %scevgep136, align 64, !dbg !14, !tbaa !15
    %22 = fadd fast <vscale x 2 x double> %wide.load.5, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %23 = fadd fast <vscale x 2 x double> %wide.load18.5, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %24 = fadd fast <vscale x 2 x double> %wide.load19.5, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %25 = fadd fast <vscale x 2 x double> %wide.load20.5, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %scevgep133 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep134 = getelementptr i8, ptr %scevgep133, i64 1280, !dbg !20
    store <vscale x 2 x double> %22, ptr %scevgep134, align 64, !dbg !20, !tbaa !15
    %scevgep131 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep132 = getelementptr i8, ptr %scevgep131, i64 1344, !dbg !20
    store <vscale x 2 x double> %23, ptr %scevgep132, align 64, !dbg !20, !tbaa !15
    %scevgep129 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep130 = getelementptr i8, ptr %scevgep129, i64 1408, !dbg !20
    store <vscale x 2 x double> %24, ptr %scevgep130, align 64, !dbg !20, !tbaa !15
    %scevgep127 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep128 = getelementptr i8, ptr %scevgep127, i64 1472, !dbg !20
    store <vscale x 2 x double> %25, ptr %scevgep128, align 64, !dbg !20, !tbaa !15
    %scevgep125 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep126 = getelementptr i8, ptr %scevgep125, i64 1536, !dbg !14
    call void @llvm.prefetch.p0(ptr %scevgep37, i32 0, i32 3, i32 1), !dbg !14
    %wide.load.6 = load <vscale x 2 x double>, ptr %scevgep126, align 64, !dbg !14, !tbaa !15
    %scevgep123 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep124 = getelementptr i8, ptr %scevgep123, i64 1600, !dbg !14
    %wide.load18.6 = load <vscale x 2 x double>, ptr %scevgep124, align 64, !dbg !14, !tbaa !15
    %scevgep121 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep122 = getelementptr i8, ptr %scevgep121, i64 1664, !dbg !14
    %wide.load19.6 = load <vscale x 2 x double>, ptr %scevgep122, align 64, !dbg !14, !tbaa !15
    %scevgep119 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep120 = getelementptr i8, ptr %scevgep119, i64 1728, !dbg !14
    %wide.load20.6 = load <vscale x 2 x double>, ptr %scevgep120, align 64, !dbg !14, !tbaa !15
    %26 = fadd fast <vscale x 2 x double> %wide.load.6, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %27 = fadd fast <vscale x 2 x double> %wide.load18.6, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %28 = fadd fast <vscale x 2 x double> %wide.load19.6, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %29 = fadd fast <vscale x 2 x double> %wide.load20.6, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %scevgep117 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep118 = getelementptr i8, ptr %scevgep117, i64 1536, !dbg !20
    store <vscale x 2 x double> %26, ptr %scevgep118, align 64, !dbg !20, !tbaa !15
    %scevgep115 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep116 = getelementptr i8, ptr %scevgep115, i64 1600, !dbg !20
    store <vscale x 2 x double> %27, ptr %scevgep116, align 64, !dbg !20, !tbaa !15
    %scevgep113 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep114 = getelementptr i8, ptr %scevgep113, i64 1664, !dbg !20
    store <vscale x 2 x double> %28, ptr %scevgep114, align 64, !dbg !20, !tbaa !15
    %scevgep111 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep112 = getelementptr i8, ptr %scevgep111, i64 1728, !dbg !20
    store <vscale x 2 x double> %29, ptr %scevgep112, align 64, !dbg !20, !tbaa !15
    %scevgep109 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep110 = getelementptr i8, ptr %scevgep109, i64 1792, !dbg !14
    call void @llvm.prefetch.p0(ptr %scevgep36, i32 0, i32 3, i32 1), !dbg !14
    %wide.load.7 = load <vscale x 2 x double>, ptr %scevgep110, align 64, !dbg !14, !tbaa !15
    %scevgep107 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep108 = getelementptr i8, ptr %scevgep107, i64 1856, !dbg !14
    %wide.load18.7 = load <vscale x 2 x double>, ptr %scevgep108, align 64, !dbg !14, !tbaa !15
    %scevgep105 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep106 = getelementptr i8, ptr %scevgep105, i64 1920, !dbg !14
    %wide.load19.7 = load <vscale x 2 x double>, ptr %scevgep106, align 64, !dbg !14, !tbaa !15
    %scevgep103 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep104 = getelementptr i8, ptr %scevgep103, i64 1984, !dbg !14
    %wide.load20.7 = load <vscale x 2 x double>, ptr %scevgep104, align 64, !dbg !14, !tbaa !15
    %30 = fadd fast <vscale x 2 x double> %wide.load.7, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %31 = fadd fast <vscale x 2 x double> %wide.load18.7, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %32 = fadd fast <vscale x 2 x double> %wide.load19.7, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %33 = fadd fast <vscale x 2 x double> %wide.load20.7, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %scevgep101 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep102 = getelementptr i8, ptr %scevgep101, i64 1792, !dbg !20
    store <vscale x 2 x double> %30, ptr %scevgep102, align 64, !dbg !20, !tbaa !15
    %scevgep99 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep100 = getelementptr i8, ptr %scevgep99, i64 1856, !dbg !20
    store <vscale x 2 x double> %31, ptr %scevgep100, align 64, !dbg !20, !tbaa !15
    %scevgep97 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep98 = getelementptr i8, ptr %scevgep97, i64 1920, !dbg !20
    store <vscale x 2 x double> %32, ptr %scevgep98, align 64, !dbg !20, !tbaa !15
    %scevgep95 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep96 = getelementptr i8, ptr %scevgep95, i64 1984, !dbg !20
    store <vscale x 2 x double> %33, ptr %scevgep96, align 64, !dbg !20, !tbaa !15
    %scevgep93 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep94 = getelementptr i8, ptr %scevgep93, i64 2048, !dbg !14
    call void @llvm.prefetch.p0(ptr %scevgep32, i32 0, i32 3, i32 1), !dbg !14
    %wide.load.8 = load <vscale x 2 x double>, ptr %scevgep94, align 64, !dbg !14, !tbaa !15
    %scevgep91 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep92 = getelementptr i8, ptr %scevgep91, i64 2112, !dbg !14
    %wide.load18.8 = load <vscale x 2 x double>, ptr %scevgep92, align 64, !dbg !14, !tbaa !15
    %scevgep89 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep90 = getelementptr i8, ptr %scevgep89, i64 2176, !dbg !14
    %wide.load19.8 = load <vscale x 2 x double>, ptr %scevgep90, align 64, !dbg !14, !tbaa !15
    %scevgep87 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep88 = getelementptr i8, ptr %scevgep87, i64 2240, !dbg !14
    %wide.load20.8 = load <vscale x 2 x double>, ptr %scevgep88, align 64, !dbg !14, !tbaa !15
    %34 = fadd fast <vscale x 2 x double> %wide.load.8, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %35 = fadd fast <vscale x 2 x double> %wide.load18.8, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %36 = fadd fast <vscale x 2 x double> %wide.load19.8, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %37 = fadd fast <vscale x 2 x double> %wide.load20.8, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %scevgep85 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep86 = getelementptr i8, ptr %scevgep85, i64 2048, !dbg !20
    store <vscale x 2 x double> %34, ptr %scevgep86, align 64, !dbg !20, !tbaa !15
    %scevgep83 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep84 = getelementptr i8, ptr %scevgep83, i64 2112, !dbg !20
    store <vscale x 2 x double> %35, ptr %scevgep84, align 64, !dbg !20, !tbaa !15
    %scevgep81 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep82 = getelementptr i8, ptr %scevgep81, i64 2176, !dbg !20
    store <vscale x 2 x double> %36, ptr %scevgep82, align 64, !dbg !20, !tbaa !15
    %scevgep79 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep80 = getelementptr i8, ptr %scevgep79, i64 2240, !dbg !20
    store <vscale x 2 x double> %37, ptr %scevgep80, align 64, !dbg !20, !tbaa !15
    %scevgep77 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep78 = getelementptr i8, ptr %scevgep77, i64 2304, !dbg !14
    call void @llvm.prefetch.p0(ptr %scevgep31, i32 0, i32 3, i32 1), !dbg !14
    %wide.load.9 = load <vscale x 2 x double>, ptr %scevgep78, align 64, !dbg !14, !tbaa !15
    %scevgep75 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep76 = getelementptr i8, ptr %scevgep75, i64 2368, !dbg !14
    %wide.load18.9 = load <vscale x 2 x double>, ptr %scevgep76, align 64, !dbg !14, !tbaa !15
    %scevgep73 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep74 = getelementptr i8, ptr %scevgep73, i64 2432, !dbg !14
    %wide.load19.9 = load <vscale x 2 x double>, ptr %scevgep74, align 64, !dbg !14, !tbaa !15
    %scevgep71 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !14
    %scevgep72 = getelementptr i8, ptr %scevgep71, i64 2496, !dbg !14
    %wide.load20.9 = load <vscale x 2 x double>, ptr %scevgep72, align 64, !dbg !14, !tbaa !15
    %38 = fadd fast <vscale x 2 x double> %wide.load.9, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %39 = fadd fast <vscale x 2 x double> %wide.load18.9, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %40 = fadd fast <vscale x 2 x double> %wide.load19.9, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %41 = fadd fast <vscale x 2 x double> %wide.load20.9, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %scevgep69 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep70 = getelementptr i8, ptr %scevgep69, i64 2304, !dbg !20
    store <vscale x 2 x double> %38, ptr %scevgep70, align 64, !dbg !20, !tbaa !15
    %scevgep67 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep68 = getelementptr i8, ptr %scevgep67, i64 2368, !dbg !20
    store <vscale x 2 x double> %39, ptr %scevgep68, align 64, !dbg !20, !tbaa !15
    %scevgep65 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep66 = getelementptr i8, ptr %scevgep65, i64 2432, !dbg !20
    store <vscale x 2 x double> %40, ptr %scevgep66, align 64, !dbg !20, !tbaa !15
    %scevgep63 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !20
    %scevgep64 = getelementptr i8, ptr %scevgep63, i64 2496, !dbg !20
    store <vscale x 2 x double> %41, ptr %scevgep64, align 64, !dbg !20, !tbaa !15
    %lsr.iv.next = add nuw nsw i64 %lsr.iv, 2560, !dbg !21
    %42 = call i64 @llvm.loop.decrement.reg.i64(i64 %1, i64 1), !dbg !21
    %43 = icmp ne i64 %42, 0, !dbg !21
    br i1 %43, label %vector.body, label %for.cond.cleanup3, !dbg !21, !llvm.loop !22
  
  for.cond.cleanup:                                 ; preds = %for.cond.cleanup3
    ret void, !dbg !27
  
  for.cond.cleanup3:                                ; preds = %vector.body
    %inc8 = add nuw nsw i32 %nl.015, 1, !dbg !28
    %exitcond17.not = icmp eq i32 %inc8, 200000, !dbg !29
    br i1 %exitcond17.not, label %for.cond.cleanup, label %vector.ph, !dbg !12, !llvm.loop !30
  }
  
  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite, inaccessiblemem: readwrite)
  declare void @llvm.prefetch.p0(ptr nocapture readonly, i32 immarg, i32 immarg, i32 immarg) #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #2
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #2
  
  attributes #0 = { nofree norecurse nosync nounwind memory(readwrite, argmem: none, inaccessiblemem: none) uwtable vscale_range(4,4) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #1 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite, inaccessiblemem: readwrite) }
  attributes #2 = { nocallback noduplicate nofree nosync nounwind willreturn }
  
  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!2, !3, !4, !5, !6, !7}
  !llvm.ident = !{!8}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 17.0.6 ()", isOptimized: true, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "regadj.c", directory: "/src")
  !2 = !{i32 2, !"Debug Info Version", i32 3}
  !3 = !{i32 1, !"wchar_size", i32 4}
  !4 = !{i32 8, !"PIC Level", i32 2}
  !5 = !{i32 7, !"PIE Level", i32 2}
  !6 = !{i32 7, !"uwtable", i32 2}
  !7 = !{i32 7, !"frame-pointer", i32 1}
  !8 = !{!"clang version 17.0.6 ()"}
  !9 = distinct !DISubprogram(name: "s", scope: !1, file: !1, line: 15, type: !10, scopeLine: 16, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
  !10 = !DISubroutineType(types: !11)
  !11 = !{}
  !12 = !DILocation(line: 18, column: 5, scope: !9)
  !13 = !DILocation(line: 19, column: 9, scope: !9)
  !14 = !DILocation(line: 20, column: 20, scope: !9)
  !15 = !{!16, !16, i64 0}
  !16 = !{!"double", !17, i64 0}
  !17 = !{!"omnipotent char", !18, i64 0}
  !18 = !{!"Simple C/C++ TBAA"}
  !19 = !DILocation(line: 20, column: 25, scope: !9)
  !20 = !DILocation(line: 20, column: 18, scope: !9)
  !21 = !DILocation(line: 19, column: 38, scope: !9)
  !22 = distinct !{!22, !13, !23, !24, !25, !26}
  !23 = !DILocation(line: 21, column: 9, scope: !9)
  !24 = !{!"llvm.loop.mustprogress"}
  !25 = !{!"llvm.loop.isvectorized", i32 1}
  !26 = !{!"llvm.loop.unroll.runtime.disable"}
  !27 = !DILocation(line: 24, column: 1, scope: !9)
  !28 = !DILocation(line: 18, column: 43, scope: !9)
  !29 = !DILocation(line: 18, column: 25, scope: !9)
  !30 = distinct !{!30, !12, !31, !24}
  !31 = !DILocation(line: 22, column: 5, scope: !9)

...
---
name:            s
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32sp, preferred-register: '' }
  - { id: 1, class: gpr64all, preferred-register: '' }
  - { id: 2, class: gpr64common, preferred-register: '' }
  - { id: 3, class: gpr64sp, preferred-register: '' }
  - { id: 4, class: gpr64all, preferred-register: '' }
  - { id: 5, class: gpr64all, preferred-register: '' }
  - { id: 6, class: gpr32all, preferred-register: '' }
  - { id: 7, class: gpr32all, preferred-register: '' }
  - { id: 8, class: gpr32all, preferred-register: '' }
  - { id: 9, class: gpr64all, preferred-register: '' }
  - { id: 10, class: gpr64all, preferred-register: '' }
  - { id: 11, class: gpr32, preferred-register: '' }
  - { id: 12, class: gpr64common, preferred-register: '' }
  - { id: 13, class: gpr64common, preferred-register: '' }
  - { id: 14, class: ppr_3b, preferred-register: '' }
  - { id: 15, class: zpr, preferred-register: '' }
  - { id: 16, class: gpr64common, preferred-register: '' }
  - { id: 17, class: ppr_3b, preferred-register: '' }
  - { id: 18, class: zpr, preferred-register: '' }
  - { id: 19, class: gpr64common, preferred-register: '' }
  - { id: 20, class: zpr, preferred-register: '' }
  - { id: 21, class: gpr64common, preferred-register: '' }
  - { id: 22, class: zpr, preferred-register: '' }
  - { id: 23, class: ppr_3b, preferred-register: '' }
  - { id: 24, class: zpr, preferred-register: '' }
  - { id: 25, class: zpr, preferred-register: '' }
  - { id: 26, class: zpr, preferred-register: '' }
  - { id: 27, class: zpr, preferred-register: '' }
  - { id: 28, class: gpr64common, preferred-register: '' }
  - { id: 29, class: gpr64common, preferred-register: '' }
  - { id: 30, class: gpr64common, preferred-register: '' }
  - { id: 31, class: zpr, preferred-register: '' }
  - { id: 32, class: gpr64common, preferred-register: '' }
  - { id: 33, class: zpr, preferred-register: '' }
  - { id: 34, class: gpr64common, preferred-register: '' }
  - { id: 35, class: zpr, preferred-register: '' }
  - { id: 36, class: gpr64common, preferred-register: '' }
  - { id: 37, class: zpr, preferred-register: '' }
  - { id: 38, class: zpr, preferred-register: '' }
  - { id: 39, class: zpr, preferred-register: '' }
  - { id: 40, class: zpr, preferred-register: '' }
  - { id: 41, class: zpr, preferred-register: '' }
  - { id: 42, class: gpr64common, preferred-register: '' }
  - { id: 43, class: zpr, preferred-register: '' }
  - { id: 44, class: gpr64common, preferred-register: '' }
  - { id: 45, class: zpr, preferred-register: '' }
  - { id: 46, class: gpr64common, preferred-register: '' }
  - { id: 47, class: zpr, preferred-register: '' }
  - { id: 48, class: gpr64common, preferred-register: '' }
  - { id: 49, class: zpr, preferred-register: '' }
  - { id: 50, class: zpr, preferred-register: '' }
  - { id: 51, class: zpr, preferred-register: '' }
  - { id: 52, class: zpr, preferred-register: '' }
  - { id: 53, class: zpr, preferred-register: '' }
  - { id: 54, class: gpr64common, preferred-register: '' }
  - { id: 55, class: zpr, preferred-register: '' }
  - { id: 56, class: gpr64common, preferred-register: '' }
  - { id: 57, class: zpr, preferred-register: '' }
  - { id: 58, class: gpr64common, preferred-register: '' }
  - { id: 59, class: zpr, preferred-register: '' }
  - { id: 60, class: gpr64common, preferred-register: '' }
  - { id: 61, class: zpr, preferred-register: '' }
  - { id: 62, class: zpr, preferred-register: '' }
  - { id: 63, class: zpr, preferred-register: '' }
  - { id: 64, class: zpr, preferred-register: '' }
  - { id: 65, class: zpr, preferred-register: '' }
  - { id: 66, class: gpr64common, preferred-register: '' }
  - { id: 67, class: zpr, preferred-register: '' }
  - { id: 68, class: gpr64common, preferred-register: '' }
  - { id: 69, class: zpr, preferred-register: '' }
  - { id: 70, class: gpr64common, preferred-register: '' }
  - { id: 71, class: zpr, preferred-register: '' }
  - { id: 72, class: gpr64common, preferred-register: '' }
  - { id: 73, class: zpr, preferred-register: '' }
  - { id: 74, class: zpr, preferred-register: '' }
  - { id: 75, class: zpr, preferred-register: '' }
  - { id: 76, class: zpr, preferred-register: '' }
  - { id: 77, class: zpr, preferred-register: '' }
  - { id: 78, class: gpr64common, preferred-register: '' }
  - { id: 79, class: zpr, preferred-register: '' }
  - { id: 80, class: gpr64common, preferred-register: '' }
  - { id: 81, class: zpr, preferred-register: '' }
  - { id: 82, class: gpr64common, preferred-register: '' }
  - { id: 83, class: zpr, preferred-register: '' }
  - { id: 84, class: gpr64common, preferred-register: '' }
  - { id: 85, class: zpr, preferred-register: '' }
  - { id: 86, class: zpr, preferred-register: '' }
  - { id: 87, class: zpr, preferred-register: '' }
  - { id: 88, class: zpr, preferred-register: '' }
  - { id: 89, class: zpr, preferred-register: '' }
  - { id: 90, class: gpr64common, preferred-register: '' }
  - { id: 91, class: zpr, preferred-register: '' }
  - { id: 92, class: gpr64common, preferred-register: '' }
  - { id: 93, class: zpr, preferred-register: '' }
  - { id: 94, class: gpr64common, preferred-register: '' }
  - { id: 95, class: zpr, preferred-register: '' }
  - { id: 96, class: gpr64common, preferred-register: '' }
  - { id: 97, class: zpr, preferred-register: '' }
  - { id: 98, class: zpr, preferred-register: '' }
  - { id: 99, class: zpr, preferred-register: '' }
  - { id: 100, class: zpr, preferred-register: '' }
  - { id: 101, class: zpr, preferred-register: '' }
  - { id: 102, class: gpr64common, preferred-register: '' }
  - { id: 103, class: zpr, preferred-register: '' }
  - { id: 104, class: gpr64common, preferred-register: '' }
  - { id: 105, class: zpr, preferred-register: '' }
  - { id: 106, class: gpr64common, preferred-register: '' }
  - { id: 107, class: zpr, preferred-register: '' }
  - { id: 108, class: gpr64common, preferred-register: '' }
  - { id: 109, class: zpr, preferred-register: '' }
  - { id: 110, class: zpr, preferred-register: '' }
  - { id: 111, class: zpr, preferred-register: '' }
  - { id: 112, class: zpr, preferred-register: '' }
  - { id: 113, class: zpr, preferred-register: '' }
  - { id: 114, class: gpr64common, preferred-register: '' }
  - { id: 115, class: zpr, preferred-register: '' }
  - { id: 116, class: gpr64common, preferred-register: '' }
  - { id: 117, class: zpr, preferred-register: '' }
  - { id: 118, class: gpr64common, preferred-register: '' }
  - { id: 119, class: zpr, preferred-register: '' }
  - { id: 120, class: gpr64common, preferred-register: '' }
  - { id: 121, class: zpr, preferred-register: '' }
  - { id: 122, class: zpr, preferred-register: '' }
  - { id: 123, class: zpr, preferred-register: '' }
  - { id: 124, class: zpr, preferred-register: '' }
  - { id: 125, class: zpr, preferred-register: '' }
  - { id: 126, class: gpr64common, preferred-register: '' }
  - { id: 127, class: zpr, preferred-register: '' }
  - { id: 128, class: gpr64common, preferred-register: '' }
  - { id: 129, class: zpr, preferred-register: '' }
  - { id: 130, class: gpr64common, preferred-register: '' }
  - { id: 131, class: zpr, preferred-register: '' }
  - { id: 132, class: gpr64common, preferred-register: '' }
  - { id: 133, class: zpr, preferred-register: '' }
  - { id: 134, class: zpr, preferred-register: '' }
  - { id: 135, class: zpr, preferred-register: '' }
  - { id: 136, class: zpr, preferred-register: '' }
  - { id: 137, class: zpr, preferred-register: '' }
  - { id: 138, class: gpr64sp, preferred-register: '' }
  - { id: 139, class: gpr64, preferred-register: '' }
  - { id: 140, class: gpr32common, preferred-register: '' }
  - { id: 141, class: gpr32, preferred-register: '' }
  - { id: 142, class: gpr32, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
  
    %8:gpr32all = COPY $wzr
    %7:gpr32all = COPY %8
    %11:gpr32 = MOVi32imm 100
    %12:gpr64common = LOADgot target-flags(aarch64-got) @b
    %14:ppr_3b = PTRUE_B 31
    %16:gpr64common = MOVi64imm 8
    %17:ppr_3b = PTRUE_D 31
    %19:gpr64common = MOVi64imm 16
    %21:gpr64common = MOVi64imm 24
    %28:gpr64common = LOADgot target-flags(aarch64-got) @a
    %30:gpr64common = MOVi64imm 32
    %32:gpr64common = MOVi64imm 40
    %34:gpr64common = MOVi64imm 48
    %36:gpr64common = MOVi64imm 56
    %42:gpr64common = MOVi64imm 64
    %44:gpr64common = MOVi64imm 72
    %46:gpr64common = MOVi64imm 80
    %48:gpr64common = MOVi64imm 88
    %54:gpr64common = MOVi64imm 96
    %56:gpr64common = MOVi64imm 104
    %58:gpr64common = MOVi64imm 112
    %60:gpr64common = MOVi64imm 120
    %66:gpr64common = MOVi64imm 128
    %68:gpr64common = MOVi64imm 136
    %70:gpr64common = MOVi64imm 144
    %72:gpr64common = MOVi64imm 152
    %78:gpr64common = MOVi64imm 160
    %80:gpr64common = MOVi64imm 168
    %82:gpr64common = MOVi64imm 176
    %84:gpr64common = MOVi64imm 184
    %90:gpr64common = MOVi64imm 192
    %92:gpr64common = MOVi64imm 200
    %94:gpr64common = MOVi64imm 208
    %96:gpr64common = MOVi64imm 216
    %102:gpr64common = MOVi64imm 224
    %104:gpr64common = MOVi64imm 232
    %106:gpr64common = MOVi64imm 240
    %108:gpr64common = MOVi64imm 248
    %114:gpr64common = MOVi64imm 256
    %116:gpr64common = MOVi64imm 264
    %118:gpr64common = MOVi64imm 272
    %120:gpr64common = MOVi64imm 280
    %126:gpr64common = MOVi64imm 288
    %128:gpr64common = MOVi64imm 296
    %130:gpr64common = MOVi64imm 304
    %132:gpr64common = MOVi64imm 312
    %141:gpr32 = MOVi32imm 200000
  
  bb.1.vector.ph:
    successors: %bb.2(0x80000000)
  
    %0:gpr32sp = PHI %7, %bb.0, %6, %bb.4
    %10:gpr64all = COPY $xzr
    %9:gpr64all = COPY %10
    %1:gpr64all = SUBREG_TO_REG 0, %11, %subreg.sub_32
  
  bb.2.vector.body:
    successors: %bb.2(0x7c000000), %bb.4(0x04000000)
  
    %2:gpr64common = PHI %9, %bb.1, %4, %bb.2
    %3:gpr64sp = PHI %1, %bb.1, %5, %bb.2, debug-location !14
    %13:gpr64common = ADDXrr %12, %2, debug-location !14
    PRFMui 0, %13, 320, debug-location !14
    %15:zpr = LD1B %14, %12, %2, debug-location !14 :: (load unknown-size from %ir.scevgep191, align 64, !tbaa !15)
    %18:zpr = LD1D %17, %13, %16, debug-location !14 :: (load unknown-size from %ir.scevgep195, align 64, !tbaa !15)
    %20:zpr = LD1D %17, %13, %19, debug-location !14 :: (load unknown-size from %ir.scevgep194, align 64, !tbaa !15)
    %22:zpr = LD1D %17, %13, %21, debug-location !14 :: (load unknown-size from %ir.scevgep193, align 64, !tbaa !15)
    %24:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %15, 1, debug-location !19
    %25:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %18, 1, debug-location !19
    %26:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %20, 1, debug-location !19
    %27:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %22, 1, debug-location !19
    %29:gpr64common = ADDXrr %28, %2, debug-location !20
    ST1B killed %24, %14, %28, %2, debug-location !20 :: (store unknown-size into %ir.scevgep196, align 64, !tbaa !15)
    ST1D killed %25, %17, %29, %16, debug-location !20 :: (store unknown-size into %ir.scevgep34, align 64, !tbaa !15)
    ST1D killed %26, %17, %29, %19, debug-location !20 :: (store unknown-size into %ir.scevgep198, align 64, !tbaa !15)
    ST1D killed %27, %17, %29, %21, debug-location !20 :: (store unknown-size into %ir.scevgep197, align 64, !tbaa !15)
    PRFMui 0, %13, 352, debug-location !14
    %31:zpr = LD1D %17, %13, %30, debug-location !14 :: (load unknown-size from %ir.scevgep54, align 64, !tbaa !15)
    %33:zpr = LD1D %17, %13, %32, debug-location !14 :: (load unknown-size from %ir.scevgep52, align 64, !tbaa !15)
    %35:zpr = LD1D %17, %13, %34, debug-location !14 :: (load unknown-size from %ir.scevgep50, align 64, !tbaa !15)
    %37:zpr = LD1D %17, %13, %36, debug-location !14 :: (load unknown-size from %ir.scevgep48, align 64, !tbaa !15)
    %38:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %31, 1, debug-location !19
    %39:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %33, 1, debug-location !19
    %40:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %35, 1, debug-location !19
    %41:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %37, 1, debug-location !19
    ST1D killed %38, %17, %29, %30, debug-location !20 :: (store unknown-size into %ir.scevgep62, align 64, !tbaa !15)
    ST1D killed %39, %17, %29, %32, debug-location !20 :: (store unknown-size into %ir.scevgep60, align 64, !tbaa !15)
    ST1D killed %40, %17, %29, %34, debug-location !20 :: (store unknown-size into %ir.scevgep58, align 64, !tbaa !15)
    ST1D killed %41, %17, %29, %36, debug-location !20 :: (store unknown-size into %ir.scevgep56, align 64, !tbaa !15)
    PRFMui 0, %13, 384, debug-location !14
    %43:zpr = LD1D %17, %13, %42, debug-location !14 :: (load unknown-size from %ir.scevgep190, align 64, !tbaa !15)
    %45:zpr = LD1D %17, %13, %44, debug-location !14 :: (load unknown-size from %ir.scevgep188, align 64, !tbaa !15)
    %47:zpr = LD1D %17, %13, %46, debug-location !14 :: (load unknown-size from %ir.scevgep186, align 64, !tbaa !15)
    %49:zpr = LD1D %17, %13, %48, debug-location !14 :: (load unknown-size from %ir.scevgep184, align 64, !tbaa !15)
    %50:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %43, 1, debug-location !19
    %51:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %45, 1, debug-location !19
    %52:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %47, 1, debug-location !19
    %53:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %49, 1, debug-location !19
    ST1D killed %50, %17, %29, %42, debug-location !20 :: (store unknown-size into %ir.scevgep182, align 64, !tbaa !15)
    ST1D killed %51, %17, %29, %44, debug-location !20 :: (store unknown-size into %ir.scevgep180, align 64, !tbaa !15)
    ST1D killed %52, %17, %29, %46, debug-location !20 :: (store unknown-size into %ir.scevgep178, align 64, !tbaa !15)
    ST1D killed %53, %17, %29, %48, debug-location !20 :: (store unknown-size into %ir.scevgep176, align 64, !tbaa !15)
    PRFMui 0, %13, 416, debug-location !14
    %55:zpr = LD1D %17, %13, %54, debug-location !14 :: (load unknown-size from %ir.scevgep174, align 64, !tbaa !15)
    %57:zpr = LD1D %17, %13, %56, debug-location !14 :: (load unknown-size from %ir.scevgep172, align 64, !tbaa !15)
    %59:zpr = LD1D %17, %13, %58, debug-location !14 :: (load unknown-size from %ir.scevgep170, align 64, !tbaa !15)
    %61:zpr = LD1D %17, %13, %60, debug-location !14 :: (load unknown-size from %ir.scevgep168, align 64, !tbaa !15)
    %62:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %55, 1, debug-location !19
    %63:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %57, 1, debug-location !19
    %64:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %59, 1, debug-location !19
    %65:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %61, 1, debug-location !19
    ST1D killed %62, %17, %29, %54, debug-location !20 :: (store unknown-size into %ir.scevgep166, align 64, !tbaa !15)
    ST1D killed %63, %17, %29, %56, debug-location !20 :: (store unknown-size into %ir.scevgep164, align 64, !tbaa !15)
    ST1D killed %64, %17, %29, %58, debug-location !20 :: (store unknown-size into %ir.scevgep162, align 64, !tbaa !15)
    ST1D killed %65, %17, %29, %60, debug-location !20 :: (store unknown-size into %ir.scevgep160, align 64, !tbaa !15)
    PRFMui 0, %13, 448, debug-location !14
    %67:zpr = LD1D %17, %13, %66, debug-location !14 :: (load unknown-size from %ir.scevgep158, align 64, !tbaa !15)
    %69:zpr = LD1D %17, %13, %68, debug-location !14 :: (load unknown-size from %ir.scevgep156, align 64, !tbaa !15)
    %71:zpr = LD1D %17, %13, %70, debug-location !14 :: (load unknown-size from %ir.scevgep154, align 64, !tbaa !15)
    %73:zpr = LD1D %17, %13, %72, debug-location !14 :: (load unknown-size from %ir.scevgep152, align 64, !tbaa !15)
    %74:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %67, 1, debug-location !19
    %75:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %69, 1, debug-location !19
    %76:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %71, 1, debug-location !19
    %77:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %73, 1, debug-location !19
    ST1D killed %74, %17, %29, %66, debug-location !20 :: (store unknown-size into %ir.scevgep150, align 64, !tbaa !15)
    ST1D killed %75, %17, %29, %68, debug-location !20 :: (store unknown-size into %ir.scevgep148, align 64, !tbaa !15)
    ST1D killed %76, %17, %29, %70, debug-location !20 :: (store unknown-size into %ir.scevgep146, align 64, !tbaa !15)
    ST1D killed %77, %17, %29, %72, debug-location !20 :: (store unknown-size into %ir.scevgep144, align 64, !tbaa !15)
    PRFMui 0, %13, 480, debug-location !14
    %79:zpr = LD1D %17, %13, %78, debug-location !14 :: (load unknown-size from %ir.scevgep142, align 64, !tbaa !15)
    %81:zpr = LD1D %17, %13, %80, debug-location !14 :: (load unknown-size from %ir.scevgep140, align 64, !tbaa !15)
    %83:zpr = LD1D %17, %13, %82, debug-location !14 :: (load unknown-size from %ir.scevgep138, align 64, !tbaa !15)
    %85:zpr = LD1D %17, %13, %84, debug-location !14 :: (load unknown-size from %ir.scevgep136, align 64, !tbaa !15)
    %86:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %79, 1, debug-location !19
    %87:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %81, 1, debug-location !19
    %88:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %83, 1, debug-location !19
    %89:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %85, 1, debug-location !19
    ST1D killed %86, %17, %29, %78, debug-location !20 :: (store unknown-size into %ir.scevgep134, align 64, !tbaa !15)
    ST1D killed %87, %17, %29, %80, debug-location !20 :: (store unknown-size into %ir.scevgep132, align 64, !tbaa !15)
    ST1D killed %88, %17, %29, %82, debug-location !20 :: (store unknown-size into %ir.scevgep130, align 64, !tbaa !15)
    ST1D killed %89, %17, %29, %84, debug-location !20 :: (store unknown-size into %ir.scevgep128, align 64, !tbaa !15)
    PRFMui 0, %13, 512, debug-location !14
    %91:zpr = LD1D %17, %13, %90, debug-location !14 :: (load unknown-size from %ir.scevgep126, align 64, !tbaa !15)
    %93:zpr = LD1D %17, %13, %92, debug-location !14 :: (load unknown-size from %ir.scevgep124, align 64, !tbaa !15)
    %95:zpr = LD1D %17, %13, %94, debug-location !14 :: (load unknown-size from %ir.scevgep122, align 64, !tbaa !15)
    %97:zpr = LD1D %17, %13, %96, debug-location !14 :: (load unknown-size from %ir.scevgep120, align 64, !tbaa !15)
    %98:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %91, 1, debug-location !19
    %99:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %93, 1, debug-location !19
    %100:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %95, 1, debug-location !19
    %101:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %97, 1, debug-location !19
    ST1D killed %98, %17, %29, %90, debug-location !20 :: (store unknown-size into %ir.scevgep118, align 64, !tbaa !15)
    ST1D killed %99, %17, %29, %92, debug-location !20 :: (store unknown-size into %ir.scevgep116, align 64, !tbaa !15)
    ST1D killed %100, %17, %29, %94, debug-location !20 :: (store unknown-size into %ir.scevgep114, align 64, !tbaa !15)
    ST1D killed %101, %17, %29, %96, debug-location !20 :: (store unknown-size into %ir.scevgep112, align 64, !tbaa !15)
    PRFMui 0, %13, 544, debug-location !14
    %103:zpr = LD1D %17, %13, %102, debug-location !14 :: (load unknown-size from %ir.scevgep110, align 64, !tbaa !15)
    %105:zpr = LD1D %17, %13, %104, debug-location !14 :: (load unknown-size from %ir.scevgep108, align 64, !tbaa !15)
    %107:zpr = LD1D %17, %13, %106, debug-location !14 :: (load unknown-size from %ir.scevgep106, align 64, !tbaa !15)
    %109:zpr = LD1D %17, %13, %108, debug-location !14 :: (load unknown-size from %ir.scevgep104, align 64, !tbaa !15)
    %110:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %103, 1, debug-location !19
    %111:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %105, 1, debug-location !19
    %112:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %107, 1, debug-location !19
    %113:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %109, 1, debug-location !19
    ST1D killed %110, %17, %29, %102, debug-location !20 :: (store unknown-size into %ir.scevgep102, align 64, !tbaa !15)
    ST1D killed %111, %17, %29, %104, debug-location !20 :: (store unknown-size into %ir.scevgep100, align 64, !tbaa !15)
    ST1D killed %112, %17, %29, %106, debug-location !20 :: (store unknown-size into %ir.scevgep98, align 64, !tbaa !15)
    ST1D killed %113, %17, %29, %108, debug-location !20 :: (store unknown-size into %ir.scevgep96, align 64, !tbaa !15)
    PRFMui 0, %13, 576, debug-location !14
    %115:zpr = LD1D %17, %13, %114, debug-location !14 :: (load unknown-size from %ir.scevgep94, align 64, !tbaa !15)
    %117:zpr = LD1D %17, %13, %116, debug-location !14 :: (load unknown-size from %ir.scevgep92, align 64, !tbaa !15)
    %119:zpr = LD1D %17, %13, %118, debug-location !14 :: (load unknown-size from %ir.scevgep90, align 64, !tbaa !15)
    %121:zpr = LD1D %17, %13, %120, debug-location !14 :: (load unknown-size from %ir.scevgep88, align 64, !tbaa !15)
    %122:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %115, 1, debug-location !19
    %123:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %117, 1, debug-location !19
    %124:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %119, 1, debug-location !19
    %125:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %121, 1, debug-location !19
    ST1D killed %122, %17, %29, %114, debug-location !20 :: (store unknown-size into %ir.scevgep86, align 64, !tbaa !15)
    ST1D killed %123, %17, %29, %116, debug-location !20 :: (store unknown-size into %ir.scevgep84, align 64, !tbaa !15)
    ST1D killed %124, %17, %29, %118, debug-location !20 :: (store unknown-size into %ir.scevgep82, align 64, !tbaa !15)
    ST1D killed %125, %17, %29, %120, debug-location !20 :: (store unknown-size into %ir.scevgep80, align 64, !tbaa !15)
    PRFMui 0, %13, 608, debug-location !14
    %127:zpr = LD1D %17, %13, %126, debug-location !14 :: (load unknown-size from %ir.scevgep78, align 64, !tbaa !15)
    %129:zpr = LD1D %17, %13, %128, debug-location !14 :: (load unknown-size from %ir.scevgep76, align 64, !tbaa !15)
    %131:zpr = LD1D %17, %13, %130, debug-location !14 :: (load unknown-size from %ir.scevgep74, align 64, !tbaa !15)
    %133:zpr = LD1D %17, %13, %132, debug-location !14 :: (load unknown-size from %ir.scevgep72, align 64, !tbaa !15)
    %134:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %127, 1, debug-location !19
    %135:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %129, 1, debug-location !19
    %136:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %131, 1, debug-location !19
    %137:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_D_UNDEF %17, killed %133, 1, debug-location !19
    ST1D killed %134, %17, %29, %126, debug-location !20 :: (store unknown-size into %ir.scevgep70, align 64, !tbaa !15)
    ST1D killed %135, %17, %29, %128, debug-location !20 :: (store unknown-size into %ir.scevgep68, align 64, !tbaa !15)
    ST1D killed %136, %17, %29, %130, debug-location !20 :: (store unknown-size into %ir.scevgep66, align 64, !tbaa !15)
    ST1D killed %137, %17, %29, %132, debug-location !20 :: (store unknown-size into %ir.scevgep64, align 64, !tbaa !15)
    %138:gpr64sp = nuw nsw ADDXri %2, 2560, 0, debug-location !21
    %4:gpr64all = COPY %138, debug-location !21
    %139:gpr64 = SUBSXri %3, 1, 0, implicit-def $nzcv, debug-location !21
    %5:gpr64all = COPY %139, debug-location !21
    Bcc 1, %bb.2, implicit $nzcv, debug-location !21
    B %bb.4, debug-location !21
  
  bb.3.for.cond.cleanup:
    RET_ReallyLR debug-location !27
  
  bb.4.for.cond.cleanup3:
    successors: %bb.3(0x04000000), %bb.1(0x7c000000)
  
    %140:gpr32common = nuw nsw ADDWri %0, 1, 0, debug-location !28
    %6:gpr32all = COPY %140, debug-location !28
    dead $wzr = SUBSWrr %140, %141, implicit-def $nzcv, debug-location !12
    Bcc 0, %bb.3, implicit $nzcv, debug-location !12
    B %bb.1, debug-location !12

...
