#RUN: llc %s -mcpu=a64fx -ffj-swp -O3 -start-before=aarch64-swpipeliner -swpl-debug-dump-mir=8  -o /dev/null 2>&1 | FileCheck %s


#CHECK: ** SwplTransformedMIRInfo begin **
#CHECK-NEXT: originalDoVReg:%4
#CHECK-NEXT: originalDoInitVar:%0
#CHECK-NEXT: doVReg:%90
#CHECK-NEXT: iterationInterval:4
#CHECK-NEXT: minimumIterationInterval:3
#CHECK-NEXT: coefficient: 1
#CHECK-NEXT: minConstant: 0
#CHECK-NEXT: expansion: 16
#CHECK-NEXT: nVersions: 7
#CHECK-NEXT: nCopies: 16
#CHECK-NEXT: requiredKernelIteration: 16
#CHECK-NEXT: prologEndIndx: 288
#CHECK-NEXT: kernelEndIndx: 512
#CHECK-NEXT: epilogEndIndx: 800
#CHECK-NEXT: isIterationCountConstant: 0
#CHECK-NEXT: doVRegInitialValue: 0
#CHECK-NEXT: originalKernelIteration: 0
#CHECK-NEXT: transformedKernelIteration: 0
#CHECK-NEXT: transformedModIteration: 0
#CHECK-NEXT: updateDoVRegMI:%20:gpr64 = SUBSXri %4:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK-NEXT: branchDoVRegMI:Bcc 1, %bb.12, implicit $nzcv
#CHECK-NEXT: branchDoVRegMIKernel:Bcc 10, %bb.4, implicit $nzcv
#CHECK-NEXT: OrgPreHeader: %bb.2
#CHECK-NEXT: Check1: %bb.7
#CHECK-NEXT: Prolog: %bb.8
#CHECK-NEXT: OrgBody: %bb.4
#CHECK-NEXT: Epilog: %bb.9
#CHECK-NEXT: NewPreHeader: %bb.11
#CHECK-NEXT: Check2: %bb.10
#CHECK-NEXT: NewBody: %bb.12
#CHECK-NEXT: NewExit: %bb.13
#CHECK-NEXT: OrgExit: %bb.3
#CHECK-NEXT: mis:
#CHECK-NEXT: ** SwplTransformedMIRInfo end  **
#CHECK-NEXT: target loop:Loop at depth 1 containing: %bb.4<header><latch><exiting>
#CHECK-NEXT: LAST:
#CHECK-NEXT: bb.0 (%ir-block.1):
#CHECK-NEXT: successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
#CHECK-NEXT: liveins: $x0
#CHECK-NEXT: %8:gpr64common = COPY $x0
#CHECK-NEXT: TBZX %8:gpr64common, 63, %bb.2
#CHECK-NEXT:bb.1:
#CHECK-NEXT: ; predecessors: %bb.0
#CHECK-NEXT: successors: %bb.3(0x80000000); %bb.3(100.00%)

#CHECK: %10:gpr64all = COPY $xzr
#CHECK-NEXT: %9:gpr64all = COPY %10:gpr64all
#CHECK-NEXT: B %bb.3
#CHECK-NEXT: bb.2 (%ir-block.3):
#CHECK-NEXT: ; predecessors: %bb.0
#CHECK-NEXT: successors: %bb.7(0x80000000); %bb.7(100.00%)

#CHECK: %13:gpr64sp = ADDXri %8:gpr64common, 1, 0
#CHECK-NEXT: %0:gpr64all = COPY %13:gpr64sp
#CHECK-NEXT: %14:gpr64all = COPY $xzr
#CHECK-NEXT: %12:gpr64all = COPY %14:gpr64all
#CHECK-NEXT: %15:gpr64common = MOVaddr target-flags(aarch64-page) @A, target-flags(aarch64-pageoff, aarch64-nc) @A
#CHECK-NEXT: %11:gpr64all = COPY %15:gpr64common
#CHECK-NEXT: B %bb.7
#CHECK-NEXT:bb.3 (%ir-block.5):
#CHECK-NEXT: ; predecessors: %bb.1, %bb.13

#CHECK: %1:gpr64all = PHI %9:gpr64all, %bb.1, %103:gpr64all, %bb.13
#CHECK-NEXT: $x0 = COPY %1:gpr64all
#CHECK-NEXT: RET_ReallyLR implicit $x0
#CHECK-NEXT: bb.7 (%ir-block.7):
#CHECK-NEXT: ; predecessors: %bb.2
#CHECK-NEXT: successors: %bb.8(0x40000000), %bb.11(0x40000000); %bb.8(50.00%), %bb.11(50.00%)

#CHECK: %98:gpr64sp = COPY %0:gpr64all
#CHECK-NEXT: $xzr = SUBSXri %98:gpr64sp, 16, 0, implicit-def $nzcv
#CHECK-NEXT: Bcc 11, %bb.11, implicit $nzcv
#CHECK-NEXT: bb.8 (%ir-block.7):
#CHECK-NEXT: ; predecessors: %bb.7
#CHECK-NEXT: successors: %bb.4(0x80000000); %bb.4(100.00%)

#CHECK: %21:gpr64sp = COPY %11:gpr64all
#CHECK-NEXT: %22:gpr64 = COPY %12:gpr64all
#CHECK-NEXT: %23:gpr64sp = COPY %0:gpr64all
#CHECK-NEXT: %33:gpr64sp = COPY %21:gpr64sp
#CHECK-NEXT: %57:gpr64 = COPY %22:gpr64
#CHECK-NEXT: %81:gpr64sp = COPY %23:gpr64sp
#CHECK-NEXT: %32:fpr32 = LDURSi %33:gpr64sp, 0
#CHECK-NEXT: %44:gpr64sp = ADDXri %33:gpr64sp, 4, 0
#CHECK-NEXT: %74:gpr64all = COPY %44:gpr64sp
#CHECK-NEXT: %34:gpr64sp = COPY %74:gpr64all
#CHECK-NEXT: %25:fpr32 = LDURSi %34:gpr64sp, 0
#CHECK-NEXT: %24:gpr64sp = ADDXri %34:gpr64sp, 4, 0
#CHECK-NEXT: %29:gpr64all = COPY %24:gpr64sp
#CHECK-NEXT: %253:gpr64sp = COPY %29:gpr64all
#CHECK-NEXT: %50:gpr64 = FCVTZSUXSr killed %32:fpr32
#CHECK-NEXT: %35:fpr32 = LDURSi %253:gpr64sp, 0
#CHECK-NEXT: %45:gpr64sp = ADDXri %253:gpr64sp, 4, 0
#CHECK-NEXT: %75:gpr64all = COPY %45:gpr64sp
#CHECK-NEXT: %37:gpr64sp = COPY %75:gpr64all
#CHECK-NEXT: %26:gpr64 = FCVTZSUXSr killed %25:fpr32
#CHECK-NEXT: %36:fpr32 = LDURSi %37:gpr64sp, 0
#CHECK-NEXT: %46:gpr64sp = ADDXri %37:gpr64sp, 4, 0
#CHECK-NEXT: %76:gpr64all = COPY %46:gpr64sp
#CHECK-NEXT: %39:gpr64sp = COPY %76:gpr64all
#CHECK-NEXT: %51:gpr64 = FCVTZSUXSr killed %35:fpr32
#CHECK-NEXT: %38:fpr32 = LDURSi %39:gpr64sp, 0
#CHECK-NEXT: %47:gpr64sp = ADDXri %39:gpr64sp, 4, 0
#CHECK-NEXT: %77:gpr64all = COPY %47:gpr64sp
#CHECK-NEXT: %41:gpr64sp = COPY %77:gpr64all
#CHECK-NEXT: %52:gpr64 = FCVTZSUXSr killed %36:fpr32
#CHECK-NEXT: %40:fpr32 = LDURSi %41:gpr64sp, 0
#CHECK-NEXT: %48:gpr64sp = ADDXri %41:gpr64sp, 4, 0
#CHECK-NEXT: %78:gpr64all = COPY %48:gpr64sp
#CHECK-NEXT: %43:gpr64sp = COPY %78:gpr64all
#CHECK-NEXT: %53:gpr64 = FCVTZSUXSr killed %38:fpr32
#CHECK-NEXT: %42:fpr32 = LDURSi %43:gpr64sp, 0
#CHECK-NEXT: %49:gpr64sp = ADDXri %43:gpr64sp, 4, 0
#CHECK-NEXT: %79:gpr64all = COPY %49:gpr64sp
#CHECK-NEXT: %254:gpr64sp = COPY %79:gpr64all
#CHECK-NEXT: %54:gpr64 = FCVTZSUXSr killed %40:fpr32
#CHECK-NEXT: %255:fpr32 = LDURSi %254:gpr64sp, 0
#CHECK-NEXT: %256:gpr64sp = ADDXri %254:gpr64sp, 4, 0
#CHECK-NEXT: %257:gpr64all = COPY %256:gpr64sp
#CHECK-NEXT: %258:gpr64sp = COPY %257:gpr64all
#CHECK-NEXT: %55:gpr64 = FCVTZSUXSr killed %42:fpr32
#CHECK-NEXT: %259:fpr32 = LDURSi %258:gpr64sp, 0
#CHECK-NEXT:bb.4 (%ir-block.7):
#CHECK-NEXT: ; predecessors: %bb.4, %bb.8
#CHECK-NEXT: successors: %bb.4(0x7c000000), %bb.9(0x04000000); %bb.4(96.88%), %bb.9(3.12%)

#CHECK: %171:gpr64 = PHI %50:gpr64, %bb.8, %170:gpr64, %bb.4
#CHECK-NEXT: %183:gpr64 = PHI %26:gpr64, %bb.8, %182:gpr64, %bb.4
#CHECK-NEXT: %195:gpr64 = PHI %51:gpr64, %bb.8, %194:gpr64, %bb.4
#CHECK-NEXT: %207:gpr64 = PHI %52:gpr64, %bb.8, %206:gpr64, %bb.4
#CHECK-NEXT: %219:gpr64 = PHI %53:gpr64, %bb.8, %218:gpr64, %bb.4
#CHECK-NEXT: %231:gpr64 = PHI %54:gpr64, %bb.8, %230:gpr64, %bb.4
#CHECK-NEXT: %235:fpr32 = PHI %255:fpr32, %bb.8, %234:fpr32, %bb.4
#CHECK-NEXT: %242:gpr64sp = PHI %258:gpr64sp, %bb.8, %241:gpr64sp, %bb.4
#CHECK-NEXT: %245:gpr64 = PHI %55:gpr64, %bb.8, %244:gpr64, %bb.4
#CHECK-NEXT: %247:gpr64sp = PHI %81:gpr64sp, %bb.8, %246:gpr64sp, %bb.4
#CHECK-NEXT: %249:gpr64 = PHI %57:gpr64, %bb.8, %248:gpr64, %bb.4
#CHECK-NEXT: %251:fpr32 = PHI %259:fpr32, %bb.8, %250:fpr32, %bb.4
#CHECK-NEXT: %163:gpr64sp = ADDXri %242:gpr64sp, 4, 0
#CHECK-NEXT: %164:gpr64all = COPY %163:gpr64sp
#CHECK-NEXT: %165:gpr64 = SUBSXri %247:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK-NEXT: %166:gpr64 = nsw ADDXrr %249:gpr64, killed %171:gpr64
#CHECK-NEXT: %167:gpr64all = COPY %165:gpr64
#CHECK-NEXT: %168:gpr64sp = COPY %164:gpr64all
#CHECK-NEXT: %169:gpr64all = COPY %166:gpr64
#CHECK-NEXT: %170:gpr64 = FCVTZSUXSr killed %235:fpr32
#CHECK-NEXT: %172:gpr64sp = COPY %167:gpr64all
#CHECK-NEXT: %173:gpr64 = COPY %169:gpr64all
#CHECK-NEXT: %174:fpr32 = LDURSi %168:gpr64sp, 0
#CHECK-NEXT: %175:gpr64sp = ADDXri %168:gpr64sp, 4, 0
#CHECK-NEXT: %176:gpr64all = COPY %175:gpr64sp
#CHECK-NEXT: %177:gpr64 = SUBSXri %172:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK-NEXT: %178:gpr64 = nsw ADDXrr %173:gpr64, killed %183:gpr64
#CHECK-NEXT: %179:gpr64all = COPY %177:gpr64
#CHECK-NEXT: %180:gpr64sp = COPY %176:gpr64all
#CHECK-NEXT: %181:gpr64all = COPY %178:gpr64
#CHECK-NEXT: %182:gpr64 = FCVTZSUXSr killed %251:fpr32
#CHECK-NEXT: %184:gpr64sp = COPY %179:gpr64all
#CHECK-NEXT: %185:gpr64 = COPY %181:gpr64all
#CHECK-NEXT: %186:fpr32 = LDURSi %180:gpr64sp, 0
#CHECK-NEXT: %187:gpr64sp = ADDXri %180:gpr64sp, 4, 0
#CHECK-NEXT: %188:gpr64all = COPY %187:gpr64sp
#CHECK-NEXT: %189:gpr64 = SUBSXri %184:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK-NEXT: %190:gpr64 = nsw ADDXrr %185:gpr64, killed %195:gpr64
#CHECK-NEXT: %191:gpr64all = COPY %189:gpr64
#CHECK-NEXT: %192:gpr64sp = COPY %188:gpr64all
#CHECK-NEXT: %193:gpr64all = COPY %190:gpr64
#CHECK-NEXT: %194:gpr64 = FCVTZSUXSr killed %174:fpr32
#CHECK-NEXT: %196:gpr64sp = COPY %191:gpr64all
#CHECK-NEXT: %197:gpr64 = COPY %193:gpr64all
#CHECK-NEXT: %198:fpr32 = LDURSi %192:gpr64sp, 0
#CHECK-NEXT: %199:gpr64sp = ADDXri %192:gpr64sp, 4, 0
#CHECK-NEXT: %200:gpr64all = COPY %199:gpr64sp
#CHECK-NEXT: %201:gpr64 = SUBSXri %196:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK-NEXT: %202:gpr64 = nsw ADDXrr %197:gpr64, killed %207:gpr64
#CHECK-NEXT: %203:gpr64all = COPY %201:gpr64
#CHECK-NEXT: %204:gpr64sp = COPY %200:gpr64all
#CHECK-NEXT: %205:gpr64all = COPY %202:gpr64
#CHECK-NEXT: %206:gpr64 = FCVTZSUXSr killed %186:fpr32
#CHECK-NEXT: %208:gpr64sp = COPY %203:gpr64all
#CHECK-NEXT: %209:gpr64 = COPY %205:gpr64all
#CHECK-NEXT: %210:fpr32 = LDURSi %204:gpr64sp, 0
#CHECK-NEXT: %211:gpr64sp = ADDXri %204:gpr64sp, 4, 0
#CHECK-NEXT: %212:gpr64all = COPY %211:gpr64sp
#CHECK-NEXT: %213:gpr64 = SUBSXri %208:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK-NEXT: %214:gpr64 = nsw ADDXrr %209:gpr64, killed %219:gpr64
#CHECK-NEXT: %215:gpr64all = COPY %213:gpr64
#CHECK-NEXT: %216:gpr64sp = COPY %212:gpr64all
#CHECK-NEXT: %217:gpr64all = COPY %214:gpr64
#CHECK-NEXT: %218:gpr64 = FCVTZSUXSr killed %198:fpr32
#CHECK-NEXT: %220:gpr64sp = COPY %215:gpr64all
#CHECK-NEXT: %221:gpr64 = COPY %217:gpr64all
#CHECK-NEXT: %222:fpr32 = LDURSi %216:gpr64sp, 0
#CHECK-NEXT: %223:gpr64sp = ADDXri %216:gpr64sp, 4, 0
#CHECK-NEXT: %224:gpr64all = COPY %223:gpr64sp
#CHECK-NEXT: %225:gpr64 = SUBSXri %220:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK-NEXT: %226:gpr64 = nsw ADDXrr %221:gpr64, killed %231:gpr64
#CHECK-NEXT: %227:gpr64all = COPY %225:gpr64
#CHECK-NEXT: %228:gpr64sp = COPY %224:gpr64all
#CHECK-NEXT: %229:gpr64all = COPY %226:gpr64
#CHECK-NEXT: %230:gpr64 = FCVTZSUXSr killed %210:fpr32
#CHECK-NEXT: %232:gpr64sp = COPY %227:gpr64all
#CHECK-NEXT: %233:gpr64 = COPY %229:gpr64all
#CHECK-NEXT: %234:fpr32 = LDURSi %228:gpr64sp, 0
#CHECK-NEXT: %236:gpr64sp = ADDXri %228:gpr64sp, 4, 0
#CHECK-NEXT: %237:gpr64all = COPY %236:gpr64sp
#CHECK-NEXT: %238:gpr64 = SUBSXri %232:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK-NEXT: %239:gpr64 = nsw ADDXrr %233:gpr64, killed %245:gpr64
#CHECK-NEXT: %240:gpr64all = COPY %238:gpr64
#CHECK-NEXT: %241:gpr64sp = COPY %237:gpr64all
#CHECK-NEXT: %243:gpr64all = COPY %239:gpr64
#CHECK-NEXT: %244:gpr64 = FCVTZSUXSr killed %222:fpr32
#CHECK-NEXT: %246:gpr64sp = COPY %240:gpr64all
#CHECK-NEXT: %248:gpr64 = COPY %243:gpr64all
#CHECK-NEXT: %250:fpr32 = LDURSi %241:gpr64sp, 0
#CHECK-NEXT: %252:gpr64sp = COPY %238:gpr64
#CHECK-NEXT: $xzr = SUBSXri %252:gpr64sp, 16, 0, implicit-def $nzcv
#CHECK-NEXT: Bcc 10, %bb.4, implicit $nzcv
#CHECK-NEXT: bb.9 (%ir-block.7):
#CHECK-NEXT:; predecessors: %bb.4
#CHECK-NEXT: successors: %bb.10(0x80000000); %bb.10(100.00%)

#CHECK: %104:gpr64sp = ADDXri %241:gpr64sp, 4, 0
#CHECK-NEXT: %105:gpr64all = COPY %104:gpr64sp
#CHECK-NEXT: %106:gpr64 = SUBSXri %246:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK-NEXT: %107:gpr64 = nsw ADDXrr %248:gpr64, killed %170:gpr64
#CHECK-NEXT: %108:gpr64all = COPY %106:gpr64
#CHECK-NEXT: %109:gpr64sp = COPY %105:gpr64all
#CHECK-NEXT: %110:gpr64all = COPY %107:gpr64
#CHECK-NEXT: %111:gpr64 = FCVTZSUXSr killed %234:fpr32
#CHECK-NEXT: %112:gpr64sp = COPY %108:gpr64all
#CHECK-NEXT: %113:gpr64 = COPY %110:gpr64all
#CHECK-NEXT: %114:gpr64 = SUBSXri %112:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK-NEXT: %115:gpr64 = nsw ADDXrr %113:gpr64, killed %182:gpr64
#CHECK-NEXT: %116:gpr64all = COPY %114:gpr64
#CHECK-NEXT: %117:gpr64all = COPY %115:gpr64
#CHECK-NEXT: %118:gpr64 = FCVTZSUXSr killed %250:fpr32
#CHECK-NEXT: %119:gpr64sp = COPY %116:gpr64all
#CHECK-NEXT: %120:gpr64 = COPY %117:gpr64all
#CHECK-NEXT: %121:gpr64 = SUBSXri %119:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK-NEXT: %122:gpr64 = nsw ADDXrr %120:gpr64, killed %194:gpr64
#CHECK-NEXT: %123:gpr64all = COPY %121:gpr64
#CHECK-NEXT: %124:gpr64all = COPY %122:gpr64
#CHECK-NEXT: %125:gpr64sp = COPY %123:gpr64all
#CHECK-NEXT: %126:gpr64 = COPY %124:gpr64all
#CHECK-NEXT: %127:gpr64 = SUBSXri %125:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK-NEXT: %128:gpr64 = nsw ADDXrr %126:gpr64, killed %206:gpr64
#CHECK-NEXT: %129:gpr64all = COPY %127:gpr64
#CHECK-NEXT: %130:gpr64all = COPY %128:gpr64
#CHECK-NEXT: %131:gpr64sp = COPY %129:gpr64all
#CHECK-NEXT: %132:gpr64 = COPY %130:gpr64all
#CHECK-NEXT: %133:gpr64 = SUBSXri %131:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK-NEXT: %134:gpr64 = nsw ADDXrr %132:gpr64, killed %218:gpr64
#CHECK-NEXT: %135:gpr64all = COPY %133:gpr64
#CHECK-NEXT: %136:gpr64all = COPY %134:gpr64
#CHECK-NEXT: %137:gpr64sp = COPY %135:gpr64all
#CHECK-NEXT: %138:gpr64 = COPY %136:gpr64all
#CHECK-NEXT: %139:gpr64 = SUBSXri %137:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK-NEXT: %140:gpr64 = nsw ADDXrr %138:gpr64, killed %230:gpr64
#CHECK-NEXT: %141:gpr64all = COPY %139:gpr64
#CHECK-NEXT: %142:gpr64all = COPY %140:gpr64
#CHECK-NEXT: %143:gpr64sp = COPY %141:gpr64all
#CHECK-NEXT: %144:gpr64 = COPY %142:gpr64all
#CHECK-NEXT: %145:gpr64 = SUBSXri %143:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK-NEXT: %146:gpr64 = nsw ADDXrr %144:gpr64, killed %244:gpr64
#CHECK-NEXT: %147:gpr64all = COPY %145:gpr64
#CHECK-NEXT: %148:gpr64all = COPY %146:gpr64
#CHECK-NEXT: %149:gpr64sp = COPY %147:gpr64all
#CHECK-NEXT: %150:gpr64 = COPY %148:gpr64all
#CHECK-NEXT: %151:gpr64 = SUBSXri %149:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK-NEXT: %152:gpr64 = nsw ADDXrr %150:gpr64, killed %111:gpr64
#CHECK-NEXT: %153:gpr64all = COPY %151:gpr64
#CHECK-NEXT: %154:gpr64all = COPY %152:gpr64
#CHECK-NEXT: %155:gpr64sp = COPY %153:gpr64all
#CHECK-NEXT: %156:gpr64 = COPY %154:gpr64all
#CHECK-NEXT: %157:gpr64 = SUBSXri %155:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK-NEXT: %158:gpr64 = nsw ADDXrr %156:gpr64, killed %118:gpr64
#CHECK-NEXT: %159:gpr64all = COPY %157:gpr64
#CHECK-NEXT: %160:gpr64all = COPY %158:gpr64
#CHECK-NEXT: %161:gpr64sp = COPY %159:gpr64all
#CHECK-NEXT: %162:gpr64 = COPY %160:gpr64all
#CHECK-NEXT:b.10 (%ir-block.7):
#CHECK-NEXT: predecessors: %bb.9
#CHECK-NEXT: successors: %bb.11(0x40000000), %bb.13(0x40000000); %bb.11(50.00%), %bb.13(50.00%)

#CHECK: $xzr = SUBSXri %161:gpr64sp, 0, 0, implicit-def $nzcv
#CHECK-NEXT: Bcc 0, %bb.13, implicit $nzcv
#CHECK-NEXT: bb.11 (%ir-block.7):
#CHECK-NEXT: ; predecessors: %bb.10, %bb.7
#CHECK-NEXT: successors: %bb.12(0x80000000); %bb.12(100.00%)

#CHECK: %100:gpr64sp = PHI %11:gpr64all, %bb.7, %109:gpr64sp, %bb.10
#CHECK-NEXT: %101:gpr64 = PHI %12:gpr64all, %bb.7, %162:gpr64, %bb.10
#CHECK-NEXT: %102:gpr64sp = PHI %0:gpr64all, %bb.7, %161:gpr64sp, %bb.10
#CHECK-NEXT: bb.12 (%ir-block.7):
#CHECK-NEXT: ; predecessors: %bb.12, %bb.11
#CHECK-NEXT: successors: %bb.12(0x40000000), %bb.13(0x40000000); %bb.12(50.00%), %bb.13(50.00%)

#CHECK: %2:gpr64sp = PHI %100:gpr64sp, %bb.11, %6:gpr64all, %bb.12
#CHECK-NEXT: %3:gpr64 = PHI %101:gpr64, %bb.11, %5:gpr64all, %bb.12
#CHECK-NEXT: %4:gpr64sp = PHI %102:gpr64sp, %bb.11, %7:gpr64all, %bb.12
#CHECK-NEXT: early-clobber %16:gpr64sp, %17:fpr32 = LDRSpost %2:gpr64sp(tied-def 0), 4
#CHECK-NEXT: %18:gpr64 = FCVTZSUXSr killed %17:fpr32
#CHECK-NEXT: %19:gpr64 = nsw ADDXrr %3:gpr64, killed %18:gpr64
#CHECK-NEXT: %5:gpr64all = COPY %19:gpr64
#CHECK-NEXT: %6:gpr64all = COPY %16:gpr64sp
#CHECK-NEXT: %20:gpr64 = SUBSXri %4:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK-NEXT: %7:gpr64all = COPY %20:gpr64
#CHECK-NEXT: Bcc 1, %bb.12, implicit $nzcv
#CHECK-NEXT: B %bb.13
#CHECK-NEXT: bb.13 (%ir-block.7):
#CHECK-NEXT: ; predecessors: %bb.12, %bb.10
#CHECK-NEXT: successors: %bb.3(0x80000000); %bb.3(100.00%)

#CHECK: %103:gpr64all = PHI %5:gpr64all, %bb.12, %160:gpr64all, %bb.10
#CHECK: B %bb.3


--- |
  ; ModuleID = 'test3044-06.c'
  source_filename = "test3044-06.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  @A = external dso_local local_unnamed_addr global [100 x float], align 4
  
  ; Function Attrs: norecurse nounwind readonly
  define dso_local i64 @test3044(i64 %0) local_unnamed_addr #0 {
    %2 = icmp slt i64 %0, 0
    br i1 %2, label %5, label %3
  
  3:                                                ; preds = %1
    %4 = add i64 %0, 1
    call void @llvm.set.loop.iterations.i64(i64 %4)
    br label %7
  
  5:                                                ; preds = %7, %1
    %6 = phi i64 [ 0, %1 ], [ %14, %7 ]
    ret i64 %6
  
  7:                                                ; preds = %7, %3
    %8 = phi [100 x float]* [ @A, %3 ], [ %16, %7 ]
    %9 = phi i64 [ %14, %7 ], [ 0, %3 ]
    %10 = phi i64 [ %4, %3 ], [ %17, %7 ]
    %11 = bitcast [100 x float]* %8 to float*
    %12 = load float, float* %11, align 4, !tbaa !2
    %13 = fptosi float %12 to i64
    %14 = add nsw i64 %9, %13
    %15 = getelementptr [100 x float], [100 x float]* %8, i64 0, i64 1
    %16 = bitcast float* %15 to [100 x float]*
    %17 = call i64 @llvm.loop.decrement.reg.i64(i64 %10, i64 1)
    %18 = icmp ne i64 %17, 0
    br i1 %18, label %7, label %5, !llvm.loop !6
  }
  
  ; Function Attrs: noduplicate nounwind
  declare void @llvm.set.loop.iterations.i64(i64) #1
  
  ; Function Attrs: noduplicate nounwind
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #1
  
  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**) #2
  
  attributes #0 = { norecurse nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="non-leaf" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" "use-soft-float"="false" }
  attributes #1 = { noduplicate nounwind }
  attributes #2 = { nounwind }
  
  !llvm.module.flags = !{!0}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !2 = !{!3, !3, i64 0}
  !3 = !{!"float", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}
  !6 = distinct !{!6, !7}
  !7 = !{!"llvm.loop.unroll.disable"}

...
---
name:            test3044
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: gpr64all, preferred-register: '' }
  - { id: 1, class: gpr64all, preferred-register: '' }
  - { id: 2, class: gpr64sp, preferred-register: '' }
  - { id: 3, class: gpr64, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: gpr64all, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr64all, preferred-register: '' }
  - { id: 8, class: gpr64common, preferred-register: '' }
  - { id: 9, class: gpr64all, preferred-register: '' }
  - { id: 10, class: gpr64all, preferred-register: '' }
  - { id: 11, class: gpr64all, preferred-register: '' }
  - { id: 12, class: gpr64all, preferred-register: '' }
  - { id: 13, class: gpr64sp, preferred-register: '' }
  - { id: 14, class: gpr64all, preferred-register: '' }
  - { id: 15, class: gpr64common, preferred-register: '' }
  - { id: 16, class: gpr64sp, preferred-register: '' }
  - { id: 17, class: fpr32, preferred-register: '' }
  - { id: 18, class: gpr64, preferred-register: '' }
  - { id: 19, class: gpr64, preferred-register: '' }
  - { id: 20, class: gpr64, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%8' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.1):
    successors: %bb.4(0x30000000), %bb.1(0x50000000)
    liveins: $x0
  
    %8:gpr64common = COPY $x0
    TBZX %8, 63, %bb.1
  
  bb.4:
    successors: %bb.2(0x80000000)
  
    %10:gpr64all = COPY $xzr
    %9:gpr64all = COPY %10
    B %bb.2
  
  bb.1 (%ir-block.3):
    successors: %bb.3(0x80000000)
  
    %13:gpr64sp = ADDXri %8, 1, 0
    %0:gpr64all = COPY %13
    %14:gpr64all = COPY $xzr
    %12:gpr64all = COPY %14
    %15:gpr64common = MOVaddr target-flags(aarch64-page) @A, target-flags(aarch64-pageoff, aarch64-nc) @A
    %11:gpr64all = COPY %15
    B %bb.3
  
  bb.2 (%ir-block.5):
    %1:gpr64all = PHI %9, %bb.4, %5, %bb.3
    $x0 = COPY %1
    RET_ReallyLR implicit $x0
  
  bb.3 (%ir-block.7):
    successors: %bb.3(0x7c000000), %bb.2(0x04000000)
  
    %2:gpr64sp = PHI %11, %bb.1, %6, %bb.3
    %3:gpr64 = PHI %12, %bb.1, %5, %bb.3
    %4:gpr64sp = PHI %0, %bb.1, %7, %bb.3
    early-clobber %16:gpr64sp, %17:fpr32 = LDRSpost %2, 4
    %18:gpr64 = FCVTZSUXSr killed %17
    %19:gpr64 = nsw ADDXrr %3, killed %18
    %5:gpr64all = COPY %19
    %6:gpr64all = COPY %16
    %20:gpr64 = SUBSXri %4, 1, 0, implicit-def $nzcv
    %7:gpr64all = COPY %20
    Bcc 1, %bb.3, implicit $nzcv
    B %bb.2

...
