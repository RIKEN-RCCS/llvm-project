#RUN: llc %s -mcpu=a64fx -fswp -O3 -start-before=aarch64-swpipeliner -swpl-debug-dump-mir=8  -o /dev/null 2>&1 | FileCheck %s

# CHECK:** SwplTransformedMIRInfo begin **
# CHECK-NEXT:originalDoVReg:%4
# CHECK-NEXT:originalDoInitVar:%0
# CHECK-NEXT:doVReg:%81
# CHECK-NEXT:iterationInterval:3
# CHECK-NEXT:minimumIterationInterval:2
# CHECK-NEXT:coefficient: 1
# CHECK-NEXT:minConstant: 0
# CHECK-NEXT:expansion: 20
# CHECK-NEXT:nVersions: 9
# CHECK-NEXT:nCopies: 20
# CHECK-NEXT:requiredKernelIteration: 20
# CHECK-NEXT:prologEndIndx: 264
# CHECK-NEXT:kernelEndIndx: 480
# CHECK-NEXT:epilogEndIndx: 744
# CHECK-NEXT:isIterationCountConstant: 0
# CHECK-NEXT:doVRegInitialValue: 0
# CHECK-NEXT:originalKernelIteration: 0
# CHECK-NEXT:transformedKernelIteration: 0
# CHECK-NEXT:transformedModIteration: 0
# CHECK-NEXT:updateDoVRegMI:%20:gpr64 = SUBSXri %4:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:branchDoVRegMI:Bcc 1, %bb.12, implicit $nzcv
# CHECK-NEXT:branchDoVRegMIKernel:Bcc 10, %bb.4, implicit $nzcv
# CHECK-NEXT:OrgPreHeader: %bb.2
# CHECK-NEXT:Check1: %bb.7
# CHECK-NEXT:Prolog: %bb.8
# CHECK-NEXT:OrgBody: %bb.4
# CHECK-NEXT:Epilog: %bb.9
# CHECK-NEXT:NewPreHeader: %bb.11
# CHECK-NEXT:Check2: %bb.10
# CHECK-NEXT:NewBody: %bb.12
# CHECK-NEXT:NewExit: %bb.13
# CHECK-NEXT:OrgExit: %bb.3
# CHECK-NEXT:mis:
# CHECK-NEXT:** SwplTransformedMIRInfo end   **
# CHECK-NEXT:target loop:Loop at depth 1 containing: %bb.4<header><latch><exiting>
# CHECK-NEXT:LAST:
# CHECK-NEXT:bb.0 (%ir-block.1):
# CHECK-NEXT:  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
# CHECK-NEXT:  liveins: $x0
# CHECK-NEXT:  %8:gpr64common = COPY $x0
# CHECK-NEXT:  TBZX %8:gpr64common, 63, %bb.2
# CHECK-NEXT:bb.1:
# CHECK-NEXT:; predecessors: %bb.0
# CHECK-NEXT:  successors: %bb.3(0x80000000); %bb.3(100.00%)

# CHECK:  %10:gpr64all = COPY $xzr
# CHECK-NEXT:  %9:gpr64all = COPY %10:gpr64all
# CHECK-NEXT:  B %bb.3
# CHECK-NEXT:bb.2 (%ir-block.3):
# CHECK-NEXT:; predecessors: %bb.0
# CHECK-NEXT:  successors: %bb.7(0x80000000); %bb.7(100.00%)

# CHECK:  %13:gpr64sp = ADDXri %8:gpr64common, 1, 0
# CHECK-NEXT:  %0:gpr64all = COPY %13:gpr64sp
# CHECK-NEXT:  %14:gpr64all = COPY $xzr
# CHECK-NEXT:  %12:gpr64all = COPY %14:gpr64all
# CHECK-NEXT:  %15:gpr64common = MOVaddr target-flags(aarch64-page) @A, target-flags(aarch64-pageoff, aarch64-nc) @A
# CHECK-NEXT:  %11:gpr64all = COPY %15:gpr64common
# CHECK-NEXT:  B %bb.7
# CHECK-NEXT:bb.3 (%ir-block.5):
# CHECK-NEXT:; predecessors: %bb.1, %bb.13

# CHECK:  %1:gpr64all = PHI %9:gpr64all, %bb.1, %92:gpr64all, %bb.13
# CHECK-NEXT:  $x0 = COPY %1:gpr64all
# CHECK-NEXT:  RET_ReallyLR implicit $x0
# CHECK-NEXT:bb.7 (%ir-block.7):
# CHECK-NEXT:; predecessors: %bb.2
# CHECK-NEXT:  successors: %bb.8(0x40000000), %bb.11(0x40000000); %bb.8(50.00%), %bb.11(50.00%)

# CHECK:  %88:gpr64sp = COPY %0:gpr64all
# CHECK-NEXT:  $xzr = SUBSXri %88:gpr64sp, 20, 0, implicit-def $nzcv
# CHECK-NEXT:  Bcc 11, %bb.11, implicit $nzcv
# CHECK-NEXT:bb.8 (%ir-block.7):
# CHECK-NEXT:; predecessors: %bb.7
# CHECK-NEXT:  successors: %bb.4(0x80000000); %bb.4(100.00%)

# CHECK:  %21:gpr64sp = COPY %11:gpr64all
# CHECK-NEXT:  %22:gpr64 = COPY %12:gpr64all
# CHECK-NEXT:  %23:gpr64sp = COPY %0:gpr64all
# CHECK-NEXT:  %33:gpr64sp = COPY %21:gpr64sp
# CHECK-NEXT:  %57:gpr64 = COPY %22:gpr64
# CHECK-NEXT:  %81:gpr64sp = COPY %23:gpr64sp
# CHECK-NEXT:  %32:fpr32 = LDURSi %33:gpr64sp, 0
# CHECK-NEXT:  %34:gpr64sp = ADDXri %33:gpr64sp, 4, 0
# CHECK-NEXT:  %25:fpr32 = LDURSi %34:gpr64sp, 0
# CHECK-NEXT:  %156:gpr64sp = ADDXri %34:gpr64sp, 4, 0
# CHECK-NEXT:  %35:fpr32 = LDURSi %156:gpr64sp, 0
# CHECK-NEXT:  %48:gpr64 = FCVTZSUXSr killed %32:fpr32, implicit $fpcr
# CHECK-NEXT:  %37:gpr64sp = ADDXri %156:gpr64sp, 4, 0
# CHECK-NEXT:  %36:fpr32 = LDURSi %37:gpr64sp, 0
# CHECK-NEXT:  %26:gpr64 = FCVTZSUXSr killed %25:fpr32, implicit $fpcr
# CHECK-NEXT:  %39:gpr64sp = ADDXri %37:gpr64sp, 4, 0
# CHECK-NEXT:  %38:fpr32 = LDURSi %39:gpr64sp, 0
# CHECK-NEXT:  %49:gpr64 = FCVTZSUXSr killed %35:fpr32, implicit $fpcr
# CHECK-NEXT:  %41:gpr64sp = ADDXri %39:gpr64sp, 4, 0
# CHECK-NEXT:  %40:fpr32 = LDURSi %41:gpr64sp, 0
# CHECK-NEXT:  %50:gpr64 = FCVTZSUXSr killed %36:fpr32, implicit $fpcr
# CHECK-NEXT:  %43:gpr64sp = ADDXri %41:gpr64sp, 4, 0
# CHECK-NEXT:  %42:fpr32 = LDURSi %43:gpr64sp, 0
# CHECK-NEXT:  %51:gpr64 = FCVTZSUXSr killed %38:fpr32, implicit $fpcr
# CHECK-NEXT:  %45:gpr64sp = ADDXri %43:gpr64sp, 4, 0
# CHECK-NEXT:  %44:fpr32 = LDURSi %45:gpr64sp, 0
# CHECK-NEXT:  %52:gpr64 = FCVTZSUXSr killed %40:fpr32, implicit $fpcr
# CHECK-NEXT:  %47:gpr64sp = ADDXri %45:gpr64sp, 4, 0
# CHECK-NEXT:  %46:fpr32 = LDURSi %47:gpr64sp, 0
# CHECK-NEXT:  %53:gpr64 = FCVTZSUXSr killed %42:fpr32, implicit $fpcr
# CHECK-NEXT:  %157:gpr64sp = ADDXri %47:gpr64sp, 4, 0
# CHECK-NEXT:  %158:fpr32 = LDURSi %157:gpr64sp, 0
# CHECK-NEXT:  %54:gpr64 = FCVTZSUXSr killed %44:fpr32, implicit $fpcr
# CHECK-NEXT:  %159:gpr64sp = ADDXri %157:gpr64sp, 4, 0
# CHECK-NEXT:  %160:fpr32 = LDURSi %159:gpr64sp, 0
# CHECK-NEXT:  %55:gpr64 = FCVTZSUXSr killed %46:fpr32, implicit $fpcr
# CHECK-NEXT:  %161:gpr64sp = ADDXri %159:gpr64sp, 4, 0
# CHECK-NEXT:  $x0 = COPY %161:gpr64sp
# CHECK-NEXT:  $x2 = COPY %57:gpr64
# CHECK-NEXT:  $x3 = COPY %48:gpr64
# CHECK-NEXT:  $s1 = COPY %158:fpr32
# CHECK-NEXT:  $x4 = COPY %81:gpr64sp
# CHECK-NEXT:  $x5 = COPY %26:gpr64
# CHECK-NEXT:  $s2 = COPY %160:fpr32
# CHECK-NEXT:  $x6 = COPY %49:gpr64
# CHECK-NEXT:  $x7 = COPY %50:gpr64
# CHECK-NEXT:  $x8 = COPY %51:gpr64
# CHECK-NEXT:  $x9 = COPY %52:gpr64
# CHECK-NEXT:  $x10 = COPY %53:gpr64
# CHECK-NEXT:  $x11 = COPY %54:gpr64
# CHECK-NEXT:  $x14 = COPY %55:gpr64
# CHECK-NEXT:  SWPLIVEOUT implicit $x0, implicit $x2, implicit $x3, implicit $s1, implicit $x4, implicit $x5, implicit $s2, implicit $x6, implicit $x7, implicit $x8, implicit $x9, implicit $x10, implicit $x11, implicit $x14
# CHECK-NEXT:bb.4 (%ir-block.7):
# CHECK-NEXT:; predecessors: %bb.4, %bb.8
# CHECK-NEXT:  successors: %bb.4(0x7c000000), %bb.9(0x04000000); %bb.4(96.88%), %bb.9(3.12%)

# CHECK:  SWPLIVEIN implicit-def $x0, implicit-def $x2, implicit-def $x3, implicit-def $s1, implicit-def $x4, implicit-def $x5, implicit-def $s2, implicit-def $x6, implicit-def $x7, implicit-def $x8, implicit-def $x9, implicit-def $x10, implicit-def $x11, implicit-def $x14
# CHECK-NEXT:  renamable $s0 = LDURSi renamable $x0, 0
# CHECK-NEXT:  renamable $x1 = nsw ADDXrr renamable $x2, killed renamable $x3
# CHECK-NEXT:  renamable $x2 = COPY renamable $x1
# CHECK-NEXT:  renamable $x3 = FCVTZSUXSr killed renamable $s1, implicit $fpcr
# CHECK-NEXT:  renamable $x1 = SUBSXri renamable $x4, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  renamable $x4 = COPY renamable $x2
# CHECK-NEXT:  renamable $x2 = ADDXri renamable $x0, 4, 0
# CHECK-NEXT:  renamable $s1 = LDURSi renamable $x2, 0
# CHECK-NEXT:  renamable $x0 = nsw ADDXrr renamable $x4, killed renamable $x5
# CHECK-NEXT:  renamable $x4 = COPY renamable $x0
# CHECK-NEXT:  renamable $x5 = FCVTZSUXSr killed renamable $s2, implicit $fpcr
# CHECK-NEXT:  renamable $x0 = SUBSXri renamable $x1, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  renamable $x1 = COPY renamable $x4
# CHECK-NEXT:  renamable $x4 = ADDXri renamable $x2, 4, 0
# CHECK-NEXT:  renamable $s2 = LDURSi renamable $x4, 0
# CHECK-NEXT:  renamable $x2 = nsw ADDXrr renamable $x1, killed renamable $x6
# CHECK-NEXT:  renamable $x1 = COPY renamable $x2
# CHECK-NEXT:  renamable $x6 = FCVTZSUXSr killed renamable $s0, implicit $fpcr
# CHECK-NEXT:  renamable $x2 = SUBSXri renamable $x0, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  renamable $x0 = COPY renamable $x1
# CHECK-NEXT:  renamable $x1 = ADDXri renamable $x4, 4, 0
# CHECK-NEXT:  renamable $s0 = LDURSi renamable $x1, 0
# CHECK-NEXT:  renamable $x4 = nsw ADDXrr renamable $x0, killed renamable $x7
# CHECK-NEXT:  renamable $x0 = COPY renamable $x4
# CHECK-NEXT:  renamable $x7 = FCVTZSUXSr killed renamable $s1, implicit $fpcr
# CHECK-NEXT:  renamable $x4 = SUBSXri renamable $x2, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  renamable $x2 = COPY renamable $x0
# CHECK-NEXT:  renamable $x0 = ADDXri renamable $x1, 4, 0
# CHECK-NEXT:  renamable $s1 = LDURSi renamable $x0, 0
# CHECK-NEXT:  renamable $x1 = nsw ADDXrr renamable $x2, killed renamable $x8
# CHECK-NEXT:  renamable $x2 = COPY renamable $x1
# CHECK-NEXT:  renamable $x8 = FCVTZSUXSr killed renamable $s2, implicit $fpcr
# CHECK-NEXT:  renamable $x1 = SUBSXri renamable $x4, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  renamable $x4 = COPY renamable $x2
# CHECK-NEXT:  renamable $x2 = ADDXri renamable $x0, 4, 0
# CHECK-NEXT:  renamable $s2 = LDURSi renamable $x2, 0
# CHECK-NEXT:  renamable $x0 = nsw ADDXrr renamable $x4, killed renamable $x9
# CHECK-NEXT:  renamable $x4 = COPY renamable $x0
# CHECK-NEXT:  renamable $x9 = FCVTZSUXSr killed renamable $s0, implicit $fpcr
# CHECK-NEXT:  renamable $x0 = SUBSXri renamable $x1, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  renamable $x1 = COPY renamable $x4
# CHECK-NEXT:  renamable $x4 = ADDXri renamable $x2, 4, 0
# CHECK-NEXT:  renamable $s0 = LDURSi renamable $x4, 0
# CHECK-NEXT:  renamable $x2 = nsw ADDXrr renamable $x1, killed renamable $x10
# CHECK-NEXT:  renamable $x1 = COPY renamable $x2
# CHECK-NEXT:  renamable $x10 = FCVTZSUXSr killed renamable $s1, implicit $fpcr
# CHECK-NEXT:  renamable $x2 = SUBSXri renamable $x0, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  renamable $x0 = COPY renamable $x1
# CHECK-NEXT:  renamable $x1 = ADDXri renamable $x4, 4, 0
# CHECK-NEXT:  renamable $s1 = LDURSi renamable $x1, 0
# CHECK-NEXT:  renamable $x4 = nsw ADDXrr renamable $x0, killed renamable $x11
# CHECK-NEXT:  renamable $x0 = COPY renamable $x4
# CHECK-NEXT:  renamable $x11 = FCVTZSUXSr killed renamable $s2, implicit $fpcr
# CHECK-NEXT:  renamable $x12 = SUBSXri renamable $x2, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  renamable $x2 = COPY renamable $x0
# CHECK-NEXT:  renamable $x13 = ADDXri renamable $x1, 4, 0
# CHECK-NEXT:  renamable $s2 = LDURSi renamable $x13, 0
# CHECK-NEXT:  renamable $x0 = nsw ADDXrr renamable $x2, killed renamable $x14
# CHECK-NEXT:  renamable $x1 = COPY renamable $x0
# CHECK-NEXT:  renamable $x14 = FCVTZSUXSr killed renamable $s0, implicit $fpcr
# CHECK-NEXT:  renamable $x4 = SUBSXri renamable $x12, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  renamable $x2 = COPY renamable $x1
# CHECK-NEXT:  renamable $x0 = ADDXri renamable $x13, 4, 0
# CHECK-NEXT:  %139:gpr64sp = COPY $x0
# CHECK-NEXT:  %140:gpr64 = COPY $x2
# CHECK-NEXT:  %141:gpr64 = COPY $x3
# CHECK-NEXT:  %142:fpr32 = COPY $s1
# CHECK-NEXT:  %143:gpr64sp = COPY $x4
# CHECK-NEXT:  %144:gpr64 = COPY $x5
# CHECK-NEXT:  %145:gpr64all = COPY $x4
# CHECK-NEXT:  %146:fpr32 = COPY $s2
# CHECK-NEXT:  %147:gpr64sp = COPY $x0
# CHECK-NEXT:  %148:gpr64 = COPY $x1
# CHECK-NEXT:  %149:gpr64 = COPY $x6
# CHECK-NEXT:  %150:gpr64 = COPY $x7
# CHECK-NEXT:  %151:gpr64 = COPY $x8
# CHECK-NEXT:  %152:gpr64 = COPY $x9
# CHECK-NEXT:  %153:gpr64 = COPY $x10
# CHECK-NEXT:  %154:gpr64 = COPY $x11
# CHECK-NEXT:  %155:gpr64 = COPY $x14
# CHECK-NEXT:  $xzr = SUBSXri $x4, 20, 0, implicit-def $nzcv
# CHECK-NEXT:  Bcc 10, %bb.4, implicit $nzcv
# CHECK-NEXT:bb.9 (%ir-block.7):
# CHECK-NEXT:; predecessors: %bb.4
# CHECK-NEXT:  successors: %bb.10(0x80000000); %bb.10(100.00%)

# CHECK:  %93:gpr64 = nsw ADDXrr %140:gpr64, killed %141:gpr64
# CHECK-NEXT:  %94:gpr64all = COPY %93:gpr64
# CHECK-NEXT:  %95:gpr64 = FCVTZSUXSr killed %142:fpr32, implicit $fpcr
# CHECK-NEXT:  %96:gpr64sp = SUBSXri %143:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  %97:gpr64 = COPY %94:gpr64all
# CHECK-NEXT:  %98:gpr64 = nsw ADDXrr %97:gpr64, killed %144:gpr64
# CHECK-NEXT:  %99:gpr64all = COPY %98:gpr64
# CHECK-NEXT:  %100:gpr64 = FCVTZSUXSr killed %146:fpr32, implicit $fpcr
# CHECK-NEXT:  %101:gpr64sp = SUBSXri %96:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  %102:gpr64 = COPY %99:gpr64all
# CHECK-NEXT:  %103:gpr64 = nsw ADDXrr %102:gpr64, killed %149:gpr64
# CHECK-NEXT:  %104:gpr64all = COPY %103:gpr64
# CHECK-NEXT:  %105:gpr64sp = SUBSXri %101:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  %106:gpr64 = COPY %104:gpr64all
# CHECK-NEXT:  %107:gpr64 = nsw ADDXrr %106:gpr64, killed %150:gpr64
# CHECK-NEXT:  %108:gpr64all = COPY %107:gpr64
# CHECK-NEXT:  %109:gpr64sp = SUBSXri %105:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  %110:gpr64 = COPY %108:gpr64all
# CHECK-NEXT:  %111:gpr64 = nsw ADDXrr %110:gpr64, killed %151:gpr64
# CHECK-NEXT:  %112:gpr64all = COPY %111:gpr64
# CHECK-NEXT:  %113:gpr64sp = SUBSXri %109:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  %114:gpr64 = COPY %112:gpr64all
# CHECK-NEXT:  %115:gpr64 = nsw ADDXrr %114:gpr64, killed %152:gpr64
# CHECK-NEXT:  %116:gpr64all = COPY %115:gpr64
# CHECK-NEXT:  %117:gpr64sp = SUBSXri %113:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  %118:gpr64 = COPY %116:gpr64all
# CHECK-NEXT:  %119:gpr64 = nsw ADDXrr %118:gpr64, killed %153:gpr64
# CHECK-NEXT:  %120:gpr64all = COPY %119:gpr64
# CHECK-NEXT:  %121:gpr64sp = SUBSXri %117:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  %122:gpr64 = COPY %120:gpr64all
# CHECK-NEXT:  %123:gpr64 = nsw ADDXrr %122:gpr64, killed %154:gpr64
# CHECK-NEXT:  %124:gpr64all = COPY %123:gpr64
# CHECK-NEXT:  %125:gpr64sp = SUBSXri %121:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  %126:gpr64 = COPY %124:gpr64all
# CHECK-NEXT:  %127:gpr64 = nsw ADDXrr %126:gpr64, killed %155:gpr64
# CHECK-NEXT:  %128:gpr64all = COPY %127:gpr64
# CHECK-NEXT:  %129:gpr64sp = SUBSXri %125:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  %130:gpr64 = COPY %128:gpr64all
# CHECK-NEXT:  %131:gpr64 = nsw ADDXrr %130:gpr64, killed %95:gpr64
# CHECK-NEXT:  %132:gpr64all = COPY %131:gpr64
# CHECK-NEXT:  %133:gpr64sp = SUBSXri %129:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  %134:gpr64 = COPY %132:gpr64all
# CHECK-NEXT:  %135:gpr64 = nsw ADDXrr %134:gpr64, killed %100:gpr64
# CHECK-NEXT:  %136:gpr64all = COPY %135:gpr64
# CHECK-NEXT:  %137:gpr64sp = SUBSXri %133:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  %138:gpr64 = COPY %136:gpr64all
# CHECK-NEXT:bb.10 (%ir-block.7):
# CHECK-NEXT:; predecessors: %bb.9
# CHECK-NEXT:  successors: %bb.11(0x40000000), %bb.13(0x40000000); %bb.11(50.00%), %bb.13(50.00%)

# CHECK:  $xzr = SUBSXri %137:gpr64sp, 0, 0, implicit-def $nzcv
# CHECK-NEXT:  Bcc 0, %bb.13, implicit $nzcv
# CHECK-NEXT:bb.11 (%ir-block.7):
# CHECK-NEXT:; predecessors: %bb.10, %bb.7
# CHECK-NEXT:  successors: %bb.12(0x80000000); %bb.12(100.00%)

# CHECK:  %89:gpr64sp = PHI %11:gpr64all, %bb.7, %139:gpr64sp, %bb.10
# CHECK-NEXT:  %90:gpr64 = PHI %12:gpr64all, %bb.7, %138:gpr64, %bb.10
# CHECK-NEXT:  %91:gpr64sp = PHI %0:gpr64all, %bb.7, %137:gpr64sp, %bb.10
# CHECK-NEXT:bb.12 (%ir-block.7):
# CHECK-NEXT:; predecessors: %bb.12, %bb.11
# CHECK-NEXT:  successors: %bb.12(0x40000000), %bb.13(0x40000000); %bb.12(50.00%), %bb.13(50.00%)

# CHECK:  %2:gpr64sp = PHI %89:gpr64sp, %bb.11, %6:gpr64all, %bb.12
# CHECK-NEXT:  %3:gpr64 = PHI %90:gpr64, %bb.11, %5:gpr64all, %bb.12
# CHECK-NEXT:  %4:gpr64sp = PHI %91:gpr64sp, %bb.11, %7:gpr64all, %bb.12
# CHECK-NEXT:  early-clobber %16:gpr64sp, %17:fpr32 = LDRSpost %2:gpr64sp(tied-def 0), 4
# CHECK-NEXT:  %18:gpr64 = FCVTZSUXSr killed %17:fpr32, implicit $fpcr
# CHECK-NEXT:  %19:gpr64 = nsw ADDXrr %3:gpr64, killed %18:gpr64
# CHECK-NEXT:  %5:gpr64all = COPY %19:gpr64
# CHECK-NEXT:  %6:gpr64all = COPY %16:gpr64sp
# CHECK-NEXT:  %20:gpr64 = SUBSXri %4:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:  %7:gpr64all = COPY %20:gpr64
# CHECK-NEXT:  Bcc 1, %bb.12, implicit $nzcv
# CHECK-NEXT:  B %bb.13
# CHECK-NEXT:bb.13 (%ir-block.7):
# CHECK-NEXT:; predecessors: %bb.12, %bb.10
# CHECK-NEXT:  successors: %bb.3(0x80000000); %bb.3(100.00%)

# CHECK:  %92:gpr64all = PHI %5:gpr64all, %bb.12, %136:gpr64all, %bb.10
# CHECK-NEXT:  B %bb.3


--- |
  ; ModuleID = 'test3044-06.c'
  source_filename = "test3044-06.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  @A = external dso_local local_unnamed_addr global [100 x float], align 4
  
  ; Function Attrs: norecurse nounwind readonly
  define dso_local i64 @test3044(i64 %0) local_unnamed_addr #0 {
    %2 = icmp slt i64 %0, 0
    br i1 %2, label %5, label %3
  
  3:                                                ; preds = %1
    %4 = add i64 %0, 1
    call void @llvm.set.loop.iterations.i64(i64 %4)
    br label %7
  
  5:                                                ; preds = %7, %1
    %6 = phi i64 [ 0, %1 ], [ %14, %7 ]
    ret i64 %6
  
  7:                                                ; preds = %7, %3
    %8 = phi [100 x float]* [ @A, %3 ], [ %16, %7 ]
    %9 = phi i64 [ %14, %7 ], [ 0, %3 ]
    %10 = phi i64 [ %4, %3 ], [ %17, %7 ]
    %11 = bitcast [100 x float]* %8 to float*
    %12 = load float, float* %11, align 4, !tbaa !2
    %13 = fptosi float %12 to i64
    %14 = add nsw i64 %9, %13
    %15 = getelementptr [100 x float], [100 x float]* %8, i64 0, i64 1
    %16 = bitcast float* %15 to [100 x float]*
    %17 = call i64 @llvm.loop.decrement.reg.i64(i64 %10, i64 1)
    %18 = icmp ne i64 %17, 0
    br i1 %18, label %7, label %5, !llvm.loop !6
  }
  
  ; Function Attrs: noduplicate nounwind
  declare void @llvm.set.loop.iterations.i64(i64) #1
  
  ; Function Attrs: noduplicate nounwind
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #1
  
  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**) #2
  
  attributes #0 = { norecurse nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="non-leaf" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" "use-soft-float"="false" }
  attributes #1 = { noduplicate nounwind }
  attributes #2 = { nounwind }
  
  !llvm.module.flags = !{!0}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !2 = !{!3, !3, i64 0}
  !3 = !{!"float", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}
  !6 = distinct !{!6, !7}
  !7 = !{!"llvm.loop.unroll.disable"}

...
---
name:            test3044
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: gpr64all, preferred-register: '' }
  - { id: 1, class: gpr64all, preferred-register: '' }
  - { id: 2, class: gpr64sp, preferred-register: '' }
  - { id: 3, class: gpr64, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: gpr64all, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr64all, preferred-register: '' }
  - { id: 8, class: gpr64common, preferred-register: '' }
  - { id: 9, class: gpr64all, preferred-register: '' }
  - { id: 10, class: gpr64all, preferred-register: '' }
  - { id: 11, class: gpr64all, preferred-register: '' }
  - { id: 12, class: gpr64all, preferred-register: '' }
  - { id: 13, class: gpr64sp, preferred-register: '' }
  - { id: 14, class: gpr64all, preferred-register: '' }
  - { id: 15, class: gpr64common, preferred-register: '' }
  - { id: 16, class: gpr64sp, preferred-register: '' }
  - { id: 17, class: fpr32, preferred-register: '' }
  - { id: 18, class: gpr64, preferred-register: '' }
  - { id: 19, class: gpr64, preferred-register: '' }
  - { id: 20, class: gpr64, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%8' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.1):
    successors: %bb.4(0x30000000), %bb.1(0x50000000)
    liveins: $x0
  
    %8:gpr64common = COPY $x0
    TBZX %8, 63, %bb.1
  
  bb.4:
    successors: %bb.2(0x80000000)
  
    %10:gpr64all = COPY $xzr
    %9:gpr64all = COPY %10
    B %bb.2
  
  bb.1 (%ir-block.3):
    successors: %bb.3(0x80000000)
  
    %13:gpr64sp = ADDXri %8, 1, 0
    %0:gpr64all = COPY %13
    %14:gpr64all = COPY $xzr
    %12:gpr64all = COPY %14
    %15:gpr64common = MOVaddr target-flags(aarch64-page) @A, target-flags(aarch64-pageoff, aarch64-nc) @A
    %11:gpr64all = COPY %15
    B %bb.3
  
  bb.2 (%ir-block.5):
    %1:gpr64all = PHI %9, %bb.4, %5, %bb.3
    $x0 = COPY %1
    RET_ReallyLR implicit $x0
  
  bb.3 (%ir-block.7):
    successors: %bb.3(0x7c000000), %bb.2(0x04000000)
  
    %2:gpr64sp = PHI %11, %bb.1, %6, %bb.3
    %3:gpr64 = PHI %12, %bb.1, %5, %bb.3
    %4:gpr64sp = PHI %0, %bb.1, %7, %bb.3
    early-clobber %16:gpr64sp, %17:fpr32 = LDRSpost %2, 4
    %18:gpr64 = FCVTZSUXSr killed %17, implicit $fpcr
    %19:gpr64 = nsw ADDXrr %3, killed %18
    %5:gpr64all = COPY %19
    %6:gpr64all = COPY %16
    %20:gpr64 = SUBSXri %4, 1, 0, implicit-def $nzcv
    %7:gpr64all = COPY %20
    Bcc 1, %bb.3, implicit $nzcv
    B %bb.2

...
