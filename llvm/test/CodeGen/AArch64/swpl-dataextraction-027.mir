# RUN: llc %s  -fswp -swpl-debug-dump-ddg  -mcpu=a64fx -start-before=aarch64-swpipeliner  -o /dev/null 2>&1 | FileCheck %s
# CHECK:### from: %20:gpr64common = nuw nsw ADDXri %20:gpr64common, 8, 0
# CHECK-NEXT: ### to  : %22:gpr64common = ADDXrr %10:gpr64common, %20:gpr64common
# CHECK-NEXT: ### distance:1 delay:1

# CHECK:### from: %22:gpr64common = ADDXrr %10:gpr64common, %20:gpr64common
# CHECK-NEXT: ### to  : %23:gpr64 = LDRXui %22:gpr64common, 0 :: (load (s64) from %ir.uglygep67, !tbaa !1)
# CHECK-NEXT: ### distance:0 delay:1

# CHECK:### from: %23:gpr64 = LDRXui %22:gpr64common, 0 :: (load (s64) from %ir.uglygep67, !tbaa !1)
# CHECK-NEXT: ### to  : STRXroX killed %23:gpr64, %13:gpr64common, %20:gpr64common, 0, 0 :: (store (s64) into %ir.uglygep45, !tbaa !1)
# CHECK-NEXT: ### distance:0 delay:5
# CHECK-NEXT: ### distance:20 delay:1

# CHECK:### from: %20:gpr64common = nuw nsw ADDXri %20:gpr64common, 8, 0
# CHECK-NEXT: ### to  : STRXroX killed %23:gpr64, %13:gpr64common, %20:gpr64common, 0, 0 :: (store (s64) into %ir.uglygep45, !tbaa !1)
# CHECK-NEXT: ### distance:1 delay:1

# CHECK:### from: %20:gpr64common = nuw nsw ADDXri %20:gpr64common, 8, 0
# CHECK-NEXT: ### to  : %24:gpr64common = ADDXrr %14:gpr64common, %20:gpr64common
# CHECK-NEXT: ### distance:1 delay:1

# CHECK:### from: %24:gpr64common = ADDXrr %14:gpr64common, %20:gpr64common
# CHECK-NEXT: ### to  : %25:fpr64 = LDRDui killed %24:gpr64common, 1 :: (load (s64) from %ir.uglygep23, !tbaa !1)
# CHECK-NEXT: ### distance:0 delay:1

# CHECK:### from: %25:fpr64 = LDRDui killed %24:gpr64common, 1 :: (load (s64) from %ir.uglygep23, !tbaa !1)
# CHECK-NEXT: ### to  : %26:fpr64 = FMULDrr %0:fpr64, killed %25:fpr64, implicit $fpcr
# CHECK-NEXT: ### distance:0 delay:8

# CHECK:### from: %26:fpr64 = FMULDrr %0:fpr64, killed %25:fpr64, implicit $fpcr
# CHECK-NEXT: ### to  : STRDui killed %26:fpr64, %22:gpr64common, 1 :: (store (s64) into %ir.scevgep, !tbaa !1)
# CHECK-NEXT: ### distance:0 delay:9

# CHECK:### from: %22:gpr64common = ADDXrr %10:gpr64common, %20:gpr64common
# CHECK-NEXT: ### to  : STRDui killed %26:fpr64, %22:gpr64common, 1 :: (store (s64) into %ir.scevgep, !tbaa !1)
# CHECK-NEXT: ### distance:0 delay:1

# CHECK:### from: %20:gpr64common = nuw nsw ADDXri %20:gpr64common, 8, 0
# CHECK-NEXT: ### to  : %20:gpr64common = nuw nsw ADDXri %20:gpr64common, 8, 0
# CHECK-NEXT: ### distance:1 delay:1

# CHECK:### from: %21:gpr64sp = SUBSXri %21:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT: ### to  : %21:gpr64sp = SUBSXri %21:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT: ### distance:1 delay:1

# CHECK:### from: %23:gpr64 = LDRXui %22:gpr64common, 0 :: (load (s64) from %ir.uglygep67, !tbaa !1)
# CHECK-NEXT: ### to  : STRDui killed %26:fpr64, %22:gpr64common, 1 :: (store (s64) into %ir.scevgep, !tbaa !1)
# CHECK-NEXT: ### distance:20 delay:1

# CHECK:### from: STRXroX killed %23:gpr64, %13:gpr64common, %20:gpr64common, 0, 0 :: (store (s64) into %ir.uglygep45, !tbaa !1)
# CHECK-NEXT: ### to  : %23:gpr64 = LDRXui %22:gpr64common, 0 :: (load (s64) from %ir.uglygep67, !tbaa !1)
# CHECK-NEXT: ### distance:20 delay:6

# CHECK:### from: STRXroX killed %23:gpr64, %13:gpr64common, %20:gpr64common, 0, 0 :: (store (s64) into %ir.uglygep45, !tbaa !1)
# CHECK-NEXT: ### to  : %25:fpr64 = LDRDui killed %24:gpr64common, 1 :: (load (s64) from %ir.uglygep23, !tbaa !1)
# CHECK-NEXT: ### distance:20 delay:6

# CHECK:### from: STRXroX killed %23:gpr64, %13:gpr64common, %20:gpr64common, 0, 0 :: (store (s64) into %ir.uglygep45, !tbaa !1)
# CHECK-NEXT: ### to  : STRDui killed %26:fpr64, %22:gpr64common, 1 :: (store (s64) into %ir.scevgep, !tbaa !1)
# CHECK-NEXT: ### distance:20 delay:1

# CHECK:### from: %25:fpr64 = LDRDui killed %24:gpr64common, 1 :: (load (s64) from %ir.uglygep23, !tbaa !1)
# CHECK-NEXT: ### to  : STRXroX killed %23:gpr64, %13:gpr64common, %20:gpr64common, 0, 0 :: (store (s64) into %ir.uglygep45, !tbaa !1)
# CHECK-NEXT: ### distance:20 delay:1

# CHECK:### from: %25:fpr64 = LDRDui killed %24:gpr64common, 1 :: (load (s64) from %ir.uglygep23, !tbaa !1)
# CHECK-NEXT: ### to  : STRDui killed %26:fpr64, %22:gpr64common, 1 :: (store (s64) into %ir.scevgep, !tbaa !1)
# CHECK-NEXT: ### distance:20 delay:1

# CHECK:### from: STRDui killed %26:fpr64, %22:gpr64common, 1 :: (store (s64) into %ir.scevgep, !tbaa !1)
# CHECK-NEXT: ### to  : %23:gpr64 = LDRXui %22:gpr64common, 0 :: (load (s64) from %ir.uglygep67, !tbaa !1)
# CHECK-NEXT: ### distance:1 delay:6

# CHECK:### from: STRDui killed %26:fpr64, %22:gpr64common, 1 :: (store (s64) into %ir.scevgep, !tbaa !1)
# CHECK-NEXT: ### to  : STRXroX killed %23:gpr64, %13:gpr64common, %20:gpr64common, 0, 0 :: (store (s64) into %ir.uglygep45, !tbaa !1)
# CHECK-NEXT: ### distance:20 delay:1

# CHECK:### from: STRDui killed %26:fpr64, %22:gpr64common, 1 :: (store (s64) into %ir.scevgep, !tbaa !1)
# CHECK-NEXT: ### to  : %25:fpr64 = LDRDui killed %24:gpr64common, 1 :: (load (s64) from %ir.uglygep23, !tbaa !1)
# CHECK-NEXT: ### distance:20 delay:6

--- |
  ; ModuleID = '2937-27.ll'
  source_filename = "2937-27.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux"
  
  @a = dso_local local_unnamed_addr global [1000 x double] zeroinitializer, align 8
  @b = dso_local local_unnamed_addr global [1000 x double] zeroinitializer, align 8
  @y = dso_local local_unnamed_addr global double 0.000000e+00, align 8
  @c = dso_local local_unnamed_addr global [1000 x double] zeroinitializer, align 8
  @x = dso_local local_unnamed_addr global double 0.000000e+00, align 8
  
  ; Function Attrs: nofree norecurse nounwind
  define dso_local void @foo() local_unnamed_addr #0 {
    %1 = load double, double* @y, align 8, !tbaa !2
    call void @llvm.set.loop.iterations.i64(i64 100)
    br label %3
  
  2:                                                ; preds = %3
    ret void
  
  3:                                                ; preds = %3, %0
    %lsr.iv = phi i64 [ %lsr.iv.next, %3 ], [ 0, %0 ]
    %4 = phi i64 [ 100, %0 ], [ %8, %3 ]
    %uglygep6 = getelementptr i8, i8* bitcast ([1000 x double]* @a to i8*), i64 %lsr.iv
    %uglygep67 = bitcast i8* %uglygep6 to i64*
    %5 = load i64, i64* %uglygep67, align 8, !tbaa !2
    %uglygep4 = getelementptr i8, i8* bitcast ([1000 x double]* @b to i8*), i64 %lsr.iv
    %uglygep45 = bitcast i8* %uglygep4 to i64*
    store i64 %5, i64* %uglygep45, align 8, !tbaa !2
    %uglygep2 = getelementptr i8, i8* bitcast (double* getelementptr inbounds ([1000 x double], [1000 x double]* @c, i64 0, i64 1) to i8*), i64 %lsr.iv
    %uglygep23 = bitcast i8* %uglygep2 to double*
    %6 = load double, double* %uglygep23, align 8, !tbaa !2
    %7 = fmul double %1, %6
    %uglygep = getelementptr i8, i8* bitcast ([1000 x double]* @a to i8*), i64 %lsr.iv
    %uglygep1 = bitcast i8* %uglygep to double*
    %scevgep = getelementptr double, double* %uglygep1, i64 1
    store double %7, double* %scevgep, align 8, !tbaa !2
    %lsr.iv.next = add nuw nsw i64 %lsr.iv, 8
    %8 = call i64 @llvm.loop.decrement.reg.i64(i64 %4, i64 1)
    %9 = icmp ne i64 %8, 0
    br i1 %9, label %3, label %2, !llvm.loop !6
  }
  
  ; Function Attrs: noduplicate nounwind
  declare void @llvm.set.loop.iterations.i64(i64) #1
  
  ; Function Attrs: noduplicate nounwind
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #1
  
  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**) #2
  
  attributes #0 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="non-leaf" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { noduplicate nounwind }
  attributes #2 = { nounwind }
  
  !llvm.module.flags = !{!0}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !2 = !{!3, !3, i64 0}
  !3 = !{!"double", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}
  !6 = distinct !{!6, !7}
  !7 = !{!"llvm.loop.unroll.disable"}

...
---
name:            foo
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: fpr64, preferred-register: '' }
  - { id: 1, class: gpr64common, preferred-register: '' }
  - { id: 2, class: gpr64sp, preferred-register: '' }
  - { id: 3, class: gpr64all, preferred-register: '' }
  - { id: 4, class: gpr64all, preferred-register: '' }
  - { id: 5, class: gpr64all, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr64common, preferred-register: '' }
  - { id: 8, class: gpr64all, preferred-register: '' }
  - { id: 9, class: gpr32, preferred-register: '' }
  - { id: 10, class: gpr64common, preferred-register: '' }
  - { id: 11, class: gpr64common, preferred-register: '' }
  - { id: 12, class: gpr64, preferred-register: '' }
  - { id: 13, class: gpr64common, preferred-register: '' }
  - { id: 14, class: gpr64common, preferred-register: '' }
  - { id: 15, class: gpr64common, preferred-register: '' }
  - { id: 16, class: fpr64, preferred-register: '' }
  - { id: 17, class: fpr64, preferred-register: '' }
  - { id: 18, class: gpr64sp, preferred-register: '' }
  - { id: 19, class: gpr64, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    successors: %bb.2(0x80000000)
  
    %7:gpr64common = ADRP target-flags(aarch64-page) @y
    %0:fpr64 = LDRDui killed %7, target-flags(aarch64-pageoff, aarch64-nc) @y :: (dereferenceable load 8 from @y, !tbaa !2)
    %8:gpr64all = COPY $xzr
    %5:gpr64all = COPY %8
    %9:gpr32 = MOVi32imm 100
    %6:gpr64all = SUBREG_TO_REG 0, killed %9, %subreg.sub_32
    %10:gpr64common = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a
    %13:gpr64common = MOVaddr target-flags(aarch64-page) @b, target-flags(aarch64-pageoff, aarch64-nc) @b
    %14:gpr64common = MOVaddr target-flags(aarch64-page) @c, target-flags(aarch64-pageoff, aarch64-nc) @c
    B %bb.2
  
  bb.1 (%ir-block.2):
    RET_ReallyLR
  
  bb.2 (%ir-block.3):
    successors: %bb.2(0x7c000000), %bb.1(0x04000000)
  
    %1:gpr64common = PHI %5, %bb.0, %3, %bb.2
    %2:gpr64sp = PHI %6, %bb.0, %4, %bb.2
    %11:gpr64common = ADDXrr %10, %1
    %12:gpr64 = LDRXui %11, 0 :: (load 8 from %ir.uglygep67, !tbaa !2)
    STRXroX killed %12, %13, %1, 0, 0 :: (store 8 into %ir.uglygep45, !tbaa !2)
    %15:gpr64common = ADDXrr %14, %1
    %16:fpr64 = LDRDui killed %15, 1 :: (load 8 from %ir.uglygep23, !tbaa !2)
    %17:fpr64 = FMULDrr %0, killed %16, implicit $fpcr
    STRDui killed %17, %11, 1 :: (store 8 into %ir.scevgep, !tbaa !2)
    %18:gpr64sp = nuw nsw ADDXri %1, 8, 0
    %3:gpr64all = COPY %18
    %19:gpr64 = SUBSXri %2, 1, 0, implicit-def $nzcv
    %4:gpr64all = COPY %19
    Bcc 1, %bb.2, implicit $nzcv
    B %bb.1

...
