#RUN: llc %s -mcpu=a64fx -ffj-swp -O1  -start-before=aarch64-swpipeliner -swpl-debug-dump-plan -swpl-real-fetch-width=2 -swpl-virtual-fetch-width=6  -o /dev/null 2>&1 | FileCheck %s

#CHECK:(plan {{[A-Za-z0-9]+}}:
#CHECK-NEXT:  iteration_interval  = 6
#CHECK-NEXT:  n_iteration_copies  = 2
#CHECK-NEXT:  n_renaming_versions = 1
#CHECK-NEXT:  begin_slot = 999888
#CHECK-NEXT:  end_slot   = 999984
#CHECK-NEXT:  total_cycles  = 18
#CHECK-NEXT:  prolog_cycles = 6
#CHECK-NEXT:  kernel_cycles = 6
#CHECK-NEXT:  epilog_cycles = 6

#CHECK:	( MachineInstr* : OpcodeName )

#CHECK:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		({{[A-Za-z0-9]+}}:COPY)		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		({{[A-Za-z0-9]+}}:ADDWri)	
#CHECK-NEXT:	({{[A-Za-z0-9]+}}:INSERT_SUBREG)		--1--		--2--		--3--		--4--		--5--		--6--		({{[A-Za-z0-9]+}}:ADDXri)	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		({{[A-Za-z0-9]+}}:COPY)		({{[A-Za-z0-9]+}}:COPY)	

#CHECK:	--0--		--1--		--2--		--3--		--4--		--5--		({{[A-Za-z0-9]+}}:COPY)		({{[A-Za-z0-9]+}}:STRWpost)	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		({{[A-Za-z0-9]+}}:SUBSXri)		({{[A-Za-z0-9]+}}:COPY)	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		({{[A-Za-z0-9]+}}:COPY)	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		({{[A-Za-z0-9]+}}:COPY)		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		({{[A-Za-z0-9]+}}:COPY)		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:)
#CHECK-NEXT:(plan {{[A-Za-z0-9]+}}:
#CHECK-NEXT:  iteration_interval  = 8
#CHECK-NEXT:  n_iteration_copies  = 3
#CHECK-NEXT:  n_renaming_versions = 2
#CHECK-NEXT:  begin_slot = 999872
#CHECK-NEXT:  end_slot   = 1000000
#CHECK-NEXT:  total_cycles  = 32
#CHECK-NEXT:  prolog_cycles = 8
#CHECK-NEXT:  kernel_cycles = 16
#CHECK-NEXT:  epilog_cycles = 8

#CHECK:	( MachineInstr* : OpcodeName )

#CHECK:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		({{[A-Za-z0-9]+}}:ADDv4i32)	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		({{[A-Za-z0-9]+}}:MULv4i32)		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	

#CHECK:	--0--		--1--		--2--		--3--		--4--		--5--		({{[A-Za-z0-9]+}}:COPY)		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		({{[A-Za-z0-9]+}}:SUBSXri)		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		({{[A-Za-z0-9]+}}:COPY)		--7--	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		--6--		({{[A-Za-z0-9]+}}:ADDXri)	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		({{[A-Za-z0-9]+}}:STRQroX)		({{[A-Za-z0-9]+}}:COPY)	
#CHECK-NEXT:	--0--		--1--		--2--		--3--		--4--		--5--		({{[A-Za-z0-9]+}}:COPY)		({{[A-Za-z0-9]+}}:COPY)	
#CHECK-NEXT:)



--- |
  ; ModuleID = '/TEST/tp/testprg.ll'
  source_filename = "/TEST/tp/testprg.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  ; Function Attrs: nofree norecurse nounwind
  define dso_local i32 @test(i32* nocapture %0) local_unnamed_addr #0 !dbg !7 {
    call void @llvm.set.loop.iterations.i64(i64 24), !dbg !10
    br label %2, !dbg !10
  
  2:                                                ; preds = %2, %1
    %lsr.iv3 = phi i64 [ %lsr.iv.next4, %2 ], [ 4, %1 ]
    %3 = phi <4 x i32> [ <i32 1, i32 2, i32 3, i32 4>, %1 ], [ %7, %2 ], !dbg !11
    %4 = phi i64 [ 24, %1 ], [ %8, %2 ]
    %5 = bitcast i32* %0 to i8*
    %6 = mul <4 x i32> %3, <i32 10, i32 10, i32 10, i32 10>, !dbg !11
    %uglygep = getelementptr i8, i8* %5, i64 %lsr.iv3, !dbg !11
    %uglygep5 = bitcast i8* %uglygep to <4 x i32>*
    store <4 x i32> %6, <4 x i32>* %uglygep5, align 4, !dbg !11, !tbaa !12
    %7 = add <4 x i32> %3, <i32 4, i32 4, i32 4, i32 4>, !dbg !11
    %lsr.iv.next4 = add nuw nsw i64 %lsr.iv3, 16
    %8 = call i64 @llvm.loop.decrement.reg.i64(i64 %4, i64 1)
    %9 = icmp ne i64 %8, 0
    br i1 %9, label %2, label %.preheader, !llvm.loop !16
  
  .preheader:                                       ; preds = %2
    %scevgep = getelementptr i32, i32* %0, i64 97, !dbg !10
    call void @llvm.set.loop.iterations.i64(i64 3), !dbg !10
    br label %10, !dbg !10
  
  10:                                               ; preds = %10, %.preheader
    %lsr.iv1 = phi i32* [ %scevgep, %.preheader ], [ %scevgep2, %10 ]
    %lsr.iv = phi i64 [ -30, %.preheader ], [ %lsr.iv.next, %10 ]
    %11 = phi i64 [ 3, %.preheader ], [ %13, %10 ], !dbg !11
    %12 = add i64 %lsr.iv, 1000, !dbg !11
    %tmp = trunc i64 %12 to i32
    store i32 %tmp, i32* %lsr.iv1, align 4, !dbg !11, !tbaa !12
    %lsr.iv.next = add nsw i64 %lsr.iv, 10, !dbg !20
    %scevgep2 = getelementptr i32, i32* %lsr.iv1, i64 1, !dbg !20
    %13 = call i64 @llvm.loop.decrement.reg.i64(i64 %11, i64 1), !dbg !10
    %14 = icmp ne i64 %13, 0, !dbg !10
    br i1 %14, label %10, label %15, !dbg !10, !llvm.loop !21
  
  15:                                               ; preds = %10
    %16 = getelementptr inbounds i32, i32* %0, i64 99, !dbg !22
    %17 = load i32, i32* %16, align 4, !dbg !22, !tbaa !12
    ret i32 %17, !dbg !23
  }
  
  ; Function Attrs: noduplicate nounwind
  declare void @llvm.set.loop.iterations.i64(i64) #1
  
  ; Function Attrs: noduplicate nounwind
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #1
  
  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**) #2
  
  attributes #0 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="non-leaf" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" "use-soft-float"="false" }
  attributes #1 = { noduplicate nounwind }
  attributes #2 = { nounwind }
  
  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!3, !4, !5}
  !llvm.ident = !{!6}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 11.0.0 ", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly, enums: !2, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "/TEST/tp/testprg.c", directory: "/TEST")
  !2 = !{}
  !3 = !{i32 7, !"Dwarf Version", i32 4}
  !4 = !{i32 2, !"Debug Info Version", i32 3}
  !5 = !{i32 1, !"wchar_size", i32 4}
  !6 = !{!"clang version 11.0.0"}
  !7 = distinct !DISubprogram(name: "test", scope: !8, file: !8, line: 1, type: !9, scopeLine: 2, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2)
  !8 = !DIFile(filename: "tp/testprg.c", directory: "/TEST")
  !9 = !DISubroutineType(types: !2)
  !10 = !DILocation(line: 5, column: 3, scope: !7)
  !11 = !DILocation(line: 7, column: 10, scope: !7)
  !12 = !{!13, !13, i64 0}
  !13 = !{!"int", !14, i64 0}
  !14 = !{!"omnipotent char", !15, i64 0}
  !15 = !{!"Simple C/C++ TBAA"}
  !16 = distinct !{!16, !10, !17, !18, !19}
  !17 = !DILocation(line: 8, column: 3, scope: !7)
  !18 = !{!"llvm.loop.unroll.disable"}
  !19 = !{!"llvm.loop.isvectorized", i32 1}
  !20 = !DILocation(line: 5, column: 17, scope: !7)
  !21 = distinct !{!21, !10, !17, !18, !19}
  !22 = !DILocation(line: 10, column: 10, scope: !7)
  !23 = !DILocation(line: 10, column: 3, scope: !7)

...
---
name:            test
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: gpr64common, preferred-register: '' }
  - { id: 1, class: fpr128, preferred-register: '' }
  - { id: 2, class: gpr64sp, preferred-register: '' }
  - { id: 3, class: fpr128, preferred-register: '' }
  - { id: 4, class: gpr64all, preferred-register: '' }
  - { id: 5, class: gpr64all, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr64sp, preferred-register: '' }
  - { id: 8, class: gpr64sp, preferred-register: '' }
  - { id: 9, class: gpr64sp, preferred-register: '' }
  - { id: 10, class: gpr64all, preferred-register: '' }
  - { id: 11, class: gpr64all, preferred-register: '' }
  - { id: 12, class: gpr64all, preferred-register: '' }
  - { id: 13, class: gpr64common, preferred-register: '' }
  - { id: 14, class: gpr64all, preferred-register: '' }
  - { id: 15, class: fpr128, preferred-register: '' }
  - { id: 16, class: gpr64all, preferred-register: '' }
  - { id: 17, class: gpr64common, preferred-register: '' }
  - { id: 18, class: gpr32, preferred-register: '' }
  - { id: 19, class: gpr32, preferred-register: '' }
  - { id: 20, class: fpr128, preferred-register: '' }
  - { id: 21, class: fpr128, preferred-register: '' }
  - { id: 22, class: fpr128, preferred-register: '' }
  - { id: 23, class: gpr64sp, preferred-register: '' }
  - { id: 24, class: gpr64, preferred-register: '' }
  - { id: 25, class: gpr64all, preferred-register: '' }
  - { id: 26, class: gpr64all, preferred-register: '' }
  - { id: 27, class: gpr64sp, preferred-register: '' }
  - { id: 28, class: gpr64, preferred-register: '' }
  - { id: 29, class: gpr32, preferred-register: '' }
  - { id: 30, class: gpr32sp, preferred-register: '' }
  - { id: 31, class: gpr32sp, preferred-register: '' }
  - { id: 32, class: gpr64all, preferred-register: '' }
  - { id: 33, class: gpr64all, preferred-register: '' }
  - { id: 34, class: gpr32, preferred-register: '' }
  - { id: 35, class: gpr64sp, preferred-register: '' }
  - { id: 36, class: gpr64sp, preferred-register: '' }
  - { id: 37, class: gpr64, preferred-register: '' }
  - { id: 38, class: gpr32, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%13' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
constants:
  - id:              0
    value:           '<4 x i32> <i32 1, i32 2, i32 3, i32 4>'
    alignment:       16
    isTargetSpecific: false
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.1):
    successors: %bb.1(0x80000000)
    liveins: $x0
  
    %13:gpr64common = COPY $x0
    %17:gpr64common = ADRP target-flags(aarch64-page) %const.0
    %15:fpr128 = LDRQui killed %17, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 16 from constant-pool)
    %18:gpr32 = MOVi32imm 24
    %16:gpr64all = SUBREG_TO_REG 0, killed %18, %subreg.sub_32
    %19:gpr32 = MOVi32imm 4
    %14:gpr64all = SUBREG_TO_REG 0, killed %19, %subreg.sub_32
    %20:fpr128 = MOVIv4i32 10, 0
    %22:fpr128 = MOVIv4i32 4, 0
  
  bb.1 (%ir-block.2):
    successors: %bb.1(0x7c000000), %bb.2(0x04000000)
  
    %0:gpr64common = PHI %14, %bb.0, %4, %bb.1
    %1:fpr128 = PHI %15, %bb.0, %3, %bb.1, debug-location !11
    %2:gpr64sp = PHI %16, %bb.0, %5, %bb.1
    %21:fpr128 = MULv4i32 %1, %20, debug-location !11
    STRQroX killed %21, %13, %0, 0, 0, debug-location !11 :: (store 16 into %ir.uglygep5, align 4, !tbaa !12)
    %3:fpr128 = ADDv4i32 %1, %22, debug-location !11
    %23:gpr64sp = nuw nsw ADDXri %0, 16, 0
    %4:gpr64all = COPY %23
    %24:gpr64 = SUBSXri %2, 1, 0, implicit-def $nzcv
    %5:gpr64all = COPY %24
    Bcc 1, %bb.1, implicit $nzcv
    B %bb.2
  
  bb.2..preheader:
    successors: %bb.3(0x80000000)
  
    %27:gpr64sp = ADDXri %13, 388, 0, debug-location !10
    %6:gpr64all = COPY %27, debug-location !10
    %28:gpr64 = MOVi64imm -30
    %25:gpr64all = COPY %28
    %29:gpr32 = MOVi32imm 3
    %26:gpr64all = SUBREG_TO_REG 0, killed %29, %subreg.sub_32
    %33:gpr64all = IMPLICIT_DEF
  
  bb.3 (%ir-block.10):
    successors: %bb.3(0x7c000000), %bb.4(0x04000000)
  
    %7:gpr64sp = PHI %6, %bb.2, %11, %bb.3
    %8:gpr64sp = PHI %25, %bb.2, %10, %bb.3
    %9:gpr64sp = PHI %26, %bb.2, %12, %bb.3, debug-location !11
    %30:gpr32sp = COPY %8.sub_32, debug-location !11
    %31:gpr32sp = ADDWri killed %30, 1000, 0, debug-location !11
    %32:gpr64all = INSERT_SUBREG %33, killed %31, %subreg.sub_32, debug-location !11
    %34:gpr32 = COPY %32.sub_32, debug-location !11
    early-clobber %35:gpr64sp = STRWpost killed %34, %7, 4, debug-location !11 :: (store 4 into %ir.lsr.iv1, !tbaa !12)
    %36:gpr64sp = nsw ADDXri %8, 10, 0, debug-location !20
    %10:gpr64all = COPY %36, debug-location !20
    %11:gpr64all = COPY %35, debug-location !20
    %37:gpr64 = SUBSXri %9, 1, 0, implicit-def $nzcv, debug-location !10
    %12:gpr64all = COPY %37, debug-location !10
    Bcc 1, %bb.3, implicit $nzcv, debug-location !10
    B %bb.4, debug-location !10
  
  bb.4 (%ir-block.15):
    %38:gpr32 = LDRWui %13, 99, debug-location !22 :: (load 4 from %ir.16, !tbaa !12)
    $w0 = COPY %38, debug-location !23
    RET_ReallyLR implicit $w0, debug-location !23

...
