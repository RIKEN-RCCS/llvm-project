# RUN: llc -mcpu=a64fx -O1 -fswp -swpl-max-preg=32 -start-before=aarch64-swpipeliner -pass-remarks-missed=aarch64-swpipeliner -swpl-maxii=47 %s -o /dev/null 2>&1 | FileCheck %s
# CHECK: remark: a.c:14:4: Failed to allocate physical register. VReg=%107:ppr_3b

--- |
  ; ModuleID = 'a.c'
  source_filename = "a.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  @a = dso_local local_unnamed_addr global [10000 x double] zeroinitializer, align 8
  @b = dso_local local_unnamed_addr global [10000 x double] zeroinitializer, align 8
  @c = dso_local local_unnamed_addr global [10000 x double] zeroinitializer, align 8
  @d = dso_local local_unnamed_addr global [10000 x double] zeroinitializer, align 8
  @e = dso_local local_unnamed_addr global [10000 x double] zeroinitializer, align 8
  @f = dso_local local_unnamed_addr global [10000 x double] zeroinitializer, align 8
  @g = dso_local local_unnamed_addr global [10000 x double] zeroinitializer, align 8
  @h = dso_local local_unnamed_addr global [10000 x double] zeroinitializer, align 8
  @i = dso_local local_unnamed_addr global [10000 x double] zeroinitializer, align 8
  @j = dso_local local_unnamed_addr global [10000 x double] zeroinitializer, align 8
  
  ; Function Attrs: nofree norecurse nosync nounwind uwtable vscale_range(4,4)
  define dso_local void @xxx() local_unnamed_addr #0 !dbg !9 {
  entry:
    %0 = call i64 @llvm.start.loop.iterations.i64(i64 1250), !dbg !12
    br label %vector.body, !dbg !12
  
  vector.body:                                      ; preds = %vector.body, %entry
    %lsr.iv = phi i64 [ %lsr.iv.next, %vector.body ], [ 0, %entry ], !dbg !13
    %1 = phi i64 [ %0, %entry ], [ %22, %vector.body ], !dbg !14
    %uglygep = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !14
    %wide.load = load <vscale x 2 x double>, ptr %uglygep, align 8, !dbg !14, !tbaa !15
    %2 = fcmp fast olt <vscale x 2 x double> %wide.load, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+02, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !19
    %uglygep286 = getelementptr i8, ptr @b, i64 %lsr.iv, !dbg !20
    %wide.load267 = load <vscale x 2 x double>, ptr %uglygep286, align 8, !dbg !20, !tbaa !15
    tail call void @llvm.masked.store.nxv2f64.p0(<vscale x 2 x double> %wide.load267, ptr %uglygep, i32 8, <vscale x 2 x i1> %2), !dbg !21, !tbaa !15
    %predphi = select <vscale x 2 x i1> %2, <vscale x 2 x double> %wide.load267, <vscale x 2 x double> %wide.load
    %3 = fcmp fast olt <vscale x 2 x double> %wide.load267, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+02, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !22
    %uglygep287 = getelementptr i8, ptr @c, i64 %lsr.iv, !dbg !20
    %wide.load268 = load <vscale x 2 x double>, ptr %uglygep287, align 8, !dbg !20, !tbaa !15
    tail call void @llvm.masked.store.nxv2f64.p0(<vscale x 2 x double> %wide.load268, ptr %uglygep286, i32 8, <vscale x 2 x i1> %3), !dbg !23, !tbaa !15
    %predphi269 = select <vscale x 2 x i1> %3, <vscale x 2 x double> %wide.load268, <vscale x 2 x double> %wide.load267
    %4 = fcmp fast olt <vscale x 2 x double> %wide.load268, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+02, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !24
    %uglygep288 = getelementptr i8, ptr @d, i64 %lsr.iv, !dbg !20
    %wide.load270 = load <vscale x 2 x double>, ptr %uglygep288, align 8, !dbg !20, !tbaa !15
    tail call void @llvm.masked.store.nxv2f64.p0(<vscale x 2 x double> %wide.load270, ptr %uglygep287, i32 8, <vscale x 2 x i1> %4), !dbg !25, !tbaa !15
    %predphi271 = select <vscale x 2 x i1> %4, <vscale x 2 x double> %wide.load270, <vscale x 2 x double> %wide.load268
    %5 = fcmp fast olt <vscale x 2 x double> %wide.load270, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+02, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !26
    %uglygep289 = getelementptr i8, ptr @e, i64 %lsr.iv, !dbg !20
    %wide.load272 = load <vscale x 2 x double>, ptr %uglygep289, align 8, !dbg !20, !tbaa !15
    tail call void @llvm.masked.store.nxv2f64.p0(<vscale x 2 x double> %wide.load272, ptr %uglygep288, i32 8, <vscale x 2 x i1> %5), !dbg !27, !tbaa !15
    %predphi273 = select <vscale x 2 x i1> %5, <vscale x 2 x double> %wide.load272, <vscale x 2 x double> %wide.load270
    %6 = fcmp fast olt <vscale x 2 x double> %wide.load272, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+02, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !28
    %uglygep290 = getelementptr i8, ptr @f, i64 %lsr.iv, !dbg !20
    %wide.load274 = load <vscale x 2 x double>, ptr %uglygep290, align 8, !dbg !20, !tbaa !15
    tail call void @llvm.masked.store.nxv2f64.p0(<vscale x 2 x double> %wide.load274, ptr %uglygep289, i32 8, <vscale x 2 x i1> %6), !dbg !29, !tbaa !15
    %predphi275 = select <vscale x 2 x i1> %6, <vscale x 2 x double> %wide.load274, <vscale x 2 x double> %wide.load272
    %7 = fcmp fast olt <vscale x 2 x double> %wide.load274, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+02, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !30
    %uglygep291 = getelementptr i8, ptr @g, i64 %lsr.iv, !dbg !20
    %wide.load276 = load <vscale x 2 x double>, ptr %uglygep291, align 8, !dbg !20, !tbaa !15
    tail call void @llvm.masked.store.nxv2f64.p0(<vscale x 2 x double> %wide.load276, ptr %uglygep290, i32 8, <vscale x 2 x i1> %7), !dbg !31, !tbaa !15
    %predphi277 = select <vscale x 2 x i1> %7, <vscale x 2 x double> %wide.load276, <vscale x 2 x double> %wide.load274
    %8 = fcmp fast olt <vscale x 2 x double> %wide.load276, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+02, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !32
    %uglygep292 = getelementptr i8, ptr @h, i64 %lsr.iv, !dbg !20
    %wide.load278 = load <vscale x 2 x double>, ptr %uglygep292, align 8, !dbg !20, !tbaa !15
    tail call void @llvm.masked.store.nxv2f64.p0(<vscale x 2 x double> %wide.load278, ptr %uglygep291, i32 8, <vscale x 2 x i1> %8), !dbg !33, !tbaa !15
    %predphi279 = select <vscale x 2 x i1> %8, <vscale x 2 x double> %wide.load278, <vscale x 2 x double> %wide.load276
    %9 = fcmp fast olt <vscale x 2 x double> %wide.load278, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+02, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !34
    %uglygep293 = getelementptr i8, ptr @i, i64 %lsr.iv, !dbg !20
    %wide.load280 = load <vscale x 2 x double>, ptr %uglygep293, align 8, !dbg !20, !tbaa !15
    tail call void @llvm.masked.store.nxv2f64.p0(<vscale x 2 x double> %wide.load280, ptr %uglygep292, i32 8, <vscale x 2 x i1> %9), !dbg !35, !tbaa !15
    %predphi281 = select <vscale x 2 x i1> %9, <vscale x 2 x double> %wide.load280, <vscale x 2 x double> %wide.load278
    %10 = fcmp fast olt <vscale x 2 x double> %wide.load280, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+02, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !36
    %uglygep294 = getelementptr i8, ptr @j, i64 %lsr.iv, !dbg !20
    %wide.load282 = load <vscale x 2 x double>, ptr %uglygep294, align 8, !dbg !20, !tbaa !15
    tail call void @llvm.masked.store.nxv2f64.p0(<vscale x 2 x double> %wide.load282, ptr %uglygep293, i32 8, <vscale x 2 x i1> %10), !dbg !37, !tbaa !15
    %predphi283 = select <vscale x 2 x i1> %10, <vscale x 2 x double> %wide.load282, <vscale x 2 x double> %wide.load280
    %11 = fcmp fast olt <vscale x 2 x double> %wide.load282, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+02, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !38
    tail call void @llvm.masked.store.nxv2f64.p0(<vscale x 2 x double> %predphi, ptr %uglygep294, i32 8, <vscale x 2 x i1> %11), !dbg !39, !tbaa !15
    %predphi284 = select <vscale x 2 x i1> %11, <vscale x 2 x double> %predphi, <vscale x 2 x double> %wide.load282
    %12 = fcmp fast olt <vscale x 2 x double> %predphi, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+02, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !40
    tail call void @llvm.masked.store.nxv2f64.p0(<vscale x 2 x double> %predphi269, ptr %uglygep, i32 8, <vscale x 2 x i1> %12), !dbg !41, !tbaa !15
    %predphi285 = select <vscale x 2 x i1> %12, <vscale x 2 x double> %predphi269, <vscale x 2 x double> %predphi
    %13 = fcmp fast olt <vscale x 2 x double> %predphi269, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+02, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !42
    tail call void @llvm.masked.store.nxv2f64.p0(<vscale x 2 x double> %predphi271, ptr %uglygep286, i32 8, <vscale x 2 x i1> %13), !dbg !43, !tbaa !15
    %14 = fcmp fast olt <vscale x 2 x double> %predphi271, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+02, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !44
    tail call void @llvm.masked.store.nxv2f64.p0(<vscale x 2 x double> %predphi273, ptr %uglygep287, i32 8, <vscale x 2 x i1> %14), !dbg !45, !tbaa !15
    %15 = fcmp fast olt <vscale x 2 x double> %predphi273, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+02, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !46
    tail call void @llvm.masked.store.nxv2f64.p0(<vscale x 2 x double> %predphi275, ptr %uglygep288, i32 8, <vscale x 2 x i1> %15), !dbg !47, !tbaa !15
    %16 = fcmp fast olt <vscale x 2 x double> %predphi275, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+02, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !48
    tail call void @llvm.masked.store.nxv2f64.p0(<vscale x 2 x double> %predphi277, ptr %uglygep289, i32 8, <vscale x 2 x i1> %16), !dbg !49, !tbaa !15
    %17 = fcmp fast olt <vscale x 2 x double> %predphi277, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+02, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !50
    tail call void @llvm.masked.store.nxv2f64.p0(<vscale x 2 x double> %predphi279, ptr %uglygep290, i32 8, <vscale x 2 x i1> %17), !dbg !51, !tbaa !15
    %18 = fcmp fast olt <vscale x 2 x double> %predphi279, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+02, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !52
    tail call void @llvm.masked.store.nxv2f64.p0(<vscale x 2 x double> %predphi281, ptr %uglygep291, i32 8, <vscale x 2 x i1> %18), !dbg !53, !tbaa !15
    %19 = fcmp fast olt <vscale x 2 x double> %predphi281, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+02, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !54
    tail call void @llvm.masked.store.nxv2f64.p0(<vscale x 2 x double> %predphi283, ptr %uglygep292, i32 8, <vscale x 2 x i1> %19), !dbg !55, !tbaa !15
    %20 = fcmp fast olt <vscale x 2 x double> %predphi283, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+02, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !56
    tail call void @llvm.masked.store.nxv2f64.p0(<vscale x 2 x double> %predphi284, ptr %uglygep293, i32 8, <vscale x 2 x i1> %20), !dbg !57, !tbaa !15
    %21 = fcmp fast olt <vscale x 2 x double> %predphi284, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+02, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !58
    tail call void @llvm.masked.store.nxv2f64.p0(<vscale x 2 x double> %predphi285, ptr %uglygep294, i32 8, <vscale x 2 x i1> %21), !dbg !59, !tbaa !15
    %lsr.iv.next = add nuw nsw i64 %lsr.iv, 64, !dbg !13
    %22 = call i64 @llvm.loop.decrement.reg.i64(i64 %1, i64 1), !dbg !13
    %23 = icmp ne i64 %22, 0, !dbg !13
    br i1 %23, label %vector.body, label %for.cond.cleanup, !dbg !13, !llvm.loop !60
  
  for.cond.cleanup:                                 ; preds = %vector.body
    ret void, !dbg !65
  }
  
  ; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn writeonly
  declare void @llvm.masked.store.nxv2f64.p0(<vscale x 2 x double>, ptr, i32 immarg, <vscale x 2 x i1>) #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #2
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #2
  
  attributes #0 = { nofree norecurse nosync nounwind uwtable vscale_range(4,4) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #1 = { argmemonly nocallback nofree nosync nounwind willreturn writeonly }
  attributes #2 = { nocallback noduplicate nofree nosync nounwind willreturn }
  
  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!2, !3, !4, !5, !6, !7}
  !llvm.ident = !{!8}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 15.0.4 (1202d19b025814a1876bde537e9e53eb75b2363d)", isOptimized: true, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "a.c", directory: "/home/xxxx")
  !2 = !{i32 2, !"Debug Info Version", i32 3}
  !3 = !{i32 1, !"wchar_size", i32 4}
  !4 = !{i32 7, !"PIC Level", i32 2}
  !5 = !{i32 7, !"PIE Level", i32 2}
  !6 = !{i32 7, !"uwtable", i32 2}
  !7 = !{i32 7, !"frame-pointer", i32 1}
  !8 = !{!"clang version 15.0.4 (1202d19b025814a1876bde537e9e53eb75b2363d)"}
  !9 = distinct !DISubprogram(name: "xxx", scope: !1, file: !1, line: 13, type: !10, scopeLine: 13, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !11)
  !10 = !DISubroutineType(types: !11)
  !11 = !{}
  !12 = !DILocation(line: 14, column: 4, scope: !9)
  !13 = !DILocation(line: 14, column: 28, scope: !9)
  !14 = !DILocation(line: 15, column: 10, scope: !9)
  !15 = !{!16, !16, i64 0}
  !16 = !{!"double", !17, i64 0}
  !17 = !{!"omnipotent char", !18, i64 0}
  !18 = !{!"Simple C/C++ TBAA"}
  !19 = !DILocation(line: 15, column: 14, scope: !9)
  !20 = !DILocation(line: 0, scope: !9)
  !21 = !DILocation(line: 15, column: 24, scope: !9)
  !22 = !DILocation(line: 16, column: 14, scope: !9)
  !23 = !DILocation(line: 16, column: 24, scope: !9)
  !24 = !DILocation(line: 17, column: 14, scope: !9)
  !25 = !DILocation(line: 17, column: 24, scope: !9)
  !26 = !DILocation(line: 18, column: 14, scope: !9)
  !27 = !DILocation(line: 18, column: 24, scope: !9)
  !28 = !DILocation(line: 19, column: 14, scope: !9)
  !29 = !DILocation(line: 19, column: 24, scope: !9)
  !30 = !DILocation(line: 20, column: 14, scope: !9)
  !31 = !DILocation(line: 20, column: 24, scope: !9)
  !32 = !DILocation(line: 21, column: 14, scope: !9)
  !33 = !DILocation(line: 21, column: 24, scope: !9)
  !34 = !DILocation(line: 22, column: 14, scope: !9)
  !35 = !DILocation(line: 22, column: 24, scope: !9)
  !36 = !DILocation(line: 23, column: 14, scope: !9)
  !37 = !DILocation(line: 23, column: 24, scope: !9)
  !38 = !DILocation(line: 24, column: 14, scope: !9)
  !39 = !DILocation(line: 24, column: 24, scope: !9)
  !40 = !DILocation(line: 25, column: 14, scope: !9)
  !41 = !DILocation(line: 25, column: 24, scope: !9)
  !42 = !DILocation(line: 26, column: 14, scope: !9)
  !43 = !DILocation(line: 26, column: 24, scope: !9)
  !44 = !DILocation(line: 27, column: 14, scope: !9)
  !45 = !DILocation(line: 27, column: 24, scope: !9)
  !46 = !DILocation(line: 28, column: 14, scope: !9)
  !47 = !DILocation(line: 28, column: 24, scope: !9)
  !48 = !DILocation(line: 29, column: 14, scope: !9)
  !49 = !DILocation(line: 29, column: 24, scope: !9)
  !50 = !DILocation(line: 30, column: 14, scope: !9)
  !51 = !DILocation(line: 30, column: 24, scope: !9)
  !52 = !DILocation(line: 31, column: 14, scope: !9)
  !53 = !DILocation(line: 31, column: 24, scope: !9)
  !54 = !DILocation(line: 32, column: 14, scope: !9)
  !55 = !DILocation(line: 32, column: 24, scope: !9)
  !56 = !DILocation(line: 33, column: 14, scope: !9)
  !57 = !DILocation(line: 33, column: 24, scope: !9)
  !58 = !DILocation(line: 34, column: 14, scope: !9)
  !59 = !DILocation(line: 34, column: 24, scope: !9)
  !60 = distinct !{!60, !12, !61, !62, !63, !64}
  !61 = !DILocation(line: 35, column: 4, scope: !9)
  !62 = !{!"llvm.loop.mustprogress"}
  !63 = !{!"llvm.loop.unroll.disable"}
  !64 = !{!"llvm.loop.isvectorized", i32 1}
  !65 = !DILocation(line: 36, column: 1, scope: !9)

...
---
name:            xxx
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr64all, preferred-register: '' }
  - { id: 1, class: gpr64common, preferred-register: '' }
  - { id: 2, class: gpr64sp, preferred-register: '' }
  - { id: 3, class: gpr64all, preferred-register: '' }
  - { id: 4, class: gpr64all, preferred-register: '' }
  - { id: 5, class: gpr64all, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr32, preferred-register: '' }
  - { id: 8, class: gpr64common, preferred-register: '' }
  - { id: 9, class: gpr64common, preferred-register: '' }
  - { id: 10, class: ppr_3b, preferred-register: '' }
  - { id: 11, class: zpr, preferred-register: '' }
  - { id: 12, class: gpr64common, preferred-register: '' }
  - { id: 13, class: zpr, preferred-register: '' }
  - { id: 14, class: ppr_3b, preferred-register: '' }
  - { id: 15, class: ppr_3b, preferred-register: '' }
  - { id: 16, class: gpr64common, preferred-register: '' }
  - { id: 17, class: gpr64common, preferred-register: '' }
  - { id: 18, class: zpr, preferred-register: '' }
  - { id: 19, class: zpr, preferred-register: '' }
  - { id: 20, class: ppr_3b, preferred-register: '' }
  - { id: 21, class: gpr64common, preferred-register: '' }
  - { id: 22, class: gpr64common, preferred-register: '' }
  - { id: 23, class: zpr, preferred-register: '' }
  - { id: 24, class: zpr, preferred-register: '' }
  - { id: 25, class: ppr_3b, preferred-register: '' }
  - { id: 26, class: gpr64common, preferred-register: '' }
  - { id: 27, class: gpr64common, preferred-register: '' }
  - { id: 28, class: zpr, preferred-register: '' }
  - { id: 29, class: zpr, preferred-register: '' }
  - { id: 30, class: ppr_3b, preferred-register: '' }
  - { id: 31, class: gpr64common, preferred-register: '' }
  - { id: 32, class: gpr64common, preferred-register: '' }
  - { id: 33, class: zpr, preferred-register: '' }
  - { id: 34, class: zpr, preferred-register: '' }
  - { id: 35, class: ppr_3b, preferred-register: '' }
  - { id: 36, class: gpr64common, preferred-register: '' }
  - { id: 37, class: gpr64common, preferred-register: '' }
  - { id: 38, class: zpr, preferred-register: '' }
  - { id: 39, class: zpr, preferred-register: '' }
  - { id: 40, class: ppr_3b, preferred-register: '' }
  - { id: 41, class: gpr64common, preferred-register: '' }
  - { id: 42, class: gpr64common, preferred-register: '' }
  - { id: 43, class: zpr, preferred-register: '' }
  - { id: 44, class: zpr, preferred-register: '' }
  - { id: 45, class: ppr_3b, preferred-register: '' }
  - { id: 46, class: gpr64common, preferred-register: '' }
  - { id: 47, class: gpr64common, preferred-register: '' }
  - { id: 48, class: zpr, preferred-register: '' }
  - { id: 49, class: zpr, preferred-register: '' }
  - { id: 50, class: ppr_3b, preferred-register: '' }
  - { id: 51, class: gpr64common, preferred-register: '' }
  - { id: 52, class: gpr64common, preferred-register: '' }
  - { id: 53, class: zpr, preferred-register: '' }
  - { id: 54, class: zpr, preferred-register: '' }
  - { id: 55, class: ppr_3b, preferred-register: '' }
  - { id: 56, class: gpr64common, preferred-register: '' }
  - { id: 57, class: gpr64common, preferred-register: '' }
  - { id: 58, class: zpr, preferred-register: '' }
  - { id: 59, class: zpr, preferred-register: '' }
  - { id: 60, class: ppr_3b, preferred-register: '' }
  - { id: 61, class: zpr, preferred-register: '' }
  - { id: 62, class: ppr_3b, preferred-register: '' }
  - { id: 63, class: zpr, preferred-register: '' }
  - { id: 64, class: ppr_3b, preferred-register: '' }
  - { id: 65, class: ppr_3b, preferred-register: '' }
  - { id: 66, class: ppr_3b, preferred-register: '' }
  - { id: 67, class: ppr_3b, preferred-register: '' }
  - { id: 68, class: ppr_3b, preferred-register: '' }
  - { id: 69, class: ppr_3b, preferred-register: '' }
  - { id: 70, class: ppr_3b, preferred-register: '' }
  - { id: 71, class: ppr_3b, preferred-register: '' }
  - { id: 72, class: ppr_3b, preferred-register: '' }
  - { id: 73, class: gpr64sp, preferred-register: '' }
  - { id: 74, class: gpr64, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
  
    %6:gpr64all = COPY $xzr
    %5:gpr64all = COPY %6
    %7:gpr32 = MOVi32imm 1250
    %0:gpr64all = SUBREG_TO_REG 0, killed %7, %subreg.sub_32
    %8:gpr64common = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a
    %10:ppr_3b = PTRUE_B 31
    %12:gpr64common = MOVi64imm 4636737291354636288
    %13:zpr = DUP_ZR_D %12
    %14:ppr_3b = PTRUE_D 31
    %16:gpr64common = MOVaddr target-flags(aarch64-page) @b, target-flags(aarch64-pageoff, aarch64-nc) @b
    %21:gpr64common = MOVaddr target-flags(aarch64-page) @c, target-flags(aarch64-pageoff, aarch64-nc) @c
    %26:gpr64common = MOVaddr target-flags(aarch64-page) @d, target-flags(aarch64-pageoff, aarch64-nc) @d
    %31:gpr64common = MOVaddr target-flags(aarch64-page) @e, target-flags(aarch64-pageoff, aarch64-nc) @e
    %36:gpr64common = MOVaddr target-flags(aarch64-page) @f, target-flags(aarch64-pageoff, aarch64-nc) @f
    %41:gpr64common = MOVaddr target-flags(aarch64-page) @g, target-flags(aarch64-pageoff, aarch64-nc) @g
    %46:gpr64common = MOVaddr target-flags(aarch64-page) @h, target-flags(aarch64-pageoff, aarch64-nc) @h
    %51:gpr64common = MOVaddr target-flags(aarch64-page) @i, target-flags(aarch64-pageoff, aarch64-nc) @i
    %56:gpr64common = MOVaddr target-flags(aarch64-page) @j, target-flags(aarch64-pageoff, aarch64-nc) @j
  
  bb.1.vector.body:
    successors: %bb.1(0x7c000000), %bb.2(0x04000000)
  
    %1:gpr64common = PHI %5, %bb.0, %3, %bb.1, debug-location !13
    %2:gpr64sp = PHI %0, %bb.0, %4, %bb.1, debug-location !14
    %9:gpr64common = ADDXrr %8, %1, debug-location !14
    %11:zpr = LD1B %10, %8, %1, debug-location !14 :: (load unknown-size from %ir.uglygep, align 8, !tbaa !15)
    %15:ppr_3b = nnan ninf nsz arcp contract afn reassoc FCMGT_PPzZZ_D %14, %13, %11, debug-location !19
    %17:gpr64common = ADDXrr %16, %1, debug-location !20
    %18:zpr = LD1B %10, %16, %1, debug-location !20 :: (load unknown-size from %ir.uglygep286, align 8, !tbaa !15)
    ST1D_IMM %18, %15, %9, 0, debug-location !21 :: (store unknown-size into %ir.uglygep, align 8, !tbaa !15)
    %19:zpr = SEL_ZPZZ_D %15, %18, %11
    %20:ppr_3b = nnan ninf nsz arcp contract afn reassoc FCMGT_PPzZZ_D %14, %13, %18, debug-location !22
    %22:gpr64common = ADDXrr %21, %1, debug-location !20
    %23:zpr = LD1B %10, %21, %1, debug-location !20 :: (load unknown-size from %ir.uglygep287, align 8, !tbaa !15)
    ST1D_IMM %23, %20, %17, 0, debug-location !23 :: (store unknown-size into %ir.uglygep286, align 8, !tbaa !15)
    %24:zpr = SEL_ZPZZ_D %20, %23, %18
    %25:ppr_3b = nnan ninf nsz arcp contract afn reassoc FCMGT_PPzZZ_D %14, %13, %23, debug-location !24
    %27:gpr64common = ADDXrr %26, %1, debug-location !20
    %28:zpr = LD1B %10, %26, %1, debug-location !20 :: (load unknown-size from %ir.uglygep288, align 8, !tbaa !15)
    ST1D_IMM %28, %25, %22, 0, debug-location !25 :: (store unknown-size into %ir.uglygep287, align 8, !tbaa !15)
    %29:zpr = SEL_ZPZZ_D %25, %28, %23
    %30:ppr_3b = nnan ninf nsz arcp contract afn reassoc FCMGT_PPzZZ_D %14, %13, %28, debug-location !26
    %32:gpr64common = ADDXrr %31, %1, debug-location !20
    %33:zpr = LD1B %10, %31, %1, debug-location !20 :: (load unknown-size from %ir.uglygep289, align 8, !tbaa !15)
    ST1D_IMM %33, %30, %27, 0, debug-location !27 :: (store unknown-size into %ir.uglygep288, align 8, !tbaa !15)
    %34:zpr = SEL_ZPZZ_D %30, %33, %28
    %35:ppr_3b = nnan ninf nsz arcp contract afn reassoc FCMGT_PPzZZ_D %14, %13, %33, debug-location !28
    %37:gpr64common = ADDXrr %36, %1, debug-location !20
    %38:zpr = LD1B %10, %36, %1, debug-location !20 :: (load unknown-size from %ir.uglygep290, align 8, !tbaa !15)
    ST1D_IMM %38, %35, %32, 0, debug-location !29 :: (store unknown-size into %ir.uglygep289, align 8, !tbaa !15)
    %39:zpr = SEL_ZPZZ_D %35, %38, %33
    %40:ppr_3b = nnan ninf nsz arcp contract afn reassoc FCMGT_PPzZZ_D %14, %13, %38, debug-location !30
    %42:gpr64common = ADDXrr %41, %1, debug-location !20
    %43:zpr = LD1B %10, %41, %1, debug-location !20 :: (load unknown-size from %ir.uglygep291, align 8, !tbaa !15)
    ST1D_IMM %43, %40, %37, 0, debug-location !31 :: (store unknown-size into %ir.uglygep290, align 8, !tbaa !15)
    %44:zpr = SEL_ZPZZ_D %40, %43, %38
    %45:ppr_3b = nnan ninf nsz arcp contract afn reassoc FCMGT_PPzZZ_D %14, %13, %43, debug-location !32
    %47:gpr64common = ADDXrr %46, %1, debug-location !20
    %48:zpr = LD1B %10, %46, %1, debug-location !20 :: (load unknown-size from %ir.uglygep292, align 8, !tbaa !15)
    ST1D_IMM %48, %45, %42, 0, debug-location !33 :: (store unknown-size into %ir.uglygep291, align 8, !tbaa !15)
    %49:zpr = SEL_ZPZZ_D %45, %48, %43
    %50:ppr_3b = nnan ninf nsz arcp contract afn reassoc FCMGT_PPzZZ_D %14, %13, %48, debug-location !34
    %52:gpr64common = ADDXrr %51, %1, debug-location !20
    %53:zpr = LD1B %10, %51, %1, debug-location !20 :: (load unknown-size from %ir.uglygep293, align 8, !tbaa !15)
    ST1D_IMM %53, %50, %47, 0, debug-location !35 :: (store unknown-size into %ir.uglygep292, align 8, !tbaa !15)
    %54:zpr = SEL_ZPZZ_D %50, %53, %48
    %55:ppr_3b = nnan ninf nsz arcp contract afn reassoc FCMGT_PPzZZ_D %14, %13, %53, debug-location !36
    %57:gpr64common = ADDXrr %56, %1, debug-location !20
    %58:zpr = LD1B %10, %56, %1, debug-location !20 :: (load unknown-size from %ir.uglygep294, align 8, !tbaa !15)
    ST1D_IMM %58, %55, %52, 0, debug-location !37 :: (store unknown-size into %ir.uglygep293, align 8, !tbaa !15)
    %59:zpr = SEL_ZPZZ_D %55, %58, %53
    %60:ppr_3b = nnan ninf nsz arcp contract afn reassoc FCMGT_PPzZZ_D %14, %13, %58, debug-location !38
    ST1D_IMM %19, %60, %57, 0, debug-location !39 :: (store unknown-size into %ir.uglygep294, align 8, !tbaa !15)
    %61:zpr = SEL_ZPZZ_D %60, %19, %58
    %62:ppr_3b = nnan ninf nsz arcp contract afn reassoc FCMGT_PPzZZ_D %14, %13, %19, debug-location !40
    ST1D_IMM %24, %62, %9, 0, debug-location !41 :: (store unknown-size into %ir.uglygep, align 8, !tbaa !15)
    %63:zpr = SEL_ZPZZ_D %62, %24, %19
    %64:ppr_3b = nnan ninf nsz arcp contract afn reassoc FCMGT_PPzZZ_D %14, %13, %24, debug-location !42
    ST1D_IMM %29, killed %64, %17, 0, debug-location !43 :: (store unknown-size into %ir.uglygep286, align 8, !tbaa !15)
    %65:ppr_3b = nnan ninf nsz arcp contract afn reassoc FCMGT_PPzZZ_D %14, %13, %29, debug-location !44
    ST1D_IMM %34, killed %65, %22, 0, debug-location !45 :: (store unknown-size into %ir.uglygep287, align 8, !tbaa !15)
    %66:ppr_3b = nnan ninf nsz arcp contract afn reassoc FCMGT_PPzZZ_D %14, %13, %34, debug-location !46
    ST1D_IMM %39, killed %66, %27, 0, debug-location !47 :: (store unknown-size into %ir.uglygep288, align 8, !tbaa !15)
    %67:ppr_3b = nnan ninf nsz arcp contract afn reassoc FCMGT_PPzZZ_D %14, %13, %39, debug-location !48
    ST1D_IMM %44, killed %67, %32, 0, debug-location !49 :: (store unknown-size into %ir.uglygep289, align 8, !tbaa !15)
    %68:ppr_3b = nnan ninf nsz arcp contract afn reassoc FCMGT_PPzZZ_D %14, %13, %44, debug-location !50
    ST1D_IMM %49, killed %68, %37, 0, debug-location !51 :: (store unknown-size into %ir.uglygep290, align 8, !tbaa !15)
    %69:ppr_3b = nnan ninf nsz arcp contract afn reassoc FCMGT_PPzZZ_D %14, %13, %49, debug-location !52
    ST1D_IMM %54, killed %69, %42, 0, debug-location !53 :: (store unknown-size into %ir.uglygep291, align 8, !tbaa !15)
    %70:ppr_3b = nnan ninf nsz arcp contract afn reassoc FCMGT_PPzZZ_D %14, %13, %54, debug-location !54
    ST1D_IMM %59, killed %70, %47, 0, debug-location !55 :: (store unknown-size into %ir.uglygep292, align 8, !tbaa !15)
    %71:ppr_3b = nnan ninf nsz arcp contract afn reassoc FCMGT_PPzZZ_D %14, %13, %59, debug-location !56
    ST1D_IMM %61, killed %71, %52, 0, debug-location !57 :: (store unknown-size into %ir.uglygep293, align 8, !tbaa !15)
    %72:ppr_3b = nnan ninf nsz arcp contract afn reassoc FCMGT_PPzZZ_D %14, %13, %61, debug-location !58
    ST1D_IMM killed %63, killed %72, %57, 0, debug-location !59 :: (store unknown-size into %ir.uglygep294, align 8, !tbaa !15)
    %73:gpr64sp = nuw nsw ADDXri %1, 64, 0, debug-location !13
    %3:gpr64all = COPY %73, debug-location !13
    %74:gpr64 = SUBSXri %2, 1, 0, implicit-def $nzcv, debug-location !13
    %4:gpr64all = COPY %74, debug-location !13
    Bcc 1, %bb.1, implicit $nzcv, debug-location !13
    B %bb.2, debug-location !13
  
  bb.2.for.cond.cleanup:
    RET_ReallyLR debug-location !65

...
