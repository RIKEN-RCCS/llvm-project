#RUN: llc %s -mcpu=a64fx -fswp -start-before=aarch64-swpipeliner -swpl-debug-dump-ddg -swpl-enable-check-early-clobber -o /dev/null 2>&1 | FileCheck %s
# CHECK:### from: %17:gpr64sp = ADDXri %17:gpr64sp, 8, 0
# CHECK-NEXT:### to  : %21:fpr64 = LDURDi %17:gpr64sp, 0
# CHECK-NEXT:### distance:1 delay:1


# CHECK:### from: %17:gpr64sp = ADDXri %17:gpr64sp, 8, 0
# CHECK-NEXT:### to  : %17:gpr64sp = ADDXri %17:gpr64sp, 8, 0
# CHECK-NEXT:### distance:1 delay:1


# CHECK:### from: %21:fpr64 = LDURDi %17:gpr64sp, 0
# CHECK-NEXT:### to  : %22:fpr64 = FMULDrr %21:fpr64, %21:fpr64, implicit $fpcr
# CHECK-NEXT:### distance:0 delay:8
# CHECK-NEXT:### distance:0 delay:8


# CHECK:### from: %22:fpr64 = FMULDrr %21:fpr64, %21:fpr64, implicit $fpcr
# CHECK-NEXT:### to  : STURDi %22:fpr64, %18:gpr64sp, 0 :: (store (s64) into %ir.lsr.iv1, !tbaa !1)
# CHECK-NEXT:### distance:0 delay:9


# CHECK:### from: %18:gpr64sp = ADDXri %18:gpr64sp, 8, 0
# CHECK-NEXT:### to  : STURDi %22:fpr64, %18:gpr64sp, 0 :: (store (s64) into %ir.lsr.iv1, !tbaa !1)
# CHECK-NEXT:### distance:1 delay:1


# CHECK:### from: %18:gpr64sp = ADDXri %18:gpr64sp, 8, 0
# CHECK-NEXT:### to  : %18:gpr64sp = ADDXri %18:gpr64sp, 8, 0
# CHECK-NEXT:### distance:1 delay:1


# CHECK:### from: %19:gpr64sp = SUBSXri %19:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:### to  : %19:gpr64sp = SUBSXri %19:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:### distance:1 delay:1


# CHECK:### from: %21:fpr64 = LDURDi %17:gpr64sp, 0
# CHECK-NEXT:### to  : STURDi %22:fpr64, %18:gpr64sp, 0 :: (store (s64) into %ir.lsr.iv1, !tbaa !1)
# CHECK-NEXT:### distance:0 delay:1


# CHECK:### from: STURDi %22:fpr64, %18:gpr64sp, 0 :: (store (s64) into %ir.lsr.iv1, !tbaa !1)
# CHECK-NEXT:### to  : %21:fpr64 = LDURDi %17:gpr64sp, 0
# CHECK-NEXT:### distance:1 delay:6

--- |
  ; ModuleID = '2937-39.ll'
  source_filename = "2937-39.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux"
  
  ; Function Attrs: nofree norecurse nounwind
  define dso_local void @foo(double* noalias nocapture readonly %0, double* noalias nocapture %1, i32 %2) local_unnamed_addr #0 {
    %4 = icmp sgt i32 %2, 0
    br i1 %4, label %.lr.ph.preheader, label %._crit_edge
  
  .lr.ph.preheader:                                 ; preds = %3
    %wide.trip.count = zext i32 %2 to i64
    call void @llvm.set.loop.iterations.i64(i64 %wide.trip.count)
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv2 = phi double* [ %scevgep3, %.lr.ph ], [ %0, %.lr.ph.preheader ]
    %lsr.iv1 = phi double* [ %scevgep, %.lr.ph ], [ %1, %.lr.ph.preheader ]
    %5 = phi i64 [ %wide.trip.count, %.lr.ph.preheader ], [ %8, %.lr.ph ]
    %6 = load double, double* %lsr.iv2, align 8, !tbaa !2
    %7 = fmul double %6, %6
    store double %7, double* %lsr.iv1, align 8, !tbaa !2
    %scevgep = getelementptr double, double* %lsr.iv1, i64 1
    %scevgep3 = getelementptr double, double* %lsr.iv2, i64 1
    %8 = call i64 @llvm.loop.decrement.reg.i64(i64 %5, i64 1)
    %9 = icmp ne i64 %8, 0
    br i1 %9, label %.lr.ph, label %._crit_edge, !llvm.loop !6
  
  ._crit_edge:                                      ; preds = %.lr.ph, %3
    ret void
  }
  
  ; Function Attrs: noduplicate nounwind
  declare void @llvm.set.loop.iterations.i64(i64) #1
  
  ; Function Attrs: noduplicate nounwind
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #1
  
  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**) #2
  
  attributes #0 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="non-leaf" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { noduplicate nounwind }
  attributes #2 = { nounwind }
  
  !llvm.module.flags = !{!0}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !2 = !{!3, !3, i64 0}
  !3 = !{!"double", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}
  !6 = distinct !{!6, !7}
  !7 = !{!"llvm.loop.unroll.disable"}

...
---
name:            foo
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: gpr64all, preferred-register: '' }
  - { id: 1, class: gpr64sp, preferred-register: '' }
  - { id: 2, class: gpr64sp, preferred-register: '' }
  - { id: 3, class: gpr64sp, preferred-register: '' }
  - { id: 4, class: gpr64all, preferred-register: '' }
  - { id: 5, class: gpr64all, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr64, preferred-register: '' }
  - { id: 8, class: gpr64, preferred-register: '' }
  - { id: 9, class: gpr32common, preferred-register: '' }
  - { id: 10, class: gpr32, preferred-register: '' }
  - { id: 11, class: gpr32, preferred-register: '' }
  - { id: 12, class: gpr64sp, preferred-register: '' }
  - { id: 13, class: fpr64, preferred-register: '' }
  - { id: 14, class: fpr64, preferred-register: '' }
  - { id: 15, class: gpr64sp, preferred-register: '' }
  - { id: 16, class: gpr64, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%7' }
  - { reg: '$x1', virtual-reg: '%8' }
  - { reg: '$w2', virtual-reg: '%9' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.3):
    successors: %bb.1(0x50000000), %bb.3(0x30000000)
    liveins: $x0, $x1, $w2
  
    %9:gpr32common = COPY $w2
    %8:gpr64 = COPY $x1
    %7:gpr64 = COPY $x0
    dead $wzr = SUBSWri %9, 1, 0, implicit-def $nzcv
    Bcc 11, %bb.3, implicit $nzcv
    B %bb.1
  
  bb.1..lr.ph.preheader:
    successors: %bb.2(0x80000000)
  
    %11:gpr32 = ORRWrs $wzr, %9, 0
    %0:gpr64all = SUBREG_TO_REG 0, killed %11, %subreg.sub_32
  
  bb.2..lr.ph:
    successors: %bb.2(0x7c000000), %bb.3(0x04000000)
  
    %1:gpr64sp = PHI %7, %bb.1, %5, %bb.2
    %2:gpr64sp = PHI %8, %bb.1, %4, %bb.2
    %3:gpr64sp = PHI %0, %bb.1, %6, %bb.2
    early-clobber %12:gpr64sp, %13:fpr64 = LDRDpost %1, 8
    %14:fpr64 = FMULDrr %13, %13, implicit $fpcr
    early-clobber %15:gpr64sp = STRDpost killed %14, %2, 8 :: (store 8 into %ir.lsr.iv1, !tbaa !2)
    %4:gpr64all = COPY %15
    %5:gpr64all = COPY %12
    %16:gpr64 = SUBSXri %3, 1, 0, implicit-def $nzcv
    %6:gpr64all = COPY %16
    Bcc 1, %bb.2, implicit $nzcv
    B %bb.3
  
  bb.3.._crit_edge:
    RET_ReallyLR

...
