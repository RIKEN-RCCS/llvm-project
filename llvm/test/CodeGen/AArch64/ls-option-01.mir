# RUN: llc %s -fswp -fls -mcpu=a64fx -pass-remarks=aarch64-swpipeliner -start-before=aarch64-swpipeliner -o /dev/null 2>&1 | FileCheck %s
# CHECK: remark: s.c:35:9: local scheduling
--- |
  ; ModuleID = 's.c'
  source_filename = "s.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  %struct.args_t = type { %struct.timeval, %struct.timeval, ptr }
  %struct.timeval = type { i64, i64 }
  
  @__func__.s = private unnamed_addr constant [2 x i8] c"s\00", align 1
  @a = external global [32000 x double], align 64
  @b = external global [32000 x double], align 64
  @c = external global [32000 x double], align 64
  @d = external global [32000 x double], align 64
  @e = external global [32000 x double], align 64
  @aa = external global [256 x [256 x double]], align 64
  @bb = external global [256 x [256 x double]], align 64
  @cc = external global [256 x [256 x double]], align 64
  
  ; Function Attrs: nounwind uwtable vscale_range(4,4)
  define dso_local nofpclass(nan inf) double @s(ptr nocapture noundef %func_args) local_unnamed_addr #0 !dbg !9 {
  entry:
    %call = tail call i32 @initialise_arrays(ptr noundef nonnull @__func__.s) #4, !dbg !12
    %call1 = tail call i32 @gettimeofday(ptr noundef %func_args, ptr noundef null) #4, !dbg !13
    br label %vector.ph, !dbg !14
  
  vector.ph:                                        ; preds = %for.cond.cleanup4, %entry
    %nl.023 = phi i32 [ 0, %entry ], [ %inc, %for.cond.cleanup4 ]
    %0 = call i64 @llvm.start.loop.iterations.i64(i64 1999), !dbg !15
    br label %vector.body, !dbg !15
  
  vector.body:                                      ; preds = %vector.body, %vector.ph
    %lsr.iv29 = phi i64 [ %lsr.iv.next, %vector.body ], [ -255872, %vector.ph ]
    %lsr.iv = phi ptr [ %scevgep, %vector.body ], [ getelementptr inbounds ([32000 x double], ptr @a, i64 0, i64 9), %vector.ph ]
    %1 = phi i64 [ %0, %vector.ph ], [ %11, %vector.body ], !dbg !16
    %scevgep28 = getelementptr i8, ptr %lsr.iv, i64 -72, !dbg !16
    %wide.vec = load <16 x double>, ptr %scevgep28, align 64, !dbg !16, !tbaa !17
    %scevgep30 = getelementptr i8, ptr getelementptr inbounds ([32000 x double], ptr @b, i64 0, i64 1), i64 %lsr.iv29, !dbg !21
    %scevgep31 = getelementptr i8, ptr %scevgep30, i64 255872, !dbg !21
    %wide.vec26 = load <16 x double>, ptr %scevgep31, align 8, !dbg !21, !tbaa !17
    %2 = fadd fast <16 x double> %wide.vec26, %wide.vec, !dbg !22
    %scevgep34 = getelementptr i8, ptr %lsr.iv, i64 -64, !dbg !23
    %scevgep36 = getelementptr i8, ptr %lsr.iv, i64 -48, !dbg !23
    %scevgep37 = getelementptr i8, ptr %lsr.iv, i64 -32, !dbg !23
    %scevgep38 = getelementptr i8, ptr %lsr.iv, i64 -16, !dbg !23
    %scevgep35 = getelementptr i8, ptr %lsr.iv, i64 16, !dbg !23
    %scevgep33 = getelementptr i8, ptr %lsr.iv, i64 32, !dbg !23
    %scevgep32 = getelementptr i8, ptr %lsr.iv, i64 48, !dbg !24
    %3 = extractelement <16 x double> %2, i64 0, !dbg !24
    store double %3, ptr %scevgep34, align 8, !dbg !24, !tbaa !17
    %4 = extractelement <16 x double> %2, i64 2, !dbg !24
    store double %4, ptr %scevgep36, align 8, !dbg !24, !tbaa !17
    %5 = extractelement <16 x double> %2, i64 4, !dbg !24
    store double %5, ptr %scevgep37, align 8, !dbg !24, !tbaa !17
    %6 = extractelement <16 x double> %2, i64 6, !dbg !24
    store double %6, ptr %scevgep38, align 8, !dbg !24, !tbaa !17
    %7 = extractelement <16 x double> %2, i64 8, !dbg !24
    store double %7, ptr %lsr.iv, align 8, !dbg !24, !tbaa !17
    %8 = extractelement <16 x double> %2, i64 10, !dbg !24
    store double %8, ptr %scevgep35, align 8, !dbg !24, !tbaa !17
    %9 = extractelement <16 x double> %2, i64 12, !dbg !24
    store double %9, ptr %scevgep33, align 8, !dbg !24, !tbaa !17
    %10 = extractelement <16 x double> %2, i64 14, !dbg !24
    store double %10, ptr %scevgep32, align 8, !dbg !24, !tbaa !17
    %scevgep = getelementptr i8, ptr %lsr.iv, i64 128
    %lsr.iv.next = add nsw i64 %lsr.iv29, 128
    %11 = call i64 @llvm.loop.decrement.reg.i64(i64 %1, i64 1)
    %12 = icmp ne i64 %11, 0
    br i1 %12, label %vector.body, label %for.body5.preheader, !llvm.loop !25
  
  for.body5.preheader:                              ; preds = %vector.body
    br label %for.body5, !dbg !15
  
  for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
    %t2 = getelementptr inbounds %struct.args_t, ptr %func_args, i64 0, i32 1, !dbg !31
    %call14 = tail call i32 @gettimeofday(ptr noundef nonnull %t2, ptr noundef null) #4, !dbg !32
    %call15 = tail call fast nofpclass(nan inf) double @calc_checksum(ptr noundef nonnull @__func__.s) #4, !dbg !33
    ret double %call15, !dbg !34
  
  for.cond.cleanup4:                                ; preds = %for.body5
    %call11 = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, double noundef nofpclass(nan inf) 0.000000e+00) #4, !dbg !35
    %inc = add nuw nsw i32 %nl.023, 1, !dbg !36
    %exitcond.not = icmp eq i32 %inc, 200000, !dbg !37
    br i1 %exitcond.not, label %for.cond.cleanup, label %vector.ph, !dbg !14, !llvm.loop !38
  
  for.body5:                                        ; preds = %for.body5.preheader, %for.body5
    %lsr.iv39 = phi ptr [ getelementptr inbounds ([32000 x double], ptr @a, i64 0, i64 31985), %for.body5.preheader ], [ %scevgep40, %for.body5 ]
    %indvars.iv = phi i64 [ %indvars.iv.next, %for.body5 ], [ 31985, %for.body5.preheader ]
    %scevgep41 = getelementptr i8, ptr %lsr.iv39, i64 -8, !dbg !16
    %13 = load double, ptr %scevgep41, align 8, !dbg !16, !tbaa !17
    %14 = shl nuw nsw i64 %indvars.iv, 3, !dbg !21
    %scevgep42 = getelementptr i8, ptr @b, i64 %14, !dbg !21
    %15 = load double, ptr %scevgep42, align 8, !dbg !21, !tbaa !17
    %add = fadd fast double %15, %13, !dbg !22
    store double %add, ptr %lsr.iv39, align 8, !dbg !24, !tbaa !17
    %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2, !dbg !40
    %16 = add i64 %indvars.iv.next, -2, !dbg !41
    %scevgep40 = getelementptr i8, ptr %lsr.iv39, i64 16, !dbg !41
    %cmp3 = icmp ult i64 %16, 31998, !dbg !41
    br i1 %cmp3, label %for.body5, label %for.cond.cleanup4, !dbg !15, !llvm.loop !42
  }
  
  declare i32 @initialise_arrays(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nofree nounwind
  declare noundef i32 @gettimeofday(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #2
  
  declare i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, double noundef nofpclass(nan inf)) local_unnamed_addr #1
  
  declare nofpclass(nan inf) double @calc_checksum(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #3
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #3
  
  attributes #0 = { nounwind uwtable vscale_range(4,4) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #1 = { "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #2 = { nofree nounwind "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #3 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #4 = { nounwind }
  
  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!2, !3, !4, !5, !6, !7}
  !llvm.ident = !{!8}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 17.0.3 (git)", isOptimized: true, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "s.c", directory: "/home/src")
  !2 = !{i32 2, !"Debug Info Version", i32 3}
  !3 = !{i32 1, !"wchar_size", i32 4}
  !4 = !{i32 8, !"PIC Level", i32 2}
  !5 = !{i32 7, !"PIE Level", i32 2}
  !6 = !{i32 7, !"uwtable", i32 2}
  !7 = !{i32 7, !"frame-pointer", i32 1}
  !8 = !{!"clang version 17.0.3 (git)"}
  !9 = distinct !DISubprogram(name: "s", scope: !1, file: !1, line: 25, type: !10, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
  !10 = !DISubroutineType(types: !11)
  !11 = !{}
  !12 = !DILocation(line: 31, column: 5, scope: !9)
  !13 = !DILocation(line: 32, column: 5, scope: !9)
  !14 = !DILocation(line: 34, column: 5, scope: !9)
  !15 = !DILocation(line: 35, column: 9, scope: !9)
  !16 = !DILocation(line: 36, column: 20, scope: !9)
  !17 = !{!18, !18, i64 0}
  !18 = !{!"double", !19, i64 0}
  !19 = !{!"omnipotent char", !20, i64 0}
  !20 = !{!"Simple C/C++ TBAA"}
  !21 = !DILocation(line: 36, column: 31, scope: !9)
  !22 = !DILocation(line: 36, column: 29, scope: !9)
  !23 = !DILocation(line: 36, column: 13, scope: !9)
  !24 = !DILocation(line: 36, column: 18, scope: !9)
  !25 = distinct !{!25, !15, !26, !27, !28, !29, !30}
  !26 = !DILocation(line: 37, column: 9, scope: !9)
  !27 = !{!"llvm.loop.mustprogress"}
  !28 = !{!"llvm.loop.unroll.disable"}
  !29 = !{!"llvm.loop.isvectorized", i32 1}
  !30 = !{!"llvm.loop.unroll.runtime.disable"}
  !31 = !DILocation(line: 41, column: 30, scope: !9)
  !32 = !DILocation(line: 41, column: 5, scope: !9)
  !33 = !DILocation(line: 42, column: 12, scope: !9)
  !34 = !DILocation(line: 42, column: 5, scope: !9)
  !35 = !DILocation(line: 38, column: 9, scope: !9)
  !36 = !DILocation(line: 34, column: 43, scope: !9)
  !37 = !DILocation(line: 34, column: 25, scope: !9)
  !38 = distinct !{!38, !14, !39, !27, !28}
  !39 = !DILocation(line: 39, column: 5, scope: !9)
  !40 = !DILocation(line: 35, column: 39, scope: !9)
  !41 = !DILocation(line: 35, column: 27, scope: !9)
  !42 = distinct !{!42, !15, !26, !27, !28, !43, !29}
  !43 = !{!"llvm.remainder.pipeline.disable"}

...
---
name:            s
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32sp, preferred-register: '' }
  - { id: 1, class: gpr64all, preferred-register: '' }
  - { id: 2, class: gpr64common, preferred-register: '' }
  - { id: 3, class: gpr64sp, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: gpr64all, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr64all, preferred-register: '' }
  - { id: 8, class: gpr32all, preferred-register: '' }
  - { id: 9, class: gpr64sp, preferred-register: '' }
  - { id: 10, class: gpr64common, preferred-register: '' }
  - { id: 11, class: gpr64all, preferred-register: '' }
  - { id: 12, class: gpr64all, preferred-register: '' }
  - { id: 13, class: gpr64common, preferred-register: '' }
  - { id: 14, class: gpr32all, preferred-register: '' }
  - { id: 15, class: gpr64common, preferred-register: '' }
  - { id: 16, class: gpr32all, preferred-register: '' }
  - { id: 17, class: gpr64all, preferred-register: '' }
  - { id: 18, class: gpr32all, preferred-register: '' }
  - { id: 19, class: gpr32all, preferred-register: '' }
  - { id: 20, class: gpr64all, preferred-register: '' }
  - { id: 21, class: gpr64all, preferred-register: '' }
  - { id: 22, class: gpr64common, preferred-register: '' }
  - { id: 23, class: gpr64sp, preferred-register: '' }
  - { id: 24, class: gpr64, preferred-register: '' }
  - { id: 25, class: gpr32, preferred-register: '' }
  - { id: 26, class: gpr64common, preferred-register: '' }
  - { id: 27, class: ppr_3b, preferred-register: '' }
  - { id: 28, class: zpr, preferred-register: '' }
  - { id: 29, class: gpr64common, preferred-register: '' }
  - { id: 30, class: zpr, preferred-register: '' }
  - { id: 31, class: gpr64common, preferred-register: '' }
  - { id: 32, class: gpr64common, preferred-register: '' }
  - { id: 33, class: gpr32, preferred-register: '' }
  - { id: 34, class: gpr64, preferred-register: '' }
  - { id: 35, class: gpr64common, preferred-register: '' }
  - { id: 36, class: gpr64common, preferred-register: '' }
  - { id: 37, class: zpr, preferred-register: '' }
  - { id: 38, class: gpr64common, preferred-register: '' }
  - { id: 39, class: zpr, preferred-register: '' }
  - { id: 40, class: zpr, preferred-register: '' }
  - { id: 41, class: zpr, preferred-register: '' }
  - { id: 42, class: fpr64, preferred-register: '' }
  - { id: 43, class: zpr, preferred-register: '' }
  - { id: 44, class: fpr64, preferred-register: '' }
  - { id: 45, class: zpr, preferred-register: '' }
  - { id: 46, class: fpr64, preferred-register: '' }
  - { id: 47, class: zpr, preferred-register: '' }
  - { id: 48, class: fpr64, preferred-register: '' }
  - { id: 49, class: fpr64, preferred-register: '' }
  - { id: 50, class: zpr, preferred-register: '' }
  - { id: 51, class: fpr64, preferred-register: '' }
  - { id: 52, class: zpr, preferred-register: '' }
  - { id: 53, class: fpr64, preferred-register: '' }
  - { id: 54, class: zpr, preferred-register: '' }
  - { id: 55, class: fpr64, preferred-register: '' }
  - { id: 56, class: gpr64sp, preferred-register: '' }
  - { id: 57, class: gpr64sp, preferred-register: '' }
  - { id: 58, class: gpr64, preferred-register: '' }
  - { id: 59, class: gpr64all, preferred-register: '' }
  - { id: 60, class: gpr64all, preferred-register: '' }
  - { id: 61, class: gpr64common, preferred-register: '' }
  - { id: 62, class: gpr32, preferred-register: '' }
  - { id: 63, class: gpr64, preferred-register: '' }
  - { id: 64, class: gpr64, preferred-register: '' }
  - { id: 65, class: gpr32, preferred-register: '' }
  - { id: 66, class: fpr64, preferred-register: '' }
  - { id: 67, class: gpr64common, preferred-register: '' }
  - { id: 68, class: fpr64, preferred-register: '' }
  - { id: 69, class: fpr64, preferred-register: '' }
  - { id: 70, class: gpr64sp, preferred-register: '' }
  - { id: 71, class: gpr64sp, preferred-register: '' }
  - { id: 72, class: gpr32, preferred-register: '' }
  - { id: 73, class: gpr64, preferred-register: '' }
  - { id: 74, class: gpr64, preferred-register: '' }
  - { id: 75, class: gpr64common, preferred-register: '' }
  - { id: 76, class: gpr64common, preferred-register: '' }
  - { id: 77, class: gpr64common, preferred-register: '' }
  - { id: 78, class: gpr64common, preferred-register: '' }
  - { id: 79, class: gpr64common, preferred-register: '' }
  - { id: 80, class: gpr64common, preferred-register: '' }
  - { id: 81, class: gpr64common, preferred-register: '' }
  - { id: 82, class: gpr64common, preferred-register: '' }
  - { id: 83, class: fpr64, preferred-register: '' }
  - { id: 84, class: gpr32all, preferred-register: '' }
  - { id: 85, class: gpr32common, preferred-register: '' }
  - { id: 86, class: gpr32, preferred-register: '' }
  - { id: 87, class: gpr32, preferred-register: '' }
  - { id: 88, class: gpr64sp, preferred-register: '' }
  - { id: 89, class: gpr64all, preferred-register: '' }
  - { id: 90, class: gpr32all, preferred-register: '' }
  - { id: 91, class: gpr64common, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%13' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     true
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $x0
  
    %13:gpr64common = COPY $x0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !12
    %15:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s, debug-location !12
    $x0 = COPY %15, debug-location !12
    BL @initialise_arrays, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0, debug-location !12
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !12
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !13
    %17:gpr64all = COPY $xzr
    $x0 = COPY %13, debug-location !13
    $x1 = COPY %17, debug-location !13
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0, debug-location !13
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !13
    %19:gpr32all = COPY $wzr
    %14:gpr32all = COPY %19
    %22:gpr64common = LOADgot target-flags(aarch64-got) @a
    %25:gpr32 = MOVi32imm 1999
    %26:gpr64common = MOVi64imm -9
    %27:ppr_3b = PTRUE_D 31
    %29:gpr64common = MOVi64imm -1
    %31:gpr64common = LOADgot target-flags(aarch64-got) @b
    %33:gpr32 = MOVi32imm 255880
    %34:gpr64 = SUBREG_TO_REG 0, %33, %subreg.sub_32
    %36:gpr64common = MOVi64imm 31985
    %38:gpr64common = MOVi64imm 8
    %65:gpr32 = MOVi32imm 31985
    %72:gpr32 = MOVi32imm 31998
    %73:gpr64 = SUBREG_TO_REG 0, %72, %subreg.sub_32
    %77:gpr64common = LOADgot target-flags(aarch64-got) @c
    %78:gpr64common = LOADgot target-flags(aarch64-got) @d
    %79:gpr64common = LOADgot target-flags(aarch64-got) @e
    %80:gpr64common = LOADgot target-flags(aarch64-got) @aa
    %81:gpr64common = LOADgot target-flags(aarch64-got) @bb
    %82:gpr64common = LOADgot target-flags(aarch64-got) @cc
    %83:fpr64 = FMOVD0
    %86:gpr32 = MOVi32imm 200000
  
  bb.1.vector.ph:
    successors: %bb.2(0x80000000)
  
    %0:gpr32sp = PHI %14, %bb.0, %8, %bb.5
    %23:gpr64sp = nuw ADDXri %22, 72, 0
    %24:gpr64 = MOVi64imm -255872
    %20:gpr64all = COPY %24
    %21:gpr64all = COPY %23
    %1:gpr64all = SUBREG_TO_REG 0, %25, %subreg.sub_32
  
  bb.2.vector.body:
    successors: %bb.2(0x7c000000), %bb.3(0x04000000)
  
    %2:gpr64common = PHI %20, %bb.1, %6, %bb.2
    %3:gpr64sp = PHI %21, %bb.1, %5, %bb.2
    %4:gpr64sp = PHI %1, %bb.1, %7, %bb.2, debug-location !16
    %28:zpr = LD1D %27, %3, %26, debug-location !16 :: (load (s512) from %ir.scevgep28, !tbaa !17)
    %30:zpr = LD1D %27, %3, %29, debug-location !16 :: (load (s512) from %ir.scevgep28 + 64, !tbaa !17)
    %32:gpr64common = ADDXrr %31, %2, debug-location !21
    %35:gpr64common = ADDXrr %32, %34, debug-location !21
    %37:zpr = LD1D %27, %32, %36, debug-location !21 :: (load (s512) from %ir.scevgep31, align 8, !tbaa !17)
    %39:zpr = LD1D %27, killed %35, %38, debug-location !21 :: (load (s512) from %ir.scevgep31 + 64, align 8, !tbaa !17)
    %40:zpr = nofpexcept FADD_ZZZ_D killed %39, killed %30, debug-location !22
    %41:zpr = nofpexcept FADD_ZZZ_D killed %37, killed %28, debug-location !22
    %42:fpr64 = COPY %41.dsub, debug-location !24
    STURDi killed %42, %3, -64, debug-location !24 :: (store (s64) into %ir.scevgep34, !tbaa !17)
    %43:zpr = DUP_ZZI_D %41, 2, debug-location !24
    %44:fpr64 = COPY %43.dsub, debug-location !24
    STURDi killed %44, %3, -48, debug-location !24 :: (store (s64) into %ir.scevgep36, !tbaa !17)
    %45:zpr = DUP_ZZI_D %41, 4, debug-location !24
    %46:fpr64 = COPY %45.dsub, debug-location !24
    STURDi killed %46, %3, -32, debug-location !24 :: (store (s64) into %ir.scevgep37, !tbaa !17)
    %47:zpr = DUP_ZZI_D %41, 6, debug-location !24
    %48:fpr64 = COPY %47.dsub, debug-location !24
    STURDi killed %48, %3, -16, debug-location !24 :: (store (s64) into %ir.scevgep38, !tbaa !17)
    %49:fpr64 = COPY %40.dsub, debug-location !24
    STRDui killed %49, %3, 0, debug-location !24 :: (store (s64) into %ir.lsr.iv, !tbaa !17)
    %50:zpr = DUP_ZZI_D %40, 2, debug-location !24
    %51:fpr64 = COPY %50.dsub, debug-location !24
    STRDui killed %51, %3, 2, debug-location !24 :: (store (s64) into %ir.scevgep35, !tbaa !17)
    %52:zpr = DUP_ZZI_D %40, 4, debug-location !24
    %53:fpr64 = COPY %52.dsub, debug-location !24
    STRDui killed %53, %3, 4, debug-location !24 :: (store (s64) into %ir.scevgep33, !tbaa !17)
    %54:zpr = DUP_ZZI_D %40, 6, debug-location !24
    %55:fpr64 = COPY %54.dsub, debug-location !24
    STRDui killed %55, %3, 6, debug-location !24 :: (store (s64) into %ir.scevgep32, !tbaa !17)
    %56:gpr64sp = ADDXri %3, 128, 0
    %5:gpr64all = COPY %56
    %57:gpr64sp = nsw ADDXri %2, 128, 0
    %6:gpr64all = COPY %57
    %58:gpr64 = SUBSXri %4, 1, 0, implicit-def $nzcv
    %7:gpr64all = COPY %58
    Bcc 1, %bb.2, implicit $nzcv
    B %bb.3
  
  bb.3.for.body5.preheader:
    successors: %bb.6(0x80000000)
  
    %63:gpr64 = SUBREG_TO_REG 0, %33, %subreg.sub_32
    %64:gpr64 = nuw ADDXrr %22, killed %63
    %60:gpr64all = SUBREG_TO_REG 0, %65, %subreg.sub_32
    %59:gpr64all = COPY %64
    B %bb.6, debug-location !15
  
  bb.4.for.cond.cleanup:
    %88:gpr64sp = nuw ADDXri %13, 16, 0, debug-location !31
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !32
    %89:gpr64all = COPY $xzr
    $x0 = COPY %88, debug-location !32
    $x1 = COPY %89, debug-location !32
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0, debug-location !32
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !32
    %91:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s, debug-location !33
    $x0 = COPY %91, debug-location !33
    TCRETURNdi @calc_checksum, 0, csr_aarch64_aapcs, implicit $sp, implicit $x0, debug-location !33
  
  bb.5.for.cond.cleanup4:
    successors: %bb.4(0x04000000), %bb.1(0x7c000000)
  
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !35
    $x0 = COPY %22, debug-location !35
    $x1 = COPY %31, debug-location !35
    $x2 = COPY %77, debug-location !35
    $x3 = COPY %78, debug-location !35
    $x4 = COPY %79, debug-location !35
    $x5 = COPY %80, debug-location !35
    $x6 = COPY %81, debug-location !35
    $x7 = COPY %82, debug-location !35
    $d0 = COPY %83, debug-location !35
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $d0, implicit-def $sp, implicit-def $w0, debug-location !35
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !35
    %85:gpr32common = nuw nsw ADDWri %0, 1, 0, debug-location !36
    %8:gpr32all = COPY %85, debug-location !36
    dead $wzr = SUBSWrr %85, %86, implicit-def $nzcv, debug-location !14
    Bcc 0, %bb.4, implicit $nzcv, debug-location !14
    B %bb.1, debug-location !14
  
  bb.6.for.body5:
    successors: %bb.6(0x7c000000), %bb.5(0x04000000)
  
    %9:gpr64sp = PHI %59, %bb.3, %12, %bb.6
    %10:gpr64common = PHI %60, %bb.3, %11, %bb.6
    %66:fpr64 = LDURDi %9, -8, debug-location !16 :: (load (s64) from %ir.scevgep41, !tbaa !17)
    %68:fpr64 = LDRDroX %31, %10, 0, 1, debug-location !21 :: (load (s64) from %ir.scevgep42, !tbaa !17)
    %69:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %68, killed %66, implicit $fpcr, debug-location !22
    STRDui killed %69, %9, 0, debug-location !24 :: (store (s64) into %ir.lsr.iv39, !tbaa !17)
    %70:gpr64sp = nuw nsw ADDXri %10, 2, 0, debug-location !40
    %11:gpr64all = COPY %70, debug-location !40
    %71:gpr64sp = ADDXri %9, 16, 0, debug-location !41
    %12:gpr64all = COPY %71, debug-location !41
    dead $xzr = SUBSXrr %10, %73, implicit-def $nzcv, debug-location !15
    Bcc 3, %bb.6, implicit $nzcv, debug-location !15
    B %bb.5, debug-location !15

...
