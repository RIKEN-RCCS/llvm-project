# RUN: llc %s -fswp -mcpu=a64fx -start-before=aarch64-swpipeliner -pass-remarks=aarch64-swpipeliner -swpl-enable-reg-alloc -o /dev/null 2>&1 | FileCheck %s
# CHECK: remark: s254.c:38:9: software pipelining (IPC: 1.80, ITR: 17, MVE: 9, II: 5, Stage: 9, (VReg Fp: 14/32, Int: 20/32, Pred: 1/8)), SRA(PReg Fp: 13/32, Int: 12/29, Pred: 2/8)

--- |
  ; ModuleID = 's254.c'
  source_filename = "s254.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  %struct.args_t = type { %struct.timeval, %struct.timeval, ptr }
  %struct.timeval = type { i64, i64 }
  
  @__func__.s254 = private unnamed_addr constant [5 x i8] c"s254\00", align 1
  @b = external global [32000 x double], align 64
  @a = external global [32000 x double], align 64
  @c = external global [32000 x double], align 64
  @d = external global [32000 x double], align 64
  @e = external global [32000 x double], align 64
  @aa = external global [256 x [256 x double]], align 64
  @bb = external global [256 x [256 x double]], align 64
  @cc = external global [256 x [256 x double]], align 64
  
  ; Function Attrs: nounwind uwtable vscale_range(4,4)
  define dso_local double @s254(ptr nocapture noundef %func_args) local_unnamed_addr #0 !dbg !10 {
  entry:
    %call = tail call i32 @initialise_arrays(ptr noundef nonnull @__func__.s254) #5, !dbg !13
    %call1 = tail call i32 @gettimeofday(ptr noundef %func_args, ptr noundef null) #5, !dbg !14
    br label %vector.ph, !dbg !15
  
  vector.ph:                                        ; preds = %for.cond.cleanup4, %entry
    %nl.024 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup4 ]
    %x.0.pre = load double, ptr getelementptr inbounds ([32000 x double], ptr @b, i64 0, i64 31999), align 8, !dbg !16, !tbaa !17
    %vector.recur.init = insertelement <vscale x 2 x double> poison, double %x.0.pre, i64 7, !dbg !21
    %0 = call i64 @llvm.start.loop.iterations.i64(i64 4000), !dbg !21
    br label %vector.body, !dbg !21
  
  vector.body:                                      ; preds = %vector.body, %vector.ph
    %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ], !dbg !22
    %vector.recur = phi <vscale x 2 x double> [ %vector.recur.init, %vector.ph ], [ %wide.load, %vector.body ]
    %1 = phi i64 [ %0, %vector.ph ], [ %7, %vector.body ], !dbg !23
    %2 = shl nuw nsw i64 %index, 3, !dbg !23
    %uglygep = getelementptr i8, ptr @b, i64 %2, !dbg !23
    %wide.load = load <vscale x 2 x double>, ptr %uglygep, align 64, !dbg !23, !tbaa !17
    %3 = tail call <vscale x 2 x double> @llvm.experimental.vector.splice.nxv2f64(<vscale x 2 x double> %vector.recur, <vscale x 2 x double> %wide.load, i32 -1)
    %4 = fadd <vscale x 2 x double> %3, %wide.load, !dbg !24
    %5 = fmul <vscale x 2 x double> %4, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 5.000000e-01, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), !dbg !25
    %6 = shl nuw nsw i64 %index, 3, !dbg !26
    %uglygep28 = getelementptr i8, ptr @a, i64 %6, !dbg !26
    store <vscale x 2 x double> %5, ptr %uglygep28, align 64, !dbg !26, !tbaa !17
    %index.next = add nuw i64 %index, 8, !dbg !22
    %7 = call i64 @llvm.loop.decrement.reg.i64(i64 %1, i64 1), !dbg !22
    %8 = icmp ne i64 %7, 0, !dbg !22
    br i1 %8, label %vector.body, label %for.cond.cleanup4, !dbg !22, !llvm.loop !27
  
  for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
    %t2 = getelementptr inbounds %struct.args_t, ptr %func_args, i64 0, i32 1, !dbg !32
    %call14 = tail call i32 @gettimeofday(ptr noundef nonnull %t2, ptr noundef null) #5, !dbg !33
    %call15 = tail call double @calc_checksum(ptr noundef nonnull @__func__.s254) #5, !dbg !34
    ret double %call15, !dbg !35
  
  for.cond.cleanup4:                                ; preds = %vector.body
    %call10 = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, double noundef 0.000000e+00) #5, !dbg !36
    %inc12 = add nuw nsw i32 %nl.024, 1, !dbg !37
    %exitcond26.not = icmp eq i32 %inc12, 4000, !dbg !38
    br i1 %exitcond26.not, label %for.cond.cleanup, label %vector.ph, !dbg !15, !llvm.loop !39
  }
  
  declare !dbg !41 i32 @initialise_arrays(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nofree nounwind
  declare !dbg !43 noundef i32 @gettimeofday(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #2
  
  declare !dbg !45 i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, double noundef) local_unnamed_addr #1
  
  declare !dbg !46 double @calc_checksum(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
  declare <vscale x 2 x double> @llvm.experimental.vector.splice.nxv2f64(<vscale x 2 x double>, <vscale x 2 x double>, i32 immarg) #3
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #4
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #4
  
  attributes #0 = { nounwind uwtable vscale_range(4,4) "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #1 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #2 = { nofree nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #3 = { nocallback nofree nosync nounwind readnone willreturn }
  attributes #4 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #5 = { nounwind }
  
  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
  !llvm.ident = !{!9}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 15.0.4 (9de4e9f577ef0a8a2dd2dffc8cfc1a0260919a54)", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "s254.c", directory: "", checksumkind: CSK_MD5, checksum: "514fe569e66cad76fe7e56ddea579904")
  !2 = !{i32 7, !"Dwarf Version", i32 5}
  !3 = !{i32 2, !"Debug Info Version", i32 3}
  !4 = !{i32 1, !"wchar_size", i32 4}
  !5 = !{i32 7, !"PIC Level", i32 2}
  !6 = !{i32 7, !"PIE Level", i32 2}
  !7 = !{i32 7, !"uwtable", i32 2}
  !8 = !{i32 7, !"frame-pointer", i32 1}
  !9 = !{!"clang version 15.0.4 (9de4e9f577ef0a8a2dd2dffc8cfc1a0260919a54)"}
  !10 = distinct !DISubprogram(name: "s254", scope: !1, file: !1, line: 26, type: !11, scopeLine: 27, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !12)
  !11 = !DISubroutineType(types: !12)
  !12 = !{}
  !13 = !DILocation(line: 32, column: 5, scope: !10)
  !14 = !DILocation(line: 33, column: 5, scope: !10)
  !15 = !DILocation(line: 36, column: 5, scope: !10)
  !16 = !DILocation(line: 0, scope: !10)
  !17 = !{!18, !18, i64 0}
  !18 = !{!"double", !19, i64 0}
  !19 = !{!"omnipotent char", !20, i64 0}
  !20 = !{!"Simple C/C++ TBAA"}
  !21 = !DILocation(line: 38, column: 9, scope: !10)
  !22 = !DILocation(line: 38, column: 38, scope: !10)
  !23 = !DILocation(line: 39, column: 21, scope: !10)
  !24 = !DILocation(line: 39, column: 26, scope: !10)
  !25 = !DILocation(line: 39, column: 31, scope: !10)
  !26 = !DILocation(line: 39, column: 18, scope: !10)
  !27 = distinct !{!27, !21, !28, !29, !30, !31}
  !28 = !DILocation(line: 41, column: 9, scope: !10)
  !29 = !{!"llvm.loop.mustprogress"}
  !30 = !{!"llvm.loop.unroll.disable"}
  !31 = !{!"llvm.loop.isvectorized", i32 1}
  !32 = !DILocation(line: 45, column: 30, scope: !10)
  !33 = !DILocation(line: 45, column: 5, scope: !10)
  !34 = !DILocation(line: 46, column: 12, scope: !10)
  !35 = !DILocation(line: 46, column: 5, scope: !10)
  !36 = !DILocation(line: 42, column: 9, scope: !10)
  !37 = !DILocation(line: 36, column: 43, scope: !10)
  !38 = !DILocation(line: 36, column: 25, scope: !10)
  !39 = distinct !{!39, !15, !40, !29, !30}
  !40 = !DILocation(line: 43, column: 5, scope: !10)
  !41 = !DISubprogram(name: "initialise_arrays", scope: !42, file: !42, line: 30, type: !11, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !12)
  !42 = !DIFile(filename: "./common.h", directory: "", checksumkind: CSK_MD5, checksum: "00f8e9bcede7c87c47df4e7fec4e54f4")
  !43 = !DISubprogram(name: "gettimeofday", scope: !44, file: !44, line: 67, type: !11, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !12)
  !44 = !DIFile(filename: "/usr/lib/gcc-cross/aarch64-linux-gnu/11/../../../../aarch64-linux-gnu/include/sys/time.h", directory: "", checksumkind: CSK_MD5, checksum: "b36e339815f62ba7208e5294180e353c")
  !45 = !DISubprogram(name: "dummy", scope: !42, file: !42, line: 26, type: !11, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !12)
  !46 = !DISubprogram(name: "calc_checksum", scope: !42, file: !42, line: 31, type: !11, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !12)

...
---
name:            s254
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32sp, preferred-register: '' }
  - { id: 1, class: zpr, preferred-register: '' }
  - { id: 2, class: gpr64all, preferred-register: '' }
  - { id: 3, class: gpr64common, preferred-register: '' }
  - { id: 4, class: zpr, preferred-register: '' }
  - { id: 5, class: gpr64sp, preferred-register: '' }
  - { id: 6, class: zpr, preferred-register: '' }
  - { id: 7, class: gpr64all, preferred-register: '' }
  - { id: 8, class: gpr64all, preferred-register: '' }
  - { id: 9, class: gpr32all, preferred-register: '' }
  - { id: 10, class: gpr64common, preferred-register: '' }
  - { id: 11, class: gpr32all, preferred-register: '' }
  - { id: 12, class: gpr64common, preferred-register: '' }
  - { id: 13, class: gpr32all, preferred-register: '' }
  - { id: 14, class: gpr64all, preferred-register: '' }
  - { id: 15, class: gpr32all, preferred-register: '' }
  - { id: 16, class: gpr32all, preferred-register: '' }
  - { id: 17, class: gpr64all, preferred-register: '' }
  - { id: 18, class: gpr64common, preferred-register: '' }
  - { id: 19, class: gpr32, preferred-register: '' }
  - { id: 20, class: gpr64, preferred-register: '' }
  - { id: 21, class: fpr64, preferred-register: '' }
  - { id: 22, class: gpr32, preferred-register: '' }
  - { id: 23, class: gpr64sp, preferred-register: '' }
  - { id: 24, class: zpr, preferred-register: '' }
  - { id: 25, class: zpr, preferred-register: '' }
  - { id: 26, class: ppr_3b, preferred-register: '' }
  - { id: 27, class: ppr_3b, preferred-register: '' }
  - { id: 28, class: zpr, preferred-register: '' }
  - { id: 29, class: gpr64all, preferred-register: '' }
  - { id: 30, class: gpr32, preferred-register: '' }
  - { id: 31, class: gpr64common, preferred-register: '' }
  - { id: 32, class: ppr_3b, preferred-register: '' }
  - { id: 33, class: ppr, preferred-register: '' }
  - { id: 34, class: ppr_3b, preferred-register: '' }
  - { id: 35, class: zpr, preferred-register: '' }
  - { id: 36, class: zpr, preferred-register: '' }
  - { id: 37, class: ppr_3b, preferred-register: '' }
  - { id: 38, class: zpr, preferred-register: '' }
  - { id: 39, class: gpr64common, preferred-register: '' }
  - { id: 40, class: gpr64sp, preferred-register: '' }
  - { id: 41, class: gpr64, preferred-register: '' }
  - { id: 42, class: gpr64common, preferred-register: '' }
  - { id: 43, class: gpr64common, preferred-register: '' }
  - { id: 44, class: gpr64common, preferred-register: '' }
  - { id: 45, class: gpr64common, preferred-register: '' }
  - { id: 46, class: gpr64common, preferred-register: '' }
  - { id: 47, class: gpr64common, preferred-register: '' }
  - { id: 48, class: gpr64common, preferred-register: '' }
  - { id: 49, class: gpr64common, preferred-register: '' }
  - { id: 50, class: fpr64, preferred-register: '' }
  - { id: 51, class: gpr32all, preferred-register: '' }
  - { id: 52, class: gpr32sp, preferred-register: '' }
  - { id: 53, class: gpr32, preferred-register: '' }
  - { id: 54, class: gpr64sp, preferred-register: '' }
  - { id: 55, class: gpr64all, preferred-register: '' }
  - { id: 56, class: gpr32all, preferred-register: '' }
  - { id: 57, class: gpr64common, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%10' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     true
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $x0
  
    %10:gpr64common = COPY $x0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !13
    %12:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s254, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s254, debug-location !13
    $x0 = COPY %12, debug-location !13
    BL @initialise_arrays, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0, debug-location !13
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !13
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !14
    %14:gpr64all = COPY $xzr
    $x0 = COPY %10, debug-location !14
    $x1 = COPY %14, debug-location !14
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0, debug-location !14
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !14
    %16:gpr32all = COPY $wzr
    %11:gpr32all = COPY %16
    %18:gpr64common = LOADgot target-flags(aarch64-got) @b
    %19:gpr32 = MOVi32imm 255992
    %20:gpr64 = SUBREG_TO_REG 0, %19, %subreg.sub_32
    %22:gpr32 = MOVi32imm 7
    %23:gpr64sp = SUBREG_TO_REG 0, %22, %subreg.sub_32
    %24:zpr = DUP_ZR_D %23
    %25:zpr = INDEX_II_D 0, 1
    %26:ppr_3b = PTRUE_D 31
    %27:ppr_3b = CMPEQ_PPzZZ_D %26, %25, %24, implicit-def dead $nzcv
    %28:zpr = IMPLICIT_DEF
    %30:gpr32 = MOVi32imm 4000
    %33:ppr = PTRUE_D 1
    %34:ppr_3b = REV_PP_D %33
    %39:gpr64common = LOADgot target-flags(aarch64-got) @a
    %44:gpr64common = LOADgot target-flags(aarch64-got) @c
    %45:gpr64common = LOADgot target-flags(aarch64-got) @d
    %46:gpr64common = LOADgot target-flags(aarch64-got) @e
    %47:gpr64common = LOADgot target-flags(aarch64-got) @aa
    %48:gpr64common = LOADgot target-flags(aarch64-got) @bb
    %49:gpr64common = LOADgot target-flags(aarch64-got) @cc
    %50:fpr64 = FMOVD0
  
  bb.1.vector.ph:
    successors: %bb.2(0x80000000)
  
    %0:gpr32sp = PHI %11, %bb.0, %9, %bb.4
    %21:fpr64 = LDRDroX %18, %20, 0, 0, debug-location !16 :: (dereferenceable load (s64) from `ptr getelementptr inbounds ([32000 x double], ptr @b, i64 0, i64 31999)`, !tbaa !17)
    %1:zpr = CPY_ZPmV_D %28, %27, killed %21, debug-location !21
    %29:gpr64all = COPY $xzr
    %17:gpr64all = COPY %29
    %2:gpr64all = SUBREG_TO_REG 0, %30, %subreg.sub_32
  
  bb.2.vector.body:
    successors: %bb.2(0x7c000000), %bb.4(0x04000000)
  
    %3:gpr64common = PHI %17, %bb.1, %7, %bb.2, debug-location !22
    %4:zpr = PHI %1, %bb.1, %6, %bb.2
    %5:gpr64sp = PHI %2, %bb.1, %8, %bb.2, debug-location !23
    %6:zpr = LD1D %26, %18, %3, debug-location !23 :: (load unknown-size from %ir.uglygep, align 64, !tbaa !17)
    %35:zpr = SPLICE_ZPZ_D %34, %4, %6
    %36:zpr = FADD_ZZZ_D killed %35, %6, debug-location !24
    %38:zpr = FMUL_ZPZI_UNDEF_D %26, killed %36, 0, debug-location !25
    ST1D killed %38, %26, %39, %3, debug-location !26 :: (store unknown-size into %ir.uglygep28, align 64, !tbaa !17)
    %40:gpr64sp = nuw ADDXri %3, 8, 0, debug-location !22
    %7:gpr64all = COPY %40, debug-location !22
    %41:gpr64 = SUBSXri %5, 1, 0, implicit-def $nzcv, debug-location !22
    %8:gpr64all = COPY %41, debug-location !22
    Bcc 1, %bb.2, implicit $nzcv, debug-location !22
    B %bb.4, debug-location !22
  
  bb.3.for.cond.cleanup:
    %54:gpr64sp = nuw ADDXri %10, 16, 0, debug-location !32
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !33
    %55:gpr64all = COPY $xzr
    $x0 = COPY %54, debug-location !33
    $x1 = COPY %55, debug-location !33
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0, debug-location !33
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !33
    %57:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s254, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s254, debug-location !34
    $x0 = COPY %57, debug-location !34
    TCRETURNdi @calc_checksum, 0, csr_aarch64_aapcs, implicit $sp, implicit $x0, debug-location !34
  
  bb.4.for.cond.cleanup4:
    successors: %bb.3(0x04000000), %bb.1(0x7c000000)
  
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !36
    $x0 = COPY %39, debug-location !36
    $x1 = COPY %18, debug-location !36
    $x2 = COPY %44, debug-location !36
    $x3 = COPY %45, debug-location !36
    $x4 = COPY %46, debug-location !36
    $x5 = COPY %47, debug-location !36
    $x6 = COPY %48, debug-location !36
    $x7 = COPY %49, debug-location !36
    $d0 = COPY %50, debug-location !36
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $d0, implicit-def $sp, implicit-def $w0, debug-location !36
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !36
    %52:gpr32sp = nuw nsw ADDWri %0, 1, 0, debug-location !37
    %9:gpr32all = COPY %52, debug-location !37
    dead $wzr = SUBSWri %52, 4000, 0, implicit-def $nzcv, debug-location !15
    Bcc 0, %bb.3, implicit $nzcv, debug-location !15
    B %bb.1, debug-location !15

...
