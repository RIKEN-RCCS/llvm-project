#RUN: llc %s -mcpu=a64fx -ffj-swp -O1 -swpl-debug-dump-resource-filter=".*" -start-before=aarch64-swpipeliner -o /dev/null 2>&1 | FileCheck %s

#CHECK:DBG(AArch64SwplTargetMachine::getPipelines): MI: %372:gpr32 = ORRWrs $wzr, %368:gpr32, 0
#CHECK-NEXT:  ResourceID: INT_OP+1
#CHECK-NEXT:  latency: 1
#CHECK-NEXT:  seqDecode: false
#CHECK-NEXT:  stage/resource(): 0/EXA
#CHECK-NEXT:  stage/resource(): 0/EXB
#CHECK-NEXT:  stage/resource(): 0/EAGA
#CHECK-NEXT:  stage/resource(): 0/EAGB

#CHECK:DBG(AArch64SwplTargetMachine::getPipelines): Pseudo-instr: SUBREG_TO_REG

#CHECK:DBG(AArch64SwplTargetMachine::getPipelines): MI: %374:gpr64 = UBFMXri killed %373:gpr64, 61, 60
#CHECK-NEXT:  ResourceID: INT_OP+2
#CHECK-NEXT:  latency: 1
#CHECK-NEXT:  seqDecode: false
#CHECK-NEXT:  stage/resource(): 0/EXA
#CHECK-NEXT:  stage/resource(): 0/EXB

#CHECK:DBG(AArch64SwplTargetMachine::getPipelines): MI: STRDroX killed %376:fpr64, %236:gpr64common, %374:gpr64, 0, 0 :: (store (s64) into %ir.arrayidx17.prol, !tbaa !5)
#CHECK-NEXT:  ResourceID: SIMDFP_SVE_ST+1
#CHECK-NEXT:  latency: 1
#CHECK-NEXT:  seqDecode: false
#CHECK-NEXT:  stage/resource(): 0/EAGA, 0/FLA, 0/LSU1, 0/LSU2
#CHECK-NEXT:  stage/resource(): 0/EAGB, 0/FLA, 0/LSU1, 0/LSU2

#CHECK:DBG(AArch64SwplTargetMachine::getPipelines): MI: %377:gpr32 = COPY %369.sub_32:gpr64sp
#CHECK-NEXT:  ResourceID: INT_OP+1
#CHECK-NEXT:  latency: 1
#CHECK-NEXT:  seqDecode: false
#CHECK-NEXT:  stage/resource(): 0/EXA
#CHECK-NEXT:  stage/resource(): 0/EXB
#CHECK-NEXT:  stage/resource(): 0/EAGA
#CHECK-NEXT:  stage/resource(): 0/EAGB

#CHECK:DBG(AArch64SwplTargetMachine::getPipelines): MI: %393:gpr64common = ADDXrr %390:gpr64common, %137:gpr64
#CHECK-NEXT:  ResourceID: INT_OP+1
#CHECK-NEXT:  latency: 1
#CHECK-NEXT:  seqDecode: false
#CHECK-NEXT:  stage/resource(): 0/EXA
#CHECK-NEXT:  stage/resource(): 0/EXB
#CHECK-NEXT:  stage/resource(): 0/EAGA
#CHECK-NEXT:  stage/resource(): 0/EAGB

#CHECK:DBG(AArch64SwplTargetMachine::getPipelines): MI: %409:gpr64common = ADDXrs %236:gpr64common, %408:gpr64common, 3
#CHECK-NEXT:  ResourceID: INT_OP+3
#CHECK-NEXT:  latency: 2
#CHECK-NEXT:  seqDecode: false
#CHECK-NEXT:  stage/resource(): 0/FLA, 0/FLB, 0/EXA, 0/EXB, 0/EAGA, 0/EAGB, 0/PRX, 0/BR, 1/FLA, 1/FLB, 1/EXA, 1/EXB, 1/EAGA, 1/EAGB, 1/PRX, 1/BR

--- |
  ; ModuleID = '/TSVC_2/src_sep_optnone/s141.c'
  source_filename = "/TSVC_2/src_sep_optnone/s141.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  %struct.args_t = type { %struct.timeval, %struct.timeval, ptr }
  %struct.timeval = type { i64, i64 }
  
  @__func__.s141 = private unnamed_addr constant [5 x i8] c"s141\00", align 1
  @bb = external global [256 x [256 x double]], align 64
  @flat_2d_array = external local_unnamed_addr global [65536 x double], align 64
  @a = external global [32000 x double], align 64
  @b = external global [32000 x double], align 64
  @c = external global [32000 x double], align 64
  @d = external global [32000 x double], align 64
  @e = external global [32000 x double], align 64
  @aa = external global [256 x [256 x double]], align 64
  @cc = external global [256 x [256 x double]], align 64
  
  ; Function Attrs: nounwind uwtable vscale_range(1,16)
  define dso_local double @s141(ptr nocapture noundef %func_args) local_unnamed_addr #0 {
  entry:
    %call = tail call i32 @initialise_arrays(ptr noundef nonnull @__func__.s141) #5
    %call1 = tail call i32 @gettimeofday(ptr noundef %func_args, ptr noundef null) #5
    br label %for.cond2.preheader
  
  for.cond2.preheader:                              ; preds = %entry, %for.cond.cleanup4
    %nl.047 = phi i32 [ 0, %entry ], [ %inc26, %for.cond.cleanup4 ]
    br label %for.body13.lr.ph
  
  for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
    %t2 = getelementptr inbounds %struct.args_t, ptr %func_args, i64 0, i32 1
    %call28 = tail call i32 @gettimeofday(ptr noundef nonnull %t2, ptr noundef null) #5
    %call29 = tail call fast double @calc_checksum(ptr noundef nonnull @__func__.s141) #5
    ret double %call29
  
  for.cond2.loopexit:                               ; preds = %for.body13, %for.body13.prol.loopexit
    %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
    %0 = mul i64 %indvars.iv.next.1, %indvars.iv.next
    %1 = trunc i64 %0 to i32
    %div42.1 = lshr exact i32 %1, 1
    %2 = trunc i64 %indvars.iv.next to i32
    %sub9.1 = add nuw nsw i32 %div42.1, %2
    %3 = call i64 @llvm.start.loop.iterations.i64(i64 %71)
    br label %for.body13.prol.1
  
  for.body13.prol.1:                                ; preds = %for.body13.prol.1, %for.cond2.loopexit
    %lsr.iv341 = phi i64 [ %lsr.iv.next342, %for.body13.prol.1 ], [ -1, %for.cond2.loopexit ]
    %lsr.iv339 = phi i64 [ %lsr.iv.next340, %for.body13.prol.1 ], [ 2056, %for.cond2.loopexit ]
    %k.044.prol.1 = phi i32 [ %sub9.1, %for.cond2.loopexit ], [ %add20.prol.1, %for.body13.prol.1 ]
    %4 = phi i64 [ %3, %for.cond2.loopexit ], [ %11, %for.body13.prol.1 ]
    %uglygep = getelementptr i8, ptr %lsr.iv, i64 %lsr.iv339
    %5 = load double, ptr %uglygep, align 8, !tbaa !6
    %idxprom16.prol.1 = zext i32 %k.044.prol.1 to i64
    %arrayidx17.prol.1 = getelementptr inbounds [65536 x double], ptr @flat_2d_array, i64 0, i64 %idxprom16.prol.1
    %6 = load double, ptr %arrayidx17.prol.1, align 8, !tbaa !6
    %add18.prol.1 = fadd fast double %6, %5
    store double %add18.prol.1, ptr %arrayidx17.prol.1, align 8, !tbaa !6
    %7 = add i64 %indvars.iv, %lsr.iv341
    %8 = add i64 %7, 3
    %tmp343 = trunc i64 %8 to i32
    %add20.prol.1 = add nuw nsw i32 %k.044.prol.1, %tmp343
    %lsr.iv.next340 = add nuw nsw i64 %lsr.iv339, 2048
    %lsr.iv.next342 = add nsw i64 %lsr.iv341, 1
    %9 = add i64 %indvars.iv, %lsr.iv.next342
    %10 = add i64 %9, 2
    %11 = call i64 @llvm.loop.decrement.reg.i64(i64 %4, i64 1)
    %12 = icmp ne i64 %11, 0
    br i1 %12, label %for.body13.prol.1, label %for.body13.prol.loopexit.1, !llvm.loop !10
  
  for.body13.prol.loopexit.1:                       ; preds = %for.body13.prol.1
    %13 = add nsw i64 %indvars.iv, -248
    %14 = icmp ult i64 %13, 7
    br i1 %14, label %for.cond2.loopexit.1, label %for.body13.1.preheader
  
  for.body13.1.preheader:                           ; preds = %for.body13.prol.loopexit.1
    %15 = shl i64 %lsr.iv.next342, 11
    %16 = add nuw nsw i64 %15, 20488
    %uglygep350 = getelementptr i8, ptr @bb, i64 %lsr.iv346
    %uglygep352 = getelementptr i8, ptr @bb, i64 %lsr.iv346
    %uglygep355 = getelementptr i8, ptr @bb, i64 %lsr.iv346
    %uglygep358 = getelementptr i8, ptr @bb, i64 %lsr.iv346
    %uglygep361 = getelementptr i8, ptr @bb, i64 %lsr.iv346
    %uglygep364 = getelementptr i8, ptr @bb, i64 %lsr.iv346
    %uglygep367 = getelementptr i8, ptr @bb, i64 %lsr.iv346
    %uglygep370 = getelementptr i8, ptr @bb, i64 %lsr.iv346
    %17 = add nsw i64 %10, -256
    %18 = shl nuw nsw i64 %10, 11
    %19 = add i64 %lsr.iv390, %18
    %20 = call i64 @llvm.start.loop.iterations.i64(i64 %69)
    br label %for.body13.1
  
  for.body13.1:                                     ; preds = %for.body13.1.preheader, %for.body13.1
    %lsr.iv392 = phi i64 [ %19, %for.body13.1.preheader ], [ %lsr.iv.next393, %for.body13.1 ]
    %lsr.iv373 = phi i64 [ %17, %for.body13.1.preheader ], [ %lsr.iv.next374, %for.body13.1 ]
    %lsr.iv348 = phi i64 [ %16, %for.body13.1.preheader ], [ %lsr.iv.next349, %for.body13.1 ]
    %k.044.1 = phi i32 [ %add20.7.1, %for.body13.1 ], [ %add20.prol.1, %for.body13.1.preheader ]
    %21 = phi i64 [ %20, %for.body13.1.preheader ], [ %61, %for.body13.1 ]
    %uglygep371 = getelementptr i8, ptr %uglygep370, i64 %lsr.iv348
    %uglygep372 = getelementptr i8, ptr %uglygep371, i64 14336
    %uglygep368 = getelementptr i8, ptr %uglygep367, i64 %lsr.iv348
    %uglygep369 = getelementptr i8, ptr %uglygep368, i64 12288
    %uglygep365 = getelementptr i8, ptr %uglygep364, i64 %lsr.iv348
    %uglygep366 = getelementptr i8, ptr %uglygep365, i64 10240
    %uglygep362 = getelementptr i8, ptr %uglygep361, i64 %lsr.iv348
    %uglygep363 = getelementptr i8, ptr %uglygep362, i64 8192
    %uglygep359 = getelementptr i8, ptr %uglygep358, i64 %lsr.iv348
    %uglygep360 = getelementptr i8, ptr %uglygep359, i64 6144
    %uglygep356 = getelementptr i8, ptr %uglygep355, i64 %lsr.iv348
    %uglygep357 = getelementptr i8, ptr %uglygep356, i64 4096
    %uglygep353 = getelementptr i8, ptr %uglygep352, i64 %lsr.iv348
    %uglygep354 = getelementptr i8, ptr %uglygep353, i64 2048
    %uglygep351 = getelementptr i8, ptr %uglygep350, i64 %lsr.iv348
    %uglygep394 = getelementptr i8, ptr @bb, i64 %lsr.iv392
    %uglygep395 = getelementptr i8, ptr %uglygep394, i64 8
    call void @llvm.prefetch.p0(ptr %uglygep351, i32 0, i32 3, i32 1)
    %22 = load double, ptr %uglygep395, align 8, !tbaa !6
    %idxprom16.156 = zext i32 %k.044.1 to i64
    %arrayidx17.157 = getelementptr inbounds [65536 x double], ptr @flat_2d_array, i64 0, i64 %idxprom16.156
    %23 = load double, ptr %arrayidx17.157, align 8, !tbaa !6
    %add18.158 = fadd fast double %23, %22
    store double %add18.158, ptr %arrayidx17.157, align 8, !tbaa !6
    %24 = add i64 %lsr.iv373, 257
    %tmp375 = trunc i64 %24 to i32
    %add20.160 = add nuw nsw i32 %k.044.1, %tmp375
    %uglygep408 = getelementptr i8, ptr @bb, i64 %lsr.iv392
    %uglygep409 = getelementptr i8, ptr %uglygep408, i64 2056
    call void @llvm.prefetch.p0(ptr %uglygep354, i32 0, i32 3, i32 1)
    %25 = load double, ptr %uglygep409, align 8, !tbaa !6
    %26 = add i64 %lsr.iv373, 256
    %tmp388 = trunc i64 %26 to i32
    %27 = zext i32 %tmp388 to i64
    %add20.160117 = add i64 %idxprom16.156, %27
    %28 = shl i64 %add20.160117, 3
    %uglygep118 = getelementptr i8, ptr @flat_2d_array, i64 %28
    %uglygep119 = getelementptr i8, ptr %uglygep118, i64 8
    %29 = load double, ptr %uglygep119, align 8, !tbaa !6
    %add18.1.1 = fadd fast double %29, %25
    store double %add18.1.1, ptr %uglygep119, align 8, !tbaa !6
    %30 = add i64 %lsr.iv373, 258
    %tmp377 = trunc i64 %30 to i32
    %add20.1.1 = add nuw nsw i32 %add20.160, %tmp377
    %uglygep406 = getelementptr i8, ptr @bb, i64 %lsr.iv392
    %uglygep407 = getelementptr i8, ptr %uglygep406, i64 4104
    call void @llvm.prefetch.p0(ptr %uglygep357, i32 0, i32 3, i32 1)
    %31 = load double, ptr %uglygep407, align 8, !tbaa !6
    %tmp376 = trunc i64 %30 to i32
    %32 = zext i32 %tmp376 to i64
    %add20.1.1127 = add i64 %add20.160117, %32
    %33 = shl i64 %add20.1.1127, 3
    %uglygep128 = getelementptr i8, ptr @flat_2d_array, i64 %33
    %uglygep129 = getelementptr i8, ptr %uglygep128, i64 8
    %34 = load double, ptr %uglygep129, align 8, !tbaa !6
    %add18.2.1 = fadd fast double %34, %31
    store double %add18.2.1, ptr %uglygep129, align 8, !tbaa !6
    %35 = add i64 %lsr.iv373, 259
    %tmp379 = trunc i64 %35 to i32
    %add20.2.1 = add nuw nsw i32 %add20.1.1, %tmp379
    %uglygep404 = getelementptr i8, ptr @bb, i64 %lsr.iv392
    %uglygep405 = getelementptr i8, ptr %uglygep404, i64 6152
    call void @llvm.prefetch.p0(ptr %uglygep360, i32 0, i32 3, i32 1)
    %36 = load double, ptr %uglygep405, align 8, !tbaa !6
    %tmp378 = trunc i64 %35 to i32
    %37 = zext i32 %tmp378 to i64
    %add20.2.1138 = add i64 %add20.1.1127, %37
    %38 = shl i64 %add20.2.1138, 3
    %uglygep139 = getelementptr i8, ptr @flat_2d_array, i64 %38
    %uglygep140 = getelementptr i8, ptr %uglygep139, i64 8
    %39 = load double, ptr %uglygep140, align 8, !tbaa !6
    %add18.3.1 = fadd fast double %39, %36
    store double %add18.3.1, ptr %uglygep140, align 8, !tbaa !6
    %40 = add i64 %lsr.iv373, 260
    %tmp381 = trunc i64 %40 to i32
    %add20.3.1 = add nuw nsw i32 %add20.2.1, %tmp381
    %uglygep396 = getelementptr i8, ptr @bb, i64 %lsr.iv392
    %uglygep397 = getelementptr i8, ptr %uglygep396, i64 8200
    call void @llvm.prefetch.p0(ptr %uglygep363, i32 0, i32 3, i32 1)
    %41 = load double, ptr %uglygep397, align 8, !tbaa !6
    %tmp380 = trunc i64 %40 to i32
    %42 = zext i32 %tmp380 to i64
    %add20.3.1150 = add i64 %add20.2.1138, %42
    %43 = shl i64 %add20.3.1150, 3
    %uglygep151 = getelementptr i8, ptr @flat_2d_array, i64 %43
    %uglygep152 = getelementptr i8, ptr %uglygep151, i64 8
    %44 = load double, ptr %uglygep152, align 8, !tbaa !6
    %add18.4.1 = fadd fast double %44, %41
    store double %add18.4.1, ptr %uglygep152, align 8, !tbaa !6
    %45 = add i64 %lsr.iv373, 261
    %tmp383 = trunc i64 %45 to i32
    %add20.4.1 = add nuw nsw i32 %add20.3.1, %tmp383
    %uglygep402 = getelementptr i8, ptr @bb, i64 %lsr.iv392
    %uglygep403 = getelementptr i8, ptr %uglygep402, i64 10248
    call void @llvm.prefetch.p0(ptr %uglygep366, i32 0, i32 3, i32 1)
    %46 = load double, ptr %uglygep403, align 8, !tbaa !6
    %tmp382 = trunc i64 %45 to i32
    %47 = zext i32 %tmp382 to i64
    %add20.4.1163 = add i64 %add20.3.1150, %47
    %48 = shl i64 %add20.4.1163, 3
    %uglygep164 = getelementptr i8, ptr @flat_2d_array, i64 %48
    %uglygep165 = getelementptr i8, ptr %uglygep164, i64 8
    %49 = load double, ptr %uglygep165, align 8, !tbaa !6
    %add18.5.1 = fadd fast double %49, %46
    store double %add18.5.1, ptr %uglygep165, align 8, !tbaa !6
    %50 = add i64 %lsr.iv373, 262
    %tmp385 = trunc i64 %50 to i32
    %add20.5.1 = add nuw nsw i32 %add20.4.1, %tmp385
    %uglygep400 = getelementptr i8, ptr @bb, i64 %lsr.iv392
    %uglygep401 = getelementptr i8, ptr %uglygep400, i64 12296
    call void @llvm.prefetch.p0(ptr %uglygep369, i32 0, i32 3, i32 1)
    %51 = load double, ptr %uglygep401, align 8, !tbaa !6
    %tmp384 = trunc i64 %50 to i32
    %52 = zext i32 %tmp384 to i64
    %add20.5.1177 = add i64 %add20.4.1163, %52
    %53 = shl i64 %add20.5.1177, 3
    %uglygep178 = getelementptr i8, ptr @flat_2d_array, i64 %53
    %uglygep179 = getelementptr i8, ptr %uglygep178, i64 8
    %54 = load double, ptr %uglygep179, align 8, !tbaa !6
    %add18.6.1 = fadd fast double %54, %51
    store double %add18.6.1, ptr %uglygep179, align 8, !tbaa !6
    %55 = add i64 %lsr.iv373, 263
    %tmp387 = trunc i64 %55 to i32
    %add20.6.1 = add nuw nsw i32 %add20.5.1, %tmp387
    %uglygep398 = getelementptr i8, ptr @bb, i64 %lsr.iv392
    %uglygep399 = getelementptr i8, ptr %uglygep398, i64 14344
    call void @llvm.prefetch.p0(ptr %uglygep372, i32 0, i32 3, i32 1)
    %56 = load double, ptr %uglygep399, align 8, !tbaa !6
    %tmp386 = trunc i64 %55 to i32
    %57 = zext i32 %tmp386 to i64
    %add20.6.1192 = add i64 %add20.5.1177, %57
    %58 = shl i64 %add20.6.1192, 3
    %uglygep193 = getelementptr i8, ptr @flat_2d_array, i64 %58
    %uglygep194 = getelementptr i8, ptr %uglygep193, i64 8
    %59 = load double, ptr %uglygep194, align 8, !tbaa !6
    %add18.7.1 = fadd fast double %59, %56
    store double %add18.7.1, ptr %uglygep194, align 8, !tbaa !6
    %60 = add i64 %lsr.iv373, 264
    %tmp389 = trunc i64 %60 to i32
    %add20.7.1 = add nuw nsw i32 %add20.6.1, %tmp389
    %lsr.iv.next349 = add i64 %lsr.iv348, 16384
    %lsr.iv.next374 = add nsw i64 %lsr.iv373, 8
    %lsr.iv.next393 = add i64 %lsr.iv392, 16384
    %61 = call i64 @llvm.loop.decrement.reg.i64(i64 %21, i64 1)
    %62 = icmp ne i64 %61, 0
    br i1 %62, label %for.body13.1, label %for.cond2.loopexit.1, !llvm.loop !12
  
  for.cond2.loopexit.1:                             ; preds = %for.body13.1, %for.body13.prol.loopexit.1
    %63 = trunc i64 %77 to i3
    %uglygep287 = getelementptr i8, ptr %lsr.iv, i64 4112
    %lsr.iv.next = add nsw i64 %lsr.iv290, -2
    %uglygep292 = getelementptr i8, ptr %lsr.iv291, i64 16
    %lsr.iv.next345 = add i3 %63, -2
    %lsr.iv.next347 = add nuw nsw i64 %lsr.iv346, 4112
    %lsr.iv.next391 = add nuw nsw i64 %lsr.iv390, 16
    %exitcond53.not.1 = icmp eq i64 %indvars.iv.next.1, 256
    %indvar.next = add i64 %indvar, 1
    br i1 %exitcond53.not.1, label %for.cond.cleanup4, label %for.body13.lr.ph, !llvm.loop !14
  
  for.cond.cleanup4:                                ; preds = %for.cond2.loopexit.1
    %call24 = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, double noundef 0.000000e+00) #5
    %inc26 = add nuw nsw i32 %nl.047, 1
    %exitcond54.not = icmp eq i32 %inc26, 78000
    br i1 %exitcond54.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !15
  
  for.body13.lr.ph:                                 ; preds = %for.cond2.loopexit.1, %for.cond2.preheader
    %indvar = phi i64 [ %indvar.next, %for.cond2.loopexit.1 ], [ 0, %for.cond2.preheader ]
    %lsr.iv390 = phi i64 [ %lsr.iv.next391, %for.cond2.loopexit.1 ], [ 0, %for.cond2.preheader ]
    %lsr.iv346 = phi i64 [ %lsr.iv.next347, %for.cond2.loopexit.1 ], [ 0, %for.cond2.preheader ]
    %lsr.iv344 = phi i3 [ %lsr.iv.next345, %for.cond2.loopexit.1 ], [ -2, %for.cond2.preheader ]
    %lsr.iv291 = phi ptr [ %uglygep292, %for.cond2.loopexit.1 ], [ getelementptr (i8, ptr @bb, i64 16384), %for.cond2.preheader ]
    %lsr.iv290 = phi i64 [ %lsr.iv.next, %for.cond2.loopexit.1 ], [ 0, %for.cond2.preheader ]
    %lsr.iv = phi ptr [ %uglygep287, %for.cond2.loopexit.1 ], [ @bb, %for.cond2.preheader ]
    %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.1, %for.cond2.loopexit.1 ]
    %64 = mul nsw i64 %indvar, -2
    %65 = add i64 %64, 246
    %66 = zext i3 %lsr.iv344 to i64
    %67 = sub i64 %65, %66
    %68 = lshr i64 %67, 3
    %69 = add nuw nsw i64 %68, 1
    %70 = zext i3 %lsr.iv344 to i64
    %71 = add nuw nsw i64 %70, 1
    %72 = mul nsw i64 %indvar, -2
    %73 = lshr i64 %72, 1
    %74 = trunc i64 %73 to i2
    %75 = zext i2 %74 to i64
    %76 = shl nuw nsw i64 %75, 1
    %77 = zext i3 %lsr.iv344 to i64
    %78 = sub nsw i64 0, %indvars.iv
    %indvars.iv.next = or i64 %indvars.iv, 1
    %79 = mul i64 %indvars.iv.next, %indvars.iv
    %80 = trunc i64 %79 to i32
    %div42 = lshr exact i32 %80, 1
    %81 = trunc i64 %indvars.iv to i32
    %sub9 = add nuw nsw i32 %div42, %81
    %xtraiter = and i64 %78, 6
    %lcmp.mod.not = icmp eq i64 %xtraiter, 0
    br i1 %lcmp.mod.not, label %for.body13.prol.loopexit, label %for.body13.prol.preheader
  
  for.body13.prol.preheader:                        ; preds = %for.body13.lr.ph
    %82 = call i64 @llvm.start.loop.iterations.i64(i64 %76)
    br label %for.body13.prol
  
  for.body13.prol:                                  ; preds = %for.body13.prol.preheader, %for.body13.prol
    %lsr.iv288 = phi ptr [ %lsr.iv, %for.body13.prol.preheader ], [ %uglygep289, %for.body13.prol ]
    %k.044.prol = phi i32 [ %add20.prol, %for.body13.prol ], [ %sub9, %for.body13.prol.preheader ]
    %prol.iter = phi i64 [ %prol.iter.next, %for.body13.prol ], [ 0, %for.body13.prol.preheader ]
    %83 = phi i64 [ %82, %for.body13.prol.preheader ], [ %89, %for.body13.prol ]
    %84 = load double, ptr %lsr.iv288, align 16, !tbaa !6
    %idxprom16.prol = zext i32 %k.044.prol to i64
    %arrayidx17.prol = getelementptr inbounds [65536 x double], ptr @flat_2d_array, i64 0, i64 %idxprom16.prol
    %85 = load double, ptr %arrayidx17.prol, align 8, !tbaa !6
    %add18.prol = fadd fast double %85, %84
    store double %add18.prol, ptr %arrayidx17.prol, align 8, !tbaa !6
    %86 = add i64 %indvars.iv, %prol.iter
    %87 = add i64 %86, 1
    %tmp = trunc i64 %87 to i32
    %add20.prol = add nuw nsw i32 %k.044.prol, %tmp
    %prol.iter.next = add i64 %prol.iter, 1
    %uglygep289 = getelementptr i8, ptr %lsr.iv288, i64 2048
    %88 = add i64 %indvars.iv, %prol.iter.next
    %89 = call i64 @llvm.loop.decrement.reg.i64(i64 %83, i64 1)
    %90 = icmp ne i64 %89, 0
    br i1 %90, label %for.body13.prol, label %for.body13.prol.loopexit, !llvm.loop !10
  
  for.body13.prol.loopexit:                         ; preds = %for.body13.prol, %for.body13.lr.ph
    %indvars.iv48.unr = phi i64 [ %indvars.iv, %for.body13.lr.ph ], [ %88, %for.body13.prol ]
    %k.044.unr = phi i32 [ %sub9, %for.body13.lr.ph ], [ %add20.prol, %for.body13.prol ]
    %91 = add nsw i64 %indvars.iv, -249
    %92 = icmp ult i64 %91, 7
    br i1 %92, label %for.cond2.loopexit, label %for.body13.preheader
  
  for.body13.preheader:                             ; preds = %for.body13.prol.loopexit
    %93 = shl i64 %indvars.iv48.unr, 11
    %94 = add nsw i64 %indvars.iv48.unr, -256
    %95 = sub i64 248, %indvars.iv48.unr
    %96 = lshr i64 %95, 3
    %97 = add nuw nsw i64 %96, 1
    %98 = call i64 @llvm.start.loop.iterations.i64(i64 %97)
    br label %for.body13
  
  for.body13:                                       ; preds = %for.body13.preheader, %for.body13
    %lsr.iv304 = phi i64 [ %94, %for.body13.preheader ], [ %lsr.iv.next305, %for.body13 ]
    %lsr.iv293 = phi ptr [ %lsr.iv291, %for.body13.preheader ], [ %uglygep294, %for.body13 ]
    %k.044 = phi i32 [ %add20.7, %for.body13 ], [ %k.044.unr, %for.body13.preheader ]
    %99 = phi i64 [ %98, %for.body13.preheader ], [ %139, %for.body13 ]
    %uglygep302 = getelementptr i8, ptr %lsr.iv293, i64 %93
    %uglygep303 = getelementptr i8, ptr %uglygep302, i64 14336
    %uglygep326 = getelementptr i8, ptr %uglygep302, i64 12288
    %uglygep300 = getelementptr i8, ptr %lsr.iv293, i64 %93
    %uglygep301 = getelementptr i8, ptr %uglygep300, i64 10240
    %uglygep323 = getelementptr i8, ptr %uglygep300, i64 8192
    %uglygep298 = getelementptr i8, ptr %lsr.iv293, i64 %93
    %uglygep299 = getelementptr i8, ptr %uglygep298, i64 6144
    %uglygep307 = getelementptr i8, ptr %uglygep298, i64 4096
    %uglygep296 = getelementptr i8, ptr %lsr.iv293, i64 %93
    %uglygep297 = getelementptr i8, ptr %uglygep296, i64 2048
    %uglygep295 = getelementptr i8, ptr %lsr.iv293, i64 %93
    %uglygep308 = getelementptr i8, ptr %uglygep295, i64 -16384
    call void @llvm.prefetch.p0(ptr %uglygep295, i32 0, i32 3, i32 1)
    %100 = load double, ptr %uglygep308, align 16, !tbaa !6
    %idxprom16 = zext i32 %k.044 to i64
    %arrayidx17 = getelementptr inbounds [65536 x double], ptr @flat_2d_array, i64 0, i64 %idxprom16
    %101 = load double, ptr %arrayidx17, align 8, !tbaa !6
    %add18 = fadd fast double %101, %100
    store double %add18, ptr %arrayidx17, align 8, !tbaa !6
    %102 = add i64 %lsr.iv304, 257
    %tmp306 = trunc i64 %102 to i32
    %add20 = add nuw nsw i32 %k.044, %tmp306
    %uglygep321 = getelementptr i8, ptr %lsr.iv293, i64 %93
    %uglygep322 = getelementptr i8, ptr %uglygep321, i64 -14336
    call void @llvm.prefetch.p0(ptr %uglygep297, i32 0, i32 3, i32 1)
    %103 = load double, ptr %uglygep322, align 16, !tbaa !6
    %104 = add i64 %lsr.iv304, 256
    %tmp329 = trunc i64 %104 to i32
    %105 = zext i32 %tmp329 to i64
    %add20215 = add i64 %idxprom16, %105
    %106 = shl i64 %add20215, 3
    %uglygep216 = getelementptr i8, ptr @flat_2d_array, i64 %106
    %uglygep217 = getelementptr i8, ptr %uglygep216, i64 8
    %107 = load double, ptr %uglygep217, align 8, !tbaa !6
    %add18.1 = fadd fast double %107, %103
    store double %add18.1, ptr %uglygep217, align 8, !tbaa !6
    %108 = add i64 %lsr.iv304, 258
    %tmp325 = trunc i64 %108 to i32
    %add20.1 = add nuw nsw i32 %add20, %tmp325
    %uglygep319 = getelementptr i8, ptr %lsr.iv293, i64 %93
    %uglygep320 = getelementptr i8, ptr %uglygep319, i64 -12288
    call void @llvm.prefetch.p0(ptr %uglygep307, i32 0, i32 3, i32 1)
    %109 = load double, ptr %uglygep320, align 16, !tbaa !6
    %tmp324 = trunc i64 %108 to i32
    %110 = zext i32 %tmp324 to i64
    %add20.1224 = add i64 %add20215, %110
    %111 = shl i64 %add20.1224, 3
    %uglygep225 = getelementptr i8, ptr @flat_2d_array, i64 %111
    %uglygep226 = getelementptr i8, ptr %uglygep225, i64 8
    %112 = load double, ptr %uglygep226, align 8, !tbaa !6
    %add18.2 = fadd fast double %112, %109
    store double %add18.2, ptr %uglygep226, align 8, !tbaa !6
    %113 = add i64 %lsr.iv304, 259
    %tmp328 = trunc i64 %113 to i32
    %add20.2 = add nuw nsw i32 %add20.1, %tmp328
    %uglygep317 = getelementptr i8, ptr %lsr.iv293, i64 %93
    %uglygep318 = getelementptr i8, ptr %uglygep317, i64 -10240
    call void @llvm.prefetch.p0(ptr %uglygep299, i32 0, i32 3, i32 1)
    %114 = load double, ptr %uglygep318, align 16, !tbaa !6
    %tmp327 = trunc i64 %113 to i32
    %115 = zext i32 %tmp327 to i64
    %add20.2234 = add i64 %add20.1224, %115
    %116 = shl i64 %add20.2234, 3
    %uglygep235 = getelementptr i8, ptr @flat_2d_array, i64 %116
    %uglygep236 = getelementptr i8, ptr %uglygep235, i64 8
    %117 = load double, ptr %uglygep236, align 8, !tbaa !6
    %add18.3 = fadd fast double %117, %114
    store double %add18.3, ptr %uglygep236, align 8, !tbaa !6
    %118 = add i64 %lsr.iv304, 260
    %tmp331 = trunc i64 %118 to i32
    %add20.3 = add nuw nsw i32 %add20.2, %tmp331
    %uglygep315 = getelementptr i8, ptr %lsr.iv293, i64 %93
    %uglygep316 = getelementptr i8, ptr %uglygep315, i64 -8192
    call void @llvm.prefetch.p0(ptr %uglygep323, i32 0, i32 3, i32 1)
    %119 = load double, ptr %uglygep316, align 16, !tbaa !6
    %tmp330 = trunc i64 %118 to i32
    %120 = zext i32 %tmp330 to i64
    %add20.3245 = add i64 %add20.2234, %120
    %121 = shl i64 %add20.3245, 3
    %uglygep246 = getelementptr i8, ptr @flat_2d_array, i64 %121
    %uglygep247 = getelementptr i8, ptr %uglygep246, i64 8
    %122 = load double, ptr %uglygep247, align 8, !tbaa !6
    %add18.4 = fadd fast double %122, %119
    store double %add18.4, ptr %uglygep247, align 8, !tbaa !6
    %123 = add i64 %lsr.iv304, 261
    %tmp333 = trunc i64 %123 to i32
    %add20.4 = add nuw nsw i32 %add20.3, %tmp333
    %uglygep313 = getelementptr i8, ptr %lsr.iv293, i64 %93
    %uglygep314 = getelementptr i8, ptr %uglygep313, i64 -6144
    call void @llvm.prefetch.p0(ptr %uglygep301, i32 0, i32 3, i32 1)
    %124 = load double, ptr %uglygep314, align 16, !tbaa !6
    %tmp332 = trunc i64 %123 to i32
    %125 = zext i32 %tmp332 to i64
    %add20.4257 = add i64 %add20.3245, %125
    %126 = shl i64 %add20.4257, 3
    %uglygep258 = getelementptr i8, ptr @flat_2d_array, i64 %126
    %uglygep259 = getelementptr i8, ptr %uglygep258, i64 8
    %127 = load double, ptr %uglygep259, align 8, !tbaa !6
    %add18.5 = fadd fast double %127, %124
    store double %add18.5, ptr %uglygep259, align 8, !tbaa !6
    %128 = add i64 %lsr.iv304, 262
    %tmp335 = trunc i64 %128 to i32
    %add20.5 = add nuw nsw i32 %add20.4, %tmp335
    %uglygep311 = getelementptr i8, ptr %lsr.iv293, i64 %93
    %uglygep312 = getelementptr i8, ptr %uglygep311, i64 -4096
    call void @llvm.prefetch.p0(ptr %uglygep326, i32 0, i32 3, i32 1)
    %129 = load double, ptr %uglygep312, align 16, !tbaa !6
    %tmp334 = trunc i64 %128 to i32
    %130 = zext i32 %tmp334 to i64
    %add20.5270 = add i64 %add20.4257, %130
    %131 = shl i64 %add20.5270, 3
    %uglygep271 = getelementptr i8, ptr @flat_2d_array, i64 %131
    %uglygep272 = getelementptr i8, ptr %uglygep271, i64 8
    %132 = load double, ptr %uglygep272, align 8, !tbaa !6
    %add18.6 = fadd fast double %132, %129
    store double %add18.6, ptr %uglygep272, align 8, !tbaa !6
    %133 = add i64 %lsr.iv304, 263
    %tmp337 = trunc i64 %133 to i32
    %add20.6 = add nuw nsw i32 %add20.5, %tmp337
    %uglygep309 = getelementptr i8, ptr %lsr.iv293, i64 %93
    %uglygep310 = getelementptr i8, ptr %uglygep309, i64 -2048
    call void @llvm.prefetch.p0(ptr %uglygep303, i32 0, i32 3, i32 1)
    %134 = load double, ptr %uglygep310, align 16, !tbaa !6
    %tmp336 = trunc i64 %133 to i32
    %135 = zext i32 %tmp336 to i64
    %add20.6284 = add i64 %add20.5270, %135
    %136 = shl i64 %add20.6284, 3
    %uglygep285 = getelementptr i8, ptr @flat_2d_array, i64 %136
    %uglygep286 = getelementptr i8, ptr %uglygep285, i64 8
    %137 = load double, ptr %uglygep286, align 8, !tbaa !6
    %add18.7 = fadd fast double %137, %134
    store double %add18.7, ptr %uglygep286, align 8, !tbaa !6
    %138 = add i64 %lsr.iv304, 264
    %tmp338 = trunc i64 %138 to i32
    %add20.7 = add nuw nsw i32 %add20.6, %tmp338
    %uglygep294 = getelementptr i8, ptr %lsr.iv293, i64 16384
    %lsr.iv.next305 = add nsw i64 %lsr.iv304, 8
    %139 = call i64 @llvm.loop.decrement.reg.i64(i64 %99, i64 1)
    %140 = icmp ne i64 %139, 0
    br i1 %140, label %for.body13, label %for.cond2.loopexit, !llvm.loop !12
  }
  
  declare i32 @initialise_arrays(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nofree nounwind
  declare noundef i32 @gettimeofday(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #2
  
  declare i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, double noundef) local_unnamed_addr #1
  
  declare double @calc_checksum(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: inaccessiblemem_or_argmemonly nocallback nofree nosync nounwind willreturn
  declare void @llvm.prefetch.p0(ptr nocapture readonly, i32 immarg, i32 immarg, i32) #3
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #4
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #4
  
  attributes #0 = { nounwind uwtable vscale_range(1,16) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #1 = { "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #2 = { nofree nounwind "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #3 = { inaccessiblemem_or_argmemonly nocallback nofree nosync nounwind willreturn }
  attributes #4 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #5 = { nounwind }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 7, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"double", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C/C++ TBAA"}
  !10 = distinct !{!10, !11}
  !11 = !{!"llvm.loop.unroll.disable"}
  !12 = distinct !{!12, !13}
  !13 = !{!"llvm.loop.mustprogress"}
  !14 = distinct !{!14, !13}
  !15 = distinct !{!15, !13}

...
---
name:            s141
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32sp, preferred-register: '' }
  - { id: 1, class: gpr64sp, preferred-register: '' }
  - { id: 2, class: gpr32all, preferred-register: '' }
  - { id: 3, class: gpr64all, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: gpr64common, preferred-register: '' }
  - { id: 6, class: gpr32, preferred-register: '' }
  - { id: 7, class: gpr64sp, preferred-register: '' }
  - { id: 8, class: gpr32all, preferred-register: '' }
  - { id: 9, class: gpr64all, preferred-register: '' }
  - { id: 10, class: gpr64, preferred-register: '' }
  - { id: 11, class: gpr64common, preferred-register: '' }
  - { id: 12, class: gpr64all, preferred-register: '' }
  - { id: 13, class: gpr64all, preferred-register: '' }
  - { id: 14, class: gpr64, preferred-register: '' }
  - { id: 15, class: gpr64, preferred-register: '' }
  - { id: 16, class: gpr64, preferred-register: '' }
  - { id: 17, class: gpr64, preferred-register: '' }
  - { id: 18, class: gpr64, preferred-register: '' }
  - { id: 19, class: gpr64, preferred-register: '' }
  - { id: 20, class: gpr64, preferred-register: '' }
  - { id: 21, class: gpr64, preferred-register: '' }
  - { id: 22, class: gpr64all, preferred-register: '' }
  - { id: 23, class: gpr64all, preferred-register: '' }
  - { id: 24, class: gpr64all, preferred-register: '' }
  - { id: 25, class: gpr64common, preferred-register: '' }
  - { id: 26, class: gpr64sp, preferred-register: '' }
  - { id: 27, class: gpr64common, preferred-register: '' }
  - { id: 28, class: gpr32, preferred-register: '' }
  - { id: 29, class: gpr64sp, preferred-register: '' }
  - { id: 30, class: gpr32all, preferred-register: '' }
  - { id: 31, class: gpr64all, preferred-register: '' }
  - { id: 32, class: gpr64all, preferred-register: '' }
  - { id: 33, class: gpr64all, preferred-register: '' }
  - { id: 34, class: gpr64all, preferred-register: '' }
  - { id: 35, class: gpr64all, preferred-register: '' }
  - { id: 36, class: gpr64all, preferred-register: '' }
  - { id: 37, class: gpr64all, preferred-register: '' }
  - { id: 38, class: gpr32all, preferred-register: '' }
  - { id: 39, class: gpr64all, preferred-register: '' }
  - { id: 40, class: gpr64all, preferred-register: '' }
  - { id: 41, class: gpr64all, preferred-register: '' }
  - { id: 42, class: gpr32all, preferred-register: '' }
  - { id: 43, class: gpr64common, preferred-register: '' }
  - { id: 44, class: gpr64common, preferred-register: '' }
  - { id: 45, class: gpr64, preferred-register: '' }
  - { id: 46, class: gpr32all, preferred-register: '' }
  - { id: 47, class: gpr64sp, preferred-register: '' }
  - { id: 48, class: gpr64sp, preferred-register: '' }
  - { id: 49, class: gpr64common, preferred-register: '' }
  - { id: 50, class: gpr64common, preferred-register: '' }
  - { id: 51, class: gpr64all, preferred-register: '' }
  - { id: 52, class: gpr64all, preferred-register: '' }
  - { id: 53, class: gpr64all, preferred-register: '' }
  - { id: 54, class: gpr64all, preferred-register: '' }
  - { id: 55, class: gpr64all, preferred-register: '' }
  - { id: 56, class: gpr32all, preferred-register: '' }
  - { id: 57, class: gpr64all, preferred-register: '' }
  - { id: 58, class: gpr64sp, preferred-register: '' }
  - { id: 59, class: gpr32, preferred-register: '' }
  - { id: 60, class: gpr64sp, preferred-register: '' }
  - { id: 61, class: gpr64sp, preferred-register: '' }
  - { id: 62, class: gpr32all, preferred-register: '' }
  - { id: 63, class: gpr64all, preferred-register: '' }
  - { id: 64, class: gpr64all, preferred-register: '' }
  - { id: 65, class: gpr64all, preferred-register: '' }
  - { id: 66, class: gpr64all, preferred-register: '' }
  - { id: 67, class: gpr64common, preferred-register: '' }
  - { id: 68, class: gpr32all, preferred-register: '' }
  - { id: 69, class: gpr64, preferred-register: '' }
  - { id: 70, class: gpr64all, preferred-register: '' }
  - { id: 71, class: gpr64all, preferred-register: '' }
  - { id: 72, class: gpr64sp, preferred-register: '' }
  - { id: 73, class: gpr64common, preferred-register: '' }
  - { id: 74, class: gpr32, preferred-register: '' }
  - { id: 75, class: gpr64sp, preferred-register: '' }
  - { id: 76, class: gpr32all, preferred-register: '' }
  - { id: 77, class: gpr64all, preferred-register: '' }
  - { id: 78, class: gpr64all, preferred-register: '' }
  - { id: 79, class: gpr64all, preferred-register: '' }
  - { id: 80, class: gpr64common, preferred-register: '' }
  - { id: 81, class: gpr32all, preferred-register: '' }
  - { id: 82, class: gpr64common, preferred-register: '' }
  - { id: 83, class: gpr32all, preferred-register: '' }
  - { id: 84, class: gpr64all, preferred-register: '' }
  - { id: 85, class: gpr32all, preferred-register: '' }
  - { id: 86, class: gpr32all, preferred-register: '' }
  - { id: 87, class: gpr64all, preferred-register: '' }
  - { id: 88, class: gpr32all, preferred-register: '' }
  - { id: 89, class: gpr64all, preferred-register: '' }
  - { id: 90, class: gpr64all, preferred-register: '' }
  - { id: 91, class: gpr64common, preferred-register: '' }
  - { id: 92, class: gpr64sp, preferred-register: '' }
  - { id: 93, class: gpr32, preferred-register: '' }
  - { id: 94, class: gpr64all, preferred-register: '' }
  - { id: 95, class: gpr64, preferred-register: '' }
  - { id: 96, class: gpr64, preferred-register: '' }
  - { id: 97, class: gpr64, preferred-register: '' }
  - { id: 98, class: gpr64all, preferred-register: '' }
  - { id: 99, class: gpr64common, preferred-register: '' }
  - { id: 100, class: gpr64common, preferred-register: '' }
  - { id: 101, class: gpr64common, preferred-register: '' }
  - { id: 102, class: gpr64common, preferred-register: '' }
  - { id: 103, class: gpr64sp, preferred-register: '' }
  - { id: 104, class: gpr64sp, preferred-register: '' }
  - { id: 105, class: gpr64, preferred-register: '' }
  - { id: 106, class: gpr64, preferred-register: '' }
  - { id: 107, class: gpr32, preferred-register: '' }
  - { id: 108, class: gpr32, preferred-register: '' }
  - { id: 109, class: gpr32, preferred-register: '' }
  - { id: 110, class: gpr64, preferred-register: '' }
  - { id: 111, class: gpr64all, preferred-register: '' }
  - { id: 112, class: gpr64sp, preferred-register: '' }
  - { id: 113, class: gpr32, preferred-register: '' }
  - { id: 114, class: gpr32, preferred-register: '' }
  - { id: 115, class: gpr32, preferred-register: '' }
  - { id: 116, class: gpr64common, preferred-register: '' }
  - { id: 117, class: gpr64all, preferred-register: '' }
  - { id: 118, class: gpr64all, preferred-register: '' }
  - { id: 119, class: fpr64, preferred-register: '' }
  - { id: 120, class: gpr32, preferred-register: '' }
  - { id: 121, class: gpr64, preferred-register: '' }
  - { id: 122, class: gpr64, preferred-register: '' }
  - { id: 123, class: gpr64common, preferred-register: '' }
  - { id: 124, class: fpr64, preferred-register: '' }
  - { id: 125, class: fpr64, preferred-register: '' }
  - { id: 126, class: gpr32, preferred-register: '' }
  - { id: 127, class: gpr32, preferred-register: '' }
  - { id: 128, class: gpr32, preferred-register: '' }
  - { id: 129, class: gpr32common, preferred-register: '' }
  - { id: 130, class: gpr32sp, preferred-register: '' }
  - { id: 131, class: gpr64common, preferred-register: '' }
  - { id: 132, class: gpr64sp, preferred-register: '' }
  - { id: 133, class: gpr64, preferred-register: '' }
  - { id: 134, class: gpr64, preferred-register: '' }
  - { id: 135, class: gpr64common, preferred-register: '' }
  - { id: 136, class: gpr64, preferred-register: '' }
  - { id: 137, class: gpr64, preferred-register: '' }
  - { id: 138, class: gpr64common, preferred-register: '' }
  - { id: 139, class: gpr32, preferred-register: '' }
  - { id: 140, class: gpr64, preferred-register: '' }
  - { id: 141, class: gpr64, preferred-register: '' }
  - { id: 142, class: gpr64common, preferred-register: '' }
  - { id: 143, class: gpr64sp, preferred-register: '' }
  - { id: 144, class: gpr64common, preferred-register: '' }
  - { id: 145, class: gpr64, preferred-register: '' }
  - { id: 146, class: fpr64, preferred-register: '' }
  - { id: 147, class: gpr32, preferred-register: '' }
  - { id: 148, class: gpr64, preferred-register: '' }
  - { id: 149, class: gpr64, preferred-register: '' }
  - { id: 150, class: gpr64common, preferred-register: '' }
  - { id: 151, class: fpr64, preferred-register: '' }
  - { id: 152, class: fpr64, preferred-register: '' }
  - { id: 153, class: gpr32common, preferred-register: '' }
  - { id: 154, class: gpr32, preferred-register: '' }
  - { id: 155, class: gpr64sp, preferred-register: '' }
  - { id: 156, class: gpr32, preferred-register: '' }
  - { id: 157, class: gpr32, preferred-register: '' }
  - { id: 158, class: gpr64, preferred-register: '' }
  - { id: 159, class: fpr64, preferred-register: '' }
  - { id: 160, class: gpr32common, preferred-register: '' }
  - { id: 161, class: gpr32, preferred-register: '' }
  - { id: 162, class: gpr64, preferred-register: '' }
  - { id: 163, class: gpr64common, preferred-register: '' }
  - { id: 164, class: gpr64common, preferred-register: '' }
  - { id: 165, class: fpr64, preferred-register: '' }
  - { id: 166, class: fpr64, preferred-register: '' }
  - { id: 167, class: gpr64sp, preferred-register: '' }
  - { id: 168, class: gpr32, preferred-register: '' }
  - { id: 169, class: gpr32, preferred-register: '' }
  - { id: 170, class: gpr64, preferred-register: '' }
  - { id: 171, class: fpr64, preferred-register: '' }
  - { id: 172, class: gpr64common, preferred-register: '' }
  - { id: 173, class: gpr64common, preferred-register: '' }
  - { id: 174, class: fpr64, preferred-register: '' }
  - { id: 175, class: fpr64, preferred-register: '' }
  - { id: 176, class: gpr64sp, preferred-register: '' }
  - { id: 177, class: gpr32, preferred-register: '' }
  - { id: 178, class: gpr32, preferred-register: '' }
  - { id: 179, class: gpr64, preferred-register: '' }
  - { id: 180, class: fpr64, preferred-register: '' }
  - { id: 181, class: gpr64common, preferred-register: '' }
  - { id: 182, class: gpr64common, preferred-register: '' }
  - { id: 183, class: fpr64, preferred-register: '' }
  - { id: 184, class: fpr64, preferred-register: '' }
  - { id: 185, class: gpr64sp, preferred-register: '' }
  - { id: 186, class: gpr32, preferred-register: '' }
  - { id: 187, class: gpr32, preferred-register: '' }
  - { id: 188, class: gpr64, preferred-register: '' }
  - { id: 189, class: fpr64, preferred-register: '' }
  - { id: 190, class: gpr64common, preferred-register: '' }
  - { id: 191, class: gpr64common, preferred-register: '' }
  - { id: 192, class: fpr64, preferred-register: '' }
  - { id: 193, class: fpr64, preferred-register: '' }
  - { id: 194, class: gpr64sp, preferred-register: '' }
  - { id: 195, class: gpr32, preferred-register: '' }
  - { id: 196, class: gpr32, preferred-register: '' }
  - { id: 197, class: gpr64, preferred-register: '' }
  - { id: 198, class: fpr64, preferred-register: '' }
  - { id: 199, class: gpr64common, preferred-register: '' }
  - { id: 200, class: gpr64common, preferred-register: '' }
  - { id: 201, class: fpr64, preferred-register: '' }
  - { id: 202, class: fpr64, preferred-register: '' }
  - { id: 203, class: gpr64sp, preferred-register: '' }
  - { id: 204, class: gpr32, preferred-register: '' }
  - { id: 205, class: gpr32, preferred-register: '' }
  - { id: 206, class: gpr64, preferred-register: '' }
  - { id: 207, class: fpr64, preferred-register: '' }
  - { id: 208, class: gpr64common, preferred-register: '' }
  - { id: 209, class: gpr64common, preferred-register: '' }
  - { id: 210, class: fpr64, preferred-register: '' }
  - { id: 211, class: fpr64, preferred-register: '' }
  - { id: 212, class: gpr32common, preferred-register: '' }
  - { id: 213, class: gpr64common, preferred-register: '' }
  - { id: 214, class: fpr64, preferred-register: '' }
  - { id: 215, class: gpr64common, preferred-register: '' }
  - { id: 216, class: gpr64common, preferred-register: '' }
  - { id: 217, class: fpr64, preferred-register: '' }
  - { id: 218, class: fpr64, preferred-register: '' }
  - { id: 219, class: gpr32sp, preferred-register: '' }
  - { id: 220, class: gpr64sp, preferred-register: '' }
  - { id: 221, class: gpr64sp, preferred-register: '' }
  - { id: 222, class: gpr64, preferred-register: '' }
  - { id: 223, class: gpr64all, preferred-register: '' }
  - { id: 224, class: gpr64all, preferred-register: '' }
  - { id: 225, class: gpr64sp, preferred-register: '' }
  - { id: 226, class: gpr32, preferred-register: '' }
  - { id: 227, class: gpr32, preferred-register: '' }
  - { id: 228, class: gpr32, preferred-register: '' }
  - { id: 229, class: gpr32, preferred-register: '' }
  - { id: 230, class: gpr64, preferred-register: '' }
  - { id: 231, class: gpr32, preferred-register: '' }
  - { id: 232, class: fpr64, preferred-register: '' }
  - { id: 233, class: gpr32, preferred-register: '' }
  - { id: 234, class: gpr64, preferred-register: '' }
  - { id: 235, class: gpr64, preferred-register: '' }
  - { id: 236, class: gpr64common, preferred-register: '' }
  - { id: 237, class: fpr64, preferred-register: '' }
  - { id: 238, class: fpr64, preferred-register: '' }
  - { id: 239, class: gpr32, preferred-register: '' }
  - { id: 240, class: gpr32, preferred-register: '' }
  - { id: 241, class: gpr32, preferred-register: '' }
  - { id: 242, class: gpr32common, preferred-register: '' }
  - { id: 243, class: gpr32sp, preferred-register: '' }
  - { id: 244, class: gpr64sp, preferred-register: '' }
  - { id: 245, class: gpr64common, preferred-register: '' }
  - { id: 246, class: gpr64common, preferred-register: '' }
  - { id: 247, class: gpr64common, preferred-register: '' }
  - { id: 248, class: gpr64, preferred-register: '' }
  - { id: 249, class: gpr64common, preferred-register: '' }
  - { id: 250, class: gpr64, preferred-register: '' }
  - { id: 251, class: gpr32, preferred-register: '' }
  - { id: 252, class: gpr64, preferred-register: '' }
  - { id: 253, class: gpr64, preferred-register: '' }
  - { id: 254, class: gpr64common, preferred-register: '' }
  - { id: 255, class: gpr64, preferred-register: '' }
  - { id: 256, class: gpr64common, preferred-register: '' }
  - { id: 257, class: gpr64, preferred-register: '' }
  - { id: 258, class: gpr64common, preferred-register: '' }
  - { id: 259, class: gpr64common, preferred-register: '' }
  - { id: 260, class: gpr64common, preferred-register: '' }
  - { id: 261, class: gpr64common, preferred-register: '' }
  - { id: 262, class: gpr64common, preferred-register: '' }
  - { id: 263, class: gpr64common, preferred-register: '' }
  - { id: 264, class: gpr64common, preferred-register: '' }
  - { id: 265, class: gpr64common, preferred-register: '' }
  - { id: 266, class: gpr64common, preferred-register: '' }
  - { id: 267, class: gpr64common, preferred-register: '' }
  - { id: 268, class: fpr64, preferred-register: '' }
  - { id: 269, class: gpr32, preferred-register: '' }
  - { id: 270, class: gpr64, preferred-register: '' }
  - { id: 271, class: gpr64, preferred-register: '' }
  - { id: 272, class: gpr64common, preferred-register: '' }
  - { id: 273, class: fpr64, preferred-register: '' }
  - { id: 274, class: fpr64, preferred-register: '' }
  - { id: 275, class: gpr32common, preferred-register: '' }
  - { id: 276, class: gpr32, preferred-register: '' }
  - { id: 277, class: gpr64sp, preferred-register: '' }
  - { id: 278, class: gpr32, preferred-register: '' }
  - { id: 279, class: gpr32, preferred-register: '' }
  - { id: 280, class: fpr64, preferred-register: '' }
  - { id: 281, class: gpr32common, preferred-register: '' }
  - { id: 282, class: gpr32, preferred-register: '' }
  - { id: 283, class: gpr64, preferred-register: '' }
  - { id: 284, class: gpr64common, preferred-register: '' }
  - { id: 285, class: gpr64common, preferred-register: '' }
  - { id: 286, class: fpr64, preferred-register: '' }
  - { id: 287, class: fpr64, preferred-register: '' }
  - { id: 288, class: gpr64sp, preferred-register: '' }
  - { id: 289, class: gpr32, preferred-register: '' }
  - { id: 290, class: gpr32, preferred-register: '' }
  - { id: 291, class: fpr64, preferred-register: '' }
  - { id: 292, class: gpr64common, preferred-register: '' }
  - { id: 293, class: gpr64common, preferred-register: '' }
  - { id: 294, class: fpr64, preferred-register: '' }
  - { id: 295, class: fpr64, preferred-register: '' }
  - { id: 296, class: gpr64sp, preferred-register: '' }
  - { id: 297, class: gpr32, preferred-register: '' }
  - { id: 298, class: gpr32, preferred-register: '' }
  - { id: 299, class: fpr64, preferred-register: '' }
  - { id: 300, class: gpr64common, preferred-register: '' }
  - { id: 301, class: gpr64common, preferred-register: '' }
  - { id: 302, class: fpr64, preferred-register: '' }
  - { id: 303, class: fpr64, preferred-register: '' }
  - { id: 304, class: gpr64sp, preferred-register: '' }
  - { id: 305, class: gpr32, preferred-register: '' }
  - { id: 306, class: gpr32, preferred-register: '' }
  - { id: 307, class: fpr64, preferred-register: '' }
  - { id: 308, class: gpr64common, preferred-register: '' }
  - { id: 309, class: gpr64common, preferred-register: '' }
  - { id: 310, class: fpr64, preferred-register: '' }
  - { id: 311, class: fpr64, preferred-register: '' }
  - { id: 312, class: gpr64sp, preferred-register: '' }
  - { id: 313, class: gpr32, preferred-register: '' }
  - { id: 314, class: gpr32, preferred-register: '' }
  - { id: 315, class: fpr64, preferred-register: '' }
  - { id: 316, class: gpr64common, preferred-register: '' }
  - { id: 317, class: gpr64common, preferred-register: '' }
  - { id: 318, class: fpr64, preferred-register: '' }
  - { id: 319, class: fpr64, preferred-register: '' }
  - { id: 320, class: gpr64sp, preferred-register: '' }
  - { id: 321, class: gpr32, preferred-register: '' }
  - { id: 322, class: gpr32, preferred-register: '' }
  - { id: 323, class: fpr64, preferred-register: '' }
  - { id: 324, class: gpr64common, preferred-register: '' }
  - { id: 325, class: gpr64common, preferred-register: '' }
  - { id: 326, class: fpr64, preferred-register: '' }
  - { id: 327, class: fpr64, preferred-register: '' }
  - { id: 328, class: gpr32common, preferred-register: '' }
  - { id: 329, class: fpr64, preferred-register: '' }
  - { id: 330, class: gpr64common, preferred-register: '' }
  - { id: 331, class: gpr64common, preferred-register: '' }
  - { id: 332, class: fpr64, preferred-register: '' }
  - { id: 333, class: fpr64, preferred-register: '' }
  - { id: 334, class: gpr32sp, preferred-register: '' }
  - { id: 335, class: gpr64sp, preferred-register: '' }
  - { id: 336, class: gpr64sp, preferred-register: '' }
  - { id: 337, class: gpr64sp, preferred-register: '' }
  - { id: 338, class: gpr64, preferred-register: '' }
  - { id: 339, class: gpr32sp, preferred-register: '' }
  - { id: 340, class: gpr32, preferred-register: '' }
  - { id: 341, class: gpr64, preferred-register: '' }
  - { id: 342, class: gpr64, preferred-register: '' }
  - { id: 343, class: gpr64common, preferred-register: '' }
  - { id: 344, class: gpr64sp, preferred-register: '' }
  - { id: 345, class: gpr32sp, preferred-register: '' }
  - { id: 346, class: gpr64, preferred-register: '' }
  - { id: 347, class: gpr64sp, preferred-register: '' }
  - { id: 348, class: gpr64sp, preferred-register: '' }
  - { id: 349, class: gpr64, preferred-register: '' }
  - { id: 350, class: gpr64common, preferred-register: '' }
  - { id: 351, class: gpr64common, preferred-register: '' }
  - { id: 352, class: gpr64common, preferred-register: '' }
  - { id: 353, class: gpr64common, preferred-register: '' }
  - { id: 354, class: gpr64common, preferred-register: '' }
  - { id: 355, class: gpr64common, preferred-register: '' }
  - { id: 356, class: gpr64common, preferred-register: '' }
  - { id: 357, class: gpr64common, preferred-register: '' }
  - { id: 358, class: fpr64, preferred-register: '' }
  - { id: 359, class: gpr32all, preferred-register: '' }
  - { id: 360, class: gpr32common, preferred-register: '' }
  - { id: 361, class: gpr32, preferred-register: '' }
  - { id: 362, class: gpr32, preferred-register: '' }
  - { id: 363, class: gpr64sp, preferred-register: '' }
  - { id: 364, class: gpr64all, preferred-register: '' }
  - { id: 365, class: gpr32all, preferred-register: '' }
  - { id: 366, class: gpr64common, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%80' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     true
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $x0
  
    %80:gpr64common = COPY $x0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %82:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s141, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s141
    $x0 = COPY %82
    BL @initialise_arrays, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %84:gpr64all = COPY $xzr
    $x0 = COPY %80
    $x1 = COPY %84
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %86:gpr32all = COPY $wzr
    %81:gpr32all = COPY %86
    %91:gpr64common = LOADgot target-flags(aarch64-got) @bb
    %98:gpr64all = IMPLICIT_DEF
    %111:gpr64all = IMPLICIT_DEF
    %231:gpr32 = MOVi32imm 2056
    %236:gpr64common = LOADgot target-flags(aarch64-got) @flat_2d_array
    %340:gpr32 = MOVi32imm 4112
    %341:gpr64 = SUBREG_TO_REG 0, %340, %subreg.sub_32
    %350:gpr64common = LOADgot target-flags(aarch64-got) @a
    %351:gpr64common = LOADgot target-flags(aarch64-got) @b
    %352:gpr64common = LOADgot target-flags(aarch64-got) @c
    %353:gpr64common = LOADgot target-flags(aarch64-got) @d
    %354:gpr64common = LOADgot target-flags(aarch64-got) @e
    %355:gpr64common = LOADgot target-flags(aarch64-got) @aa
    %357:gpr64common = LOADgot target-flags(aarch64-got) @cc
    %358:fpr64 = FMOVD0
    %361:gpr32 = MOVi32imm 78000
    %251:gpr32 = MOVi32imm 20488
    %252:gpr64 = SUBREG_TO_REG 0, %251, %subreg.sub_32
    %139:gpr32 = MOVi32imm 248
    %140:gpr64 = SUBREG_TO_REG 0, %139, %subreg.sub_32
    %145:gpr64 = MOVi64imm -16384
    %158:gpr64 = MOVi64imm -14336
    %170:gpr64 = MOVi64imm -12288
    %179:gpr64 = MOVi64imm -10240
    %188:gpr64 = MOVi64imm -8192
    %197:gpr64 = MOVi64imm -6144
    %206:gpr64 = MOVi64imm -4096
  
  bb.1.for.cond2.preheader:
    successors: %bb.10(0x80000000)
  
    %0:gpr32sp = PHI %81, %bb.0, %42, %bb.9
    %92:gpr64sp = ADDXri %91, 4, 12
    %90:gpr64all = COPY %91
    %93:gpr32 = MOVi32imm 6
    %88:gpr32all = COPY %93
    %94:gpr64all = COPY $xzr
    %87:gpr64all = COPY %94
    %89:gpr64all = COPY %92
    B %bb.10
  
  bb.2.for.cond.cleanup:
    %363:gpr64sp = nuw ADDXri %80, 16, 0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %364:gpr64all = COPY $xzr
    $x0 = COPY %363
    $x1 = COPY %364
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %366:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s141, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s141
    $x0 = COPY %366
    TCRETURNdi @calc_checksum, 0, csr_aarch64_aapcs, implicit $sp, implicit $x0
  
  bb.3.for.cond2.loopexit:
    successors: %bb.4(0x80000000)
  
    %101:gpr64common = ADDXri %100, 246, 0
    %102:gpr64common = UBFMXri %101, 3, 63
    %103:gpr64sp = nuw nsw ADDXri %102, 1, 0
    %51:gpr64all = COPY %103
    %104:gpr64sp = nuw nsw ADDXri %99, 1, 0
    %52:gpr64all = COPY %104
    %54:gpr64all = COPY %99
    %55:gpr64all = COPY %112
    %225:gpr64sp = nuw nsw ADDXri %50, 2, 0
    %1:gpr64sp = COPY %225
    %226:gpr32 = COPY %225.sub_32
    %227:gpr32 = COPY %55.sub_32
    %228:gpr32 = MADDWrrr killed %226, %227, $wzr
    %229:gpr32 = ADDWrs %227, killed %228, 65
    %2:gpr32all = COPY %229
    %230:gpr64 = MOVi64imm -1
    %223:gpr64all = COPY %230
    %3:gpr64all = COPY %52
    %224:gpr64all = SUBREG_TO_REG 0, %231, %subreg.sub_32
  
  bb.4.for.body13.prol.1:
    successors: %bb.4(0x7c000000), %bb.5(0x04000000)
  
    %4:gpr64sp = PHI %223, %bb.3, %10, %bb.4
    %5:gpr64common = PHI %224, %bb.3, %9, %bb.4
    %6:gpr32 = PHI %2, %bb.3, %8, %bb.4
    %7:gpr64sp = PHI %3, %bb.3, %12, %bb.4
    %232:fpr64 = LDRDroX %49, %5, 0, 0 :: (load (s64) from %ir.uglygep, !tbaa !6)
    %233:gpr32 = ORRWrs $wzr, %6, 0
    %234:gpr64 = SUBREG_TO_REG 0, killed %233, %subreg.sub_32
    %235:gpr64 = UBFMXri killed %234, 61, 60
    %237:fpr64 = LDRDroX %236, %235, 0, 0 :: (load (s64) from %ir.arrayidx17.prol.1, !tbaa !6)
    %238:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %237, killed %232
    STRDroX killed %238, %236, %235, 0, 0 :: (store (s64) into %ir.arrayidx17.prol.1, !tbaa !6)
    %239:gpr32 = COPY %4.sub_32
    %240:gpr32 = COPY %50.sub_32
    %241:gpr32 = ADDWrr killed %240, killed %239
    %242:gpr32common = ADDWrr killed %241, %6
    %243:gpr32sp = ADDWri killed %242, 3, 0
    %8:gpr32all = COPY %243
    %244:gpr64sp = nuw nsw ADDXri %5, 2048, 0
    %9:gpr64all = COPY %244
    %245:gpr64common = nsw ADDXri %4, 1, 0
    %10:gpr64 = COPY %245
    %248:gpr64 = SUBSXri %7, 1, 0, implicit-def $nzcv
    %12:gpr64all = COPY %248
    Bcc 1, %bb.4, implicit $nzcv
    B %bb.5
  
  bb.5.for.body13.prol.loopexit.1:
    successors: %bb.8(0x40000000), %bb.6(0x40000000)
  
    %249:gpr64common = nsw SUBXri %50, 248, 0
    dead $xzr = SUBSXri killed %249, 7, 0, implicit-def $nzcv
    Bcc 3, %bb.8, implicit $nzcv
    B %bb.6
  
  bb.6.for.body13.1.preheader:
    successors: %bb.7(0x80000000)
  
    %246:gpr64common = ADDXrr %50, %245
    %247:gpr64common = ADDXri %246, 2, 0
    %253:gpr64 = nuw nsw ADDXrs %252, %245, 11
    %13:gpr64all = COPY %253
    %255:gpr64 = ADDXrr %91, %45
    %256:gpr64common = nsw SUBXri %247, 256, 0
    %22:gpr64all = COPY %256
    %257:gpr64 = ADDXrs %44, %247, 11
    %23:gpr64all = COPY %257
    %24:gpr64all = COPY %51
  
  bb.7.for.body13.1:
    successors: %bb.7(0x7c000000), %bb.8(0x04000000)
  
    %25:gpr64common = PHI %23, %bb.6, %33, %bb.7
    %26:gpr64sp = PHI %22, %bb.6, %32, %bb.7
    %27:gpr64common = PHI %13, %bb.6, %31, %bb.7
    %28:gpr32 = PHI %8, %bb.6, %30, %bb.7
    %29:gpr64sp = PHI %24, %bb.6, %34, %bb.7
    %258:gpr64common = ADDXrr %255, %27
    %267:gpr64common = ADDXrr %91, %25
    PRFMui 0, %258, 0
    %268:fpr64 = LDRDui %267, 1 :: (load (s64) from %ir.uglygep395, !tbaa !6)
    %269:gpr32 = ORRWrs $wzr, %28, 0
    %270:gpr64 = SUBREG_TO_REG 0, killed %269, %subreg.sub_32
    %271:gpr64 = UBFMXri %270, 61, 60
    %273:fpr64 = LDRDroX %236, %271, 0, 0 :: (load (s64) from %ir.arrayidx17.157, !tbaa !6)
    %274:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %273, killed %268
    STRDroX killed %274, %236, %271, 0, 0 :: (store (s64) into %ir.arrayidx17.157, !tbaa !6)
    %275:gpr32common = COPY %26.sub_32
    %276:gpr32 = ADDWrr %275, %28
    %277:gpr64sp = ADDXri %26, 258, 0
    %278:gpr32 = COPY %277.sub_32
    %279:gpr32 = ADDWrr killed %276, %278
    PRFMui 0, %258, 256
    %280:fpr64 = LDRDui %267, 257 :: (load (s64) from %ir.uglygep409, !tbaa !6)
    %281:gpr32common = ADDWri %275, 256, 0
    %283:gpr64 = SUBREG_TO_REG 0, %281, %subreg.sub_32
    %284:gpr64common = ADDXrr %270, killed %283
    %285:gpr64common = ADDXrs %236, %284, 3
    %286:fpr64 = LDRDui %285, 1 :: (load (s64) from %ir.uglygep119, !tbaa !6)
    %287:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %286, killed %280
    STRDui killed %287, %285, 1 :: (store (s64) into %ir.uglygep119, !tbaa !6)
    %288:gpr64sp = ADDXri %26, 259, 0
    %289:gpr32 = COPY %288.sub_32
    %290:gpr32 = ADDWrr killed %279, %289
    PRFMui 0, %258, 512
    %291:fpr64 = LDRDui %267, 513 :: (load (s64) from %ir.uglygep407, !tbaa !6)
    %292:gpr64common = ADDXrx %284, %278, 16
    %293:gpr64common = ADDXrs %236, %292, 3
    %294:fpr64 = LDRDui %293, 1 :: (load (s64) from %ir.uglygep129, !tbaa !6)
    %295:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %294, killed %291
    STRDui killed %295, %293, 1 :: (store (s64) into %ir.uglygep129, !tbaa !6)
    %296:gpr64sp = ADDXri %26, 260, 0
    %297:gpr32 = COPY %296.sub_32
    %298:gpr32 = ADDWrr killed %290, %297
    PRFMui 0, %258, 768
    %299:fpr64 = LDRDui %267, 769 :: (load (s64) from %ir.uglygep405, !tbaa !6)
    %300:gpr64common = ADDXrx %292, %289, 16
    %301:gpr64common = ADDXrs %236, %300, 3
    %302:fpr64 = LDRDui %301, 1 :: (load (s64) from %ir.uglygep140, !tbaa !6)
    %303:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %302, killed %299
    STRDui killed %303, %301, 1 :: (store (s64) into %ir.uglygep140, !tbaa !6)
    %304:gpr64sp = ADDXri %26, 261, 0
    %305:gpr32 = COPY %304.sub_32
    %306:gpr32 = ADDWrr killed %298, %305
    PRFMui 0, %258, 1024
    %307:fpr64 = LDRDui %267, 1025 :: (load (s64) from %ir.uglygep397, !tbaa !6)
    %308:gpr64common = ADDXrx %300, %297, 16
    %309:gpr64common = ADDXrs %236, %308, 3
    %310:fpr64 = LDRDui %309, 1 :: (load (s64) from %ir.uglygep152, !tbaa !6)
    %311:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %310, killed %307
    STRDui killed %311, %309, 1 :: (store (s64) into %ir.uglygep152, !tbaa !6)
    %312:gpr64sp = ADDXri %26, 262, 0
    %313:gpr32 = COPY %312.sub_32
    %314:gpr32 = ADDWrr killed %306, %313
    PRFMui 0, %258, 1280
    %315:fpr64 = LDRDui %267, 1281 :: (load (s64) from %ir.uglygep403, !tbaa !6)
    %316:gpr64common = ADDXrx %308, %305, 16
    %317:gpr64common = ADDXrs %236, %316, 3
    %318:fpr64 = LDRDui %317, 1 :: (load (s64) from %ir.uglygep165, !tbaa !6)
    %319:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %318, killed %315
    STRDui killed %319, %317, 1 :: (store (s64) into %ir.uglygep165, !tbaa !6)
    %320:gpr64sp = ADDXri %26, 263, 0
    %321:gpr32 = COPY %320.sub_32
    %322:gpr32 = ADDWrr killed %314, %321
    PRFMui 0, %258, 1536
    %323:fpr64 = LDRDui %267, 1537 :: (load (s64) from %ir.uglygep401, !tbaa !6)
    %324:gpr64common = ADDXrx %316, %313, 16
    %325:gpr64common = ADDXrs %236, %324, 3
    %326:fpr64 = LDRDui %325, 1 :: (load (s64) from %ir.uglygep179, !tbaa !6)
    %327:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %326, killed %323
    STRDui killed %327, %325, 1 :: (store (s64) into %ir.uglygep179, !tbaa !6)
    %328:gpr32common = ADDWrr killed %322, %275
    PRFMui 0, %258, 1792
    %329:fpr64 = LDRDui %267, 1793 :: (load (s64) from %ir.uglygep399, !tbaa !6)
    %330:gpr64common = ADDXrx %324, %321, 16
    %331:gpr64common = ADDXrs %236, killed %330, 3
    %332:fpr64 = LDRDui %331, 1 :: (load (s64) from %ir.uglygep194, !tbaa !6)
    %333:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %332, killed %329
    STRDui killed %333, %331, 1 :: (store (s64) into %ir.uglygep194, !tbaa !6)
    %334:gpr32sp = ADDWri killed %328, 521, 0
    %30:gpr32all = COPY %334
    %335:gpr64sp = ADDXri %27, 4, 12
    %31:gpr64all = COPY %335
    %336:gpr64sp = nsw ADDXri %26, 8, 0
    %32:gpr64all = COPY %336
    %337:gpr64sp = ADDXri %25, 4, 12
    %33:gpr64all = COPY %337
    %338:gpr64 = SUBSXri %29, 1, 0, implicit-def $nzcv
    %34:gpr64all = COPY %338
    Bcc 1, %bb.7, implicit $nzcv
    B %bb.8
  
  bb.8.for.cond2.loopexit.1:
    successors: %bb.9(0x04000000), %bb.10(0x7c000000)
  
    %339:gpr32sp = COPY %54.sub_32
    %342:gpr64 = ADDXrr %49, %341
    %35:gpr64all = COPY %342
    %343:gpr64common = nsw SUBXri %48, 2, 0
    %36:gpr64all = COPY %343
    %344:gpr64sp = ADDXri %47, 16, 0
    %37:gpr64all = COPY %344
    %345:gpr32sp = ADDWri killed %339, 6, 0
    %38:gpr32all = COPY %345
    %346:gpr64 = nuw nsw ADDXrr %45, %341
    %39:gpr64all = COPY %346
    %347:gpr64sp = nuw nsw ADDXri %44, 16, 0
    %40:gpr64all = COPY %347
    %348:gpr64sp = ADDXri %43, 1, 0
    %41:gpr64all = COPY %348
    dead $xzr = SUBSXri %225, 256, 0, implicit-def $nzcv
    Bcc 1, %bb.10, implicit $nzcv
    B %bb.9
  
  bb.9.for.cond.cleanup4:
    successors: %bb.2(0x04000000), %bb.1(0x7c000000)
  
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    $x0 = COPY %350
    $x1 = COPY %351
    $x2 = COPY %352
    $x3 = COPY %353
    $x4 = COPY %354
    $x5 = COPY %355
    $x6 = COPY %91
    $x7 = COPY %357
    $d0 = COPY %358
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $d0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %360:gpr32common = nuw nsw ADDWri %0, 1, 0
    %42:gpr32all = COPY %360
    dead $wzr = SUBSWrr %360, %361, implicit-def $nzcv
    Bcc 0, %bb.2, implicit $nzcv
    B %bb.1
  
  bb.10.for.body13.lr.ph:
    successors: %bb.13(0x30000000), %bb.11(0x50000000)
  
    %43:gpr64common = PHI %87, %bb.1, %41, %bb.8
    %44:gpr64common = PHI %87, %bb.1, %40, %bb.8
    %45:gpr64 = PHI %87, %bb.1, %39, %bb.8
    %46:gpr32all = PHI %88, %bb.1, %38, %bb.8
    %47:gpr64sp = PHI %89, %bb.1, %37, %bb.8
    %48:gpr64sp = PHI %87, %bb.1, %36, %bb.8
    %49:gpr64common = PHI %90, %bb.1, %35, %bb.8
    %50:gpr64common = PHI %87, %bb.1, %1, %bb.8
    %95:gpr64 = COPY $xzr
    %96:gpr64 = SUBXrs %95, %43, 1
    %107:gpr32 = COPY %50.sub_32
    %108:gpr32 = COPY $wzr
    %109:gpr32 = SUBWrr %108, %107
    %110:gpr64 = INSERT_SUBREG %111, killed %109, %subreg.sub_32
    %112:gpr64sp = ORRXri %50, 4096
    %113:gpr32 = COPY %112.sub_32
    %114:gpr32 = MADDWrrr killed %113, %107, $wzr
    %115:gpr32 = ADDWrs %107, killed %114, 65
    %56:gpr32all = COPY %115
    $xzr = ANDSXri killed %110, 8129, implicit-def $nzcv
    Bcc 0, %bb.13, implicit $nzcv
    B %bb.11
  
  bb.11.for.body13.prol.preheader:
    successors: %bb.12(0x80000000)
  
    %105:gpr64 = UBFMXri %96, 1, 2
    %106:gpr64 = nuw nsw UBFMXri %105, 63, 62
    %53:gpr64all = COPY %106
    %118:gpr64all = COPY $xzr
    %117:gpr64all = COPY %118
    %57:gpr64all = COPY %53
  
  bb.12.for.body13.prol:
    successors: %bb.12(0x7c000000), %bb.16(0x04000000)
  
    %58:gpr64sp = PHI %49, %bb.11, %64, %bb.12
    %59:gpr32 = PHI %56, %bb.11, %62, %bb.12
    %60:gpr64sp = PHI %117, %bb.11, %63, %bb.12
    %61:gpr64sp = PHI %57, %bb.11, %66, %bb.12
    %119:fpr64 = LDRDui %58, 0 :: (load (s64) from %ir.lsr.iv288, align 16, !tbaa !6)
    %120:gpr32 = ORRWrs $wzr, %59, 0
    %121:gpr64 = SUBREG_TO_REG 0, killed %120, %subreg.sub_32
    %122:gpr64 = UBFMXri killed %121, 61, 60
    %124:fpr64 = LDRDroX %236, %122, 0, 0 :: (load (s64) from %ir.arrayidx17.prol, !tbaa !6)
    %125:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %124, killed %119
    STRDroX killed %125, %236, %122, 0, 0 :: (store (s64) into %ir.arrayidx17.prol, !tbaa !6)
    %126:gpr32 = COPY %60.sub_32
    %127:gpr32 = COPY %50.sub_32
    %128:gpr32 = ADDWrr killed %127, killed %126
    %129:gpr32common = ADDWrr killed %128, %59
    %130:gpr32sp = ADDWri killed %129, 1, 0
    %62:gpr32all = COPY %130
    %131:gpr64common = ADDXri %60, 1, 0
    %63:gpr64all = COPY %131
    %132:gpr64sp = ADDXri %58, 2048, 0
    %64:gpr64all = COPY %132
    %134:gpr64 = SUBSXri %61, 1, 0, implicit-def $nzcv
    %66:gpr64all = COPY %134
    Bcc 1, %bb.12, implicit $nzcv
  
  bb.16:
    successors: %bb.13(0x80000000)
  
    %133:gpr64 = ADDXrr %50, %131
    %65:gpr64all = COPY %133
  
  bb.13.for.body13.prol.loopexit:
    successors: %bb.3(0x40000000), %bb.14(0x40000000)
  
    %67:gpr64common = PHI %50, %bb.10, %65, %bb.16
    %68:gpr32all = PHI %56, %bb.10, %62, %bb.16
    %97:gpr64 = INSERT_SUBREG %98, %46, %subreg.sub_32
    %99:gpr64common = ANDXri %97, 4098
    %100:gpr64common = SUBXrr %96, %99
    %135:gpr64common = nsw SUBXri %50, 249, 0
    dead $xzr = SUBSXri killed %135, 7, 0, implicit-def $nzcv
    Bcc 3, %bb.3, implicit $nzcv
    B %bb.14
  
  bb.14.for.body13.preheader:
    successors: %bb.15(0x80000000)
  
    %137:gpr64 = UBFMXri %67, 53, 52
    %138:gpr64common = nsw SUBXri %67, 256, 0
    %70:gpr64all = COPY %138
    %141:gpr64 = SUBXrr %140, %67
    %142:gpr64common = UBFMXri killed %141, 3, 63
    %143:gpr64sp = nuw nsw ADDXri killed %142, 1, 0
    %71:gpr64all = COPY %143
  
  bb.15.for.body13:
    successors: %bb.15(0x7c000000), %bb.3(0x04000000)
  
    %72:gpr64sp = PHI %70, %bb.14, %78, %bb.15
    %73:gpr64common = PHI %47, %bb.14, %77, %bb.15
    %74:gpr32 = PHI %68, %bb.14, %76, %bb.15
    %75:gpr64sp = PHI %71, %bb.14, %79, %bb.15
    %144:gpr64common = ADDXrr %73, %137
    PRFMui 0, %144, 0
    %146:fpr64 = LDRDroX %144, %145, 0, 0 :: (load (s64) from %ir.uglygep308, align 16, !tbaa !6)
    %147:gpr32 = ORRWrs $wzr, %74, 0
    %148:gpr64 = SUBREG_TO_REG 0, killed %147, %subreg.sub_32
    %149:gpr64 = UBFMXri %148, 61, 60
    %151:fpr64 = LDRDroX %236, %149, 0, 0 :: (load (s64) from %ir.arrayidx17, !tbaa !6)
    %152:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %151, killed %146
    STRDroX killed %152, %236, %149, 0, 0 :: (store (s64) into %ir.arrayidx17, !tbaa !6)
    %153:gpr32common = COPY %72.sub_32
    %154:gpr32 = ADDWrr %153, %74
    %155:gpr64sp = ADDXri %72, 258, 0
    %156:gpr32 = COPY %155.sub_32
    %157:gpr32 = ADDWrr killed %154, %156
    PRFMui 0, %144, 256
    %159:fpr64 = LDRDroX %144, %158, 0, 0 :: (load (s64) from %ir.uglygep322, align 16, !tbaa !6)
    %160:gpr32common = ADDWri %153, 256, 0
    %162:gpr64 = SUBREG_TO_REG 0, %160, %subreg.sub_32
    %163:gpr64common = ADDXrr %148, killed %162
    %164:gpr64common = ADDXrs %236, %163, 3
    %165:fpr64 = LDRDui %164, 1 :: (load (s64) from %ir.uglygep217, !tbaa !6)
    %166:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %165, killed %159
    STRDui killed %166, %164, 1 :: (store (s64) into %ir.uglygep217, !tbaa !6)
    %167:gpr64sp = ADDXri %72, 259, 0
    %168:gpr32 = COPY %167.sub_32
    %169:gpr32 = ADDWrr killed %157, %168
    PRFMui 0, %144, 512
    %171:fpr64 = LDRDroX %144, %170, 0, 0 :: (load (s64) from %ir.uglygep320, align 16, !tbaa !6)
    %172:gpr64common = ADDXrx %163, %156, 16
    %173:gpr64common = ADDXrs %236, %172, 3
    %174:fpr64 = LDRDui %173, 1 :: (load (s64) from %ir.uglygep226, !tbaa !6)
    %175:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %174, killed %171
    STRDui killed %175, %173, 1 :: (store (s64) into %ir.uglygep226, !tbaa !6)
    %176:gpr64sp = ADDXri %72, 260, 0
    %177:gpr32 = COPY %176.sub_32
    %178:gpr32 = ADDWrr killed %169, %177
    PRFMui 0, %144, 768
    %180:fpr64 = LDRDroX %144, %179, 0, 0 :: (load (s64) from %ir.uglygep318, align 16, !tbaa !6)
    %181:gpr64common = ADDXrx %172, %168, 16
    %182:gpr64common = ADDXrs %236, %181, 3
    %183:fpr64 = LDRDui %182, 1 :: (load (s64) from %ir.uglygep236, !tbaa !6)
    %184:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %183, killed %180
    STRDui killed %184, %182, 1 :: (store (s64) into %ir.uglygep236, !tbaa !6)
    %185:gpr64sp = ADDXri %72, 261, 0
    %186:gpr32 = COPY %185.sub_32
    %187:gpr32 = ADDWrr killed %178, %186
    PRFMui 0, %144, 1024
    %189:fpr64 = LDRDroX %144, %188, 0, 0 :: (load (s64) from %ir.uglygep316, align 16, !tbaa !6)
    %190:gpr64common = ADDXrx %181, %177, 16
    %191:gpr64common = ADDXrs %236, %190, 3
    %192:fpr64 = LDRDui %191, 1 :: (load (s64) from %ir.uglygep247, !tbaa !6)
    %193:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %192, killed %189
    STRDui killed %193, %191, 1 :: (store (s64) into %ir.uglygep247, !tbaa !6)
    %194:gpr64sp = ADDXri %72, 262, 0
    %195:gpr32 = COPY %194.sub_32
    %196:gpr32 = ADDWrr killed %187, %195
    PRFMui 0, %144, 1280
    %198:fpr64 = LDRDroX %144, %197, 0, 0 :: (load (s64) from %ir.uglygep314, align 16, !tbaa !6)
    %199:gpr64common = ADDXrx %190, %186, 16
    %200:gpr64common = ADDXrs %236, %199, 3
    %201:fpr64 = LDRDui %200, 1 :: (load (s64) from %ir.uglygep259, !tbaa !6)
    %202:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %201, killed %198
    STRDui killed %202, %200, 1 :: (store (s64) into %ir.uglygep259, !tbaa !6)
    %203:gpr64sp = ADDXri %72, 263, 0
    %204:gpr32 = COPY %203.sub_32
    %205:gpr32 = ADDWrr killed %196, %204
    PRFMui 0, %144, 1536
    %207:fpr64 = LDRDroX %144, %206, 0, 0 :: (load (s64) from %ir.uglygep312, align 16, !tbaa !6)
    %208:gpr64common = ADDXrx %199, %195, 16
    %209:gpr64common = ADDXrs %236, %208, 3
    %210:fpr64 = LDRDui %209, 1 :: (load (s64) from %ir.uglygep272, !tbaa !6)
    %211:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %210, killed %207
    STRDui killed %211, %209, 1 :: (store (s64) into %ir.uglygep272, !tbaa !6)
    %212:gpr32common = ADDWrr killed %205, %153
    %213:gpr64common = SUBXri %144, 2048, 0
    PRFMui 0, %144, 1792
    %214:fpr64 = LDRDui killed %213, 0 :: (load (s64) from %ir.uglygep310, align 16, !tbaa !6)
    %215:gpr64common = ADDXrx %208, %204, 16
    %216:gpr64common = ADDXrs %236, killed %215, 3
    %217:fpr64 = LDRDui %216, 1 :: (load (s64) from %ir.uglygep286, !tbaa !6)
    %218:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %217, killed %214
    STRDui killed %218, %216, 1 :: (store (s64) into %ir.uglygep286, !tbaa !6)
    %219:gpr32sp = ADDWri killed %212, 521, 0
    %76:gpr32all = COPY %219
    %220:gpr64sp = ADDXri %73, 4, 12
    %77:gpr64all = COPY %220
    %221:gpr64sp = nsw ADDXri %72, 8, 0
    %78:gpr64all = COPY %221
    %222:gpr64 = SUBSXri %75, 1, 0, implicit-def $nzcv
    %79:gpr64all = COPY %222
    Bcc 1, %bb.15, implicit $nzcv
    B %bb.3

...
