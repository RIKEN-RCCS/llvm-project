# RUN: llc -mcpu=a64fx -O1 -ffj-swp -start-before=aarch64-swpipeliner -o /dev/null  -swpl-debug %s 2>&1 | FileCheck %s
# CHECK: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %101:gpr64all = COPY %100:gpr64sp
# CHECK-NEXT:  before: %95:gpr64sp = PHI %9:gpr64all, %bb.4, %101:gpr64all, %bb.7
# CHECK-NEXT:  after: %95:gpr64sp = PHI %9:gpr64all, %bb.4, %100:gpr64sp, %bb.7
# CHECK-NEXT:  removed!
# CHECK-NEXT: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %102:gpr64all = COPY %97:gpr64sp
# CHECK-NEXT:  before: %94:gpr64sp = PHI %10:gpr64all, %bb.4, %102:gpr64all, %bb.7
# CHECK-NEXT:  after: %94:gpr64sp = PHI %10:gpr64all, %bb.4, %97:gpr64sp, %bb.7
# CHECK-NEXT:  removed!
# CHECK-NEXT: DBG(SwplLoop::removeCopy)
# CHECK-NEXT:  target mi: %104:gpr64all = COPY %103:gpr64
# CHECK-NEXT:  before: %96:gpr64sp = PHI %14:gpr64all, %bb.4, %104:gpr64all, %bb.7
# CHECK-NEXT:  after: %96:gpr64sp = PHI %14:gpr64all, %bb.4, %103:gpr64, %bb.7
# CHECK-NEXT:  removed!

--- |
  ; ModuleID = 's000.c'
  source_filename = "s000.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  %struct.args_t = type { %struct.timeval, %struct.timeval, ptr }
  %struct.timeval = type { i64, i64 }
  
  @__func__.s000 = private unnamed_addr constant [5 x i8] c"s000\00", align 1
  @b = external global [32000 x double], align 64
  @a = external global [32000 x double], align 64
  @c = external global [32000 x double], align 64
  @d = external global [32000 x double], align 64
  @e = external global [32000 x double], align 64
  @aa = external global [256 x [256 x double]], align 64
  @bb = external global [256 x [256 x double]], align 64
  @cc = external global [256 x [256 x double]], align 64
  
  ; Function Attrs: nounwind uwtable vscale_range(1,16)
  define dso_local double @s000(ptr nocapture noundef %func_args) local_unnamed_addr #0 {
  entry:
    %call = tail call i32 @initialise_arrays(ptr noundef nonnull @__func__.s000) #5
    %call1 = tail call i32 @gettimeofday(ptr noundef %func_args, ptr noundef null) #5
    %0 = tail call i64 @llvm.vscale.i64()
    %1 = shl nuw nsw i64 %0, 3
    %n.mod.vf = urem i64 32000, %1
    %n.vec = sub i64 32000, %n.mod.vf
    %2 = tail call i32 @llvm.vscale.i32()
    %3 = zext i32 %2 to i64
    %4 = mul nuw nsw i64 %3, 48
    %uglygep26 = getelementptr i8, ptr @b, i64 %4
    %5 = shl nuw nsw i64 %3, 5
    %uglygep28 = getelementptr i8, ptr @b, i64 %5
    %6 = shl nuw nsw i64 %3, 4
    %uglygep30 = getelementptr i8, ptr @b, i64 %6
    %uglygep33 = getelementptr i8, ptr @a, i64 %4
    %uglygep35 = getelementptr i8, ptr @a, i64 %5
    %uglygep37 = getelementptr i8, ptr @a, i64 %6
    %7 = udiv i64 32000, %1
    %8 = mul i64 %0, %7
    %9 = shl i64 %8, 6
    %uglygep39 = getelementptr i8, ptr @a, i64 %9
    %uglygep41 = getelementptr i8, ptr @b, i64 %9
    br label %vector.ph
  
  vector.ph:                                        ; preds = %for.cond.cleanup4, %entry
    %nl.020 = phi i32 [ 0, %entry ], [ %inc10, %for.cond.cleanup4 ]
    br label %vector.body
  
  vector.body:                                      ; preds = %vector.body, %vector.ph
    %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
    %10 = shl i64 %index, 3
    %uglygep = getelementptr i8, ptr @b, i64 %10
    %wide.load = load <vscale x 2 x double>, ptr %uglygep, align 64, !tbaa !6
    %uglygep31 = getelementptr i8, ptr %uglygep30, i64 %10
    %wide.load23 = load <vscale x 2 x double>, ptr %uglygep31, align 16, !tbaa !6
    %uglygep29 = getelementptr i8, ptr %uglygep28, i64 %10
    %wide.load24 = load <vscale x 2 x double>, ptr %uglygep29, align 32, !tbaa !6
    %11 = shl i64 %index, 3
    %uglygep27 = getelementptr i8, ptr %uglygep26, i64 %11
    %wide.load25 = load <vscale x 2 x double>, ptr %uglygep27, align 16, !tbaa !6
    %12 = fadd fast <vscale x 2 x double> %wide.load, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer)
    %13 = fadd fast <vscale x 2 x double> %wide.load23, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer)
    %14 = fadd fast <vscale x 2 x double> %wide.load24, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer)
    %15 = fadd fast <vscale x 2 x double> %wide.load25, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i32 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer)
    %16 = shl i64 %index, 3
    %uglygep32 = getelementptr i8, ptr @a, i64 %16
    store <vscale x 2 x double> %12, ptr %uglygep32, align 64, !tbaa !6
    %uglygep38 = getelementptr i8, ptr %uglygep37, i64 %16
    store <vscale x 2 x double> %13, ptr %uglygep38, align 16, !tbaa !6
    %uglygep36 = getelementptr i8, ptr %uglygep35, i64 %16
    store <vscale x 2 x double> %14, ptr %uglygep36, align 32, !tbaa !6
    %17 = shl i64 %index, 3
    %uglygep34 = getelementptr i8, ptr %uglygep33, i64 %17
    store <vscale x 2 x double> %15, ptr %uglygep34, align 16, !tbaa !6
    %index.next = add nuw i64 %index, %1
    %18 = icmp eq i64 %n.vec, %index.next
    br i1 %18, label %middle.block, label %vector.body, !llvm.loop !10
  
  middle.block:                                     ; preds = %vector.body
    %19 = icmp eq i64 %n.mod.vf, 0
    br i1 %19, label %for.cond.cleanup4, label %for.body5.preheader
  
  for.body5.preheader:                              ; preds = %middle.block
    %20 = call i64 @llvm.start.loop.iterations.i64(i64 %n.mod.vf)
    br label %for.body5
  
  for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
    %t2 = getelementptr inbounds %struct.args_t, ptr %func_args, i64 0, i32 1
    %call12 = tail call i32 @gettimeofday(ptr noundef nonnull %t2, ptr noundef null) #5
    %call13 = tail call fast double @calc_checksum(ptr noundef nonnull @__func__.s000) #5
    ret double %call13
  
  for.cond.cleanup4:                                ; preds = %for.body5, %middle.block
    %call8 = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, double noundef 0.000000e+00) #5
    %inc10 = add nuw nsw i32 %nl.020, 1
    %exitcond22.not = icmp eq i32 %inc10, 200000
    br i1 %exitcond22.not, label %for.cond.cleanup, label %vector.ph, !llvm.loop !13
  
  for.body5:                                        ; preds = %for.body5.preheader, %for.body5
    %lsr.iv42 = phi ptr [ %uglygep41, %for.body5.preheader ], [ %uglygep43, %for.body5 ]
    %lsr.iv = phi ptr [ %uglygep39, %for.body5.preheader ], [ %uglygep40, %for.body5 ]
    %21 = phi i64 [ %20, %for.body5.preheader ], [ %23, %for.body5 ]
    %22 = load double, ptr %lsr.iv42, align 8, !tbaa !6
    %add = fadd fast double %22, 1.000000e+00
    store double %add, ptr %lsr.iv, align 8, !tbaa !6
    %uglygep40 = getelementptr i8, ptr %lsr.iv, i64 8
    %uglygep43 = getelementptr i8, ptr %lsr.iv42, i64 8
    %23 = call i64 @llvm.loop.decrement.reg.i64(i64 %21, i64 1)
    %24 = icmp ne i64 %23, 0
    br i1 %24, label %for.body5, label %for.cond.cleanup4, !llvm.loop !14
  }
  
  declare i32 @initialise_arrays(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nofree nounwind
  declare noundef i32 @gettimeofday(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #2
  
  declare i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, double noundef) local_unnamed_addr #1
  
  declare double @calc_checksum(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
  declare i64 @llvm.vscale.i64() #3
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
  declare i32 @llvm.vscale.i32() #3
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #4
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #4
  
  attributes #0 = { nounwind uwtable vscale_range(1,16) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #1 = { "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #2 = { nofree nounwind "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #3 = { nocallback nofree nosync nounwind readnone willreturn }
  attributes #4 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #5 = { nounwind }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 7, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !5 = !{!"clang version 15.0.4 ()"}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"double", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C/C++ TBAA"}
  !10 = distinct !{!10, !11, !12}
  !11 = !{!"llvm.loop.mustprogress"}
  !12 = !{!"llvm.loop.isvectorized", i32 1}
  !13 = distinct !{!13, !11}
  !14 = distinct !{!14, !11, !15, !12}
  !15 = !{!"llvm.loop.unroll.runtime.disable"}

...
---
name:            s000
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr64, preferred-register: '' }
  - { id: 1, class: gpr64, preferred-register: '' }
  - { id: 2, class: gpr64, preferred-register: '' }
  - { id: 3, class: gpr64sp, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: gpr64sp, preferred-register: '' }
  - { id: 6, class: gpr64sp, preferred-register: '' }
  - { id: 7, class: gpr64sp, preferred-register: '' }
  - { id: 8, class: gpr64sp, preferred-register: '' }
  - { id: 9, class: gpr64all, preferred-register: '' }
  - { id: 10, class: gpr64all, preferred-register: '' }
  - { id: 11, class: gpr32sp, preferred-register: '' }
  - { id: 12, class: gpr64common, preferred-register: '' }
  - { id: 13, class: gpr64all, preferred-register: '' }
  - { id: 14, class: gpr64all, preferred-register: '' }
  - { id: 15, class: gpr32all, preferred-register: '' }
  - { id: 16, class: gpr64sp, preferred-register: '' }
  - { id: 17, class: gpr64sp, preferred-register: '' }
  - { id: 18, class: gpr64sp, preferred-register: '' }
  - { id: 19, class: gpr64all, preferred-register: '' }
  - { id: 20, class: gpr64all, preferred-register: '' }
  - { id: 21, class: gpr64all, preferred-register: '' }
  - { id: 22, class: gpr64common, preferred-register: '' }
  - { id: 23, class: gpr32all, preferred-register: '' }
  - { id: 24, class: gpr64common, preferred-register: '' }
  - { id: 25, class: gpr32all, preferred-register: '' }
  - { id: 26, class: gpr64all, preferred-register: '' }
  - { id: 27, class: gpr32all, preferred-register: '' }
  - { id: 28, class: gpr64, preferred-register: '' }
  - { id: 29, class: gpr64, preferred-register: '' }
  - { id: 30, class: gpr32, preferred-register: '' }
  - { id: 31, class: gpr64, preferred-register: '' }
  - { id: 32, class: gpr32, preferred-register: '' }
  - { id: 33, class: gpr64, preferred-register: '' }
  - { id: 34, class: gpr64, preferred-register: '' }
  - { id: 35, class: gpr64, preferred-register: '' }
  - { id: 36, class: gpr64, preferred-register: '' }
  - { id: 37, class: gpr64common, preferred-register: '' }
  - { id: 38, class: gpr64common, preferred-register: '' }
  - { id: 39, class: gpr64, preferred-register: '' }
  - { id: 40, class: gpr64common, preferred-register: '' }
  - { id: 41, class: gpr64, preferred-register: '' }
  - { id: 42, class: gpr64, preferred-register: '' }
  - { id: 43, class: gpr64, preferred-register: '' }
  - { id: 44, class: gpr64, preferred-register: '' }
  - { id: 45, class: gpr64, preferred-register: '' }
  - { id: 46, class: gpr64common, preferred-register: '' }
  - { id: 47, class: gpr64, preferred-register: '' }
  - { id: 48, class: gpr64, preferred-register: '' }
  - { id: 49, class: gpr64, preferred-register: '' }
  - { id: 50, class: gpr64, preferred-register: '' }
  - { id: 51, class: gpr64, preferred-register: '' }
  - { id: 52, class: gpr64, preferred-register: '' }
  - { id: 53, class: gpr64, preferred-register: '' }
  - { id: 54, class: gpr32all, preferred-register: '' }
  - { id: 55, class: gpr64all, preferred-register: '' }
  - { id: 56, class: gpr64all, preferred-register: '' }
  - { id: 57, class: gpr64common, preferred-register: '' }
  - { id: 58, class: ppr_3b, preferred-register: '' }
  - { id: 59, class: zpr, preferred-register: '' }
  - { id: 60, class: zpr, preferred-register: '' }
  - { id: 61, class: zpr, preferred-register: '' }
  - { id: 62, class: zpr, preferred-register: '' }
  - { id: 63, class: ppr_3b, preferred-register: '' }
  - { id: 64, class: zpr, preferred-register: '' }
  - { id: 65, class: zpr, preferred-register: '' }
  - { id: 66, class: zpr, preferred-register: '' }
  - { id: 67, class: zpr, preferred-register: '' }
  - { id: 68, class: gpr64common, preferred-register: '' }
  - { id: 69, class: gpr64, preferred-register: '' }
  - { id: 70, class: gpr64, preferred-register: '' }
  - { id: 71, class: gpr64sp, preferred-register: '' }
  - { id: 72, class: fpr64, preferred-register: '' }
  - { id: 73, class: fpr64, preferred-register: '' }
  - { id: 74, class: fpr64, preferred-register: '' }
  - { id: 75, class: gpr64sp, preferred-register: '' }
  - { id: 76, class: gpr64, preferred-register: '' }
  - { id: 77, class: gpr64common, preferred-register: '' }
  - { id: 78, class: gpr64common, preferred-register: '' }
  - { id: 79, class: gpr64common, preferred-register: '' }
  - { id: 80, class: gpr64common, preferred-register: '' }
  - { id: 81, class: gpr64common, preferred-register: '' }
  - { id: 82, class: gpr64common, preferred-register: '' }
  - { id: 83, class: gpr64common, preferred-register: '' }
  - { id: 84, class: gpr64common, preferred-register: '' }
  - { id: 85, class: fpr64, preferred-register: '' }
  - { id: 86, class: gpr32all, preferred-register: '' }
  - { id: 87, class: gpr32common, preferred-register: '' }
  - { id: 88, class: gpr32, preferred-register: '' }
  - { id: 89, class: gpr32, preferred-register: '' }
  - { id: 90, class: gpr64sp, preferred-register: '' }
  - { id: 91, class: gpr64all, preferred-register: '' }
  - { id: 92, class: gpr32all, preferred-register: '' }
  - { id: 93, class: gpr64common, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%22' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     true
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $x0
  
    %22:gpr64common = COPY $x0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %24:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s000, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s000
    $x0 = COPY %24
    BL @initialise_arrays, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %26:gpr64all = COPY $xzr
    $x0 = COPY %22
    $x1 = COPY %26
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %28:gpr64 = RDVLI_XI 1
    %29:gpr64 = UBFMXri killed %28, 4, 63
    %30:gpr32 = COPY %29.sub_32
    %31:gpr64 = CNTH_XPiI 31, 1
    %32:gpr32 = MOVi32imm 32000
    %33:gpr64 = SUBREG_TO_REG 0, killed %32, %subreg.sub_32
    %34:gpr64 = UDIVXr %33, %31
    %35:gpr64 = MADDXrrr %34, %31, $xzr
    %36:gpr64 = SUBXrr %33, %35
    %1:gpr64 = COPY %36
    %37:gpr64common = ANDXri %29, 4127
    %38:gpr64common = ADDXrx %37, killed %30, 17
    %39:gpr64 = UBFMXri killed %38, 60, 59
    %40:gpr64common = LOADgot target-flags(aarch64-got) @b
    %41:gpr64 = ADDXrr %40, %39
    %3:gpr64sp = COPY %41
    %42:gpr64 = nuw nsw UBFMXri %37, 59, 58
    %43:gpr64 = ADDXrr %40, %42
    %4:gpr64sp = COPY %43
    %44:gpr64 = nuw nsw UBFMXri %37, 60, 59
    %45:gpr64 = ADDXrr %40, %44
    %5:gpr64sp = COPY %45
    %46:gpr64common = LOADgot target-flags(aarch64-got) @a
    %47:gpr64 = ADDXrr %46, %39
    %6:gpr64sp = COPY %47
    %48:gpr64 = ADDXrr %46, %42
    %7:gpr64sp = COPY %48
    %49:gpr64 = ADDXrr %46, %44
    %8:gpr64sp = COPY %49
    %50:gpr64 = MADDXrrr %29, %34, $xzr
    %51:gpr64 = UBFMXri killed %50, 58, 57
    %52:gpr64 = ADDXrr %46, %51
    %9:gpr64all = COPY %52
    %53:gpr64 = ADDXrr %40, %51
    %54:gpr32all = COPY $wzr
    %23:gpr32all = COPY %54
    %10:gpr64all = COPY %53
    %58:ppr_3b = PTRUE_D 31
    %79:gpr64common = LOADgot target-flags(aarch64-got) @c
    %80:gpr64common = LOADgot target-flags(aarch64-got) @d
    %81:gpr64common = LOADgot target-flags(aarch64-got) @e
    %82:gpr64common = LOADgot target-flags(aarch64-got) @aa
    %83:gpr64common = LOADgot target-flags(aarch64-got) @bb
    %84:gpr64common = LOADgot target-flags(aarch64-got) @cc
    %85:fpr64 = FMOVD0
    %88:gpr32 = MOVi32imm 200000
    %73:fpr64 = FMOVDi 112
  
  bb.1.vector.ph:
    successors: %bb.2(0x80000000)
  
    %11:gpr32sp = PHI %23, %bb.0, %15, %bb.6
    %56:gpr64all = COPY $xzr
    %55:gpr64all = COPY %56
  
  bb.2.vector.body:
    successors: %bb.3(0x04000000), %bb.2(0x7c000000)
  
    %12:gpr64common = PHI %55, %bb.1, %13, %bb.2
    %59:zpr = LD1D %58, %40, %12 :: (load unknown-size from %ir.uglygep, align 64, !tbaa !6)
    %60:zpr = LD1D %58, %5, %12 :: (load unknown-size from %ir.uglygep31, align 16, !tbaa !6)
    %61:zpr = LD1D %58, %4, %12 :: (load unknown-size from %ir.uglygep29, align 32, !tbaa !6)
    %62:zpr = LD1D %58, %3, %12 :: (load unknown-size from %ir.uglygep27, align 16, !tbaa !6)
    %64:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_UNDEF_D %58, killed %59, 1
    %65:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_UNDEF_D %58, killed %60, 1
    %66:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_UNDEF_D %58, killed %61, 1
    %67:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_UNDEF_D %58, killed %62, 1
    ST1D killed %64, %58, %46, %12 :: (store unknown-size into %ir.uglygep32, align 64, !tbaa !6)
    ST1D killed %65, %58, %8, %12 :: (store unknown-size into %ir.uglygep38, align 16, !tbaa !6)
    ST1D killed %66, %58, %7, %12 :: (store unknown-size into %ir.uglygep36, align 32, !tbaa !6)
    ST1D killed %67, %58, %6, %12 :: (store unknown-size into %ir.uglygep34, align 16, !tbaa !6)
    %69:gpr64 = nuw ADDXrr %12, %31
    %13:gpr64all = COPY %69
    dead $xzr = SUBSXrr %35, %69, implicit-def $nzcv
    Bcc 1, %bb.2, implicit $nzcv
    B %bb.3
  
  bb.3.middle.block:
    successors: %bb.6(0x30000000), %bb.4(0x50000000)
  
    CBZX %1, %bb.6
    B %bb.4
  
  bb.4.for.body5.preheader:
    successors: %bb.7(0x80000000)
  
    %14:gpr64all = COPY %1
    B %bb.7
  
  bb.5.for.cond.cleanup:
    %90:gpr64sp = nuw ADDXri %22, 16, 0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %91:gpr64all = COPY $xzr
    $x0 = COPY %90
    $x1 = COPY %91
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %93:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s000, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s000
    $x0 = COPY %93
    TCRETURNdi @calc_checksum, 0, csr_aarch64_aapcs, implicit $sp, implicit $x0
  
  bb.6.for.cond.cleanup4:
    successors: %bb.5(0x04000000), %bb.1(0x7c000000)
  
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    $x0 = COPY %46
    $x1 = COPY %40
    $x2 = COPY %79
    $x3 = COPY %80
    $x4 = COPY %81
    $x5 = COPY %82
    $x6 = COPY %83
    $x7 = COPY %84
    $d0 = COPY %85
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $d0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %87:gpr32common = nuw nsw ADDWri %11, 1, 0
    %15:gpr32all = COPY %87
    dead $wzr = SUBSWrr %87, %88, implicit-def $nzcv
    Bcc 0, %bb.5, implicit $nzcv
    B %bb.1
  
  bb.7.for.body5:
    successors: %bb.7(0x7c000000), %bb.6(0x04000000)
  
    %16:gpr64sp = PHI %10, %bb.4, %20, %bb.7
    %17:gpr64sp = PHI %9, %bb.4, %19, %bb.7
    %18:gpr64sp = PHI %14, %bb.4, %21, %bb.7
    early-clobber %71:gpr64sp, %72:fpr64 = LDRDpost %16, 8 :: (load (s64) from %ir.lsr.iv42, !tbaa !6)
    %74:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %72, %73
    early-clobber %75:gpr64sp = STRDpost killed %74, %17, 8 :: (store (s64) into %ir.lsr.iv, !tbaa !6)
    %19:gpr64all = COPY %75
    %20:gpr64all = COPY %71
    %76:gpr64 = SUBSXri %18, 1, 0, implicit-def $nzcv
    %21:gpr64all = COPY %76
    Bcc 1, %bb.7, implicit $nzcv
    B %bb.6

...
