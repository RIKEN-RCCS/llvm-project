# RUN: echo dummy-data > %t.yaml
# RUN: llc -mcpu=a64fx -start-before=aarch64-swpipeliner -fswp -export-swpl-dep-mi=%t.yaml -o /dev/null %s
# RUN: FileCheck %s --input-file=%t.yaml

# CHECK-NOT: dummy-data
# CHECK: ---
# CHECK-NEXT: fname:           s315
# CHECK-NEXT: loopid:          1
# CHECK-NEXT: deps:            []
# CHECK-NEXT: ...

--- |
  ; ModuleID = 'a.c'
  source_filename = "a.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  @A = dso_local local_unnamed_addr global [10000 x float] zeroinitializer, align 4
  
  ; Function Attrs: nofree norecurse nosync nounwind memory(write, argmem: none, inaccessiblemem: none) uwtable vscale_range(4,4)
  define dso_local void @s315() local_unnamed_addr #0 !dbg !9 {
  iter.check:
    %0 = tail call <vscale x 4 x i32> @llvm.experimental.stepvector.nxv4i32(), !dbg !12
    %1 = call i64 @llvm.start.loop.iterations.i64(i64 625), !dbg !12
    br label %vector.body, !dbg !12
  
  vector.body:                                      ; preds = %vector.body, %iter.check
    %lsr.iv = phi ptr [ %scevgep, %vector.body ], [ @A, %iter.check ], !dbg !13
    %vec.ind = phi <vscale x 4 x i32> [ %0, %iter.check ], [ %vec.ind.next, %vector.body ], !dbg !14
    %2 = phi i64 [ %1, %iter.check ], [ %6, %vector.body ], !dbg !14
    %3 = mul <vscale x 4 x i32> %vec.ind, shufflevector (<vscale x 4 x i32> insertelement (<vscale x 4 x i32> poison, i32 7, i64 0), <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer), !dbg !14
    %4 = urem <vscale x 4 x i32> %3, shufflevector (<vscale x 4 x i32> insertelement (<vscale x 4 x i32> poison, i32 10000, i64 0), <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer), !dbg !14
    %5 = sitofp <vscale x 4 x i32> %4 to <vscale x 4 x float>, !dbg !15
    store <vscale x 4 x float> %5, ptr %lsr.iv, align 4, !dbg !16, !tbaa !17
    %vec.ind.next = add <vscale x 4 x i32> %vec.ind, shufflevector (<vscale x 4 x i32> insertelement (<vscale x 4 x i32> poison, i32 16, i64 0), <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer), !dbg !14
    %scevgep = getelementptr i8, ptr %lsr.iv, i64 64, !dbg !13
    %6 = call i64 @llvm.loop.decrement.reg.i64(i64 %2, i64 1), !dbg !13
    %7 = icmp ne i64 %6, 0, !dbg !13
    br i1 %7, label %vector.body, label %for.cond.cleanup, !dbg !13, !llvm.loop !21
  
  for.cond.cleanup:                                 ; preds = %vector.body
    ret void, !dbg !27
  }
  
  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 4 x i32> @llvm.experimental.stepvector.nxv4i32() #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #2
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #2
  
  attributes #0 = { nofree norecurse nosync nounwind memory(write, argmem: none, inaccessiblemem: none) uwtable vscale_range(4,4) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #1 = { nocallback nofree nosync nounwind willreturn memory(none) }
  attributes #2 = { nocallback noduplicate nofree nosync nounwind willreturn }
  
  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!2, !3, !4, !5, !6, !7}
  !llvm.ident = !{!8}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 17.0.3 ()", isOptimized: true, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "a.c", directory: "/home/dev/sample/tsvc")
  !2 = !{i32 2, !"Debug Info Version", i32 3}
  !3 = !{i32 1, !"wchar_size", i32 4}
  !4 = !{i32 8, !"PIC Level", i32 2}
  !5 = !{i32 7, !"PIE Level", i32 2}
  !6 = !{i32 7, !"uwtable", i32 2}
  !7 = !{i32 7, !"frame-pointer", i32 1}
  !8 = !{!"clang version 17.0.3 ()"}
  !9 = distinct !DISubprogram(name: "s315", scope: !1, file: !1, line: 4, type: !10, scopeLine: 5, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
  !10 = !DISubroutineType(types: !11)
  !11 = !{}
  !12 = !DILocation(line: 6, column: 2, scope: !9)
  !13 = !DILocation(line: 6, column: 28, scope: !9)
  !14 = !DILocation(line: 7, column: 18, scope: !9)
  !15 = !DILocation(line: 7, column: 10, scope: !9)
  !16 = !DILocation(line: 7, column: 8, scope: !9)
  !17 = !{!18, !18, i64 0}
  !18 = !{!"float", !19, i64 0}
  !19 = !{!"omnipotent char", !20, i64 0}
  !20 = !{!"Simple C/C++ TBAA"}
  !21 = distinct !{!21, !12, !22, !23, !24, !25, !26}
  !22 = !DILocation(line: 7, column: 20, scope: !9)
  !23 = !{!"llvm.loop.mustprogress"}
  !24 = !{!"llvm.loop.unroll.disable"}
  !25 = !{!"llvm.loop.isvectorized", i32 1}
  !26 = !{!"llvm.loop.unroll.runtime.disable"}
  !27 = !DILocation(line: 8, column: 1, scope: !9)

...
---
name:            s315
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: zpr, preferred-register: '' }
  - { id: 1, class: gpr64all, preferred-register: '' }
  - { id: 2, class: gpr64sp, preferred-register: '' }
  - { id: 3, class: zpr, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: zpr, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr64all, preferred-register: '' }
  - { id: 8, class: gpr64all, preferred-register: '' }
  - { id: 9, class: gpr64common, preferred-register: '' }
  - { id: 10, class: gpr32, preferred-register: '' }
  - { id: 11, class: zpr, preferred-register: '' }
  - { id: 12, class: ppr_3b, preferred-register: '' }
  - { id: 13, class: gpr32common, preferred-register: '' }
  - { id: 14, class: zpr, preferred-register: '' }
  - { id: 15, class: zpr, preferred-register: '' }
  - { id: 16, class: zpr, preferred-register: '' }
  - { id: 17, class: gpr32common, preferred-register: '' }
  - { id: 18, class: zpr, preferred-register: '' }
  - { id: 19, class: zpr, preferred-register: '' }
  - { id: 20, class: zpr, preferred-register: '' }
  - { id: 21, class: zpr, preferred-register: '' }
  - { id: 22, class: ppr_3b, preferred-register: '' }
  - { id: 23, class: gpr64sp, preferred-register: '' }
  - { id: 24, class: gpr64, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.iter.check:
    successors: %bb.1(0x80000000)
  
    %0:zpr = INDEX_II_S 0, 1, debug-location !12
    %9:gpr64common = MOVaddr target-flags(aarch64-page) @A, target-flags(aarch64-pageoff, aarch64-nc) @A
    %8:gpr64all = COPY %9
    %10:gpr32 = MOVi32imm 625
    %1:gpr64all = SUBREG_TO_REG 0, killed %10, %subreg.sub_32
    %12:ppr_3b = PTRUE_S 31
    %13:gpr32common = MOVi32imm -776530087
    %14:zpr = DUP_ZR_S %13
    %17:gpr32common = MOVi32imm 10000
    %18:zpr = DUP_ZR_S %17
    %21:zpr = IMPLICIT_DEF
  
  bb.1.vector.body:
    successors: %bb.1(0x7c000000), %bb.2(0x04000000)
  
    %2:gpr64sp = PHI %8, %bb.0, %6, %bb.1, debug-location !13
    %3:zpr = PHI %0, %bb.0, %5, %bb.1, debug-location !14
    %4:gpr64sp = PHI %1, %bb.0, %7, %bb.1, debug-location !14
    %11:zpr = MUL_ZI_S %3, 7, debug-location !14
    %15:zpr = UMULH_ZPZZ_S_UNDEF %12, %11, %14, debug-location !14
    %16:zpr = LSR_ZZI_S killed %15, 13, debug-location !14
    %19:zpr = MLS_ZPZZZ_S_UNDEF %12, %11, killed %16, %18, debug-location !14
    %20:zpr = SCVTF_ZPmZ_StoS_UNDEF %21, %12, killed %19, debug-location !15
    ST1W_IMM killed %20, %12, %2, 0, debug-location !16 :: (store unknown-size into %ir.lsr.iv, align 4, !tbaa !17)
    %5:zpr = ADD_ZI_S %3, 16, 0, debug-location !14
    %23:gpr64sp = ADDXri %2, 64, 0, debug-location !13
    %6:gpr64all = COPY %23, debug-location !13
    %24:gpr64 = SUBSXri %4, 1, 0, implicit-def $nzcv, debug-location !13
    %7:gpr64all = COPY %24, debug-location !13
    Bcc 1, %bb.1, implicit $nzcv, debug-location !13
    B %bb.2, debug-location !13
  
  bb.2.for.cond.cleanup:
    RET_ReallyLR debug-location !27

...
