# RUN: llc %s -mcpu=a64fx -start-before=aarch64-swpipeliner -O2 -fswp -o /dev/null -swpl-debug-dump-mir=16 2>&1  | FileCheck %s
# CHECK:%36:fpr64 = COPY %45:fpr64
# CHECK-NEXT: %50:fpr64 = COPY %37:fpr64
# CHECK-NEXT: %37:fpr64 = COPY %41:fpr64
# CHECK-NEXT: %38:fpr64 = COPY %50:fpr64

--- |
  ; ModuleID = 'swpl-convert-phi-flowdep.c'
  source_filename = "swpl-convert-phi-flowdep.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  ; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable vscale_range(1,16)
  define dso_local void @kernel_seidel_2d(i32 noundef %tsteps, i32 noundef %n, ptr nocapture noundef %A) local_unnamed_addr #0 {
  entry:
    %cmp.not49 = icmp slt i32 %n, 3
    br i1 %cmp.not49, label %for.end, label %for.body.preheader
  
  for.body.preheader:                               ; preds = %entry
    %0 = add nsw i32 %n, -1
    %wide.trip.count = zext i32 %0 to i64
    %.pre = load double, ptr %A, align 8, !tbaa !6
    %arrayidx9.phi.trans.insert = getelementptr inbounds [5 x double], ptr %A, i64 0, i64 1
    %.pre53 = load double, ptr %arrayidx9.phi.trans.insert, align 8, !tbaa !6
    %arrayidx21.phi.trans.insert = getelementptr inbounds [5 x double], ptr %A, i64 1, i64 0
    %.pre54 = load double, ptr %arrayidx21.phi.trans.insert, align 8, !tbaa !6
    %uglygep59 = getelementptr i8, ptr %A, i64 48
    %1 = add i64 %wide.trip.count, -1
    %2 = call i64 @llvm.start.loop.iterations.i64(i64 %1)
    br label %for.body
  
  for.body:                                         ; preds = %for.body.preheader, %for.body
    %lsr.iv = phi ptr [ %uglygep59, %for.body.preheader ], [ %uglygep60, %for.body ]
    %3 = phi double [ %.pre54, %for.body.preheader ], [ %add27, %for.body ]
    %4 = phi double [ %.pre53, %for.body.preheader ], [ %7, %for.body ]
    %5 = phi double [ %.pre, %for.body.preheader ], [ %4, %for.body ]
    %6 = phi i64 [ %2, %for.body.preheader ], [ %9, %for.body ]
    %add = fadd fast double %4, %5
    %uglygep61 = getelementptr i8, ptr %lsr.iv, i64 -32
    %7 = load double, ptr %uglygep61, align 8, !tbaa !6
    %add16 = fadd fast double %add, %7
    %add22 = fadd fast double %add16, %3
    %8 = load double, ptr %lsr.iv, align 8, !tbaa !6
    %add27 = fadd fast double %add22, %8
    store double %add27, ptr %lsr.iv, align 8, !tbaa !6
    %uglygep60 = getelementptr i8, ptr %lsr.iv, i64 8
    %9 = call i64 @llvm.loop.decrement.reg.i64(i64 %6, i64 1)
    %10 = icmp ne i64 %9, 0
    br i1 %10, label %for.body, label %for.end, !llvm.loop !10
  
  for.end:                                          ; preds = %for.body, %entry
    ret void
  }
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #1
  
  attributes #0 = { argmemonly nofree norecurse nosync nounwind uwtable vscale_range(1,16) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #1 = { nocallback noduplicate nofree nosync nounwind willreturn }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 7, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !5 = !{!"clang version 15.0.4 ()"}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"double", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C/C++ TBAA"}
  !10 = distinct !{!10, !11, !12}
  !11 = !{!"llvm.loop.mustprogress"}
  !12 = !{!"llvm.loop.unroll.disable"}

...
---
name:            kernel_seidel_2d
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: fpr64, preferred-register: '' }
  - { id: 1, class: fpr64, preferred-register: '' }
  - { id: 2, class: fpr64, preferred-register: '' }
  - { id: 3, class: gpr64all, preferred-register: '' }
  - { id: 4, class: gpr64all, preferred-register: '' }
  - { id: 5, class: gpr64sp, preferred-register: '' }
  - { id: 6, class: fpr64, preferred-register: '' }
  - { id: 7, class: fpr64, preferred-register: '' }
  - { id: 8, class: fpr64, preferred-register: '' }
  - { id: 9, class: gpr64sp, preferred-register: '' }
  - { id: 10, class: fpr64, preferred-register: '' }
  - { id: 11, class: fpr64, preferred-register: '' }
  - { id: 12, class: gpr64all, preferred-register: '' }
  - { id: 13, class: gpr64all, preferred-register: '' }
  - { id: 14, class: gpr32, preferred-register: '' }
  - { id: 15, class: gpr32common, preferred-register: '' }
  - { id: 16, class: gpr64common, preferred-register: '' }
  - { id: 17, class: gpr32, preferred-register: '' }
  - { id: 18, class: gpr32common, preferred-register: '' }
  - { id: 19, class: gpr32, preferred-register: '' }
  - { id: 20, class: gpr64sp, preferred-register: '' }
  - { id: 21, class: gpr64sp, preferred-register: '' }
  - { id: 22, class: gpr64common, preferred-register: '' }
  - { id: 23, class: fpr64, preferred-register: '' }
  - { id: 24, class: fpr64, preferred-register: '' }
  - { id: 25, class: fpr64, preferred-register: '' }
  - { id: 26, class: fpr64, preferred-register: '' }
  - { id: 27, class: gpr64sp, preferred-register: '' }
  - { id: 28, class: gpr64, preferred-register: '' }
  - { id: 29, class: fpr64, preferred-register: '' }
  - { id: 30, class: fpr64, preferred-register: '' }
  - { id: 31, class: fpr64, preferred-register: '' }
  - { id: 32, class: fpr64, preferred-register: '' }
  - { id: 33, class: fpr64, preferred-register: '' }
  - { id: 34, class: fpr64, preferred-register: '' }
liveins:
  - { reg: '$w1', virtual-reg: '%15' }
  - { reg: '$x2', virtual-reg: '%16' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.3(0x40000000), %bb.1(0x40000000)
    liveins: $w1, $x2
  
    %16:gpr64common = COPY $x2
    %15:gpr32common = COPY $w1
    dead $wzr = SUBSWri %15, 3, 0, implicit-def $nzcv
    Bcc 11, %bb.3, implicit $nzcv
    B %bb.1
  
  bb.1.for.body.preheader:
    successors: %bb.2(0x80000000)
  
    %18:gpr32common = nsw SUBWri %15, 1, 0
    %20:gpr64sp = SUBREG_TO_REG 0, %18, %subreg.sub_32
    %0:fpr64 = LDRDui %16, 0 :: (load (s64) from %ir.A, !tbaa !6)
    %1:fpr64 = LDRDui %16, 1 :: (load (s64) from %ir.arrayidx9.phi.trans.insert, !tbaa !6)
    %2:fpr64 = LDRDui %16, 5 :: (load (s64) from %ir.arrayidx21.phi.trans.insert, !tbaa !6)
    %21:gpr64sp = ADDXri %16, 48, 0
    %3:gpr64all = COPY %21
    %22:gpr64common = SUBXri killed %20, 1, 0
    %4:gpr64all = COPY %22
  
  bb.2.for.body:
    successors: %bb.2(0x7c000000), %bb.3(0x04000000)
  
    %5:gpr64sp = PHI %3, %bb.1, %12, %bb.2
    %6:fpr64 = PHI %2, %bb.1, %11, %bb.2
    %7:fpr64 = PHI %1, %bb.1, %10, %bb.2
    %8:fpr64 = PHI %0, %bb.1, %7, %bb.2
    %9:gpr64sp = PHI %4, %bb.1, %13, %bb.2
    %23:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr %7, %8
    %10:fpr64 = LDURDi %5, -32 :: (load (s64) from %ir.uglygep61, !tbaa !6)
    %32:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %23, %6
    %26:fpr64 = LDRDui %5, 0 :: (load (s64) from %ir.lsr.iv, !tbaa !6)
    %34:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr %10, killed %26
    %11:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %32, killed %34
    STRDui %11, %5, 0 :: (store (s64) into %ir.lsr.iv, !tbaa !6)
    %27:gpr64sp = ADDXri %5, 8, 0
    %12:gpr64all = COPY %27
    %28:gpr64 = SUBSXri %9, 1, 0, implicit-def $nzcv
    %13:gpr64all = COPY %28
    Bcc 1, %bb.2, implicit $nzcv
    B %bb.3
  
  bb.3.for.end:
    RET_ReallyLR

...
