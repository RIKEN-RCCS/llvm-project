# RUN: llc %s -o /dev/null -O2 -fswp -mcpu=a64fx -stats -start-before=aarch64-swpipeliner 2>&1 | FileCheck %s
# CHECK: 3 machine-sink         - Number of remove useless copies

--- |
  ; ModuleID = 's.c'
  source_filename = "s.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  @b = external global [32000 x double], align 64
  @c = external global [32000 x double], align 64
  @d = external global [32000 x double], align 64
  @a = external global [32000 x double], align 64
  @e = external global [32000 x double], align 64
  @aa = external global [256 x [256 x double]], align 64
  @bb = external global [256 x [256 x double]], align 64
  @cc = external global [256 x [256 x double]], align 64
  
  ; Function Attrs: nounwind uwtable vscale_range(1,16)
  define dso_local void @s() local_unnamed_addr #0 {
  entry:
    br label %for.cond1.preheader
  
  for.cond1.preheader:                              ; preds = %entry, %for.cond.cleanup3
    %nl.036 = phi i32 [ 0, %entry ], [ %inc23, %for.cond.cleanup3 ]
    %0 = call i64 @llvm.start.loop.iterations.i64(i64 2909)
    br label %for.body4
  
  for.cond.cleanup:                                 ; preds = %for.cond.cleanup3
    ret void
  
  for.cond.cleanup3:                                ; preds = %for.body4
    %call = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, double noundef 0.000000e+00) #3
    %inc23 = add nuw nsw i32 %nl.036, 1
    %exitcond38.not = icmp eq i32 %inc23, 200000
    br i1 %exitcond38.not, label %for.cond.cleanup, label %for.cond1.preheader, !llvm.loop !6
  
  for.body4:                                        ; preds = %for.body4, %for.cond1.preheader
    %lsr.iv = phi i64 [ %lsr.iv.next, %for.body4 ], [ 0, %for.cond1.preheader ]
    %1 = phi i64 [ %0, %for.cond1.preheader ], [ %46, %for.body4 ]
    %uglygep39 = getelementptr i8, ptr getelementptr (i8, ptr @b, i64 40), i64 %lsr.iv
    %uglygep40 = getelementptr i8, ptr %uglygep39, i64 -40
    %2 = load double, ptr %uglygep40, align 8, !tbaa !8
    %uglygep60 = getelementptr i8, ptr getelementptr (i8, ptr @c, i64 40), i64 %lsr.iv
    %uglygep61 = getelementptr i8, ptr %uglygep60, i64 -40
    %3 = load double, ptr %uglygep61, align 8, !tbaa !8
    %mul = fmul double %2, %3
    %uglygep81 = getelementptr i8, ptr getelementptr (i8, ptr @d, i64 40), i64 %lsr.iv
    %uglygep82 = getelementptr i8, ptr %uglygep81, i64 -40
    %4 = load double, ptr %uglygep82, align 8, !tbaa !8
    %mul9 = fmul double %mul, %4
    %uglygep103 = getelementptr i8, ptr getelementptr (i8, ptr @a, i64 48), i64 %lsr.iv
    %uglygep104 = getelementptr i8, ptr %uglygep103, i64 -48
    store double %mul9, ptr %uglygep104, align 8, !tbaa !8
    %uglygep113 = getelementptr i8, ptr %uglygep103, i64 -40
    %5 = load double, ptr %uglygep113, align 8, !tbaa !8
    %mul16 = fmul double %mul9, %5
    %mul19 = fmul double %4, %mul16
    store double %mul19, ptr %uglygep40, align 8, !tbaa !8
    %uglygep43 = getelementptr i8, ptr getelementptr (i8, ptr @b, i64 40), i64 %lsr.iv
    %uglygep44 = getelementptr i8, ptr %uglygep43, i64 -32
    %6 = load double, ptr %uglygep44, align 8, !tbaa !8
    %uglygep64 = getelementptr i8, ptr getelementptr (i8, ptr @c, i64 40), i64 %lsr.iv
    %uglygep65 = getelementptr i8, ptr %uglygep64, i64 -32
    %7 = load double, ptr %uglygep65, align 8, !tbaa !8
    %mul.1 = fmul double %6, %7
    %uglygep85 = getelementptr i8, ptr getelementptr (i8, ptr @d, i64 40), i64 %lsr.iv
    %uglygep86 = getelementptr i8, ptr %uglygep85, i64 -32
    %8 = load double, ptr %uglygep86, align 8, !tbaa !8
    %mul9.1 = fmul double %mul.1, %8
    %uglygep111 = getelementptr i8, ptr getelementptr (i8, ptr @a, i64 48), i64 %lsr.iv
    %uglygep112 = getelementptr i8, ptr %uglygep111, i64 -40
    store double %mul9.1, ptr %uglygep112, align 8, !tbaa !8
    %uglygep116 = getelementptr i8, ptr %uglygep111, i64 -32
    %9 = load double, ptr %uglygep116, align 8, !tbaa !8
    %mul16.1 = fmul double %mul9.1, %9
    %mul19.1 = fmul double %8, %mul16.1
    store double %mul19.1, ptr %uglygep44, align 8, !tbaa !8
    %uglygep45 = getelementptr i8, ptr getelementptr (i8, ptr @b, i64 40), i64 %lsr.iv
    %uglygep46 = getelementptr i8, ptr %uglygep45, i64 -24
    %10 = load double, ptr %uglygep46, align 8, !tbaa !8
    %uglygep66 = getelementptr i8, ptr getelementptr (i8, ptr @c, i64 40), i64 %lsr.iv
    %uglygep67 = getelementptr i8, ptr %uglygep66, i64 -24
    %11 = load double, ptr %uglygep67, align 8, !tbaa !8
    %mul.2 = fmul double %10, %11
    %uglygep87 = getelementptr i8, ptr getelementptr (i8, ptr @d, i64 40), i64 %lsr.iv
    %uglygep88 = getelementptr i8, ptr %uglygep87, i64 -24
    %12 = load double, ptr %uglygep88, align 8, !tbaa !8
    %mul9.2 = fmul double %mul.2, %12
    %uglygep114 = getelementptr i8, ptr getelementptr (i8, ptr @a, i64 48), i64 %lsr.iv
    %uglygep115 = getelementptr i8, ptr %uglygep114, i64 -32
    store double %mul9.2, ptr %uglygep115, align 8, !tbaa !8
    %uglygep119 = getelementptr i8, ptr %uglygep114, i64 -24
    %13 = load double, ptr %uglygep119, align 8, !tbaa !8
    %mul16.2 = fmul double %mul9.2, %13
    %mul19.2 = fmul double %12, %mul16.2
    store double %mul19.2, ptr %uglygep46, align 8, !tbaa !8
    %uglygep47 = getelementptr i8, ptr getelementptr (i8, ptr @b, i64 40), i64 %lsr.iv
    %uglygep48 = getelementptr i8, ptr %uglygep47, i64 -16
    %14 = load double, ptr %uglygep48, align 8, !tbaa !8
    %uglygep68 = getelementptr i8, ptr getelementptr (i8, ptr @c, i64 40), i64 %lsr.iv
    %uglygep69 = getelementptr i8, ptr %uglygep68, i64 -16
    %15 = load double, ptr %uglygep69, align 8, !tbaa !8
    %mul.3 = fmul double %14, %15
    %uglygep89 = getelementptr i8, ptr getelementptr (i8, ptr @d, i64 40), i64 %lsr.iv
    %uglygep90 = getelementptr i8, ptr %uglygep89, i64 -16
    %16 = load double, ptr %uglygep90, align 8, !tbaa !8
    %mul9.3 = fmul double %mul.3, %16
    %uglygep117 = getelementptr i8, ptr getelementptr (i8, ptr @a, i64 48), i64 %lsr.iv
    %uglygep118 = getelementptr i8, ptr %uglygep117, i64 -24
    store double %mul9.3, ptr %uglygep118, align 8, !tbaa !8
    %uglygep122 = getelementptr i8, ptr %uglygep117, i64 -16
    %17 = load double, ptr %uglygep122, align 8, !tbaa !8
    %mul16.3 = fmul double %mul9.3, %17
    %mul19.3 = fmul double %16, %mul16.3
    store double %mul19.3, ptr %uglygep48, align 8, !tbaa !8
    %uglygep49 = getelementptr i8, ptr getelementptr (i8, ptr @b, i64 40), i64 %lsr.iv
    %uglygep50 = getelementptr i8, ptr %uglygep49, i64 -8
    %18 = load double, ptr %uglygep50, align 8, !tbaa !8
    %uglygep70 = getelementptr i8, ptr getelementptr (i8, ptr @c, i64 40), i64 %lsr.iv
    %uglygep71 = getelementptr i8, ptr %uglygep70, i64 -8
    %19 = load double, ptr %uglygep71, align 8, !tbaa !8
    %mul.4 = fmul double %18, %19
    %uglygep91 = getelementptr i8, ptr getelementptr (i8, ptr @d, i64 40), i64 %lsr.iv
    %uglygep92 = getelementptr i8, ptr %uglygep91, i64 -8
    %20 = load double, ptr %uglygep92, align 8, !tbaa !8
    %mul9.4 = fmul double %mul.4, %20
    %uglygep120 = getelementptr i8, ptr getelementptr (i8, ptr @a, i64 48), i64 %lsr.iv
    %uglygep121 = getelementptr i8, ptr %uglygep120, i64 -16
    store double %mul9.4, ptr %uglygep121, align 8, !tbaa !8
    %uglygep129 = getelementptr i8, ptr %uglygep120, i64 -8
    %21 = load double, ptr %uglygep129, align 8, !tbaa !8
    %mul16.4 = fmul double %mul9.4, %21
    %mul19.4 = fmul double %20, %mul16.4
    store double %mul19.4, ptr %uglygep50, align 8, !tbaa !8
    %uglygep = getelementptr i8, ptr getelementptr (i8, ptr @b, i64 40), i64 %lsr.iv
    %22 = load double, ptr %uglygep, align 8, !tbaa !8
    %uglygep59 = getelementptr i8, ptr getelementptr (i8, ptr @c, i64 40), i64 %lsr.iv
    %23 = load double, ptr %uglygep59, align 8, !tbaa !8
    %mul.5 = fmul double %22, %23
    %uglygep80 = getelementptr i8, ptr getelementptr (i8, ptr @d, i64 40), i64 %lsr.iv
    %24 = load double, ptr %uglygep80, align 8, !tbaa !8
    %mul9.5 = fmul double %mul.5, %24
    %uglygep127 = getelementptr i8, ptr getelementptr (i8, ptr @a, i64 48), i64 %lsr.iv
    %uglygep128 = getelementptr i8, ptr %uglygep127, i64 -8
    store double %mul9.5, ptr %uglygep128, align 8, !tbaa !8
    %uglygep102 = getelementptr i8, ptr getelementptr (i8, ptr @a, i64 48), i64 %lsr.iv
    %25 = load double, ptr %uglygep102, align 8, !tbaa !8
    %mul16.5 = fmul double %mul9.5, %25
    %mul19.5 = fmul double %24, %mul16.5
    store double %mul19.5, ptr %uglygep, align 8, !tbaa !8
    %uglygep51 = getelementptr i8, ptr getelementptr (i8, ptr @b, i64 40), i64 %lsr.iv
    %uglygep52 = getelementptr i8, ptr %uglygep51, i64 8
    %26 = load double, ptr %uglygep52, align 8, !tbaa !8
    %uglygep74 = getelementptr i8, ptr getelementptr (i8, ptr @c, i64 40), i64 %lsr.iv
    %uglygep75 = getelementptr i8, ptr %uglygep74, i64 8
    %27 = load double, ptr %uglygep75, align 8, !tbaa !8
    %mul.6 = fmul double %26, %27
    %uglygep95 = getelementptr i8, ptr getelementptr (i8, ptr @d, i64 40), i64 %lsr.iv
    %uglygep96 = getelementptr i8, ptr %uglygep95, i64 8
    %28 = load double, ptr %uglygep96, align 8, !tbaa !8
    %mul9.6 = fmul double %mul.6, %28
    %uglygep101 = getelementptr i8, ptr getelementptr (i8, ptr @a, i64 48), i64 %lsr.iv
    store double %mul9.6, ptr %uglygep101, align 8, !tbaa !8
    %uglygep132 = getelementptr i8, ptr %uglygep101, i64 8
    %29 = load double, ptr %uglygep132, align 8, !tbaa !8
    %mul16.6 = fmul double %mul9.6, %29
    %mul19.6 = fmul double %28, %mul16.6
    store double %mul19.6, ptr %uglygep52, align 8, !tbaa !8
    %uglygep55 = getelementptr i8, ptr getelementptr (i8, ptr @b, i64 40), i64 %lsr.iv
    %uglygep56 = getelementptr i8, ptr %uglygep55, i64 16
    %30 = load double, ptr %uglygep56, align 8, !tbaa !8
    %uglygep76 = getelementptr i8, ptr getelementptr (i8, ptr @c, i64 40), i64 %lsr.iv
    %uglygep77 = getelementptr i8, ptr %uglygep76, i64 16
    %31 = load double, ptr %uglygep77, align 8, !tbaa !8
    %mul.7 = fmul double %30, %31
    %uglygep97 = getelementptr i8, ptr getelementptr (i8, ptr @d, i64 40), i64 %lsr.iv
    %uglygep98 = getelementptr i8, ptr %uglygep97, i64 16
    %32 = load double, ptr %uglygep98, align 8, !tbaa !8
    %mul9.7 = fmul double %mul.7, %32
    %uglygep130 = getelementptr i8, ptr getelementptr (i8, ptr @a, i64 48), i64 %lsr.iv
    %uglygep131 = getelementptr i8, ptr %uglygep130, i64 8
    store double %mul9.7, ptr %uglygep131, align 8, !tbaa !8
    %uglygep135 = getelementptr i8, ptr %uglygep130, i64 16
    %33 = load double, ptr %uglygep135, align 8, !tbaa !8
    %mul16.7 = fmul double %mul9.7, %33
    %mul19.7 = fmul double %32, %mul16.7
    store double %mul19.7, ptr %uglygep56, align 8, !tbaa !8
    %uglygep57 = getelementptr i8, ptr getelementptr (i8, ptr @b, i64 40), i64 %lsr.iv
    %uglygep58 = getelementptr i8, ptr %uglygep57, i64 24
    %34 = load double, ptr %uglygep58, align 8, !tbaa !8
    %uglygep78 = getelementptr i8, ptr getelementptr (i8, ptr @c, i64 40), i64 %lsr.iv
    %uglygep79 = getelementptr i8, ptr %uglygep78, i64 24
    %35 = load double, ptr %uglygep79, align 8, !tbaa !8
    %mul.8 = fmul double %34, %35
    %uglygep99 = getelementptr i8, ptr getelementptr (i8, ptr @d, i64 40), i64 %lsr.iv
    %uglygep100 = getelementptr i8, ptr %uglygep99, i64 24
    %36 = load double, ptr %uglygep100, align 8, !tbaa !8
    %mul9.8 = fmul double %mul.8, %36
    %uglygep133 = getelementptr i8, ptr getelementptr (i8, ptr @a, i64 48), i64 %lsr.iv
    %uglygep134 = getelementptr i8, ptr %uglygep133, i64 16
    store double %mul9.8, ptr %uglygep134, align 8, !tbaa !8
    %uglygep125 = getelementptr i8, ptr getelementptr (i8, ptr @a, i64 48), i64 %lsr.iv
    %uglygep126 = getelementptr i8, ptr %uglygep125, i64 24
    %37 = load double, ptr %uglygep126, align 8, !tbaa !8
    %mul16.8 = fmul double %mul9.8, %37
    %mul19.8 = fmul double %36, %mul16.8
    store double %mul19.8, ptr %uglygep58, align 8, !tbaa !8
    %uglygep53 = getelementptr i8, ptr getelementptr (i8, ptr @b, i64 40), i64 %lsr.iv
    %uglygep54 = getelementptr i8, ptr %uglygep53, i64 32
    %38 = load double, ptr %uglygep54, align 8, !tbaa !8
    %uglygep72 = getelementptr i8, ptr getelementptr (i8, ptr @c, i64 40), i64 %lsr.iv
    %uglygep73 = getelementptr i8, ptr %uglygep72, i64 32
    %39 = load double, ptr %uglygep73, align 8, !tbaa !8
    %mul.9 = fmul double %38, %39
    %uglygep93 = getelementptr i8, ptr getelementptr (i8, ptr @d, i64 40), i64 %lsr.iv
    %uglygep94 = getelementptr i8, ptr %uglygep93, i64 32
    %40 = load double, ptr %uglygep94, align 8, !tbaa !8
    %mul9.9 = fmul double %mul.9, %40
    %uglygep123 = getelementptr i8, ptr getelementptr (i8, ptr @a, i64 48), i64 %lsr.iv
    %uglygep124 = getelementptr i8, ptr %uglygep123, i64 24
    store double %mul9.9, ptr %uglygep124, align 8, !tbaa !8
    %uglygep109 = getelementptr i8, ptr getelementptr (i8, ptr @a, i64 48), i64 %lsr.iv
    %uglygep110 = getelementptr i8, ptr %uglygep109, i64 32
    %41 = load double, ptr %uglygep110, align 8, !tbaa !8
    %mul16.9 = fmul double %mul9.9, %41
    %mul19.9 = fmul double %40, %mul16.9
    store double %mul19.9, ptr %uglygep54, align 8, !tbaa !8
    %uglygep41 = getelementptr i8, ptr getelementptr (i8, ptr @b, i64 40), i64 %lsr.iv
    %uglygep42 = getelementptr i8, ptr %uglygep41, i64 40
    %42 = load double, ptr %uglygep42, align 8, !tbaa !8
    %uglygep62 = getelementptr i8, ptr getelementptr (i8, ptr @c, i64 40), i64 %lsr.iv
    %uglygep63 = getelementptr i8, ptr %uglygep62, i64 40
    %43 = load double, ptr %uglygep63, align 8, !tbaa !8
    %mul.10 = fmul double %42, %43
    %uglygep83 = getelementptr i8, ptr getelementptr (i8, ptr @d, i64 40), i64 %lsr.iv
    %uglygep84 = getelementptr i8, ptr %uglygep83, i64 40
    %44 = load double, ptr %uglygep84, align 8, !tbaa !8
    %mul9.10 = fmul double %mul.10, %44
    %uglygep107 = getelementptr i8, ptr getelementptr (i8, ptr @a, i64 48), i64 %lsr.iv
    %uglygep108 = getelementptr i8, ptr %uglygep107, i64 32
    store double %mul9.10, ptr %uglygep108, align 8, !tbaa !8
    %uglygep105 = getelementptr i8, ptr getelementptr (i8, ptr @a, i64 48), i64 %lsr.iv
    %uglygep106 = getelementptr i8, ptr %uglygep105, i64 40
    %45 = load double, ptr %uglygep106, align 8, !tbaa !8
    %mul16.10 = fmul double %mul9.10, %45
    %mul19.10 = fmul double %44, %mul16.10
    store double %mul19.10, ptr %uglygep42, align 8, !tbaa !8
    %lsr.iv.next = add nuw nsw i64 %lsr.iv, 88
    %46 = call i64 @llvm.loop.decrement.reg.i64(i64 %1, i64 1)
    %47 = icmp ne i64 %46, 0
    br i1 %47, label %for.body4, label %for.cond.cleanup3, !llvm.loop !12
  }
  
  declare i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, double noundef) local_unnamed_addr #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #2
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #2
  
  attributes #0 = { nounwind uwtable vscale_range(1,16) "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #1 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #2 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #3 = { nounwind }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 7, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !5 = !{!"clang version 15.0.4 ()"}
  !6 = distinct !{!6, !7}
  !7 = !{!"llvm.loop.mustprogress"}
  !8 = !{!9, !9, i64 0}
  !9 = !{!"double", !10, i64 0}
  !10 = !{!"omnipotent char", !11, i64 0}
  !11 = !{!"Simple C/C++ TBAA"}
  !12 = distinct !{!12, !7}

...
---
name:            s
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32sp, preferred-register: '' }
  - { id: 1, class: gpr64all, preferred-register: '' }
  - { id: 2, class: gpr32all, preferred-register: '' }
  - { id: 3, class: gpr64common, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: gpr64all, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr32all, preferred-register: '' }
  - { id: 8, class: gpr32all, preferred-register: '' }
  - { id: 9, class: gpr64all, preferred-register: '' }
  - { id: 10, class: gpr64all, preferred-register: '' }
  - { id: 11, class: gpr32, preferred-register: '' }
  - { id: 12, class: gpr64common, preferred-register: '' }
  - { id: 13, class: gpr64common, preferred-register: '' }
  - { id: 14, class: fpr64, preferred-register: '' }
  - { id: 15, class: gpr64common, preferred-register: '' }
  - { id: 16, class: gpr64common, preferred-register: '' }
  - { id: 17, class: fpr64, preferred-register: '' }
  - { id: 18, class: fpr64, preferred-register: '' }
  - { id: 19, class: gpr64common, preferred-register: '' }
  - { id: 20, class: gpr64common, preferred-register: '' }
  - { id: 21, class: fpr64, preferred-register: '' }
  - { id: 22, class: fpr64, preferred-register: '' }
  - { id: 23, class: gpr64common, preferred-register: '' }
  - { id: 24, class: gpr64common, preferred-register: '' }
  - { id: 25, class: fpr64, preferred-register: '' }
  - { id: 26, class: fpr64, preferred-register: '' }
  - { id: 27, class: fpr64, preferred-register: '' }
  - { id: 28, class: fpr64, preferred-register: '' }
  - { id: 29, class: fpr64, preferred-register: '' }
  - { id: 30, class: fpr64, preferred-register: '' }
  - { id: 31, class: fpr64, preferred-register: '' }
  - { id: 32, class: fpr64, preferred-register: '' }
  - { id: 33, class: fpr64, preferred-register: '' }
  - { id: 34, class: fpr64, preferred-register: '' }
  - { id: 35, class: fpr64, preferred-register: '' }
  - { id: 36, class: fpr64, preferred-register: '' }
  - { id: 37, class: fpr64, preferred-register: '' }
  - { id: 38, class: fpr64, preferred-register: '' }
  - { id: 39, class: fpr64, preferred-register: '' }
  - { id: 40, class: fpr64, preferred-register: '' }
  - { id: 41, class: fpr64, preferred-register: '' }
  - { id: 42, class: fpr64, preferred-register: '' }
  - { id: 43, class: fpr64, preferred-register: '' }
  - { id: 44, class: fpr64, preferred-register: '' }
  - { id: 45, class: fpr64, preferred-register: '' }
  - { id: 46, class: fpr64, preferred-register: '' }
  - { id: 47, class: fpr64, preferred-register: '' }
  - { id: 48, class: fpr64, preferred-register: '' }
  - { id: 49, class: fpr64, preferred-register: '' }
  - { id: 50, class: fpr64, preferred-register: '' }
  - { id: 51, class: fpr64, preferred-register: '' }
  - { id: 52, class: fpr64, preferred-register: '' }
  - { id: 53, class: fpr64, preferred-register: '' }
  - { id: 54, class: fpr64, preferred-register: '' }
  - { id: 55, class: fpr64, preferred-register: '' }
  - { id: 56, class: fpr64, preferred-register: '' }
  - { id: 57, class: fpr64, preferred-register: '' }
  - { id: 58, class: fpr64, preferred-register: '' }
  - { id: 59, class: fpr64, preferred-register: '' }
  - { id: 60, class: fpr64, preferred-register: '' }
  - { id: 61, class: fpr64, preferred-register: '' }
  - { id: 62, class: fpr64, preferred-register: '' }
  - { id: 63, class: fpr64, preferred-register: '' }
  - { id: 64, class: fpr64, preferred-register: '' }
  - { id: 65, class: fpr64, preferred-register: '' }
  - { id: 66, class: fpr64, preferred-register: '' }
  - { id: 67, class: fpr64, preferred-register: '' }
  - { id: 68, class: fpr64, preferred-register: '' }
  - { id: 69, class: fpr64, preferred-register: '' }
  - { id: 70, class: fpr64, preferred-register: '' }
  - { id: 71, class: fpr64, preferred-register: '' }
  - { id: 72, class: fpr64, preferred-register: '' }
  - { id: 73, class: fpr64, preferred-register: '' }
  - { id: 74, class: fpr64, preferred-register: '' }
  - { id: 75, class: fpr64, preferred-register: '' }
  - { id: 76, class: fpr64, preferred-register: '' }
  - { id: 77, class: fpr64, preferred-register: '' }
  - { id: 78, class: fpr64, preferred-register: '' }
  - { id: 79, class: fpr64, preferred-register: '' }
  - { id: 80, class: fpr64, preferred-register: '' }
  - { id: 81, class: fpr64, preferred-register: '' }
  - { id: 82, class: fpr64, preferred-register: '' }
  - { id: 83, class: fpr64, preferred-register: '' }
  - { id: 84, class: fpr64, preferred-register: '' }
  - { id: 85, class: fpr64, preferred-register: '' }
  - { id: 86, class: fpr64, preferred-register: '' }
  - { id: 87, class: fpr64, preferred-register: '' }
  - { id: 88, class: fpr64, preferred-register: '' }
  - { id: 89, class: fpr64, preferred-register: '' }
  - { id: 90, class: fpr64, preferred-register: '' }
  - { id: 91, class: fpr64, preferred-register: '' }
  - { id: 92, class: fpr64, preferred-register: '' }
  - { id: 93, class: fpr64, preferred-register: '' }
  - { id: 94, class: fpr64, preferred-register: '' }
  - { id: 95, class: fpr64, preferred-register: '' }
  - { id: 96, class: fpr64, preferred-register: '' }
  - { id: 97, class: fpr64, preferred-register: '' }
  - { id: 98, class: fpr64, preferred-register: '' }
  - { id: 99, class: fpr64, preferred-register: '' }
  - { id: 100, class: fpr64, preferred-register: '' }
  - { id: 101, class: fpr64, preferred-register: '' }
  - { id: 102, class: fpr64, preferred-register: '' }
  - { id: 103, class: fpr64, preferred-register: '' }
  - { id: 104, class: fpr64, preferred-register: '' }
  - { id: 105, class: fpr64, preferred-register: '' }
  - { id: 106, class: fpr64, preferred-register: '' }
  - { id: 107, class: fpr64, preferred-register: '' }
  - { id: 108, class: gpr64sp, preferred-register: '' }
  - { id: 109, class: gpr64, preferred-register: '' }
  - { id: 110, class: gpr64common, preferred-register: '' }
  - { id: 111, class: gpr64common, preferred-register: '' }
  - { id: 112, class: gpr64common, preferred-register: '' }
  - { id: 113, class: gpr64common, preferred-register: '' }
  - { id: 114, class: gpr64common, preferred-register: '' }
  - { id: 115, class: gpr64common, preferred-register: '' }
  - { id: 116, class: gpr64common, preferred-register: '' }
  - { id: 117, class: gpr64common, preferred-register: '' }
  - { id: 118, class: fpr64, preferred-register: '' }
  - { id: 119, class: gpr32all, preferred-register: '' }
  - { id: 120, class: gpr32common, preferred-register: '' }
  - { id: 121, class: gpr32, preferred-register: '' }
  - { id: 122, class: gpr32, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
  
    %8:gpr32all = COPY $wzr
    %7:gpr32all = COPY %8
    %11:gpr32 = MOVi32imm 2909
    %12:gpr64common = LOADgot target-flags(aarch64-got) @b
    %15:gpr64common = LOADgot target-flags(aarch64-got) @c
    %19:gpr64common = LOADgot target-flags(aarch64-got) @d
    %23:gpr64common = LOADgot target-flags(aarch64-got) @a
    %114:gpr64common = LOADgot target-flags(aarch64-got) @e
    %115:gpr64common = LOADgot target-flags(aarch64-got) @aa
    %116:gpr64common = LOADgot target-flags(aarch64-got) @bb
    %117:gpr64common = LOADgot target-flags(aarch64-got) @cc
    %118:fpr64 = FMOVD0
    %121:gpr32 = MOVi32imm 200000
  
  bb.1.for.cond1.preheader:
    successors: %bb.4(0x80000000)
  
    %0:gpr32sp = PHI %7, %bb.0, %2, %bb.3
    %10:gpr64all = COPY $xzr
    %9:gpr64all = COPY %10
    %1:gpr64all = SUBREG_TO_REG 0, %11, %subreg.sub_32
    B %bb.4
  
  bb.2.for.cond.cleanup:
    RET_ReallyLR
  
  bb.3.for.cond.cleanup3:
    successors: %bb.2(0x04000000), %bb.1(0x7c000000)
  
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    $x0 = COPY %23
    $x1 = COPY %12
    $x2 = COPY %15
    $x3 = COPY %19
    $x4 = COPY %114
    $x5 = COPY %115
    $x6 = COPY %116
    $x7 = COPY %117
    $d0 = COPY %118
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $d0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %120:gpr32common = nuw nsw ADDWri %0, 1, 0
    %2:gpr32all = COPY %120
    dead $wzr = SUBSWrr %120, %121, implicit-def $nzcv
    Bcc 0, %bb.2, implicit $nzcv
    B %bb.1
  
  bb.4.for.body4:
    successors: %bb.4(0x7c000000), %bb.3(0x04000000)
  
    %3:gpr64common = PHI %9, %bb.1, %5, %bb.4
    %4:gpr64sp = PHI %1, %bb.1, %6, %bb.4
    %13:gpr64common = ADDXrr %12, %3
    %14:fpr64 = LDRDui %13, 0 :: (load (s64) from %ir.uglygep40, !tbaa !8)
    %16:gpr64common = ADDXrr %15, %3
    %17:fpr64 = LDRDui %16, 0 :: (load (s64) from %ir.uglygep61, !tbaa !8)
    %18:fpr64 = nofpexcept FMULDrr killed %14, killed %17
    %20:gpr64common = ADDXrr %19, %3
    %21:fpr64 = LDRDui %20, 0 :: (load (s64) from %ir.uglygep82, !tbaa !8)
    %22:fpr64 = nofpexcept FMULDrr killed %18, %21
    %24:gpr64common = ADDXrr %23, %3
    STRDui %22, %24, 0 :: (store (s64) into %ir.uglygep104, !tbaa !8)
    %25:fpr64 = LDRDui %24, 1 :: (load (s64) from %ir.uglygep113, !tbaa !8)
    %26:fpr64 = nofpexcept FMULDrr %22, killed %25
    %27:fpr64 = nofpexcept FMULDrr %21, killed %26
    STRDui killed %27, %13, 0 :: (store (s64) into %ir.uglygep40, !tbaa !8)
    %28:fpr64 = LDRDui %13, 1 :: (load (s64) from %ir.uglygep44, !tbaa !8)
    %29:fpr64 = LDRDui %16, 1 :: (load (s64) from %ir.uglygep65, !tbaa !8)
    %30:fpr64 = nofpexcept FMULDrr killed %28, killed %29
    %31:fpr64 = LDRDui %20, 1 :: (load (s64) from %ir.uglygep86, !tbaa !8)
    %32:fpr64 = nofpexcept FMULDrr killed %30, %31
    STRDui %32, %24, 1 :: (store (s64) into %ir.uglygep112, !tbaa !8)
    %33:fpr64 = LDRDui %24, 2 :: (load (s64) from %ir.uglygep116, !tbaa !8)
    %34:fpr64 = nofpexcept FMULDrr %32, killed %33
    %35:fpr64 = nofpexcept FMULDrr %31, killed %34
    STRDui killed %35, %13, 1 :: (store (s64) into %ir.uglygep44, !tbaa !8)
    %36:fpr64 = LDRDui %13, 2 :: (load (s64) from %ir.uglygep46, !tbaa !8)
    %37:fpr64 = LDRDui %16, 2 :: (load (s64) from %ir.uglygep67, !tbaa !8)
    %38:fpr64 = nofpexcept FMULDrr killed %36, killed %37
    %39:fpr64 = LDRDui %20, 2 :: (load (s64) from %ir.uglygep88, !tbaa !8)
    %40:fpr64 = nofpexcept FMULDrr killed %38, %39
    STRDui %40, %24, 2 :: (store (s64) into %ir.uglygep115, !tbaa !8)
    %41:fpr64 = LDRDui %24, 3 :: (load (s64) from %ir.uglygep119, !tbaa !8)
    %42:fpr64 = nofpexcept FMULDrr %40, killed %41
    %43:fpr64 = nofpexcept FMULDrr %39, killed %42
    STRDui killed %43, %13, 2 :: (store (s64) into %ir.uglygep46, !tbaa !8)
    %44:fpr64 = LDRDui %13, 3 :: (load (s64) from %ir.uglygep48, !tbaa !8)
    %45:fpr64 = LDRDui %16, 3 :: (load (s64) from %ir.uglygep69, !tbaa !8)
    %46:fpr64 = nofpexcept FMULDrr killed %44, killed %45
    %47:fpr64 = LDRDui %20, 3 :: (load (s64) from %ir.uglygep90, !tbaa !8)
    %48:fpr64 = nofpexcept FMULDrr killed %46, %47
    STRDui %48, %24, 3 :: (store (s64) into %ir.uglygep118, !tbaa !8)
    %49:fpr64 = LDRDui %24, 4 :: (load (s64) from %ir.uglygep122, !tbaa !8)
    %50:fpr64 = nofpexcept FMULDrr %48, killed %49
    %51:fpr64 = nofpexcept FMULDrr %47, killed %50
    STRDui killed %51, %13, 3 :: (store (s64) into %ir.uglygep48, !tbaa !8)
    %52:fpr64 = LDRDui %13, 4 :: (load (s64) from %ir.uglygep50, !tbaa !8)
    %53:fpr64 = LDRDui %16, 4 :: (load (s64) from %ir.uglygep71, !tbaa !8)
    %54:fpr64 = nofpexcept FMULDrr killed %52, killed %53
    %55:fpr64 = LDRDui %20, 4 :: (load (s64) from %ir.uglygep92, !tbaa !8)
    %56:fpr64 = nofpexcept FMULDrr killed %54, %55
    STRDui %56, %24, 4 :: (store (s64) into %ir.uglygep121, !tbaa !8)
    %57:fpr64 = LDRDui %24, 5 :: (load (s64) from %ir.uglygep129, !tbaa !8)
    %58:fpr64 = nofpexcept FMULDrr %56, killed %57
    %59:fpr64 = nofpexcept FMULDrr %55, killed %58
    STRDui killed %59, %13, 4 :: (store (s64) into %ir.uglygep50, !tbaa !8)
    %60:fpr64 = LDRDui %13, 5 :: (load (s64) from %ir.uglygep, !tbaa !8)
    %61:fpr64 = LDRDui %16, 5 :: (load (s64) from %ir.uglygep59, !tbaa !8)
    %62:fpr64 = nofpexcept FMULDrr killed %60, killed %61
    %63:fpr64 = LDRDui %20, 5 :: (load (s64) from %ir.uglygep80, !tbaa !8)
    %64:fpr64 = nofpexcept FMULDrr killed %62, %63
    STRDui %64, %24, 5 :: (store (s64) into %ir.uglygep128, !tbaa !8)
    %65:fpr64 = LDRDui %24, 6 :: (load (s64) from %ir.uglygep102, !tbaa !8)
    %66:fpr64 = nofpexcept FMULDrr %64, killed %65
    %67:fpr64 = nofpexcept FMULDrr %63, killed %66
    STRDui killed %67, %13, 5 :: (store (s64) into %ir.uglygep, !tbaa !8)
    %68:fpr64 = LDRDui %13, 6 :: (load (s64) from %ir.uglygep52, !tbaa !8)
    %69:fpr64 = LDRDui %16, 6 :: (load (s64) from %ir.uglygep75, !tbaa !8)
    %70:fpr64 = nofpexcept FMULDrr killed %68, killed %69
    %71:fpr64 = LDRDui %20, 6 :: (load (s64) from %ir.uglygep96, !tbaa !8)
    %72:fpr64 = nofpexcept FMULDrr killed %70, %71
    STRDui %72, %24, 6 :: (store (s64) into %ir.uglygep101, !tbaa !8)
    %73:fpr64 = LDRDui %24, 7 :: (load (s64) from %ir.uglygep132, !tbaa !8)
    %74:fpr64 = nofpexcept FMULDrr %72, killed %73
    %75:fpr64 = nofpexcept FMULDrr %71, killed %74
    STRDui killed %75, %13, 6 :: (store (s64) into %ir.uglygep52, !tbaa !8)
    %76:fpr64 = LDRDui %13, 7 :: (load (s64) from %ir.uglygep56, !tbaa !8)
    %77:fpr64 = LDRDui %16, 7 :: (load (s64) from %ir.uglygep77, !tbaa !8)
    %78:fpr64 = nofpexcept FMULDrr killed %76, killed %77
    %79:fpr64 = LDRDui %20, 7 :: (load (s64) from %ir.uglygep98, !tbaa !8)
    %80:fpr64 = nofpexcept FMULDrr killed %78, %79
    STRDui %80, %24, 7 :: (store (s64) into %ir.uglygep131, !tbaa !8)
    %81:fpr64 = LDRDui %24, 8 :: (load (s64) from %ir.uglygep135, !tbaa !8)
    %82:fpr64 = nofpexcept FMULDrr %80, killed %81
    %83:fpr64 = nofpexcept FMULDrr %79, killed %82
    STRDui killed %83, %13, 7 :: (store (s64) into %ir.uglygep56, !tbaa !8)
    %84:fpr64 = LDRDui %13, 8 :: (load (s64) from %ir.uglygep58, !tbaa !8)
    %85:fpr64 = LDRDui %16, 8 :: (load (s64) from %ir.uglygep79, !tbaa !8)
    %86:fpr64 = nofpexcept FMULDrr killed %84, killed %85
    %87:fpr64 = LDRDui %20, 8 :: (load (s64) from %ir.uglygep100, !tbaa !8)
    %88:fpr64 = nofpexcept FMULDrr killed %86, %87
    STRDui %88, %24, 8 :: (store (s64) into %ir.uglygep134, !tbaa !8)
    %89:fpr64 = LDRDui %24, 9 :: (load (s64) from %ir.uglygep126, !tbaa !8)
    %90:fpr64 = nofpexcept FMULDrr %88, killed %89
    %91:fpr64 = nofpexcept FMULDrr %87, killed %90
    STRDui killed %91, %13, 8 :: (store (s64) into %ir.uglygep58, !tbaa !8)
    %92:fpr64 = LDRDui %13, 9 :: (load (s64) from %ir.uglygep54, !tbaa !8)
    %93:fpr64 = LDRDui %16, 9 :: (load (s64) from %ir.uglygep73, !tbaa !8)
    %94:fpr64 = nofpexcept FMULDrr killed %92, killed %93
    %95:fpr64 = LDRDui %20, 9 :: (load (s64) from %ir.uglygep94, !tbaa !8)
    %96:fpr64 = nofpexcept FMULDrr killed %94, %95
    STRDui %96, %24, 9 :: (store (s64) into %ir.uglygep124, !tbaa !8)
    %97:fpr64 = LDRDui %24, 10 :: (load (s64) from %ir.uglygep110, !tbaa !8)
    %98:fpr64 = nofpexcept FMULDrr %96, killed %97
    %99:fpr64 = nofpexcept FMULDrr %95, killed %98
    STRDui killed %99, %13, 9 :: (store (s64) into %ir.uglygep54, !tbaa !8)
    %100:fpr64 = LDRDui %13, 10 :: (load (s64) from %ir.uglygep42, !tbaa !8)
    %101:fpr64 = LDRDui %16, 10 :: (load (s64) from %ir.uglygep63, !tbaa !8)
    %102:fpr64 = nofpexcept FMULDrr killed %100, killed %101
    %103:fpr64 = LDRDui %20, 10 :: (load (s64) from %ir.uglygep84, !tbaa !8)
    %104:fpr64 = nofpexcept FMULDrr killed %102, %103
    STRDui %104, %24, 10 :: (store (s64) into %ir.uglygep108, !tbaa !8)
    %105:fpr64 = LDRDui %24, 11 :: (load (s64) from %ir.uglygep106, !tbaa !8)
    %106:fpr64 = nofpexcept FMULDrr %104, killed %105
    %107:fpr64 = nofpexcept FMULDrr %103, killed %106
    STRDui killed %107, %13, 10 :: (store (s64) into %ir.uglygep42, !tbaa !8)
    %108:gpr64sp = nuw nsw ADDXri %3, 88, 0
    %5:gpr64all = COPY %108
    %109:gpr64 = SUBSXri %4, 1, 0, implicit-def $nzcv
    %6:gpr64all = COPY %109
    Bcc 1, %bb.4, implicit $nzcv
    B %bb.3

...
