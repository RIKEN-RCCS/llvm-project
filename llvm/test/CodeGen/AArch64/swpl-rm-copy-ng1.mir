# RUN: llc -start-before=aarch64-swpipeliner -O1 -fswp -mcpu=a64fx -o /dev/null -swpl-debug-loop %s 2>&1 | FileCheck %s
# CHECK: DBG(SwplLoop::print) ------------------ NewPreBodyMBB.
# CHECK-NEXT: bb.5.for.body:
# CHECK-NEXT:   successors: %bb.4(0x80000000); %bb.4(100.00%)
# CHECK:   %18:gpr64common = COPY %9:gpr64all
# CHECK-NEXT:   %19:gpr32 = COPY %10:gpr32all
# CHECK-NEXT:   %20:gpr64sp = COPY %0:gpr64all
# CHECK-NEXT: DBG(SwplLoop::print) ------------------ NewBodyMBB.
# CHECK-NEXT: bb.4.for.body:
# CHECK-NEXT: ; predecessors: %bb.5
# CHECK:   %21:gpr32 = COPY %18.sub_32:gpr64common
# CHECK-NEXT:   %22:gpr32 = ADDWrr %21:gpr32, %19:gpr32
# CHECK-NEXT:   STRWroX killed %22:gpr32, %7:gpr64common, %18:gpr64common, 0, 1 :: (store (s32) into %ir.uglygep, !tbaa !6)
# CHECK-NEXT:   %18:gpr64common = nuw nsw ADDXri %18:gpr64common, 1, 0
# CHECK-NEXT:   %20:gpr64sp = SUBSXri %20:gpr64sp, 1, 0, implicit-def $nzcv
# CHECK-NEXT:   %19:gpr32 = COPY %21:gpr32
# CHECK-NEXT:   B %bb.2
# CHECK-NEXT:   Bcc 1, %bb.3, implicit $nzcv


--- |
  ; ModuleID = 'ng.cpp'
  source_filename = "ng.cpp"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  ; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind writeonly uwtable vscale_range(1,16)
  define dso_local noundef i32 @_Z3subPjj(ptr nocapture noundef writeonly %B, i32 noundef %TC) local_unnamed_addr #0 {
  entry:
    %cmp5.not = icmp eq i32 %TC, 0
    br i1 %cmp5.not, label %for.cond.cleanup, label %for.body.preheader
  
  for.body.preheader:                               ; preds = %entry
    %wide.trip.count = zext i32 %TC to i64
    %0 = call i64 @llvm.start.loop.iterations.i64(i64 %wide.trip.count)
    br label %for.body
  
  for.cond.cleanup:                                 ; preds = %for.body, %entry
    ret i32 0
  
  for.body:                                         ; preds = %for.body.preheader, %for.body
    %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
    %for1.06 = phi i32 [ 33, %for.body.preheader ], [ %tmp, %for.body ]
    %1 = phi i64 [ %0, %for.body.preheader ], [ %5, %for.body ]
    %2 = zext i32 %for1.06 to i64
    %3 = add i64 %indvars.iv, %2
    %4 = shl nuw nsw i64 %indvars.iv, 2
    %uglygep = getelementptr i8, ptr %B, i64 %4
    %tmp9 = trunc i64 %3 to i32
    store i32 %tmp9, ptr %uglygep, align 4, !tbaa !6
    %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
    %tmp = trunc i64 %indvars.iv to i32
    %5 = call i64 @llvm.loop.decrement.reg.i64(i64 %1, i64 1)
    %6 = icmp ne i64 %5, 0
    br i1 %6, label %for.body, label %for.cond.cleanup, !llvm.loop !10
  }
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #1
  
  attributes #0 = { argmemonly mustprogress nofree norecurse nosync nounwind writeonly uwtable vscale_range(1,16) "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #1 = { nocallback noduplicate nofree nosync nounwind willreturn }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 7, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !5 = !{!"clang version 15.0.4 ()"}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"int", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C++ TBAA"}
  !10 = distinct !{!10, !11, !12}
  !11 = !{!"llvm.loop.mustprogress"}
  !12 = !{!"llvm.loop.unroll.disable"}

...
---
name:            _Z3subPjj
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr64all, preferred-register: '' }
  - { id: 1, class: gpr64common, preferred-register: '' }
  - { id: 2, class: gpr32, preferred-register: '' }
  - { id: 3, class: gpr64sp, preferred-register: '' }
  - { id: 4, class: gpr64all, preferred-register: '' }
  - { id: 5, class: gpr32, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr64common, preferred-register: '' }
  - { id: 8, class: gpr32, preferred-register: '' }
  - { id: 9, class: gpr64all, preferred-register: '' }
  - { id: 10, class: gpr32all, preferred-register: '' }
  - { id: 11, class: gpr32, preferred-register: '' }
  - { id: 12, class: gpr32, preferred-register: '' }
  - { id: 13, class: gpr64all, preferred-register: '' }
  - { id: 14, class: gpr32, preferred-register: '' }
  - { id: 15, class: gpr64sp, preferred-register: '' }
  - { id: 16, class: gpr64, preferred-register: '' }
  - { id: 17, class: gpr32all, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%7' }
  - { reg: '$w1', virtual-reg: '%8' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.2(0x30000000), %bb.1(0x50000000)
    liveins: $x0, $w1
  
    %8:gpr32 = COPY $w1
    %7:gpr64common = COPY $x0
    CBZW %8, %bb.2
    B %bb.1
  
  bb.1.for.body.preheader:
    successors: %bb.3(0x80000000)
  
    %11:gpr32 = ORRWrs $wzr, %8, 0
    %0:gpr64all = SUBREG_TO_REG 0, killed %11, %subreg.sub_32
    %12:gpr32 = MOVi32imm 33
    %10:gpr32all = COPY %12
    %13:gpr64all = COPY $xzr
    %9:gpr64all = COPY %13
    B %bb.3
  
  bb.2.for.cond.cleanup:
    %17:gpr32all = COPY $wzr
    $w0 = COPY %17
    RET_ReallyLR implicit $w0
  
  bb.3.for.body:
    successors: %bb.3(0x7c000000), %bb.2(0x04000000)
  
    %1:gpr64common = PHI %9, %bb.1, %4, %bb.3
    %2:gpr32 = PHI %10, %bb.1, %5, %bb.3
    %3:gpr64sp = PHI %0, %bb.1, %6, %bb.3
    %5:gpr32 = COPY %1.sub_32
    %14:gpr32 = ADDWrr %5, %2
    STRWroX killed %14, %7, %1, 0, 1 :: (store (s32) into %ir.uglygep, !tbaa !6)
    %15:gpr64sp = nuw nsw ADDXri %1, 1, 0
    %4:gpr64all = COPY %15
    %16:gpr64 = SUBSXri %3, 1, 0, implicit-def $nzcv
    %6:gpr64all = COPY %16
    Bcc 1, %bb.3, implicit $nzcv
    B %bb.2

...
