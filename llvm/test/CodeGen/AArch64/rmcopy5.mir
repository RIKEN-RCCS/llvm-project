# RUN: llc -mcpu=a64fx -O1 -fswp -start-before=aarch64-swpipeliner -o /dev/null  -swpl-debug %s 2>&1 | FileCheck %s
#CHECK: DBG(SwplLoop::removeCopy)
#CHECK-NEXT:  target mi: %96:zpr = COPY %94:zpr, debug-location !17; s128.c:40:19
#CHECK-NEXT:  before: SST1D_SCALED killed %109:zpr, %34:ppr_3b, killed %110:gpr64sp, %96:zpr, debug-location !28 :: (store unknown-size, align 8, !tbaa !20); s128.c:43:18
#CHECK-NEXT:  after: SST1D_SCALED killed %109:zpr, %34:ppr_3b, killed %110:gpr64sp, %94:zpr, debug-location !28 :: (store unknown-size, align 8, !tbaa !20); s128.c:43:18
#CHECK-NEXT:  removed!
#CHECK: DBG(SwplLoop::removeCopy)
#CHECK-NEXT:  target mi: %99:gpr64sp = COPY %98.dsub:zpr, debug-location !17; s128.c:40:19
#CHECK: DBG(SwplLoop::removeCopy)
#CHECK-NEXT:  target mi: %101:zpr = COPY %100.zsub0:zpr2, debug-location !18; s128.c:41:20
#CHECK-NEXT:  before: %104:zpr = FSUB_ZZZ_D killed %101:zpr, killed %103:zpr, debug-location !24; s128.c:41:25
#CHECK-NEXT:  after: %104:zpr = FSUB_ZZZ_D %100.zsub0:zpr2, killed %103:zpr, debug-location !24; s128.c:41:25
#CHECK-NEXT:  removed!
#CHECK: DBG(SwplLoop::removeCopy)
#CHECK-NEXT:  target mi: %106:gpr64common = COPY %97.dsub:zpr, debug-location !26; s128.c:43:27
#CHECK: DBG(SwplLoop::removeCopy)
#CHECK-NEXT:  target mi: %108:zpr = COPY %107.zsub0:zpr2, debug-location !26; s128.c:43:27
#CHECK-NEXT:  before: %109:zpr = FADD_ZZZ_D killed %108:zpr, %104:zpr, debug-location !27; s128.c:43:25
#CHECK-NEXT:  after: %109:zpr = FADD_ZZZ_D %107.zsub0:zpr2, %104:zpr, debug-location !27; s128.c:43:25
#CHECK-NEXT:  removed!
#CHECK: DBG(SwplLoop::removeCopy)
#CHECK-NEXT:  target mi: %113:gpr64all = COPY %112:gpr64sp, debug-location !16; s128.c:39:40
#CHECK-NEXT:  before: %93:gpr64common = PHI %23:gpr64all, %bb.1, %113:gpr64all, %bb.2, debug-location !16; s128.c:39:40
#CHECK-NEXT:  after: %93:gpr64common = PHI %23:gpr64all, %bb.1, %112:gpr64sp, %bb.2, debug-location !16; s128.c:39:40
#CHECK-NEXT:  removed!
#CHECK: DBG(SwplLoop::removeCopy)
#CHECK-NEXT:  target mi: %115:gpr64all = COPY %114:gpr64, debug-location !16; s128.c:39:40
#CHECK-NEXT:  before: %95:gpr64sp = PHI %1:gpr64all, %bb.1, %115:gpr64all, %bb.2, debug-location !17; s128.c:40:19
#CHECK-NEXT:  after: %95:gpr64sp = PHI %1:gpr64all, %bb.1, %114:gpr64, %bb.2, debug-location !17; s128.c:40:19
#CHECK-NEXT:  removed!
#CHECK: DBG(SwplLoop::removeCopy)
#CHECK-NEXT:  target mi: %204:gpr64all = COPY %203:gpr64sp, debug-location !43; s128.c:39:27
#CHECK-NEXT:  before: %194:gpr64common = PHI %56:gpr64all, %bb.3, %204:gpr64all, %bb.6
#CHECK-NEXT:  after: %194:gpr64common = PHI %56:gpr64all, %bb.3, %203:gpr64sp, %bb.6
#CHECK-NEXT:  removed!
#CHECK: DBG(SwplLoop::removeCopy)
#CHECK-NEXT:  target mi: %206:gpr64all = COPY %205:gpr64sp, debug-location !43; s128.c:39:27
#CHECK-NEXT:  before: %193:gpr64common = PHI %55:gpr64all, %bb.3, %206:gpr64all, %bb.6
#CHECK-NEXT:  after: %193:gpr64common = PHI %55:gpr64all, %bb.3, %205:gpr64sp, %bb.6
#CHECK-NEXT:  removed!
#CHECK: DBG(SwplLoop::removeCopy)
#CHECK-NEXT:  target mi: %208:gpr64all = COPY %207:gpr64, debug-location !15; s128.c:39:9
#CHECK-NEXT:  before: %195:gpr64sp = PHI %8:gpr64all, %bb.3, %208:gpr64all, %bb.6, debug-location !18; s128.c:41:20
#CHECK-NEXT:  after: %195:gpr64sp = PHI %8:gpr64all, %bb.3, %207:gpr64, %bb.6, debug-location !18; s128.c:41:20
#CHECK-NEXT:  removed!
--- |
  ; ModuleID = 's128.c'
  source_filename = "s128.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  %struct.args_t = type { %struct.timeval, %struct.timeval, ptr }
  %struct.timeval = type { i64, i64 }
  
  @__func__.s128 = private unnamed_addr constant [5 x i8] c"s128\00", align 1
  @b = external global [32000 x double], align 64
  @d = external global [32000 x double], align 64
  @a = external global [32000 x double], align 64
  @c = external global [32000 x double], align 64
  @e = external global [32000 x double], align 64
  @aa = external global [256 x [256 x double]], align 64
  @bb = external global [256 x [256 x double]], align 64
  @cc = external global [256 x [256 x double]], align 64
  
  ; Function Attrs: nounwind uwtable vscale_range(4,4)
  define dso_local double @s128(ptr nocapture noundef %func_args) local_unnamed_addr #0 !dbg !9 {
  entry:
    %call = tail call i32 @initialise_arrays(ptr noundef nonnull @__func__.s128) #8, !dbg !12
    %call1 = tail call i32 @gettimeofday(ptr noundef %func_args, ptr noundef null) #8, !dbg !13
    br label %vector.ph, !dbg !14
  
  vector.ph:                                        ; preds = %for.cond.cleanup4, %entry
    %nl.035 = phi i32 [ 0, %entry ], [ %inc20, %for.cond.cleanup4 ]
    %0 = call i64 @llvm.start.loop.iterations.i64(i64 1999), !dbg !15
    br label %vector.body, !dbg !15
  
  vector.body:                                      ; preds = %vector.body, %vector.ph
    %lsr.iv = phi i64 [ %lsr.iv.next, %vector.body ], [ -127936, %vector.ph ], !dbg !16
    %vec.ind = phi <8 x i64> [ <i64 -1, i64 1, i64 3, i64 5, i64 7, i64 9, i64 11, i64 13>, %vector.ph ], [ %vec.ind.next, %vector.body ]
    %1 = phi i64 [ %0, %vector.ph ], [ %16, %vector.body ], !dbg !17
    %2 = add nsw <8 x i64> %vec.ind, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>, !dbg !17
    %3 = getelementptr inbounds [32000 x double], ptr @b, i64 0, <8 x i64> %2, !dbg !17
    %4 = extractelement <8 x ptr> %3, i64 0, !dbg !17
    %5 = call <vscale x 2 x i1> @llvm.aarch64.sve.ptrue.nxv2i1(i32 31), !dbg !18
    %ldN = call { <vscale x 2 x double>, <vscale x 2 x double> } @llvm.aarch64.sve.ld2.sret.nxv2f64(<vscale x 2 x i1> %5, ptr %4), !dbg !18
    %6 = extractvalue { <vscale x 2 x double>, <vscale x 2 x double> } %ldN, 0, !dbg !18
    %7 = call <8 x double> @llvm.vector.extract.v8f64.nxv2f64(<vscale x 2 x double> %6, i64 0), !dbg !18
    %uglygep = getelementptr i8, ptr @d, i64 %lsr.iv, !dbg !19
    %uglygep49 = getelementptr i8, ptr %uglygep, i64 127936, !dbg !19
    %wide.load = load <8 x double>, ptr %uglygep49, align 64, !dbg !19, !tbaa !20
    %8 = fsub fast <8 x double> %7, %wide.load, !dbg !24
    %uglygep50 = getelementptr i8, ptr @a, i64 %lsr.iv, !dbg !25
    %uglygep51 = getelementptr i8, ptr %uglygep50, i64 127936, !dbg !25
    store <8 x double> %8, ptr %uglygep51, align 64, !dbg !25, !tbaa !20
    %9 = extractelement <8 x i64> %2, i64 0, !dbg !26
    %10 = getelementptr inbounds [32000 x double], ptr @c, i64 0, i64 %9, !dbg !26
    %11 = call <vscale x 2 x i1> @llvm.aarch64.sve.ptrue.nxv2i1(i32 31), !dbg !26
    %ldN60 = call { <vscale x 2 x double>, <vscale x 2 x double> } @llvm.aarch64.sve.ld2.sret.nxv2f64(<vscale x 2 x i1> %11, ptr %10), !dbg !26
    %12 = extractvalue { <vscale x 2 x double>, <vscale x 2 x double> } %ldN60, 0, !dbg !26
    %13 = call <8 x double> @llvm.vector.extract.v8f64.nxv2f64(<vscale x 2 x double> %12, i64 0), !dbg !26
    %14 = fadd fast <8 x double> %13, %8, !dbg !27
    %15 = getelementptr double, ptr @b, <8 x i64> %2, !dbg !28
    tail call void @llvm.masked.scatter.v8f64.v8p0(<8 x double> %14, <8 x ptr> %15, i32 8, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !dbg !28, !tbaa !20
    %vec.ind.next = add <8 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
    %lsr.iv.next = add nsw i64 %lsr.iv, 64, !dbg !16
    %16 = call i64 @llvm.loop.decrement.reg.i64(i64 %1, i64 1), !dbg !16
    %17 = icmp ne i64 %16, 0, !dbg !16
    br i1 %17, label %vector.body, label %for.body5.preheader, !dbg !16, !llvm.loop !29
  
  for.body5.preheader:                              ; preds = %vector.body
    %18 = call i64 @llvm.start.loop.iterations.i64(i64 8), !dbg !15
    br label %for.body5, !dbg !15
  
  for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
    %t2 = getelementptr inbounds %struct.args_t, ptr %func_args, i64 0, i32 1, !dbg !34
    %call22 = tail call i32 @gettimeofday(ptr noundef nonnull %t2, ptr noundef null) #8, !dbg !35
    %call23 = tail call fast double @calc_checksum(ptr noundef nonnull @__func__.s128) #8, !dbg !36
    ret double %call23, !dbg !37
  
  for.cond.cleanup4:                                ; preds = %for.body5
    %call18 = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, double noundef 1.000000e+00) #8, !dbg !38
    %inc20 = add nuw nsw i32 %nl.035, 1, !dbg !39
    %exitcond42.not = icmp eq i32 %inc20, 200000, !dbg !40
    br i1 %exitcond42.not, label %for.cond.cleanup, label %vector.ph, !dbg !14, !llvm.loop !41
  
  for.body5:                                        ; preds = %for.body5.preheader, %for.body5
    %lsr.iv56 = phi i64 [ 0, %for.body5.preheader ], [ %lsr.iv.next57, %for.body5 ]
    %lsr.iv52 = phi i64 [ 255872, %for.body5.preheader ], [ %lsr.iv.next53, %for.body5 ]
    %19 = phi i64 [ %18, %for.body5.preheader ], [ %23, %for.body5 ], !dbg !18
    %uglygep55 = getelementptr i8, ptr @b, i64 %lsr.iv52, !dbg !18
    %20 = load double, ptr %uglygep55, align 8, !dbg !18, !tbaa !20
    %uglygep59 = getelementptr i8, ptr getelementptr (i8, ptr @d, i64 127936), i64 %lsr.iv56, !dbg !19
    %21 = load double, ptr %uglygep59, align 8, !dbg !19, !tbaa !20
    %sub = fsub fast double %20, %21, !dbg !24
    %uglygep58 = getelementptr i8, ptr getelementptr (i8, ptr @a, i64 127936), i64 %lsr.iv56, !dbg !25
    store double %sub, ptr %uglygep58, align 8, !dbg !25, !tbaa !20
    %uglygep54 = getelementptr i8, ptr @c, i64 %lsr.iv52, !dbg !26
    %22 = load double, ptr %uglygep54, align 8, !dbg !26, !tbaa !20
    %add15 = fadd fast double %22, %sub, !dbg !27
    store double %add15, ptr %uglygep55, align 8, !dbg !28, !tbaa !20
    %lsr.iv.next53 = add nuw nsw i64 %lsr.iv52, 16, !dbg !43
    %lsr.iv.next57 = add nuw nsw i64 %lsr.iv56, 8, !dbg !43
    %23 = call i64 @llvm.loop.decrement.reg.i64(i64 %19, i64 1), !dbg !15
    %24 = icmp ne i64 %23, 0, !dbg !15
    br i1 %24, label %for.body5, label %for.cond.cleanup4, !dbg !15, !llvm.loop !44
  }
  
  declare i32 @initialise_arrays(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nofree nounwind
  declare noundef i32 @gettimeofday(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #2
  
  declare i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, double noundef) local_unnamed_addr #1
  
  declare double @calc_checksum(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nocallback nofree nosync nounwind willreturn writeonly
  declare void @llvm.masked.scatter.v8f64.v8p0(<8 x double>, <8 x ptr>, i32 immarg, <8 x i1>) #3
  
  ; Function Attrs: argmemonly nocallback nofree nosync nounwind readonly willreturn
  declare { <vscale x 2 x double>, <vscale x 2 x double> } @llvm.aarch64.sve.ld2.sret.nxv2f64(<vscale x 2 x i1>, ptr) #4
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
  declare <vscale x 2 x i1> @llvm.aarch64.sve.ptrue.nxv2i1(i32 immarg) #5
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare <8 x double> @llvm.vector.extract.v8f64.nxv2f64(<vscale x 2 x double>, i64 immarg) #6
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #7
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #7
  
  attributes #0 = { nounwind uwtable vscale_range(4,4) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #1 = { "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #2 = { nofree nounwind "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #3 = { nocallback nofree nosync nounwind willreturn writeonly }
  attributes #4 = { argmemonly nocallback nofree nosync nounwind readonly willreturn }
  attributes #5 = { nocallback nofree nosync nounwind readnone willreturn }
  attributes #6 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
  attributes #7 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #8 = { nounwind }
  
  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!2, !3, !4, !5, !6, !7}
  !llvm.ident = !{!8}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 15.0.4 ()", isOptimized: true, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "s128.c", directory: "/src_sep_optnone")
  !2 = !{i32 2, !"Debug Info Version", i32 3}
  !3 = !{i32 1, !"wchar_size", i32 4}
  !4 = !{i32 7, !"PIC Level", i32 2}
  !5 = !{i32 7, !"PIE Level", i32 2}
  !6 = !{i32 7, !"uwtable", i32 2}
  !7 = !{i32 7, !"frame-pointer", i32 1}
  !8 = !{!"clang version 15.0.4 ()"}
  !9 = distinct !DISubprogram(name: "s128", scope: !1, file: !1, line: 26, type: !10, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !11)
  !10 = !DISubroutineType(types: !11)
  !11 = !{}
  !12 = !DILocation(line: 33, column: 5, scope: !9)
  !13 = !DILocation(line: 34, column: 5, scope: !9)
  !14 = !DILocation(line: 37, column: 5, scope: !9)
  !15 = !DILocation(line: 39, column: 9, scope: !9)
  !16 = !DILocation(line: 39, column: 40, scope: !9)
  !17 = !DILocation(line: 40, column: 19, scope: !9)
  !18 = !DILocation(line: 41, column: 20, scope: !9)
  !19 = !DILocation(line: 41, column: 27, scope: !9)
  !20 = !{!21, !21, i64 0}
  !21 = !{!"double", !22, i64 0}
  !22 = !{!"omnipotent char", !23, i64 0}
  !23 = !{!"Simple C/C++ TBAA"}
  !24 = !DILocation(line: 41, column: 25, scope: !9)
  !25 = !DILocation(line: 41, column: 18, scope: !9)
  !26 = !DILocation(line: 43, column: 27, scope: !9)
  !27 = !DILocation(line: 43, column: 25, scope: !9)
  !28 = !DILocation(line: 43, column: 18, scope: !9)
  !29 = distinct !{!29, !15, !30, !31, !32, !33}
  !30 = !DILocation(line: 44, column: 9, scope: !9)
  !31 = !{!"llvm.loop.mustprogress"}
  !32 = !{!"llvm.loop.unroll.disable"}
  !33 = !{!"llvm.loop.isvectorized", i32 1}
  !34 = !DILocation(line: 48, column: 30, scope: !9)
  !35 = !DILocation(line: 48, column: 5, scope: !9)
  !36 = !DILocation(line: 49, column: 12, scope: !9)
  !37 = !DILocation(line: 49, column: 5, scope: !9)
  !38 = !DILocation(line: 45, column: 9, scope: !9)
  !39 = !DILocation(line: 37, column: 43, scope: !9)
  !40 = !DILocation(line: 37, column: 25, scope: !9)
  !41 = distinct !{!41, !14, !42, !31, !32}
  !42 = !DILocation(line: 46, column: 5, scope: !9)
  !43 = !DILocation(line: 39, column: 27, scope: !9)
  !44 = distinct !{!44, !15, !30, !31, !32, !33}

...
---
name:            s128
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32sp, preferred-register: '' }
  - { id: 1, class: gpr64all, preferred-register: '' }
  - { id: 2, class: gpr64common, preferred-register: '' }
  - { id: 3, class: zpr, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: zpr, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr64all, preferred-register: '' }
  - { id: 8, class: gpr64all, preferred-register: '' }
  - { id: 9, class: gpr32all, preferred-register: '' }
  - { id: 10, class: gpr64common, preferred-register: '' }
  - { id: 11, class: gpr64common, preferred-register: '' }
  - { id: 12, class: gpr64sp, preferred-register: '' }
  - { id: 13, class: gpr64all, preferred-register: '' }
  - { id: 14, class: gpr64all, preferred-register: '' }
  - { id: 15, class: gpr64all, preferred-register: '' }
  - { id: 16, class: gpr64common, preferred-register: '' }
  - { id: 17, class: gpr32all, preferred-register: '' }
  - { id: 18, class: gpr64common, preferred-register: '' }
  - { id: 19, class: gpr32all, preferred-register: '' }
  - { id: 20, class: gpr64all, preferred-register: '' }
  - { id: 21, class: gpr32all, preferred-register: '' }
  - { id: 22, class: gpr32all, preferred-register: '' }
  - { id: 23, class: gpr64all, preferred-register: '' }
  - { id: 24, class: zpr, preferred-register: '' }
  - { id: 25, class: zpr, preferred-register: '' }
  - { id: 26, class: zpr, preferred-register: '' }
  - { id: 27, class: gpr64, preferred-register: '' }
  - { id: 28, class: gpr32, preferred-register: '' }
  - { id: 29, class: zpr, preferred-register: '' }
  - { id: 30, class: zpr, preferred-register: '' }
  - { id: 31, class: gpr64common, preferred-register: '' }
  - { id: 32, class: zpr, preferred-register: '' }
  - { id: 33, class: zpr, preferred-register: '' }
  - { id: 34, class: ppr_3b, preferred-register: '' }
  - { id: 35, class: gpr64sp, preferred-register: '' }
  - { id: 36, class: zpr2, preferred-register: '' }
  - { id: 37, class: zpr, preferred-register: '' }
  - { id: 38, class: gpr64common, preferred-register: '' }
  - { id: 39, class: gpr64common, preferred-register: '' }
  - { id: 40, class: gpr64common, preferred-register: '' }
  - { id: 41, class: zpr, preferred-register: '' }
  - { id: 42, class: zpr, preferred-register: '' }
  - { id: 43, class: gpr64common, preferred-register: '' }
  - { id: 44, class: gpr64common, preferred-register: '' }
  - { id: 45, class: gpr64common, preferred-register: '' }
  - { id: 46, class: gpr64common, preferred-register: '' }
  - { id: 47, class: zpr2, preferred-register: '' }
  - { id: 48, class: zpr, preferred-register: '' }
  - { id: 49, class: zpr, preferred-register: '' }
  - { id: 50, class: gpr64sp, preferred-register: '' }
  - { id: 51, class: zpr, preferred-register: '' }
  - { id: 52, class: zpr, preferred-register: '' }
  - { id: 53, class: gpr64sp, preferred-register: '' }
  - { id: 54, class: gpr64, preferred-register: '' }
  - { id: 55, class: gpr64all, preferred-register: '' }
  - { id: 56, class: gpr64all, preferred-register: '' }
  - { id: 57, class: gpr64all, preferred-register: '' }
  - { id: 58, class: gpr32, preferred-register: '' }
  - { id: 59, class: gpr32, preferred-register: '' }
  - { id: 60, class: gpr64common, preferred-register: '' }
  - { id: 61, class: fpr64, preferred-register: '' }
  - { id: 62, class: gpr64common, preferred-register: '' }
  - { id: 63, class: gpr64common, preferred-register: '' }
  - { id: 64, class: gpr32, preferred-register: '' }
  - { id: 65, class: gpr64, preferred-register: '' }
  - { id: 66, class: fpr64, preferred-register: '' }
  - { id: 67, class: fpr64, preferred-register: '' }
  - { id: 68, class: gpr64common, preferred-register: '' }
  - { id: 69, class: gpr64common, preferred-register: '' }
  - { id: 70, class: gpr64common, preferred-register: '' }
  - { id: 71, class: fpr64, preferred-register: '' }
  - { id: 72, class: fpr64, preferred-register: '' }
  - { id: 73, class: gpr64sp, preferred-register: '' }
  - { id: 74, class: gpr64sp, preferred-register: '' }
  - { id: 75, class: gpr64, preferred-register: '' }
  - { id: 76, class: gpr64common, preferred-register: '' }
  - { id: 77, class: gpr64common, preferred-register: '' }
  - { id: 78, class: gpr64common, preferred-register: '' }
  - { id: 79, class: gpr64common, preferred-register: '' }
  - { id: 80, class: gpr64common, preferred-register: '' }
  - { id: 81, class: gpr64common, preferred-register: '' }
  - { id: 82, class: gpr64common, preferred-register: '' }
  - { id: 83, class: gpr64common, preferred-register: '' }
  - { id: 84, class: fpr64, preferred-register: '' }
  - { id: 85, class: gpr32all, preferred-register: '' }
  - { id: 86, class: gpr32common, preferred-register: '' }
  - { id: 87, class: gpr32, preferred-register: '' }
  - { id: 88, class: gpr32, preferred-register: '' }
  - { id: 89, class: gpr64sp, preferred-register: '' }
  - { id: 90, class: gpr64all, preferred-register: '' }
  - { id: 91, class: gpr32all, preferred-register: '' }
  - { id: 92, class: gpr64common, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%16' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     true
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $x0
  
    %16:gpr64common = COPY $x0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !12
    %18:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s128, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s128, debug-location !12
    $x0 = COPY %18, debug-location !12
    BL @initialise_arrays, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0, debug-location !12
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !12
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !13
    %20:gpr64all = COPY $xzr
    $x0 = COPY %16, debug-location !13
    $x1 = COPY %20, debug-location !13
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0, debug-location !13
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !13
    %22:gpr32all = COPY $wzr
    %17:gpr32all = COPY %22
    %25:zpr = INDEX_II_D -1, 2
    %28:gpr32 = MOVi32imm 1999
    %31:gpr64common = LOADgot target-flags(aarch64-got) @b
    %32:zpr = DUP_ZR_D %31
    %34:ppr_3b = PTRUE_D 31
    %38:gpr64common = LOADgot target-flags(aarch64-got) @d
    %40:gpr64common = MOVi64imm 15992
    %43:gpr64common = LOADgot target-flags(aarch64-got) @a
    %46:gpr64common = LOADgot target-flags(aarch64-got) @c
    %58:gpr32 = MOVi32imm 255872
    %59:gpr32 = MOVi32imm 8
    %64:gpr32 = MOVi32imm 127936
    %65:gpr64 = SUBREG_TO_REG 0, %64, %subreg.sub_32
    %80:gpr64common = LOADgot target-flags(aarch64-got) @e
    %81:gpr64common = LOADgot target-flags(aarch64-got) @aa
    %82:gpr64common = LOADgot target-flags(aarch64-got) @bb
    %83:gpr64common = LOADgot target-flags(aarch64-got) @cc
    %84:fpr64 = FMOVDi 112
    %87:gpr32 = MOVi32imm 200000
  
  bb.1.vector.ph:
    successors: %bb.2(0x80000000)
  
    %0:gpr32sp = PHI %17, %bb.0, %9, %bb.5
    %26:zpr = COPY %25
    %27:gpr64 = MOVi64imm -127936
    %23:gpr64all = COPY %27
    %24:zpr = COPY %26
    %1:gpr64all = SUBREG_TO_REG 0, %28, %subreg.sub_32
  
  bb.2.vector.body:
    successors: %bb.2(0x7c000000), %bb.3(0x04000000)
  
    %2:gpr64common = PHI %23, %bb.1, %6, %bb.2, debug-location !16
    %3:zpr = PHI %24, %bb.1, %51, %bb.2
    %4:gpr64sp = PHI %1, %bb.1, %7, %bb.2, debug-location !17
    %29:zpr = COPY %3, debug-location !17
    %30:zpr = ADD_ZI_D %3, 1, 0, debug-location !17
    %33:zpr = ADR_LSL_ZZZ_D_3 %32, %30, debug-location !17
    %35:gpr64sp = COPY %33.dsub, debug-location !17
    %36:zpr2 = LD2D_IMM %34, killed %35, 0, debug-location !18
    %37:zpr = COPY %36.zsub0, debug-location !18
    %39:gpr64common = ADDXrr %38, %2, debug-location !19
    %41:zpr = LD1D %34, killed %39, %40, debug-location !19 :: (load (s512) from %ir.uglygep49, !tbaa !20)
    %42:zpr = FSUB_ZZZ_D killed %37, killed %41, debug-location !24
    %44:gpr64common = ADDXrr %43, %2, debug-location !25
    ST1D %42, %34, killed %44, %40, debug-location !25 :: (store (s512) into %ir.uglygep51, !tbaa !20)
    %45:gpr64common = COPY %30.dsub, debug-location !26
    %47:zpr2 = LD2D %34, %46, killed %45, debug-location !26
    %48:zpr = COPY %47.zsub0, debug-location !26
    %49:zpr = FADD_ZZZ_D killed %48, %42, debug-location !27
    %50:gpr64sp = ADDXri %31, 8, 0, debug-location !28
    SST1D_SCALED killed %49, %34, killed %50, %29, debug-location !28 :: (store unknown-size, align 8, !tbaa !20)
    %51:zpr = ADD_ZI_D %3, 16, 0
    %53:gpr64sp = nsw ADDXri %2, 64, 0, debug-location !16
    %6:gpr64all = COPY %53, debug-location !16
    %54:gpr64 = SUBSXri %4, 1, 0, implicit-def $nzcv, debug-location !16
    %7:gpr64all = COPY %54, debug-location !16
    Bcc 1, %bb.2, implicit $nzcv, debug-location !16
    B %bb.3, debug-location !16
  
  bb.3.for.body5.preheader:
    successors: %bb.6(0x80000000)
  
    %57:gpr64all = COPY $xzr
    %55:gpr64all = COPY %57
    %56:gpr64all = SUBREG_TO_REG 0, %58, %subreg.sub_32
    %8:gpr64all = SUBREG_TO_REG 0, %59, %subreg.sub_32
    B %bb.6, debug-location !15
  
  bb.4.for.cond.cleanup:
    %89:gpr64sp = nuw ADDXri %16, 16, 0, debug-location !34
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !35
    %90:gpr64all = COPY $xzr
    $x0 = COPY %89, debug-location !35
    $x1 = COPY %90, debug-location !35
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0, debug-location !35
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !35
    %92:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s128, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s128, debug-location !36
    $x0 = COPY %92, debug-location !36
    TCRETURNdi @calc_checksum, 0, csr_aarch64_aapcs, implicit $sp, implicit $x0, debug-location !36
  
  bb.5.for.cond.cleanup4:
    successors: %bb.4(0x04000000), %bb.1(0x7c000000)
  
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !38
    $x0 = COPY %43, debug-location !38
    $x1 = COPY %31, debug-location !38
    $x2 = COPY %46, debug-location !38
    $x3 = COPY %38, debug-location !38
    $x4 = COPY %80, debug-location !38
    $x5 = COPY %81, debug-location !38
    $x6 = COPY %82, debug-location !38
    $x7 = COPY %83, debug-location !38
    $d0 = COPY %84, debug-location !38
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $d0, implicit-def $sp, implicit-def $w0, debug-location !38
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !38
    %86:gpr32common = nuw nsw ADDWri %0, 1, 0, debug-location !39
    %9:gpr32all = COPY %86, debug-location !39
    dead $wzr = SUBSWrr %86, %87, implicit-def $nzcv, debug-location !14
    Bcc 0, %bb.4, implicit $nzcv, debug-location !14
    B %bb.1, debug-location !14
  
  bb.6.for.body5:
    successors: %bb.6(0x7c000000), %bb.5(0x04000000)
  
    %10:gpr64common = PHI %55, %bb.3, %14, %bb.6
    %11:gpr64common = PHI %56, %bb.3, %13, %bb.6
    %12:gpr64sp = PHI %8, %bb.3, %15, %bb.6, debug-location !18
    %61:fpr64 = LDRDroX %31, %11, 0, 0, debug-location !18 :: (load (s64) from %ir.uglygep55, !tbaa !20)
    %63:gpr64common = ADDXrr %38, %10, debug-location !19
    %66:fpr64 = LDRDroX %63, %65, 0, 0, debug-location !19 :: (load (s64) from %ir.uglygep59, !tbaa !20)
    %67:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FSUBDrr killed %61, killed %66, debug-location !24
    %69:gpr64common = ADDXrr %43, %10, debug-location !25
    STRDroX %67, %69, %65, 0, 0, debug-location !25 :: (store (s64) into %ir.uglygep58, !tbaa !20)
    %71:fpr64 = LDRDroX %46, %11, 0, 0, debug-location !26 :: (load (s64) from %ir.uglygep54, !tbaa !20)
    %72:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %71, %67, debug-location !27
    STRDroX killed %72, %31, %11, 0, 0, debug-location !28 :: (store (s64) into %ir.uglygep55, !tbaa !20)
    %73:gpr64sp = nuw nsw ADDXri %11, 16, 0, debug-location !43
    %13:gpr64all = COPY %73, debug-location !43
    %74:gpr64sp = nuw nsw ADDXri %10, 8, 0, debug-location !43
    %14:gpr64all = COPY %74, debug-location !43
    %75:gpr64 = SUBSXri %12, 1, 0, implicit-def $nzcv, debug-location !15
    %15:gpr64all = COPY %75, debug-location !15
    Bcc 1, %bb.6, implicit $nzcv, debug-location !15
    B %bb.5, debug-location !15

...
