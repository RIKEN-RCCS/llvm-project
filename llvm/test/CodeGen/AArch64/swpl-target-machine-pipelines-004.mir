#RUN: llc %s -mcpu=a64fx -ffj-swp -O1 -swpl-debug-dump-resource-filter=".*" -start-before=aarch64-swpipeliner -o /dev/null 2>&1 | FileCheck %s

#CHECK:DBG(AArch64SwplTargetMachine::getPipelines): MI: %361:gpr64 = MADDXrrr killed %359:gpr64common, killed %360:gpr64, $xzr
#CHECK-NEXT:  ResourceID: INT_OP+7
#CHECK-NEXT:  latency: 5
#CHECK-NEXT:  seqDecode: false
#CHECK-NEXT:  stage/resource(): 0/EXA

#CHECK:DBG(AArch64SwplTargetMachine::getPipelines): MI: %364:gpr64 = UMADDLrrr %355:gpr32common, %70:gpr32, $xzr
#CHECK-NEXT:  ResourceID: INT_OP+7
#CHECK-NEXT:  latency: 5
#CHECK-NEXT:  seqDecode: false
#CHECK-NEXT:  stage/resource(): 0/EXA

#CHECK:DBG(AArch64SwplTargetMachine::getPipelines): MI: %391:gpr32 = MADDWrrr killed %363:gpr32, %75:gpr32, %358:gpr32
#CHECK-NEXT:  ResourceID: INT_OP+8
#CHECK-NEXT:  latency: 6
#CHECK-NEXT:  seqDecode: false
#CHECK-NEXT:  stage/resource(): 0/EXA, 5/EXA

--- |
  ; ModuleID = '/TSVC_2/src_sep_optnone/s315.c'
  source_filename = "/TSVC_2/src_sep_optnone/s315.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  %struct.args_t = type { %struct.timeval, %struct.timeval, ptr }
  %struct.timeval = type { i64, i64 }
  
  @__func__.s315 = private unnamed_addr constant [5 x i8] c"s315\00", align 1
  @a = external global [32000 x double], align 64
  @b = external global [32000 x double], align 64
  @c = external global [32000 x double], align 64
  @d = external global [32000 x double], align 64
  @e = external global [32000 x double], align 64
  @aa = external global [256 x [256 x double]], align 64
  @bb = external global [256 x [256 x double]], align 64
  @cc = external global [256 x [256 x double]], align 64
  
  ; Function Attrs: nounwind uwtable vscale_range(1,16)
  define dso_local double @s315(ptr nocapture noundef %func_args) local_unnamed_addr #0 {
  entry:
    %call = tail call i32 @initialise_arrays(ptr noundef nonnull @__func__.s315) #4
    %call1 = tail call i32 @gettimeofday(ptr noundef %func_args, ptr noundef null) #4
    %0 = call i64 @llvm.start.loop.iterations.i64(i64 3200)
    br label %for.body
  
  for.body:                                         ; preds = %for.body, %entry
    %lsr.iv277 = phi i32 [ %lsr.iv.next278, %for.body ], [ 56, %entry ]
    %lsr.iv274 = phi i32 [ %lsr.iv.next275, %for.body ], [ 63, %entry ]
    %lsr.iv271 = phi i32 [ %lsr.iv.next272, %for.body ], [ 7, %entry ]
    %lsr.iv268 = phi i32 [ %lsr.iv.next269, %for.body ], [ 49, %entry ]
    %lsr.iv265 = phi i32 [ %lsr.iv.next266, %for.body ], [ 42, %entry ]
    %lsr.iv262 = phi i32 [ %lsr.iv.next263, %for.body ], [ 35, %entry ]
    %lsr.iv259 = phi i32 [ %lsr.iv.next260, %for.body ], [ 28, %entry ]
    %lsr.iv248 = phi ptr [ %uglygep249, %for.body ], [ getelementptr (i8, ptr @a, i64 40), %entry ]
    %lsr.iv245 = phi i32 [ %lsr.iv.next246, %for.body ], [ 21, %entry ]
    %lsr.iv242 = phi i32 [ %lsr.iv.next243, %for.body ], [ 14, %entry ]
    %lsr.iv = phi i64 [ %lsr.iv.next, %for.body ], [ 0, %entry ]
    %1 = phi i64 [ %0, %entry ], [ %51, %for.body ]
    %lsr280 = trunc i64 %lsr.iv to i32
    %2 = udiv i32 %lsr280, 32000
    %3 = mul i32 %2, -32000
    %4 = zext i32 %3 to i64
    %5 = udiv i32 %lsr.iv242, 32000
    %6 = mul i32 %5, -32000
    %7 = zext i32 %6 to i64
    %8 = add nuw nsw i64 %7, 14
    %9 = udiv i32 %lsr.iv245, 32000
    %10 = mul i32 %9, -32000
    %11 = zext i32 %10 to i64
    %12 = add nuw nsw i64 %11, 21
    %13 = udiv i32 %lsr.iv259, 32000
    %14 = mul i32 %13, -32000
    %15 = zext i32 %14 to i64
    %16 = add nuw nsw i64 %15, 28
    %17 = udiv i32 %lsr.iv262, 32000
    %18 = mul i32 %17, -32000
    %19 = zext i32 %18 to i64
    %20 = add nuw nsw i64 %19, 35
    %21 = udiv i32 %lsr.iv265, 32000
    %22 = mul i32 %21, -32000
    %23 = zext i32 %22 to i64
    %24 = add nuw nsw i64 %23, 42
    %25 = udiv i32 %lsr.iv268, 32000
    %26 = mul i32 %25, -32000
    %27 = zext i32 %26 to i64
    %28 = add nuw nsw i64 %27, 49
    %29 = udiv i32 %lsr.iv271, 32000
    %30 = mul i32 %29, -32000
    %31 = zext i32 %30 to i64
    %32 = add nuw nsw i64 %31, 7
    %33 = udiv i32 %lsr.iv274, 32000
    %34 = mul i32 %33, -32000
    %35 = zext i32 %34 to i64
    %36 = add nuw nsw i64 %35, 63
    %37 = udiv i32 %lsr.iv277, 32000
    %38 = mul i32 %37, -32000
    %39 = zext i32 %38 to i64
    %40 = add nuw nsw i64 %39, 56
    %41 = add i64 %lsr.iv, %4
    %tmp = trunc i64 %41 to i32
    %conv = sitofp i32 %tmp to double
    %uglygep250 = getelementptr i8, ptr %lsr.iv248, i64 -40
    store double %conv, ptr %uglygep250, align 16, !tbaa !6
    %42 = add i64 %lsr.iv, %32
    %tmp273 = trunc i64 %42 to i32
    %conv.1 = sitofp i32 %tmp273 to double
    %uglygep258 = getelementptr i8, ptr %lsr.iv248, i64 -32
    store double %conv.1, ptr %uglygep258, align 8, !tbaa !6
    %43 = add i64 %lsr.iv, %8
    %tmp244 = trunc i64 %43 to i32
    %conv.2 = sitofp i32 %tmp244 to double
    %uglygep257 = getelementptr i8, ptr %lsr.iv248, i64 -24
    store double %conv.2, ptr %uglygep257, align 16, !tbaa !6
    %44 = add i64 %lsr.iv, %12
    %tmp247 = trunc i64 %44 to i32
    %conv.3 = sitofp i32 %tmp247 to double
    %uglygep256 = getelementptr i8, ptr %lsr.iv248, i64 -16
    store double %conv.3, ptr %uglygep256, align 8, !tbaa !6
    %45 = add i64 %lsr.iv, %16
    %tmp261 = trunc i64 %45 to i32
    %conv.4 = sitofp i32 %tmp261 to double
    %uglygep255 = getelementptr i8, ptr %lsr.iv248, i64 -8
    store double %conv.4, ptr %uglygep255, align 16, !tbaa !6
    %46 = add i64 %lsr.iv, %20
    %tmp264 = trunc i64 %46 to i32
    %conv.5 = sitofp i32 %tmp264 to double
    store double %conv.5, ptr %lsr.iv248, align 8, !tbaa !6
    %47 = add i64 %lsr.iv, %24
    %tmp267 = trunc i64 %47 to i32
    %conv.6 = sitofp i32 %tmp267 to double
    %uglygep254 = getelementptr i8, ptr %lsr.iv248, i64 8
    store double %conv.6, ptr %uglygep254, align 16, !tbaa !6
    %48 = add i64 %lsr.iv, %28
    %tmp270 = trunc i64 %48 to i32
    %conv.7 = sitofp i32 %tmp270 to double
    %uglygep253 = getelementptr i8, ptr %lsr.iv248, i64 16
    store double %conv.7, ptr %uglygep253, align 8, !tbaa !6
    %49 = add i64 %lsr.iv, %40
    %tmp279 = trunc i64 %49 to i32
    %conv.8 = sitofp i32 %tmp279 to double
    %uglygep252 = getelementptr i8, ptr %lsr.iv248, i64 24
    store double %conv.8, ptr %uglygep252, align 16, !tbaa !6
    %50 = add i64 %lsr.iv, %36
    %tmp276 = trunc i64 %50 to i32
    %conv.9 = sitofp i32 %tmp276 to double
    %uglygep251 = getelementptr i8, ptr %lsr.iv248, i64 32
    store double %conv.9, ptr %uglygep251, align 8, !tbaa !6
    %lsr.iv.next = add nuw nsw i64 %lsr.iv, 70
    %lsr.iv.next243 = add nuw nsw i32 %lsr.iv242, 70
    %lsr.iv.next246 = add nuw nsw i32 %lsr.iv245, 70
    %uglygep249 = getelementptr i8, ptr %lsr.iv248, i64 80
    %lsr.iv.next260 = add nuw nsw i32 %lsr.iv259, 70
    %lsr.iv.next263 = add nuw nsw i32 %lsr.iv262, 70
    %lsr.iv.next266 = add nuw nsw i32 %lsr.iv265, 70
    %lsr.iv.next269 = add nuw nsw i32 %lsr.iv268, 70
    %lsr.iv.next272 = add nuw nsw i32 %lsr.iv271, 70
    %lsr.iv.next275 = add nuw nsw i32 %lsr.iv274, 70
    %lsr.iv.next278 = add nuw nsw i32 %lsr.iv277, 70
    %51 = call i64 @llvm.loop.decrement.reg.i64(i64 %1, i64 1)
    %52 = icmp ne i64 %51, 0
    br i1 %52, label %for.body, label %for.body6.preheader, !llvm.loop !10
  
  for.body6.preheader:                              ; preds = %for.body
    br label %for.body6
  
  for.cond.cleanup5:                                ; preds = %for.cond.cleanup11
    %t2 = getelementptr inbounds %struct.args_t, ptr %func_args, i64 0, i32 1
    %call27 = tail call i32 @gettimeofday(ptr noundef nonnull %t2, ptr noundef null) #4
    %add29 = fadd fast double %x.2.39, 1.000000e+00
    %add30 = fadd fast double %add29, %conv22
    ret double %add30
  
  for.body6:                                        ; preds = %for.body6.preheader, %for.cond.cleanup11
    %nl.047 = phi i32 [ %inc25, %for.cond.cleanup11 ], [ 0, %for.body6.preheader ]
    %53 = load double, ptr @a, align 64, !tbaa !6
    %54 = call i64 @llvm.start.loop.iterations.i64(i64 800)
    br label %for.body12
  
  for.cond.cleanup11:                               ; preds = %for.body12
    %conv22 = sitofp i32 %index.2.39 to double
    %add = fadd fast double %x.2.39, %conv22
    %call23 = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, double noundef %add) #4
    %inc25 = add nuw nsw i32 %nl.047, 1
    %exitcond54.not = icmp eq i32 %inc25, 100000
    br i1 %exitcond54.not, label %for.cond.cleanup5, label %for.body6, !llvm.loop !12
  
  for.body12:                                       ; preds = %for.body12, %for.body6
    %lsr.iv198 = phi ptr [ %uglygep199, %for.body12 ], [ getelementptr (i8, ptr @a, i64 160), %for.body6 ]
    %indvars.iv50 = phi i64 [ 0, %for.body6 ], [ %indvars.iv.next51.39, %for.body12 ]
    %index.145 = phi i32 [ 0, %for.body6 ], [ %index.2.39, %for.body12 ]
    %x.144 = phi double [ %53, %for.body6 ], [ %x.2.39, %for.body12 ]
    %55 = phi i64 [ %54, %for.body6 ], [ %135, %for.body12 ]
    %lsr239 = trunc i64 %indvars.iv50 to i32
    %uglygep200 = getelementptr i8, ptr %lsr.iv198, i64 -160
    %56 = load double, ptr %uglygep200, align 64, !tbaa !6
    %cmp15 = fcmp fast ogt double %56, %x.144
    %x.2 = select i1 %cmp15, double %56, double %x.144
    %index.2 = select i1 %cmp15, i32 %lsr239, i32 %index.145
    %indvars.iv.next51 = or i64 %indvars.iv50, 1
    %uglygep204 = getelementptr i8, ptr %lsr.iv198, i64 -152
    %57 = load double, ptr %uglygep204, align 8, !tbaa !6
    %cmp15.1 = fcmp fast ogt double %57, %x.2
    %x.2.1 = select i1 %cmp15.1, double %57, double %x.2
    %58 = trunc i64 %indvars.iv.next51 to i32
    %index.2.1 = select i1 %cmp15.1, i32 %58, i32 %index.2
    %indvars.iv.next51.1 = or i64 %indvars.iv50, 2
    %uglygep205 = getelementptr i8, ptr %lsr.iv198, i64 -144
    %59 = load double, ptr %uglygep205, align 16, !tbaa !6
    %cmp15.2 = fcmp fast ogt double %59, %x.2.1
    %x.2.2 = select i1 %cmp15.2, double %59, double %x.2.1
    %60 = trunc i64 %indvars.iv.next51.1 to i32
    %index.2.2 = select i1 %cmp15.2, i32 %60, i32 %index.2.1
    %indvars.iv.next51.2 = or i64 %indvars.iv50, 3
    %uglygep206 = getelementptr i8, ptr %lsr.iv198, i64 -136
    %61 = load double, ptr %uglygep206, align 8, !tbaa !6
    %cmp15.3 = fcmp fast ogt double %61, %x.2.2
    %x.2.3 = select i1 %cmp15.3, double %61, double %x.2.2
    %62 = trunc i64 %indvars.iv.next51.2 to i32
    %index.2.3 = select i1 %cmp15.3, i32 %62, i32 %index.2.2
    %indvars.iv.next51.3 = or i64 %indvars.iv50, 4
    %uglygep207 = getelementptr i8, ptr %lsr.iv198, i64 -128
    %63 = load double, ptr %uglygep207, align 32, !tbaa !6
    %cmp15.4 = fcmp fast ogt double %63, %x.2.3
    %x.2.4 = select i1 %cmp15.4, double %63, double %x.2.3
    %64 = trunc i64 %indvars.iv.next51.3 to i32
    %index.2.4 = select i1 %cmp15.4, i32 %64, i32 %index.2.3
    %indvars.iv.next51.4 = or i64 %indvars.iv50, 5
    %uglygep208 = getelementptr i8, ptr %lsr.iv198, i64 -120
    %65 = load double, ptr %uglygep208, align 8, !tbaa !6
    %cmp15.5 = fcmp fast ogt double %65, %x.2.4
    %x.2.5 = select i1 %cmp15.5, double %65, double %x.2.4
    %66 = trunc i64 %indvars.iv.next51.4 to i32
    %index.2.5 = select i1 %cmp15.5, i32 %66, i32 %index.2.4
    %indvars.iv.next51.5 = or i64 %indvars.iv50, 6
    %uglygep209 = getelementptr i8, ptr %lsr.iv198, i64 -112
    %67 = load double, ptr %uglygep209, align 16, !tbaa !6
    %cmp15.6 = fcmp fast ogt double %67, %x.2.5
    %x.2.6 = select i1 %cmp15.6, double %67, double %x.2.5
    %68 = trunc i64 %indvars.iv.next51.5 to i32
    %index.2.6 = select i1 %cmp15.6, i32 %68, i32 %index.2.5
    %indvars.iv.next51.6 = or i64 %indvars.iv50, 7
    %uglygep210 = getelementptr i8, ptr %lsr.iv198, i64 -104
    %69 = load double, ptr %uglygep210, align 8, !tbaa !6
    %cmp15.7 = fcmp fast ogt double %69, %x.2.6
    %x.2.7 = select i1 %cmp15.7, double %69, double %x.2.6
    %70 = trunc i64 %indvars.iv.next51.6 to i32
    %index.2.7 = select i1 %cmp15.7, i32 %70, i32 %index.2.6
    %indvars.iv.next51.7 = add nuw nsw i64 %indvars.iv50, 8
    %uglygep211 = getelementptr i8, ptr %lsr.iv198, i64 -96
    %71 = load double, ptr %uglygep211, align 64, !tbaa !6
    %cmp15.8 = fcmp fast ogt double %71, %x.2.7
    %x.2.8 = select i1 %cmp15.8, double %71, double %x.2.7
    %72 = trunc i64 %indvars.iv.next51.7 to i32
    %index.2.8 = select i1 %cmp15.8, i32 %72, i32 %index.2.7
    %indvars.iv.next51.8 = add nuw nsw i64 %indvars.iv50, 9
    %uglygep212 = getelementptr i8, ptr %lsr.iv198, i64 -88
    %73 = load double, ptr %uglygep212, align 8, !tbaa !6
    %cmp15.9 = fcmp fast ogt double %73, %x.2.8
    %x.2.9 = select i1 %cmp15.9, double %73, double %x.2.8
    %74 = trunc i64 %indvars.iv.next51.8 to i32
    %index.2.9 = select i1 %cmp15.9, i32 %74, i32 %index.2.8
    %indvars.iv.next51.9 = add nuw nsw i64 %indvars.iv50, 10
    %uglygep213 = getelementptr i8, ptr %lsr.iv198, i64 -80
    %75 = load double, ptr %uglygep213, align 16, !tbaa !6
    %cmp15.10 = fcmp fast ogt double %75, %x.2.9
    %x.2.10 = select i1 %cmp15.10, double %75, double %x.2.9
    %76 = trunc i64 %indvars.iv.next51.9 to i32
    %index.2.10 = select i1 %cmp15.10, i32 %76, i32 %index.2.9
    %indvars.iv.next51.10 = add nuw nsw i64 %indvars.iv50, 11
    %uglygep214 = getelementptr i8, ptr %lsr.iv198, i64 -72
    %77 = load double, ptr %uglygep214, align 8, !tbaa !6
    %cmp15.11 = fcmp fast ogt double %77, %x.2.10
    %x.2.11 = select i1 %cmp15.11, double %77, double %x.2.10
    %78 = trunc i64 %indvars.iv.next51.10 to i32
    %index.2.11 = select i1 %cmp15.11, i32 %78, i32 %index.2.10
    %indvars.iv.next51.11 = add nuw nsw i64 %indvars.iv50, 12
    %uglygep215 = getelementptr i8, ptr %lsr.iv198, i64 -64
    %79 = load double, ptr %uglygep215, align 32, !tbaa !6
    %cmp15.12 = fcmp fast ogt double %79, %x.2.11
    %x.2.12 = select i1 %cmp15.12, double %79, double %x.2.11
    %80 = trunc i64 %indvars.iv.next51.11 to i32
    %index.2.12 = select i1 %cmp15.12, i32 %80, i32 %index.2.11
    %indvars.iv.next51.12 = add nuw nsw i64 %indvars.iv50, 13
    %uglygep216 = getelementptr i8, ptr %lsr.iv198, i64 -56
    %81 = load double, ptr %uglygep216, align 8, !tbaa !6
    %cmp15.13 = fcmp fast ogt double %81, %x.2.12
    %x.2.13 = select i1 %cmp15.13, double %81, double %x.2.12
    %82 = trunc i64 %indvars.iv.next51.12 to i32
    %index.2.13 = select i1 %cmp15.13, i32 %82, i32 %index.2.12
    %indvars.iv.next51.13 = add nuw nsw i64 %indvars.iv50, 14
    %uglygep217 = getelementptr i8, ptr %lsr.iv198, i64 -48
    %83 = load double, ptr %uglygep217, align 16, !tbaa !6
    %cmp15.14 = fcmp fast ogt double %83, %x.2.13
    %x.2.14 = select i1 %cmp15.14, double %83, double %x.2.13
    %84 = trunc i64 %indvars.iv.next51.13 to i32
    %index.2.14 = select i1 %cmp15.14, i32 %84, i32 %index.2.13
    %indvars.iv.next51.14 = add nuw nsw i64 %indvars.iv50, 15
    %uglygep218 = getelementptr i8, ptr %lsr.iv198, i64 -40
    %85 = load double, ptr %uglygep218, align 8, !tbaa !6
    %cmp15.15 = fcmp fast ogt double %85, %x.2.14
    %x.2.15 = select i1 %cmp15.15, double %85, double %x.2.14
    %86 = trunc i64 %indvars.iv.next51.14 to i32
    %index.2.15 = select i1 %cmp15.15, i32 %86, i32 %index.2.14
    %indvars.iv.next51.15 = add nuw nsw i64 %indvars.iv50, 16
    %uglygep219 = getelementptr i8, ptr %lsr.iv198, i64 -32
    %87 = load double, ptr %uglygep219, align 64, !tbaa !6
    %cmp15.16 = fcmp fast ogt double %87, %x.2.15
    %x.2.16 = select i1 %cmp15.16, double %87, double %x.2.15
    %88 = trunc i64 %indvars.iv.next51.15 to i32
    %index.2.16 = select i1 %cmp15.16, i32 %88, i32 %index.2.15
    %indvars.iv.next51.16 = add nuw nsw i64 %indvars.iv50, 17
    %uglygep220 = getelementptr i8, ptr %lsr.iv198, i64 -24
    %89 = load double, ptr %uglygep220, align 8, !tbaa !6
    %cmp15.17 = fcmp fast ogt double %89, %x.2.16
    %x.2.17 = select i1 %cmp15.17, double %89, double %x.2.16
    %90 = trunc i64 %indvars.iv.next51.16 to i32
    %index.2.17 = select i1 %cmp15.17, i32 %90, i32 %index.2.16
    %indvars.iv.next51.17 = add nuw nsw i64 %indvars.iv50, 18
    %uglygep221 = getelementptr i8, ptr %lsr.iv198, i64 -16
    %91 = load double, ptr %uglygep221, align 16, !tbaa !6
    %cmp15.18 = fcmp fast ogt double %91, %x.2.17
    %x.2.18 = select i1 %cmp15.18, double %91, double %x.2.17
    %92 = trunc i64 %indvars.iv.next51.17 to i32
    %index.2.18 = select i1 %cmp15.18, i32 %92, i32 %index.2.17
    %indvars.iv.next51.18 = add nuw nsw i64 %indvars.iv50, 19
    %uglygep222 = getelementptr i8, ptr %lsr.iv198, i64 -8
    %93 = load double, ptr %uglygep222, align 8, !tbaa !6
    %cmp15.19 = fcmp fast ogt double %93, %x.2.18
    %x.2.19 = select i1 %cmp15.19, double %93, double %x.2.18
    %94 = trunc i64 %indvars.iv.next51.18 to i32
    %index.2.19 = select i1 %cmp15.19, i32 %94, i32 %index.2.18
    %indvars.iv.next51.19 = add nuw nsw i64 %indvars.iv50, 20
    %95 = load double, ptr %lsr.iv198, align 32, !tbaa !6
    %cmp15.20 = fcmp fast ogt double %95, %x.2.19
    %x.2.20 = select i1 %cmp15.20, double %95, double %x.2.19
    %96 = trunc i64 %indvars.iv.next51.19 to i32
    %index.2.20 = select i1 %cmp15.20, i32 %96, i32 %index.2.19
    %indvars.iv.next51.20 = add nuw nsw i64 %indvars.iv50, 21
    %uglygep224 = getelementptr i8, ptr %lsr.iv198, i64 8
    %97 = load double, ptr %uglygep224, align 8, !tbaa !6
    %cmp15.21 = fcmp fast ogt double %97, %x.2.20
    %x.2.21 = select i1 %cmp15.21, double %97, double %x.2.20
    %98 = trunc i64 %indvars.iv.next51.20 to i32
    %index.2.21 = select i1 %cmp15.21, i32 %98, i32 %index.2.20
    %indvars.iv.next51.21 = add nuw nsw i64 %indvars.iv50, 22
    %uglygep225 = getelementptr i8, ptr %lsr.iv198, i64 16
    %99 = load double, ptr %uglygep225, align 16, !tbaa !6
    %cmp15.22 = fcmp fast ogt double %99, %x.2.21
    %x.2.22 = select i1 %cmp15.22, double %99, double %x.2.21
    %100 = trunc i64 %indvars.iv.next51.21 to i32
    %index.2.22 = select i1 %cmp15.22, i32 %100, i32 %index.2.21
    %indvars.iv.next51.22 = add nuw nsw i64 %indvars.iv50, 23
    %uglygep226 = getelementptr i8, ptr %lsr.iv198, i64 24
    %101 = load double, ptr %uglygep226, align 8, !tbaa !6
    %cmp15.23 = fcmp fast ogt double %101, %x.2.22
    %x.2.23 = select i1 %cmp15.23, double %101, double %x.2.22
    %102 = trunc i64 %indvars.iv.next51.22 to i32
    %index.2.23 = select i1 %cmp15.23, i32 %102, i32 %index.2.22
    %indvars.iv.next51.23 = add nuw nsw i64 %indvars.iv50, 24
    %uglygep227 = getelementptr i8, ptr %lsr.iv198, i64 32
    %103 = load double, ptr %uglygep227, align 64, !tbaa !6
    %cmp15.24 = fcmp fast ogt double %103, %x.2.23
    %x.2.24 = select i1 %cmp15.24, double %103, double %x.2.23
    %104 = trunc i64 %indvars.iv.next51.23 to i32
    %index.2.24 = select i1 %cmp15.24, i32 %104, i32 %index.2.23
    %indvars.iv.next51.24 = add nuw nsw i64 %indvars.iv50, 25
    %uglygep228 = getelementptr i8, ptr %lsr.iv198, i64 40
    %105 = load double, ptr %uglygep228, align 8, !tbaa !6
    %cmp15.25 = fcmp fast ogt double %105, %x.2.24
    %x.2.25 = select i1 %cmp15.25, double %105, double %x.2.24
    %106 = trunc i64 %indvars.iv.next51.24 to i32
    %index.2.25 = select i1 %cmp15.25, i32 %106, i32 %index.2.24
    %indvars.iv.next51.25 = add nuw nsw i64 %indvars.iv50, 26
    %uglygep229 = getelementptr i8, ptr %lsr.iv198, i64 48
    %107 = load double, ptr %uglygep229, align 16, !tbaa !6
    %cmp15.26 = fcmp fast ogt double %107, %x.2.25
    %x.2.26 = select i1 %cmp15.26, double %107, double %x.2.25
    %108 = trunc i64 %indvars.iv.next51.25 to i32
    %index.2.26 = select i1 %cmp15.26, i32 %108, i32 %index.2.25
    %indvars.iv.next51.26 = add nuw nsw i64 %indvars.iv50, 27
    %uglygep230 = getelementptr i8, ptr %lsr.iv198, i64 56
    %109 = load double, ptr %uglygep230, align 8, !tbaa !6
    %cmp15.27 = fcmp fast ogt double %109, %x.2.26
    %x.2.27 = select i1 %cmp15.27, double %109, double %x.2.26
    %110 = trunc i64 %indvars.iv.next51.26 to i32
    %index.2.27 = select i1 %cmp15.27, i32 %110, i32 %index.2.26
    %indvars.iv.next51.27 = add nuw nsw i64 %indvars.iv50, 28
    %uglygep231 = getelementptr i8, ptr %lsr.iv198, i64 64
    %111 = load double, ptr %uglygep231, align 32, !tbaa !6
    %cmp15.28 = fcmp fast ogt double %111, %x.2.27
    %x.2.28 = select i1 %cmp15.28, double %111, double %x.2.27
    %112 = trunc i64 %indvars.iv.next51.27 to i32
    %index.2.28 = select i1 %cmp15.28, i32 %112, i32 %index.2.27
    %indvars.iv.next51.28 = add nuw nsw i64 %indvars.iv50, 29
    %uglygep232 = getelementptr i8, ptr %lsr.iv198, i64 72
    %113 = load double, ptr %uglygep232, align 8, !tbaa !6
    %cmp15.29 = fcmp fast ogt double %113, %x.2.28
    %x.2.29 = select i1 %cmp15.29, double %113, double %x.2.28
    %114 = trunc i64 %indvars.iv.next51.28 to i32
    %index.2.29 = select i1 %cmp15.29, i32 %114, i32 %index.2.28
    %indvars.iv.next51.29 = add nuw nsw i64 %indvars.iv50, 30
    %uglygep233 = getelementptr i8, ptr %lsr.iv198, i64 80
    %115 = load double, ptr %uglygep233, align 16, !tbaa !6
    %cmp15.30 = fcmp fast ogt double %115, %x.2.29
    %x.2.30 = select i1 %cmp15.30, double %115, double %x.2.29
    %116 = trunc i64 %indvars.iv.next51.29 to i32
    %index.2.30 = select i1 %cmp15.30, i32 %116, i32 %index.2.29
    %indvars.iv.next51.30 = add nuw nsw i64 %indvars.iv50, 31
    %uglygep234 = getelementptr i8, ptr %lsr.iv198, i64 88
    %117 = load double, ptr %uglygep234, align 8, !tbaa !6
    %cmp15.31 = fcmp fast ogt double %117, %x.2.30
    %x.2.31 = select i1 %cmp15.31, double %117, double %x.2.30
    %118 = trunc i64 %indvars.iv.next51.30 to i32
    %index.2.31 = select i1 %cmp15.31, i32 %118, i32 %index.2.30
    %indvars.iv.next51.31 = add nuw nsw i64 %indvars.iv50, 32
    %uglygep235 = getelementptr i8, ptr %lsr.iv198, i64 96
    %119 = load double, ptr %uglygep235, align 64, !tbaa !6
    %cmp15.32 = fcmp fast ogt double %119, %x.2.31
    %x.2.32 = select i1 %cmp15.32, double %119, double %x.2.31
    %120 = trunc i64 %indvars.iv.next51.31 to i32
    %index.2.32 = select i1 %cmp15.32, i32 %120, i32 %index.2.31
    %indvars.iv.next51.32 = add nuw nsw i64 %indvars.iv50, 33
    %uglygep236 = getelementptr i8, ptr %lsr.iv198, i64 104
    %121 = load double, ptr %uglygep236, align 8, !tbaa !6
    %cmp15.33 = fcmp fast ogt double %121, %x.2.32
    %x.2.33 = select i1 %cmp15.33, double %121, double %x.2.32
    %122 = trunc i64 %indvars.iv.next51.32 to i32
    %index.2.33 = select i1 %cmp15.33, i32 %122, i32 %index.2.32
    %indvars.iv.next51.33 = add nuw nsw i64 %indvars.iv50, 34
    %uglygep237 = getelementptr i8, ptr %lsr.iv198, i64 112
    %123 = load double, ptr %uglygep237, align 16, !tbaa !6
    %cmp15.34 = fcmp fast ogt double %123, %x.2.33
    %x.2.34 = select i1 %cmp15.34, double %123, double %x.2.33
    %124 = trunc i64 %indvars.iv.next51.33 to i32
    %index.2.34 = select i1 %cmp15.34, i32 %124, i32 %index.2.33
    %indvars.iv.next51.34 = add nuw nsw i64 %indvars.iv50, 35
    %uglygep238 = getelementptr i8, ptr %lsr.iv198, i64 120
    %125 = load double, ptr %uglygep238, align 8, !tbaa !6
    %cmp15.35 = fcmp fast ogt double %125, %x.2.34
    %x.2.35 = select i1 %cmp15.35, double %125, double %x.2.34
    %126 = trunc i64 %indvars.iv.next51.34 to i32
    %index.2.35 = select i1 %cmp15.35, i32 %126, i32 %index.2.34
    %indvars.iv.next51.35 = add nuw nsw i64 %indvars.iv50, 36
    %uglygep223 = getelementptr i8, ptr %lsr.iv198, i64 128
    %127 = load double, ptr %uglygep223, align 32, !tbaa !6
    %cmp15.36 = fcmp fast ogt double %127, %x.2.35
    %x.2.36 = select i1 %cmp15.36, double %127, double %x.2.35
    %128 = trunc i64 %indvars.iv.next51.35 to i32
    %index.2.36 = select i1 %cmp15.36, i32 %128, i32 %index.2.35
    %indvars.iv.next51.36 = add nuw nsw i64 %indvars.iv50, 37
    %uglygep203 = getelementptr i8, ptr %lsr.iv198, i64 136
    %129 = load double, ptr %uglygep203, align 8, !tbaa !6
    %cmp15.37 = fcmp fast ogt double %129, %x.2.36
    %x.2.37 = select i1 %cmp15.37, double %129, double %x.2.36
    %130 = trunc i64 %indvars.iv.next51.36 to i32
    %index.2.37 = select i1 %cmp15.37, i32 %130, i32 %index.2.36
    %indvars.iv.next51.37 = add nuw nsw i64 %indvars.iv50, 38
    %uglygep202 = getelementptr i8, ptr %lsr.iv198, i64 144
    %131 = load double, ptr %uglygep202, align 16, !tbaa !6
    %cmp15.38 = fcmp fast ogt double %131, %x.2.37
    %x.2.38 = select i1 %cmp15.38, double %131, double %x.2.37
    %132 = trunc i64 %indvars.iv.next51.37 to i32
    %index.2.38 = select i1 %cmp15.38, i32 %132, i32 %index.2.37
    %indvars.iv.next51.38 = add nuw nsw i64 %indvars.iv50, 39
    %uglygep201 = getelementptr i8, ptr %lsr.iv198, i64 152
    %133 = load double, ptr %uglygep201, align 8, !tbaa !6
    %cmp15.39 = fcmp fast ogt double %133, %x.2.38
    %x.2.39 = select i1 %cmp15.39, double %133, double %x.2.38
    %134 = trunc i64 %indvars.iv.next51.38 to i32
    %index.2.39 = select i1 %cmp15.39, i32 %134, i32 %index.2.38
    %indvars.iv.next51.39 = add nuw nsw i64 %indvars.iv50, 40
    %uglygep199 = getelementptr i8, ptr %lsr.iv198, i64 320
    %135 = call i64 @llvm.loop.decrement.reg.i64(i64 %55, i64 1)
    %136 = icmp ne i64 %135, 0
    br i1 %136, label %for.body12, label %for.cond.cleanup11, !llvm.loop !13
  }
  
  declare i32 @initialise_arrays(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nofree nounwind
  declare noundef i32 @gettimeofday(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #2
  
  declare i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, double noundef) local_unnamed_addr #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #3
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #3
  
  attributes #0 = { nounwind uwtable vscale_range(1,16) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #1 = { "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #2 = { nofree nounwind "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #3 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #4 = { nounwind }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 7, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"double", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C/C++ TBAA"}
  !10 = distinct !{!10, !11}
  !11 = !{!"llvm.loop.mustprogress"}
  !12 = distinct !{!12, !11}
  !13 = distinct !{!13, !11}

...
---
name:            s315
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr64all, preferred-register: '' }
  - { id: 1, class: gpr32common, preferred-register: '' }
  - { id: 2, class: gpr32common, preferred-register: '' }
  - { id: 3, class: gpr32common, preferred-register: '' }
  - { id: 4, class: gpr32common, preferred-register: '' }
  - { id: 5, class: gpr32common, preferred-register: '' }
  - { id: 6, class: gpr32common, preferred-register: '' }
  - { id: 7, class: gpr32common, preferred-register: '' }
  - { id: 8, class: gpr64sp, preferred-register: '' }
  - { id: 9, class: gpr32common, preferred-register: '' }
  - { id: 10, class: gpr32common, preferred-register: '' }
  - { id: 11, class: gpr64common, preferred-register: '' }
  - { id: 12, class: gpr64sp, preferred-register: '' }
  - { id: 13, class: gpr64all, preferred-register: '' }
  - { id: 14, class: gpr32all, preferred-register: '' }
  - { id: 15, class: gpr32all, preferred-register: '' }
  - { id: 16, class: gpr64all, preferred-register: '' }
  - { id: 17, class: gpr32all, preferred-register: '' }
  - { id: 18, class: gpr32all, preferred-register: '' }
  - { id: 19, class: gpr32all, preferred-register: '' }
  - { id: 20, class: gpr32all, preferred-register: '' }
  - { id: 21, class: gpr32all, preferred-register: '' }
  - { id: 22, class: gpr32all, preferred-register: '' }
  - { id: 23, class: gpr32all, preferred-register: '' }
  - { id: 24, class: gpr64all, preferred-register: '' }
  - { id: 25, class: gpr32sp, preferred-register: '' }
  - { id: 26, class: fpr64, preferred-register: '' }
  - { id: 27, class: gpr64all, preferred-register: '' }
  - { id: 28, class: fpr64, preferred-register: '' }
  - { id: 29, class: gpr32all, preferred-register: '' }
  - { id: 30, class: gpr64sp, preferred-register: '' }
  - { id: 31, class: gpr64sp, preferred-register: '' }
  - { id: 32, class: gpr32, preferred-register: '' }
  - { id: 33, class: fpr64, preferred-register: '' }
  - { id: 34, class: gpr64sp, preferred-register: '' }
  - { id: 35, class: fpr64, preferred-register: '' }
  - { id: 36, class: gpr32, preferred-register: '' }
  - { id: 37, class: gpr64all, preferred-register: '' }
  - { id: 38, class: gpr64all, preferred-register: '' }
  - { id: 39, class: gpr64all, preferred-register: '' }
  - { id: 40, class: gpr64common, preferred-register: '' }
  - { id: 41, class: gpr32all, preferred-register: '' }
  - { id: 42, class: gpr32all, preferred-register: '' }
  - { id: 43, class: gpr32all, preferred-register: '' }
  - { id: 44, class: gpr32all, preferred-register: '' }
  - { id: 45, class: gpr32all, preferred-register: '' }
  - { id: 46, class: gpr32all, preferred-register: '' }
  - { id: 47, class: gpr32all, preferred-register: '' }
  - { id: 48, class: gpr64all, preferred-register: '' }
  - { id: 49, class: gpr32all, preferred-register: '' }
  - { id: 50, class: gpr32all, preferred-register: '' }
  - { id: 51, class: gpr64all, preferred-register: '' }
  - { id: 52, class: gpr64common, preferred-register: '' }
  - { id: 53, class: gpr32all, preferred-register: '' }
  - { id: 54, class: gpr64all, preferred-register: '' }
  - { id: 55, class: gpr32all, preferred-register: '' }
  - { id: 56, class: gpr64common, preferred-register: '' }
  - { id: 57, class: gpr64sp, preferred-register: '' }
  - { id: 58, class: gpr32, preferred-register: '' }
  - { id: 59, class: gpr32, preferred-register: '' }
  - { id: 60, class: gpr32, preferred-register: '' }
  - { id: 61, class: gpr32, preferred-register: '' }
  - { id: 62, class: gpr32, preferred-register: '' }
  - { id: 63, class: gpr32, preferred-register: '' }
  - { id: 64, class: gpr32, preferred-register: '' }
  - { id: 65, class: gpr32, preferred-register: '' }
  - { id: 66, class: gpr32, preferred-register: '' }
  - { id: 67, class: gpr32, preferred-register: '' }
  - { id: 68, class: gpr32, preferred-register: '' }
  - { id: 69, class: gpr64common, preferred-register: '' }
  - { id: 70, class: gpr32, preferred-register: '' }
  - { id: 71, class: gpr64, preferred-register: '' }
  - { id: 72, class: gpr64, preferred-register: '' }
  - { id: 73, class: gpr64, preferred-register: '' }
  - { id: 74, class: gpr32, preferred-register: '' }
  - { id: 75, class: gpr32, preferred-register: '' }
  - { id: 76, class: gpr32, preferred-register: '' }
  - { id: 77, class: gpr64, preferred-register: '' }
  - { id: 78, class: gpr64, preferred-register: '' }
  - { id: 79, class: gpr32, preferred-register: '' }
  - { id: 80, class: gpr32, preferred-register: '' }
  - { id: 81, class: gpr64, preferred-register: '' }
  - { id: 82, class: gpr64, preferred-register: '' }
  - { id: 83, class: gpr32, preferred-register: '' }
  - { id: 84, class: gpr32, preferred-register: '' }
  - { id: 85, class: gpr64, preferred-register: '' }
  - { id: 86, class: gpr64, preferred-register: '' }
  - { id: 87, class: gpr32, preferred-register: '' }
  - { id: 88, class: gpr32, preferred-register: '' }
  - { id: 89, class: gpr64, preferred-register: '' }
  - { id: 90, class: gpr64, preferred-register: '' }
  - { id: 91, class: gpr32, preferred-register: '' }
  - { id: 92, class: gpr32, preferred-register: '' }
  - { id: 93, class: gpr64, preferred-register: '' }
  - { id: 94, class: gpr64, preferred-register: '' }
  - { id: 95, class: gpr32, preferred-register: '' }
  - { id: 96, class: gpr32, preferred-register: '' }
  - { id: 97, class: gpr64, preferred-register: '' }
  - { id: 98, class: gpr64, preferred-register: '' }
  - { id: 99, class: gpr32, preferred-register: '' }
  - { id: 100, class: gpr32, preferred-register: '' }
  - { id: 101, class: gpr64, preferred-register: '' }
  - { id: 102, class: gpr64, preferred-register: '' }
  - { id: 103, class: gpr32, preferred-register: '' }
  - { id: 104, class: gpr32, preferred-register: '' }
  - { id: 105, class: gpr64, preferred-register: '' }
  - { id: 106, class: gpr64, preferred-register: '' }
  - { id: 107, class: gpr32, preferred-register: '' }
  - { id: 108, class: gpr32, preferred-register: '' }
  - { id: 109, class: gpr64, preferred-register: '' }
  - { id: 110, class: gpr64, preferred-register: '' }
  - { id: 111, class: gpr32, preferred-register: '' }
  - { id: 112, class: gpr32, preferred-register: '' }
  - { id: 113, class: gpr32, preferred-register: '' }
  - { id: 114, class: fpr64, preferred-register: '' }
  - { id: 115, class: gpr32common, preferred-register: '' }
  - { id: 116, class: gpr32common, preferred-register: '' }
  - { id: 117, class: fpr64, preferred-register: '' }
  - { id: 118, class: gpr32common, preferred-register: '' }
  - { id: 119, class: gpr32common, preferred-register: '' }
  - { id: 120, class: fpr64, preferred-register: '' }
  - { id: 121, class: gpr32common, preferred-register: '' }
  - { id: 122, class: gpr32common, preferred-register: '' }
  - { id: 123, class: fpr64, preferred-register: '' }
  - { id: 124, class: gpr32common, preferred-register: '' }
  - { id: 125, class: gpr32common, preferred-register: '' }
  - { id: 126, class: fpr64, preferred-register: '' }
  - { id: 127, class: gpr32common, preferred-register: '' }
  - { id: 128, class: gpr32common, preferred-register: '' }
  - { id: 129, class: fpr64, preferred-register: '' }
  - { id: 130, class: gpr32common, preferred-register: '' }
  - { id: 131, class: gpr32common, preferred-register: '' }
  - { id: 132, class: fpr64, preferred-register: '' }
  - { id: 133, class: gpr32common, preferred-register: '' }
  - { id: 134, class: gpr32common, preferred-register: '' }
  - { id: 135, class: fpr64, preferred-register: '' }
  - { id: 136, class: gpr32common, preferred-register: '' }
  - { id: 137, class: gpr32common, preferred-register: '' }
  - { id: 138, class: fpr64, preferred-register: '' }
  - { id: 139, class: gpr32common, preferred-register: '' }
  - { id: 140, class: gpr32common, preferred-register: '' }
  - { id: 141, class: fpr64, preferred-register: '' }
  - { id: 142, class: gpr64sp, preferred-register: '' }
  - { id: 143, class: gpr32sp, preferred-register: '' }
  - { id: 144, class: gpr32sp, preferred-register: '' }
  - { id: 145, class: gpr64sp, preferred-register: '' }
  - { id: 146, class: gpr32sp, preferred-register: '' }
  - { id: 147, class: gpr32sp, preferred-register: '' }
  - { id: 148, class: gpr32sp, preferred-register: '' }
  - { id: 149, class: gpr32sp, preferred-register: '' }
  - { id: 150, class: gpr32sp, preferred-register: '' }
  - { id: 151, class: gpr32sp, preferred-register: '' }
  - { id: 152, class: gpr32sp, preferred-register: '' }
  - { id: 153, class: gpr64, preferred-register: '' }
  - { id: 154, class: gpr32all, preferred-register: '' }
  - { id: 155, class: gpr32all, preferred-register: '' }
  - { id: 156, class: gpr64all, preferred-register: '' }
  - { id: 157, class: gpr64all, preferred-register: '' }
  - { id: 158, class: gpr32all, preferred-register: '' }
  - { id: 159, class: gpr64common, preferred-register: '' }
  - { id: 160, class: gpr64sp, preferred-register: '' }
  - { id: 161, class: gpr32all, preferred-register: '' }
  - { id: 162, class: gpr64all, preferred-register: '' }
  - { id: 163, class: gpr32, preferred-register: '' }
  - { id: 164, class: gpr32common, preferred-register: '' }
  - { id: 165, class: fpr64, preferred-register: '' }
  - { id: 166, class: fpr64, preferred-register: '' }
  - { id: 167, class: gpr32, preferred-register: '' }
  - { id: 168, class: gpr32common, preferred-register: '' }
  - { id: 169, class: fpr64, preferred-register: '' }
  - { id: 170, class: fpr64, preferred-register: '' }
  - { id: 171, class: gpr32, preferred-register: '' }
  - { id: 172, class: gpr32common, preferred-register: '' }
  - { id: 173, class: fpr64, preferred-register: '' }
  - { id: 174, class: fpr64, preferred-register: '' }
  - { id: 175, class: gpr32, preferred-register: '' }
  - { id: 176, class: gpr32common, preferred-register: '' }
  - { id: 177, class: fpr64, preferred-register: '' }
  - { id: 178, class: fpr64, preferred-register: '' }
  - { id: 179, class: gpr32, preferred-register: '' }
  - { id: 180, class: gpr32common, preferred-register: '' }
  - { id: 181, class: fpr64, preferred-register: '' }
  - { id: 182, class: fpr64, preferred-register: '' }
  - { id: 183, class: gpr32, preferred-register: '' }
  - { id: 184, class: gpr32, preferred-register: '' }
  - { id: 185, class: gpr32, preferred-register: '' }
  - { id: 186, class: fpr64, preferred-register: '' }
  - { id: 187, class: fpr64, preferred-register: '' }
  - { id: 188, class: gpr32, preferred-register: '' }
  - { id: 189, class: gpr32common, preferred-register: '' }
  - { id: 190, class: fpr64, preferred-register: '' }
  - { id: 191, class: fpr64, preferred-register: '' }
  - { id: 192, class: gpr32, preferred-register: '' }
  - { id: 193, class: gpr32common, preferred-register: '' }
  - { id: 194, class: fpr64, preferred-register: '' }
  - { id: 195, class: fpr64, preferred-register: '' }
  - { id: 196, class: gpr32, preferred-register: '' }
  - { id: 197, class: gpr32common, preferred-register: '' }
  - { id: 198, class: fpr64, preferred-register: '' }
  - { id: 199, class: fpr64, preferred-register: '' }
  - { id: 200, class: gpr32, preferred-register: '' }
  - { id: 201, class: gpr32common, preferred-register: '' }
  - { id: 202, class: fpr64, preferred-register: '' }
  - { id: 203, class: fpr64, preferred-register: '' }
  - { id: 204, class: gpr32, preferred-register: '' }
  - { id: 205, class: gpr32common, preferred-register: '' }
  - { id: 206, class: fpr64, preferred-register: '' }
  - { id: 207, class: fpr64, preferred-register: '' }
  - { id: 208, class: gpr32, preferred-register: '' }
  - { id: 209, class: gpr32common, preferred-register: '' }
  - { id: 210, class: fpr64, preferred-register: '' }
  - { id: 211, class: fpr64, preferred-register: '' }
  - { id: 212, class: gpr32, preferred-register: '' }
  - { id: 213, class: gpr32common, preferred-register: '' }
  - { id: 214, class: fpr64, preferred-register: '' }
  - { id: 215, class: fpr64, preferred-register: '' }
  - { id: 216, class: gpr32, preferred-register: '' }
  - { id: 217, class: gpr32common, preferred-register: '' }
  - { id: 218, class: fpr64, preferred-register: '' }
  - { id: 219, class: fpr64, preferred-register: '' }
  - { id: 220, class: gpr32, preferred-register: '' }
  - { id: 221, class: gpr32common, preferred-register: '' }
  - { id: 222, class: fpr64, preferred-register: '' }
  - { id: 223, class: fpr64, preferred-register: '' }
  - { id: 224, class: gpr32, preferred-register: '' }
  - { id: 225, class: gpr32common, preferred-register: '' }
  - { id: 226, class: fpr64, preferred-register: '' }
  - { id: 227, class: fpr64, preferred-register: '' }
  - { id: 228, class: gpr32, preferred-register: '' }
  - { id: 229, class: gpr32common, preferred-register: '' }
  - { id: 230, class: fpr64, preferred-register: '' }
  - { id: 231, class: fpr64, preferred-register: '' }
  - { id: 232, class: gpr32, preferred-register: '' }
  - { id: 233, class: gpr32common, preferred-register: '' }
  - { id: 234, class: fpr64, preferred-register: '' }
  - { id: 235, class: fpr64, preferred-register: '' }
  - { id: 236, class: gpr32, preferred-register: '' }
  - { id: 237, class: gpr32common, preferred-register: '' }
  - { id: 238, class: fpr64, preferred-register: '' }
  - { id: 239, class: fpr64, preferred-register: '' }
  - { id: 240, class: gpr32, preferred-register: '' }
  - { id: 241, class: gpr32common, preferred-register: '' }
  - { id: 242, class: fpr64, preferred-register: '' }
  - { id: 243, class: fpr64, preferred-register: '' }
  - { id: 244, class: gpr32, preferred-register: '' }
  - { id: 245, class: gpr32common, preferred-register: '' }
  - { id: 246, class: fpr64, preferred-register: '' }
  - { id: 247, class: fpr64, preferred-register: '' }
  - { id: 248, class: gpr32, preferred-register: '' }
  - { id: 249, class: gpr32common, preferred-register: '' }
  - { id: 250, class: fpr64, preferred-register: '' }
  - { id: 251, class: fpr64, preferred-register: '' }
  - { id: 252, class: gpr32, preferred-register: '' }
  - { id: 253, class: gpr32common, preferred-register: '' }
  - { id: 254, class: fpr64, preferred-register: '' }
  - { id: 255, class: fpr64, preferred-register: '' }
  - { id: 256, class: gpr32, preferred-register: '' }
  - { id: 257, class: gpr32common, preferred-register: '' }
  - { id: 258, class: fpr64, preferred-register: '' }
  - { id: 259, class: fpr64, preferred-register: '' }
  - { id: 260, class: gpr32, preferred-register: '' }
  - { id: 261, class: gpr32common, preferred-register: '' }
  - { id: 262, class: fpr64, preferred-register: '' }
  - { id: 263, class: fpr64, preferred-register: '' }
  - { id: 264, class: gpr32, preferred-register: '' }
  - { id: 265, class: gpr32common, preferred-register: '' }
  - { id: 266, class: fpr64, preferred-register: '' }
  - { id: 267, class: fpr64, preferred-register: '' }
  - { id: 268, class: gpr32, preferred-register: '' }
  - { id: 269, class: gpr32common, preferred-register: '' }
  - { id: 270, class: fpr64, preferred-register: '' }
  - { id: 271, class: fpr64, preferred-register: '' }
  - { id: 272, class: gpr32, preferred-register: '' }
  - { id: 273, class: gpr32common, preferred-register: '' }
  - { id: 274, class: fpr64, preferred-register: '' }
  - { id: 275, class: fpr64, preferred-register: '' }
  - { id: 276, class: gpr32, preferred-register: '' }
  - { id: 277, class: gpr32common, preferred-register: '' }
  - { id: 278, class: fpr64, preferred-register: '' }
  - { id: 279, class: fpr64, preferred-register: '' }
  - { id: 280, class: gpr32, preferred-register: '' }
  - { id: 281, class: gpr32common, preferred-register: '' }
  - { id: 282, class: fpr64, preferred-register: '' }
  - { id: 283, class: fpr64, preferred-register: '' }
  - { id: 284, class: gpr32, preferred-register: '' }
  - { id: 285, class: gpr32common, preferred-register: '' }
  - { id: 286, class: fpr64, preferred-register: '' }
  - { id: 287, class: fpr64, preferred-register: '' }
  - { id: 288, class: gpr32, preferred-register: '' }
  - { id: 289, class: gpr32common, preferred-register: '' }
  - { id: 290, class: fpr64, preferred-register: '' }
  - { id: 291, class: fpr64, preferred-register: '' }
  - { id: 292, class: gpr32, preferred-register: '' }
  - { id: 293, class: gpr32common, preferred-register: '' }
  - { id: 294, class: fpr64, preferred-register: '' }
  - { id: 295, class: fpr64, preferred-register: '' }
  - { id: 296, class: gpr32, preferred-register: '' }
  - { id: 297, class: gpr32common, preferred-register: '' }
  - { id: 298, class: fpr64, preferred-register: '' }
  - { id: 299, class: fpr64, preferred-register: '' }
  - { id: 300, class: gpr32, preferred-register: '' }
  - { id: 301, class: gpr32common, preferred-register: '' }
  - { id: 302, class: fpr64, preferred-register: '' }
  - { id: 303, class: fpr64, preferred-register: '' }
  - { id: 304, class: gpr32, preferred-register: '' }
  - { id: 305, class: gpr32common, preferred-register: '' }
  - { id: 306, class: fpr64, preferred-register: '' }
  - { id: 307, class: fpr64, preferred-register: '' }
  - { id: 308, class: gpr32, preferred-register: '' }
  - { id: 309, class: gpr32common, preferred-register: '' }
  - { id: 310, class: fpr64, preferred-register: '' }
  - { id: 311, class: fpr64, preferred-register: '' }
  - { id: 312, class: gpr32, preferred-register: '' }
  - { id: 313, class: gpr32common, preferred-register: '' }
  - { id: 314, class: fpr64, preferred-register: '' }
  - { id: 315, class: fpr64, preferred-register: '' }
  - { id: 316, class: gpr32, preferred-register: '' }
  - { id: 317, class: gpr32common, preferred-register: '' }
  - { id: 318, class: fpr64, preferred-register: '' }
  - { id: 319, class: fpr64, preferred-register: '' }
  - { id: 320, class: gpr32, preferred-register: '' }
  - { id: 321, class: gpr32common, preferred-register: '' }
  - { id: 322, class: fpr64, preferred-register: '' }
  - { id: 323, class: gpr32, preferred-register: '' }
  - { id: 324, class: gpr64sp, preferred-register: '' }
  - { id: 325, class: gpr64sp, preferred-register: '' }
  - { id: 326, class: gpr64, preferred-register: '' }
  - { id: 327, class: fpr64, preferred-register: '' }
  - { id: 328, class: gpr64common, preferred-register: '' }
  - { id: 329, class: gpr64common, preferred-register: '' }
  - { id: 330, class: gpr64common, preferred-register: '' }
  - { id: 331, class: gpr64common, preferred-register: '' }
  - { id: 332, class: gpr64common, preferred-register: '' }
  - { id: 333, class: gpr64common, preferred-register: '' }
  - { id: 334, class: gpr64common, preferred-register: '' }
  - { id: 335, class: gpr64common, preferred-register: '' }
  - { id: 336, class: gpr32all, preferred-register: '' }
  - { id: 337, class: gpr32common, preferred-register: '' }
  - { id: 338, class: gpr32, preferred-register: '' }
  - { id: 339, class: gpr32, preferred-register: '' }
  - { id: 340, class: gpr64sp, preferred-register: '' }
  - { id: 341, class: gpr64all, preferred-register: '' }
  - { id: 342, class: gpr32all, preferred-register: '' }
  - { id: 343, class: fpr64, preferred-register: '' }
  - { id: 344, class: fpr64, preferred-register: '' }
  - { id: 345, class: fpr64, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%40' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $x0
  
    %40:gpr64common = COPY $x0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %52:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s315, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s315
    $x0 = COPY %52
    BL @initialise_arrays, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %54:gpr64all = COPY $xzr
    $x0 = COPY %40
    $x1 = COPY %54
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %56:gpr64common = LOADgot target-flags(aarch64-got) @a
    %57:gpr64sp = ADDXri %56, 40, 0
    %51:gpr64all = COPY %54
    %58:gpr32 = MOVi32imm 14
    %50:gpr32all = COPY %58
    %59:gpr32 = MOVi32imm 21
    %49:gpr32all = COPY %59
    %60:gpr32 = MOVi32imm 28
    %47:gpr32all = COPY %60
    %61:gpr32 = MOVi32imm 35
    %46:gpr32all = COPY %61
    %62:gpr32 = MOVi32imm 42
    %45:gpr32all = COPY %62
    %63:gpr32 = MOVi32imm 49
    %44:gpr32all = COPY %63
    %64:gpr32 = MOVi32imm 7
    %43:gpr32all = COPY %64
    %65:gpr32 = MOVi32imm 63
    %42:gpr32all = COPY %65
    %66:gpr32 = MOVi32imm 56
    %41:gpr32all = COPY %66
    %48:gpr64all = COPY %57
    %67:gpr32 = MOVi32imm 3200
    %0:gpr64all = SUBREG_TO_REG 0, killed %67, %subreg.sub_32
    %70:gpr32 = MOVi32imm 274877907
    %75:gpr32 = MOVi32imm -32000
  
  bb.1.for.body:
    successors: %bb.1(0x7c000000), %bb.2(0x04000000)
  
    %1:gpr32common = PHI %41, %bb.0, %23, %bb.1
    %2:gpr32common = PHI %42, %bb.0, %22, %bb.1
    %3:gpr32common = PHI %43, %bb.0, %21, %bb.1
    %4:gpr32common = PHI %44, %bb.0, %20, %bb.1
    %5:gpr32common = PHI %45, %bb.0, %19, %bb.1
    %6:gpr32common = PHI %46, %bb.0, %18, %bb.1
    %7:gpr32common = PHI %47, %bb.0, %17, %bb.1
    %8:gpr64sp = PHI %48, %bb.0, %16, %bb.1
    %9:gpr32common = PHI %49, %bb.0, %15, %bb.1
    %10:gpr32common = PHI %50, %bb.0, %14, %bb.1
    %11:gpr64common = PHI %51, %bb.0, %13, %bb.1
    %12:gpr64sp = PHI %0, %bb.0, %24, %bb.1
    %68:gpr32 = COPY %11.sub_32
    %69:gpr64common = ANDXri %11, 4127
    %71:gpr64 = SUBREG_TO_REG 0, %70, %subreg.sub_32
    %72:gpr64 = MADDXrrr killed %69, killed %71, $xzr
    %73:gpr64 = UBFMXri killed %72, 43, 63
    %74:gpr32 = COPY %73.sub_32
    %77:gpr64 = UMADDLrrr %10, %70, $xzr
    %78:gpr64 = UBFMXri killed %77, 43, 63
    %79:gpr32 = COPY %78.sub_32
    %81:gpr64 = UMADDLrrr %9, %70, $xzr
    %82:gpr64 = UBFMXri killed %81, 43, 63
    %83:gpr32 = COPY %82.sub_32
    %85:gpr64 = UMADDLrrr %7, %70, $xzr
    %86:gpr64 = UBFMXri killed %85, 43, 63
    %87:gpr32 = COPY %86.sub_32
    %89:gpr64 = UMADDLrrr %6, %70, $xzr
    %90:gpr64 = UBFMXri killed %89, 43, 63
    %91:gpr32 = COPY %90.sub_32
    %93:gpr64 = UMADDLrrr %5, %70, $xzr
    %94:gpr64 = UBFMXri killed %93, 43, 63
    %95:gpr32 = COPY %94.sub_32
    %97:gpr64 = UMADDLrrr %4, %70, $xzr
    %98:gpr64 = UBFMXri killed %97, 43, 63
    %99:gpr32 = COPY %98.sub_32
    %101:gpr64 = UMADDLrrr %3, %70, $xzr
    %102:gpr64 = UBFMXri killed %101, 43, 63
    %103:gpr32 = COPY %102.sub_32
    %105:gpr64 = UMADDLrrr %2, %70, $xzr
    %106:gpr64 = UBFMXri killed %105, 43, 63
    %107:gpr32 = COPY %106.sub_32
    %109:gpr64 = UMADDLrrr %1, %70, $xzr
    %110:gpr64 = UBFMXri killed %109, 43, 63
    %111:gpr32 = COPY %110.sub_32
    %113:gpr32 = MADDWrrr killed %74, %75, %68
    %114:fpr64 = nofpexcept SCVTFUWDri killed %113
    STURDi killed %114, %8, -40 :: (store (s64) into %ir.uglygep250, align 16, !tbaa !6)
    %115:gpr32common = MADDWrrr killed %103, %75, %68
    %116:gpr32common = ADDWri killed %115, 7, 0
    %117:fpr64 = nofpexcept SCVTFUWDri killed %116
    STURDi killed %117, %8, -32 :: (store (s64) into %ir.uglygep258, !tbaa !6)
    %118:gpr32common = MADDWrrr killed %79, %75, %68
    %119:gpr32common = ADDWri killed %118, 14, 0
    %120:fpr64 = nofpexcept SCVTFUWDri killed %119
    STURDi killed %120, %8, -24 :: (store (s64) into %ir.uglygep257, align 16, !tbaa !6)
    %121:gpr32common = MADDWrrr killed %83, %75, %68
    %122:gpr32common = ADDWri killed %121, 21, 0
    %123:fpr64 = nofpexcept SCVTFUWDri killed %122
    STURDi killed %123, %8, -16 :: (store (s64) into %ir.uglygep256, !tbaa !6)
    %124:gpr32common = MADDWrrr killed %87, %75, %68
    %125:gpr32common = ADDWri killed %124, 28, 0
    %126:fpr64 = nofpexcept SCVTFUWDri killed %125
    STURDi killed %126, %8, -8 :: (store (s64) into %ir.uglygep255, align 16, !tbaa !6)
    %127:gpr32common = MADDWrrr killed %91, %75, %68
    %128:gpr32common = ADDWri killed %127, 35, 0
    %129:fpr64 = nofpexcept SCVTFUWDri killed %128
    STRDui killed %129, %8, 0 :: (store (s64) into %ir.lsr.iv248, !tbaa !6)
    %130:gpr32common = MADDWrrr killed %95, %75, %68
    %131:gpr32common = ADDWri killed %130, 42, 0
    %132:fpr64 = nofpexcept SCVTFUWDri killed %131
    STRDui killed %132, %8, 1 :: (store (s64) into %ir.uglygep254, align 16, !tbaa !6)
    %133:gpr32common = MADDWrrr killed %99, %75, %68
    %134:gpr32common = ADDWri killed %133, 49, 0
    %135:fpr64 = nofpexcept SCVTFUWDri killed %134
    STRDui killed %135, %8, 2 :: (store (s64) into %ir.uglygep253, !tbaa !6)
    %136:gpr32common = MADDWrrr killed %111, %75, %68
    %137:gpr32common = ADDWri killed %136, 56, 0
    %138:fpr64 = nofpexcept SCVTFUWDri killed %137
    STRDui killed %138, %8, 3 :: (store (s64) into %ir.uglygep252, align 16, !tbaa !6)
    %139:gpr32common = MADDWrrr killed %107, %75, %68
    %140:gpr32common = ADDWri killed %139, 63, 0
    %141:fpr64 = nofpexcept SCVTFUWDri killed %140
    STRDui killed %141, %8, 4 :: (store (s64) into %ir.uglygep251, !tbaa !6)
    %142:gpr64sp = nuw nsw ADDXri %11, 70, 0
    %13:gpr64all = COPY %142
    %143:gpr32sp = nuw nsw ADDWri %10, 70, 0
    %14:gpr32all = COPY %143
    %144:gpr32sp = nuw nsw ADDWri %9, 70, 0
    %15:gpr32all = COPY %144
    %145:gpr64sp = ADDXri %8, 80, 0
    %16:gpr64all = COPY %145
    %146:gpr32sp = nuw nsw ADDWri %7, 70, 0
    %17:gpr32all = COPY %146
    %147:gpr32sp = nuw nsw ADDWri %6, 70, 0
    %18:gpr32all = COPY %147
    %148:gpr32sp = nuw nsw ADDWri %5, 70, 0
    %19:gpr32all = COPY %148
    %149:gpr32sp = nuw nsw ADDWri %4, 70, 0
    %20:gpr32all = COPY %149
    %150:gpr32sp = nuw nsw ADDWri %3, 70, 0
    %21:gpr32all = COPY %150
    %151:gpr32sp = nuw nsw ADDWri %2, 70, 0
    %22:gpr32all = COPY %151
    %152:gpr32sp = nuw nsw ADDWri %1, 70, 0
    %23:gpr32all = COPY %152
    %153:gpr64 = SUBSXri %12, 1, 0, implicit-def $nzcv
    %24:gpr64all = COPY %153
    Bcc 1, %bb.1, implicit $nzcv
    B %bb.2
  
  bb.2.for.body6.preheader:
    successors: %bb.4(0x80000000)
  
    %155:gpr32all = COPY $wzr
    %154:gpr32all = COPY %155
    %163:gpr32 = MOVi32imm 800
    %184:gpr32 = MOVi32imm 5
    %329:gpr64common = LOADgot target-flags(aarch64-got) @b
    %330:gpr64common = LOADgot target-flags(aarch64-got) @c
    %331:gpr64common = LOADgot target-flags(aarch64-got) @d
    %332:gpr64common = LOADgot target-flags(aarch64-got) @e
    %333:gpr64common = LOADgot target-flags(aarch64-got) @aa
    %334:gpr64common = LOADgot target-flags(aarch64-got) @bb
    %335:gpr64common = LOADgot target-flags(aarch64-got) @cc
    %338:gpr32 = MOVi32imm 100000
    B %bb.4
  
  bb.3.for.cond.cleanup5:
    %340:gpr64sp = nuw ADDXri %40, 16, 0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %341:gpr64all = COPY $xzr
    $x0 = COPY %340
    $x1 = COPY %341
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %343:fpr64 = FMOVDi 112
    %344:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr %35, killed %343
    %345:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %344, %28
    $d0 = COPY %345
    RET_ReallyLR implicit $d0
  
  bb.4.for.body6:
    successors: %bb.6(0x80000000)
  
    %25:gpr32sp = PHI %154, %bb.2, %29, %bb.5
    early-clobber %160:gpr64sp, %26:fpr64 = LDRDpost %56, 160 :: (load (s64) from @a, align 64, !tbaa !6)
    %161:gpr32all = COPY $wzr
    %158:gpr32all = COPY %161
    %162:gpr64all = COPY $xzr
    %157:gpr64all = COPY %162
    %156:gpr64all = COPY %160
    %27:gpr64all = SUBREG_TO_REG 0, %163, %subreg.sub_32
    B %bb.6
  
  bb.5.for.cond.cleanup11:
    successors: %bb.3(0x04000000), %bb.4(0x7c000000)
  
    %28:fpr64 = nofpexcept SCVTFUWDri %323
    %327:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr %35, %28
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    $x0 = COPY %56
    $x1 = COPY %329
    $x2 = COPY %330
    $x3 = COPY %331
    $x4 = COPY %332
    $x5 = COPY %333
    $x6 = COPY %334
    $x7 = COPY %335
    $d0 = COPY %327
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $d0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %337:gpr32common = nuw nsw ADDWri %25, 1, 0
    %29:gpr32all = COPY %337
    dead $wzr = SUBSWrr %337, %338, implicit-def $nzcv
    Bcc 0, %bb.3, implicit $nzcv
    B %bb.4
  
  bb.6.for.body12:
    successors: %bb.6(0x7c000000), %bb.5(0x04000000)
  
    %30:gpr64sp = PHI %156, %bb.4, %38, %bb.6
    %31:gpr64sp = PHI %157, %bb.4, %37, %bb.6
    %32:gpr32 = PHI %158, %bb.4, %36, %bb.6
    %33:fpr64 = PHI %26, %bb.4, %35, %bb.6
    %34:gpr64sp = PHI %27, %bb.4, %39, %bb.6
    %164:gpr32common = COPY %31.sub_32
    %165:fpr64 = LDURDi %30, -160 :: (load (s64) from %ir.uglygep200, align 64, !tbaa !6)
    %166:fpr64 = nofpexcept FMAXNMDrr %165, %33
    nofpexcept FCMPDrr %165, %33, implicit-def $nzcv
    %167:gpr32 = CSELWr %164, %32, 12, implicit $nzcv
    %168:gpr32common = ORRWri %164, 0
    %169:fpr64 = LDURDi %30, -152 :: (load (s64) from %ir.uglygep204, !tbaa !6)
    %170:fpr64 = nofpexcept FMAXNMDrr %169, %166
    nofpexcept FCMPDrr %169, %166, implicit-def $nzcv
    %171:gpr32 = CSELWr killed %168, killed %167, 12, implicit $nzcv
    %172:gpr32common = ORRWri %164, 1984
    %173:fpr64 = LDURDi %30, -144 :: (load (s64) from %ir.uglygep205, align 16, !tbaa !6)
    %174:fpr64 = nofpexcept FMAXNMDrr %173, %170
    nofpexcept FCMPDrr %173, %170, implicit-def $nzcv
    %175:gpr32 = CSELWr killed %172, killed %171, 12, implicit $nzcv
    %176:gpr32common = ORRWri %164, 1
    %177:fpr64 = LDURDi %30, -136 :: (load (s64) from %ir.uglygep206, !tbaa !6)
    %178:fpr64 = nofpexcept FMAXNMDrr %177, %174
    nofpexcept FCMPDrr %177, %174, implicit-def $nzcv
    %179:gpr32 = CSELWr killed %176, killed %175, 12, implicit $nzcv
    %180:gpr32common = ORRWri %164, 1920
    %181:fpr64 = LDURDi %30, -128 :: (load (s64) from %ir.uglygep207, align 32, !tbaa !6)
    %182:fpr64 = nofpexcept FMAXNMDrr %181, %178
    nofpexcept FCMPDrr %181, %178, implicit-def $nzcv
    %183:gpr32 = CSELWr killed %180, killed %179, 12, implicit $nzcv
    %185:gpr32 = ORRWrr %164, %184
    %186:fpr64 = LDURDi %30, -120 :: (load (s64) from %ir.uglygep208, !tbaa !6)
    %187:fpr64 = nofpexcept FMAXNMDrr %186, %182
    nofpexcept FCMPDrr %186, %182, implicit-def $nzcv
    %188:gpr32 = CSELWr killed %185, killed %183, 12, implicit $nzcv
    %189:gpr32common = ORRWri %164, 1985
    %190:fpr64 = LDURDi %30, -112 :: (load (s64) from %ir.uglygep209, align 16, !tbaa !6)
    %191:fpr64 = nofpexcept FMAXNMDrr %190, %187
    nofpexcept FCMPDrr %190, %187, implicit-def $nzcv
    %192:gpr32 = CSELWr killed %189, killed %188, 12, implicit $nzcv
    %193:gpr32common = ORRWri %164, 2
    %194:fpr64 = LDURDi %30, -104 :: (load (s64) from %ir.uglygep210, !tbaa !6)
    %195:fpr64 = nofpexcept FMAXNMDrr %194, %191
    nofpexcept FCMPDrr %194, %191, implicit-def $nzcv
    %196:gpr32 = CSELWr killed %193, killed %192, 12, implicit $nzcv
    %197:gpr32common = ADDWri %164, 8, 0
    %198:fpr64 = LDURDi %30, -96 :: (load (s64) from %ir.uglygep211, align 64, !tbaa !6)
    %199:fpr64 = nofpexcept FMAXNMDrr %198, %195
    nofpexcept FCMPDrr %198, %195, implicit-def $nzcv
    %200:gpr32 = CSELWr killed %197, killed %196, 12, implicit $nzcv
    %201:gpr32common = ADDWri %164, 9, 0
    %202:fpr64 = LDURDi %30, -88 :: (load (s64) from %ir.uglygep212, !tbaa !6)
    %203:fpr64 = nofpexcept FMAXNMDrr %202, %199
    nofpexcept FCMPDrr %202, %199, implicit-def $nzcv
    %204:gpr32 = CSELWr killed %201, killed %200, 12, implicit $nzcv
    %205:gpr32common = ADDWri %164, 10, 0
    %206:fpr64 = LDURDi %30, -80 :: (load (s64) from %ir.uglygep213, align 16, !tbaa !6)
    %207:fpr64 = nofpexcept FMAXNMDrr %206, %203
    nofpexcept FCMPDrr %206, %203, implicit-def $nzcv
    %208:gpr32 = CSELWr killed %205, killed %204, 12, implicit $nzcv
    %209:gpr32common = ADDWri %164, 11, 0
    %210:fpr64 = LDURDi %30, -72 :: (load (s64) from %ir.uglygep214, !tbaa !6)
    %211:fpr64 = nofpexcept FMAXNMDrr %210, %207
    nofpexcept FCMPDrr %210, %207, implicit-def $nzcv
    %212:gpr32 = CSELWr killed %209, killed %208, 12, implicit $nzcv
    %213:gpr32common = ADDWri %164, 12, 0
    %214:fpr64 = LDURDi %30, -64 :: (load (s64) from %ir.uglygep215, align 32, !tbaa !6)
    %215:fpr64 = nofpexcept FMAXNMDrr %214, %211
    nofpexcept FCMPDrr %214, %211, implicit-def $nzcv
    %216:gpr32 = CSELWr killed %213, killed %212, 12, implicit $nzcv
    %217:gpr32common = ADDWri %164, 13, 0
    %218:fpr64 = LDURDi %30, -56 :: (load (s64) from %ir.uglygep216, !tbaa !6)
    %219:fpr64 = nofpexcept FMAXNMDrr %218, %215
    nofpexcept FCMPDrr %218, %215, implicit-def $nzcv
    %220:gpr32 = CSELWr killed %217, killed %216, 12, implicit $nzcv
    %221:gpr32common = ADDWri %164, 14, 0
    %222:fpr64 = LDURDi %30, -48 :: (load (s64) from %ir.uglygep217, align 16, !tbaa !6)
    %223:fpr64 = nofpexcept FMAXNMDrr %222, %219
    nofpexcept FCMPDrr %222, %219, implicit-def $nzcv
    %224:gpr32 = CSELWr killed %221, killed %220, 12, implicit $nzcv
    %225:gpr32common = ADDWri %164, 15, 0
    %226:fpr64 = LDURDi %30, -40 :: (load (s64) from %ir.uglygep218, !tbaa !6)
    %227:fpr64 = nofpexcept FMAXNMDrr %226, %223
    nofpexcept FCMPDrr %226, %223, implicit-def $nzcv
    %228:gpr32 = CSELWr killed %225, killed %224, 12, implicit $nzcv
    %229:gpr32common = ADDWri %164, 16, 0
    %230:fpr64 = LDURDi %30, -32 :: (load (s64) from %ir.uglygep219, align 64, !tbaa !6)
    %231:fpr64 = nofpexcept FMAXNMDrr %230, %227
    nofpexcept FCMPDrr %230, %227, implicit-def $nzcv
    %232:gpr32 = CSELWr killed %229, killed %228, 12, implicit $nzcv
    %233:gpr32common = ADDWri %164, 17, 0
    %234:fpr64 = LDURDi %30, -24 :: (load (s64) from %ir.uglygep220, !tbaa !6)
    %235:fpr64 = nofpexcept FMAXNMDrr %234, %231
    nofpexcept FCMPDrr %234, %231, implicit-def $nzcv
    %236:gpr32 = CSELWr killed %233, killed %232, 12, implicit $nzcv
    %237:gpr32common = ADDWri %164, 18, 0
    %238:fpr64 = LDURDi %30, -16 :: (load (s64) from %ir.uglygep221, align 16, !tbaa !6)
    %239:fpr64 = nofpexcept FMAXNMDrr %238, %235
    nofpexcept FCMPDrr %238, %235, implicit-def $nzcv
    %240:gpr32 = CSELWr killed %237, killed %236, 12, implicit $nzcv
    %241:gpr32common = ADDWri %164, 19, 0
    %242:fpr64 = LDURDi %30, -8 :: (load (s64) from %ir.uglygep222, !tbaa !6)
    %243:fpr64 = nofpexcept FMAXNMDrr %242, %239
    nofpexcept FCMPDrr %242, %239, implicit-def $nzcv
    %244:gpr32 = CSELWr killed %241, killed %240, 12, implicit $nzcv
    %245:gpr32common = ADDWri %164, 20, 0
    %246:fpr64 = LDRDui %30, 0 :: (load (s64) from %ir.lsr.iv198, align 32, !tbaa !6)
    %247:fpr64 = nofpexcept FMAXNMDrr %246, %243
    nofpexcept FCMPDrr %246, %243, implicit-def $nzcv
    %248:gpr32 = CSELWr killed %245, killed %244, 12, implicit $nzcv
    %249:gpr32common = ADDWri %164, 21, 0
    %250:fpr64 = LDRDui %30, 1 :: (load (s64) from %ir.uglygep224, !tbaa !6)
    %251:fpr64 = nofpexcept FMAXNMDrr %250, %247
    nofpexcept FCMPDrr %250, %247, implicit-def $nzcv
    %252:gpr32 = CSELWr killed %249, killed %248, 12, implicit $nzcv
    %253:gpr32common = ADDWri %164, 22, 0
    %254:fpr64 = LDRDui %30, 2 :: (load (s64) from %ir.uglygep225, align 16, !tbaa !6)
    %255:fpr64 = nofpexcept FMAXNMDrr %254, %251
    nofpexcept FCMPDrr %254, %251, implicit-def $nzcv
    %256:gpr32 = CSELWr killed %253, killed %252, 12, implicit $nzcv
    %257:gpr32common = ADDWri %164, 23, 0
    %258:fpr64 = LDRDui %30, 3 :: (load (s64) from %ir.uglygep226, !tbaa !6)
    %259:fpr64 = nofpexcept FMAXNMDrr %258, %255
    nofpexcept FCMPDrr %258, %255, implicit-def $nzcv
    %260:gpr32 = CSELWr killed %257, killed %256, 12, implicit $nzcv
    %261:gpr32common = ADDWri %164, 24, 0
    %262:fpr64 = LDRDui %30, 4 :: (load (s64) from %ir.uglygep227, align 64, !tbaa !6)
    %263:fpr64 = nofpexcept FMAXNMDrr %262, %259
    nofpexcept FCMPDrr %262, %259, implicit-def $nzcv
    %264:gpr32 = CSELWr killed %261, killed %260, 12, implicit $nzcv
    %265:gpr32common = ADDWri %164, 25, 0
    %266:fpr64 = LDRDui %30, 5 :: (load (s64) from %ir.uglygep228, !tbaa !6)
    %267:fpr64 = nofpexcept FMAXNMDrr %266, %263
    nofpexcept FCMPDrr %266, %263, implicit-def $nzcv
    %268:gpr32 = CSELWr killed %265, killed %264, 12, implicit $nzcv
    %269:gpr32common = ADDWri %164, 26, 0
    %270:fpr64 = LDRDui %30, 6 :: (load (s64) from %ir.uglygep229, align 16, !tbaa !6)
    %271:fpr64 = nofpexcept FMAXNMDrr %270, %267
    nofpexcept FCMPDrr %270, %267, implicit-def $nzcv
    %272:gpr32 = CSELWr killed %269, killed %268, 12, implicit $nzcv
    %273:gpr32common = ADDWri %164, 27, 0
    %274:fpr64 = LDRDui %30, 7 :: (load (s64) from %ir.uglygep230, !tbaa !6)
    %275:fpr64 = nofpexcept FMAXNMDrr %274, %271
    nofpexcept FCMPDrr %274, %271, implicit-def $nzcv
    %276:gpr32 = CSELWr killed %273, killed %272, 12, implicit $nzcv
    %277:gpr32common = ADDWri %164, 28, 0
    %278:fpr64 = LDRDui %30, 8 :: (load (s64) from %ir.uglygep231, align 32, !tbaa !6)
    %279:fpr64 = nofpexcept FMAXNMDrr %278, %275
    nofpexcept FCMPDrr %278, %275, implicit-def $nzcv
    %280:gpr32 = CSELWr killed %277, killed %276, 12, implicit $nzcv
    %281:gpr32common = ADDWri %164, 29, 0
    %282:fpr64 = LDRDui %30, 9 :: (load (s64) from %ir.uglygep232, !tbaa !6)
    %283:fpr64 = nofpexcept FMAXNMDrr %282, %279
    nofpexcept FCMPDrr %282, %279, implicit-def $nzcv
    %284:gpr32 = CSELWr killed %281, killed %280, 12, implicit $nzcv
    %285:gpr32common = ADDWri %164, 30, 0
    %286:fpr64 = LDRDui %30, 10 :: (load (s64) from %ir.uglygep233, align 16, !tbaa !6)
    %287:fpr64 = nofpexcept FMAXNMDrr %286, %283
    nofpexcept FCMPDrr %286, %283, implicit-def $nzcv
    %288:gpr32 = CSELWr killed %285, killed %284, 12, implicit $nzcv
    %289:gpr32common = ADDWri %164, 31, 0
    %290:fpr64 = LDRDui %30, 11 :: (load (s64) from %ir.uglygep234, !tbaa !6)
    %291:fpr64 = nofpexcept FMAXNMDrr %290, %287
    nofpexcept FCMPDrr %290, %287, implicit-def $nzcv
    %292:gpr32 = CSELWr killed %289, killed %288, 12, implicit $nzcv
    %293:gpr32common = ADDWri %164, 32, 0
    %294:fpr64 = LDRDui %30, 12 :: (load (s64) from %ir.uglygep235, align 64, !tbaa !6)
    %295:fpr64 = nofpexcept FMAXNMDrr %294, %291
    nofpexcept FCMPDrr %294, %291, implicit-def $nzcv
    %296:gpr32 = CSELWr killed %293, killed %292, 12, implicit $nzcv
    %297:gpr32common = ADDWri %164, 33, 0
    %298:fpr64 = LDRDui %30, 13 :: (load (s64) from %ir.uglygep236, !tbaa !6)
    %299:fpr64 = nofpexcept FMAXNMDrr %298, %295
    nofpexcept FCMPDrr %298, %295, implicit-def $nzcv
    %300:gpr32 = CSELWr killed %297, killed %296, 12, implicit $nzcv
    %301:gpr32common = ADDWri %164, 34, 0
    %302:fpr64 = LDRDui %30, 14 :: (load (s64) from %ir.uglygep237, align 16, !tbaa !6)
    %303:fpr64 = nofpexcept FMAXNMDrr %302, %299
    nofpexcept FCMPDrr %302, %299, implicit-def $nzcv
    %304:gpr32 = CSELWr killed %301, killed %300, 12, implicit $nzcv
    %305:gpr32common = ADDWri %164, 35, 0
    %306:fpr64 = LDRDui %30, 15 :: (load (s64) from %ir.uglygep238, !tbaa !6)
    %307:fpr64 = nofpexcept FMAXNMDrr %306, %303
    nofpexcept FCMPDrr %306, %303, implicit-def $nzcv
    %308:gpr32 = CSELWr killed %305, killed %304, 12, implicit $nzcv
    %309:gpr32common = ADDWri %164, 36, 0
    %310:fpr64 = LDRDui %30, 16 :: (load (s64) from %ir.uglygep223, align 32, !tbaa !6)
    %311:fpr64 = nofpexcept FMAXNMDrr %310, %307
    nofpexcept FCMPDrr %310, %307, implicit-def $nzcv
    %312:gpr32 = CSELWr killed %309, killed %308, 12, implicit $nzcv
    %313:gpr32common = ADDWri %164, 37, 0
    %314:fpr64 = LDRDui %30, 17 :: (load (s64) from %ir.uglygep203, !tbaa !6)
    %315:fpr64 = nofpexcept FMAXNMDrr %314, %311
    nofpexcept FCMPDrr %314, %311, implicit-def $nzcv
    %316:gpr32 = CSELWr killed %313, killed %312, 12, implicit $nzcv
    %317:gpr32common = ADDWri %164, 38, 0
    %318:fpr64 = LDRDui %30, 18 :: (load (s64) from %ir.uglygep202, align 16, !tbaa !6)
    %319:fpr64 = nofpexcept FMAXNMDrr %318, %315
    nofpexcept FCMPDrr %318, %315, implicit-def $nzcv
    %320:gpr32 = CSELWr killed %317, killed %316, 12, implicit $nzcv
    %321:gpr32common = ADDWri %164, 39, 0
    %322:fpr64 = LDRDui %30, 19 :: (load (s64) from %ir.uglygep201, !tbaa !6)
    %35:fpr64 = nofpexcept FMAXNMDrr %322, %319
    nofpexcept FCMPDrr %322, %319, implicit-def $nzcv
    %323:gpr32 = CSELWr killed %321, killed %320, 12, implicit $nzcv
    %36:gpr32 = COPY %323
    %324:gpr64sp = nuw nsw ADDXri %31, 40, 0
    %37:gpr64all = COPY %324
    %325:gpr64sp = ADDXri %30, 320, 0
    %38:gpr64all = COPY %325
    %326:gpr64 = SUBSXri %34, 1, 0, implicit-def $nzcv
    %39:gpr64all = COPY %326
    Bcc 1, %bb.6, implicit $nzcv
    B %bb.5

...
