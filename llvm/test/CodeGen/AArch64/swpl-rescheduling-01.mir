# RUN: llc %s -fswp -mcpu=a64fx -start-before=aarch64-swpipeliner -swpl-debug -o /dev/null 2>&1 | FileCheck %s
# CHECK:         : (Iterative Modulo Scheduling. ResMII 2. NumOfBodyInsts 6. Budget 300. Minimum II = 2.)
# CHECK-NEXT:        :  (O) Scheduling succeeds    at estimation.          : (II: 2 in [ 2,1000]) MVE: 5 Last inst: 0. (Itr Org: 0, Req: 14) (VReg Fp: 12/32, Int: 6/29, Pre: 1/8) Eval:0.000000e+00.
# CHECK-NEXT:         : Required iteration count in MIR input is        :   14 (= kernel:5 + pro/epilogue:9 + mod:0)
# CHECK-NEXT:        : Original loop iteration is not found.
# CHECK-NEXT:        :
# CHECK-NEXT:        : Loop is software pipelined. (ii=2, kernel=10 cycles, prologue,epilogue =18 cycles)

--- |
  ; ModuleID = 'a.c'
  source_filename = "a.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  @b = external local_unnamed_addr global [32000 x double], align 64
  @a = external local_unnamed_addr global [32000 x double], align 64
  
  ; Function Attrs: nofree norecurse nosync nounwind memory(readwrite, argmem: none, inaccessiblemem: none) uwtable vscale_range(1,16)
  define dso_local void @s() local_unnamed_addr #0 {
  entry:
    %0 = tail call i64 @llvm.vscale.i64()
    %1 = shl nuw nsw i64 %0, 1
    %n.mod.vf = urem i64 32000, %1
    %n.vec = sub nuw nsw i64 32000, %n.mod.vf
    %2 = tail call i64 @llvm.vscale.i64()
    %3 = shl nuw nsw i64 %2, 1
    %4 = udiv i64 32000, %1
    %5 = mul i64 %0, %4
    %6 = shl i64 %5, 4
    %uglygep19 = getelementptr i8, ptr @a, i64 %6
    %uglygep21 = getelementptr i8, ptr @b, i64 %6
    br label %vector.ph
  
  vector.ph:                                        ; preds = %for.cond.cleanup3, %entry
    %nl.015 = phi i32 [ 0, %entry ], [ %inc8, %for.cond.cleanup3 ]
    br label %vector.body
  
  vector.body:                                      ; preds = %vector.body, %vector.ph
    %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
    %7 = shl i64 %index, 3
    %uglygep = getelementptr i8, ptr @b, i64 %7
    %wide.load = load <vscale x 2 x double>, ptr %uglygep, align 16, !tbaa !6
    %8 = fadd fast <vscale x 2 x double> %wide.load, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 1.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer)
    %uglygep18 = getelementptr i8, ptr @a, i64 %7
    store <vscale x 2 x double> %8, ptr %uglygep18, align 16, !tbaa !6
    %index.next = add nuw i64 %index, %3
    %9 = icmp eq i64 %n.vec, %index.next
    br i1 %9, label %middle.block, label %vector.body, !llvm.loop !10
  
  middle.block:                                     ; preds = %vector.body
    %10 = icmp eq i64 %n.mod.vf, 0
    br i1 %10, label %for.cond.cleanup3, label %for.body4.preheader
  
  for.body4.preheader:                              ; preds = %middle.block
    %11 = call i64 @llvm.start.loop.iterations.i64(i64 %n.mod.vf)
    br label %for.body4
  
  for.cond.cleanup:                                 ; preds = %for.cond.cleanup3
    ret void
  
  for.cond.cleanup3:                                ; preds = %for.body4, %middle.block
    %inc8 = add nuw nsw i32 %nl.015, 1
    %exitcond17.not = icmp eq i32 %inc8, 200000
    br i1 %exitcond17.not, label %for.cond.cleanup, label %vector.ph, !llvm.loop !15
  
  for.body4:                                        ; preds = %for.body4.preheader, %for.body4
    %lsr.iv22 = phi ptr [ %uglygep21, %for.body4.preheader ], [ %uglygep23, %for.body4 ]
    %lsr.iv = phi ptr [ %uglygep19, %for.body4.preheader ], [ %uglygep20, %for.body4 ]
    %12 = phi i64 [ %11, %for.body4.preheader ], [ %14, %for.body4 ]
    %13 = load double, ptr %lsr.iv22, align 8, !tbaa !6
    %add = fadd fast double %13, 1.000000e+00
    store double %add, ptr %lsr.iv, align 8, !tbaa !6
    %uglygep20 = getelementptr i8, ptr %lsr.iv, i64 8
    %uglygep23 = getelementptr i8, ptr %lsr.iv22, i64 8
    %14 = call i64 @llvm.loop.decrement.reg.i64(i64 %12, i64 1)
    %15 = icmp ne i64 %14, 0
    br i1 %15, label %for.body4, label %for.cond.cleanup3, !llvm.loop !16
  }
  
  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare i64 @llvm.vscale.i64() #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #2
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #2
  
  attributes #0 = { nofree norecurse nosync nounwind memory(readwrite, argmem: none, inaccessiblemem: none) uwtable vscale_range(1,16) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" "unsafe-fp-math"="true" }
  attributes #1 = { nocallback nofree nosync nounwind willreturn memory(none) }
  attributes #2 = { nocallback noduplicate nofree nosync nounwind willreturn }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !5 = !{!"clang version 16.0.6 ()"}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"double", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C/C++ TBAA"}
  !10 = distinct !{!10, !11, !12, !13, !14}
  !11 = !{!"llvm.loop.mustprogress"}
  !12 = !{!"llvm.loop.unroll.disable"}
  !13 = !{!"llvm.loop.isvectorized", i32 1}
  !14 = !{!"llvm.loop.unroll.runtime.disable"}
  !15 = distinct !{!15, !11, !12}
  !16 = distinct !{!16, !11, !12, !13}

...
---
name:            s
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr64, preferred-register: '' }
  - { id: 1, class: gpr64, preferred-register: '' }
  - { id: 2, class: gpr64, preferred-register: '' }
  - { id: 3, class: gpr64all, preferred-register: '' }
  - { id: 4, class: gpr64all, preferred-register: '' }
  - { id: 5, class: gpr32sp, preferred-register: '' }
  - { id: 6, class: gpr64common, preferred-register: '' }
  - { id: 7, class: gpr64all, preferred-register: '' }
  - { id: 8, class: gpr64all, preferred-register: '' }
  - { id: 9, class: gpr32all, preferred-register: '' }
  - { id: 10, class: gpr64sp, preferred-register: '' }
  - { id: 11, class: gpr64sp, preferred-register: '' }
  - { id: 12, class: gpr64sp, preferred-register: '' }
  - { id: 13, class: gpr64all, preferred-register: '' }
  - { id: 14, class: gpr64all, preferred-register: '' }
  - { id: 15, class: gpr64all, preferred-register: '' }
  - { id: 16, class: gpr32all, preferred-register: '' }
  - { id: 17, class: gpr64, preferred-register: '' }
  - { id: 18, class: gpr64, preferred-register: '' }
  - { id: 19, class: gpr64, preferred-register: '' }
  - { id: 20, class: gpr32sp, preferred-register: '' }
  - { id: 21, class: gpr32common, preferred-register: '' }
  - { id: 22, class: gpr64, preferred-register: '' }
  - { id: 23, class: gpr64all, preferred-register: '' }
  - { id: 24, class: gpr32, preferred-register: '' }
  - { id: 25, class: gpr64, preferred-register: '' }
  - { id: 26, class: gpr64, preferred-register: '' }
  - { id: 27, class: gpr64, preferred-register: '' }
  - { id: 28, class: gpr64, preferred-register: '' }
  - { id: 29, class: gpr64, preferred-register: '' }
  - { id: 30, class: gpr64, preferred-register: '' }
  - { id: 31, class: gpr64common, preferred-register: '' }
  - { id: 32, class: gpr64, preferred-register: '' }
  - { id: 33, class: gpr64common, preferred-register: '' }
  - { id: 34, class: gpr64, preferred-register: '' }
  - { id: 35, class: gpr32all, preferred-register: '' }
  - { id: 36, class: gpr64all, preferred-register: '' }
  - { id: 37, class: gpr64all, preferred-register: '' }
  - { id: 38, class: gpr64common, preferred-register: '' }
  - { id: 39, class: ppr_3b, preferred-register: '' }
  - { id: 40, class: zpr, preferred-register: '' }
  - { id: 41, class: ppr_3b, preferred-register: '' }
  - { id: 42, class: zpr, preferred-register: '' }
  - { id: 43, class: gpr64common, preferred-register: '' }
  - { id: 44, class: gpr64, preferred-register: '' }
  - { id: 45, class: gpr64, preferred-register: '' }
  - { id: 46, class: gpr64sp, preferred-register: '' }
  - { id: 47, class: fpr64, preferred-register: '' }
  - { id: 48, class: fpr64, preferred-register: '' }
  - { id: 49, class: fpr64, preferred-register: '' }
  - { id: 50, class: gpr64sp, preferred-register: '' }
  - { id: 51, class: gpr64, preferred-register: '' }
  - { id: 52, class: gpr32common, preferred-register: '' }
  - { id: 53, class: gpr32, preferred-register: '' }
  - { id: 54, class: gpr32, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
  
    %17:gpr64 = RDVLI_XI 1
    %18:gpr64 = UBFMXri killed %17, 4, 63
    %19:gpr64 = CNTD_XPiI 31, 1
    %20:gpr32sp = COPY %19.sub_32
    %21:gpr32common = SUBWri killed %20, 1, 0
    %23:gpr64all = IMPLICIT_DEF
    %22:gpr64 = SUBREG_TO_REG 0, killed %21, %subreg.sub_32
    %24:gpr32 = MOVi32imm 32000
    %25:gpr64 = SUBREG_TO_REG 0, killed %24, %subreg.sub_32
    %26:gpr64 = ANDXrr killed %22, %25
    %0:gpr64 = COPY %26
    %27:gpr64 = EORXrr %26, %25
    %28:gpr64 = UDIVXr %25, %19
    %29:gpr64 = MADDXrrr killed %18, killed %28, $xzr
    %30:gpr64 = UBFMXri killed %29, 60, 59
    %31:gpr64common = LOADgot target-flags(aarch64-got) @a
    %32:gpr64 = ADDXrr %31, %30
    %3:gpr64all = COPY %32
    %33:gpr64common = LOADgot target-flags(aarch64-got) @b
    %34:gpr64 = ADDXrr %33, %30
    %35:gpr32all = COPY $wzr
    %16:gpr32all = COPY %35
    %4:gpr64all = COPY %34
    %39:ppr_3b = PTRUE_D 31
    %53:gpr32 = MOVi32imm 200000
    %48:fpr64 = FMOVDi 112
  
  bb.1.vector.ph:
    successors: %bb.2(0x80000000)
  
    %5:gpr32sp = PHI %16, %bb.0, %9, %bb.6
    %37:gpr64all = COPY $xzr
    %36:gpr64all = COPY %37
  
  bb.2.vector.body:
    successors: %bb.3(0x04000000), %bb.2(0x7c000000)
  
    %6:gpr64common = PHI %36, %bb.1, %7, %bb.2
    %40:zpr = LD1D %39, %33, %6 :: (load unknown-size from %ir.uglygep, align 16, !tbaa !6)
    %42:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZPZI_UNDEF_D %39, killed %40, 1
    ST1D killed %42, %39, %31, %6 :: (store unknown-size into %ir.uglygep18, align 16, !tbaa !6)
    %44:gpr64 = nuw ADDXrr %6, %19
    %7:gpr64all = COPY %44
    dead $xzr = SUBSXrr %27, %44, implicit-def $nzcv
    Bcc 1, %bb.2, implicit $nzcv
    B %bb.3
  
  bb.3.middle.block:
    successors: %bb.6(0x30000000), %bb.4(0x50000000)
  
    CBZX %0, %bb.6
    B %bb.4
  
  bb.4.for.body4.preheader:
    successors: %bb.7(0x80000000)
  
    %8:gpr64all = COPY %0
    B %bb.7
  
  bb.5.for.cond.cleanup:
    RET_ReallyLR
  
  bb.6.for.cond.cleanup3:
    successors: %bb.5(0x04000000), %bb.1(0x7c000000)
  
    %52:gpr32common = nuw nsw ADDWri %5, 1, 0
    %9:gpr32all = COPY %52
    dead $wzr = SUBSWrr %52, %53, implicit-def $nzcv
    Bcc 0, %bb.5, implicit $nzcv
    B %bb.1
  
  bb.7.for.body4:
    successors: %bb.7(0x7c000000), %bb.6(0x04000000)
  
    %10:gpr64sp = PHI %4, %bb.4, %14, %bb.7
    %11:gpr64sp = PHI %3, %bb.4, %13, %bb.7
    %12:gpr64sp = PHI %8, %bb.4, %15, %bb.7
    early-clobber %46:gpr64sp, %47:fpr64 = LDRDpost %10, 8 :: (load (s64) from %ir.lsr.iv22, !tbaa !6)
    %49:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %47, %48, implicit $fpcr
    early-clobber %50:gpr64sp = STRDpost killed %49, %11, 8 :: (store (s64) into %ir.lsr.iv, !tbaa !6)
    %13:gpr64all = COPY %50
    %14:gpr64all = COPY %46
    %51:gpr64 = SUBSXri %12, 1, 0, implicit-def $nzcv
    %15:gpr64all = COPY %51
    Bcc 1, %bb.7, implicit $nzcv
    B %bb.6

...
