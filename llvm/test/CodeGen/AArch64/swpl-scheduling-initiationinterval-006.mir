#RUN: llc %s -mcpu=a64fx -ffj-swp  -swpl-debug -start-before=aarch64-swpipeliner -swpl-max-ireg=8 -swpl-ii-by-Bsearch=true -swpl-minii=16   -o /dev/null 2>&1 | FileCheck %s

#CHECK:        : Change ii range for moderate schedule search:
#CHECK:		 :  (@) Scheduling tight       at binary search.       : (II: 19 in [ 18,20]) MVE: 2 Last inst: 0. (Itr Org: 4000, Req: 3) (VReg Fp: 8/32, Int: 6/8, Pre: 1/8) Eval:0.000000e+00.
#CHECK:        : Required iteration count in MIR input is        :   3 (= kernel:2 + pro/epilogue:1 + mod:0) 
#CHECK:        : Original iteration count in MIR is found        :   4000
#CHECK:        :      Non-tuned SWPL (ker exp, ker itr, mod itr) : ( 2, 1999, 1)
#CHECK:        :
#CHECK:        : Loop is software pipelined. (ii=20, kernel=40 cycles, prologue,epilogue =20 cycles)
#CHECK:        :      IPC (initial=0.81, real=0.65, rate=80.00%)
#CHECK:        :      = Instructions(13)/II(20)
#CHECK:        :      Virtual inst:(0)
#CHECK:        :


--- |
  ; ModuleID = 's252.c'
  source_filename = "s252.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  %struct.args_t = type { %struct.timeval, %struct.timeval, ptr }
  %struct.timeval = type { i64, i64 }
  
  @__func__.s252 = private unnamed_addr constant [5 x i8] c"s252\00", align 1
  @b = external global [32000 x double], align 64
  @c = external global [32000 x double], align 64
  @a = external global [32000 x double], align 64
  @d = external global [32000 x double], align 64
  @e = external global [32000 x double], align 64
  @aa = external global [256 x [256 x double]], align 64
  @bb = external global [256 x [256 x double]], align 64
  @cc = external global [256 x [256 x double]], align 64
  
  ; Function Attrs: nounwind uwtable vscale_range(4,4)
  define dso_local double @s252(ptr nocapture noundef %0) local_unnamed_addr #0 {
    %2 = tail call i32 @initialise_arrays(ptr noundef nonnull @__func__.s252) #5
    %3 = tail call i32 @gettimeofday(ptr noundef %0, ptr noundef null) #5
    br label %4
  
  4:                                                ; preds = %29, %1
    %5 = phi i32 [ 0, %1 ], [ %31, %29 ]
    %6 = call i64 @llvm.start.loop.iterations.i64(i64 4000)
    br label %7
  
  7:                                                ; preds = %7, %4
    %8 = phi i64 [ 0, %4 ], [ %22, %7 ]
    %9 = phi <vscale x 2 x double> [ insertelement (<vscale x 2 x double> poison, double 0.000000e+00, i32 7), %4 ], [ %17, %7 ]
    %10 = phi i64 [ %6, %4 ], [ %23, %7 ]
    %11 = shl nuw nsw i64 %8, 3
    %12 = getelementptr i8, ptr @b, i64 %11
    %13 = load <vscale x 2 x double>, ptr %12, align 64, !tbaa !6
    %14 = shl nuw nsw i64 %8, 3
    %15 = getelementptr i8, ptr @c, i64 %14
    %16 = load <vscale x 2 x double>, ptr %15, align 64, !tbaa !6
    %17 = fmul fast <vscale x 2 x double> %16, %13
    %18 = tail call <vscale x 2 x double> @llvm.experimental.vector.splice.nxv2f64(<vscale x 2 x double> %9, <vscale x 2 x double> %17, i32 -1)
    %19 = fadd fast <vscale x 2 x double> %17, %18
    %20 = shl nuw nsw i64 %8, 3
    %21 = getelementptr i8, ptr @a, i64 %20
    store <vscale x 2 x double> %19, ptr %21, align 64, !tbaa !6
    %22 = add nuw i64 %8, 8
    %23 = call i64 @llvm.loop.decrement.reg.i64(i64 %10, i64 1)
    %24 = icmp ne i64 %23, 0
    br i1 %24, label %7, label %29, !llvm.loop !10
  
  25:                                               ; preds = %29
    %26 = getelementptr inbounds %struct.args_t, ptr %0, i64 0, i32 1
    %27 = tail call i32 @gettimeofday(ptr noundef nonnull %26, ptr noundef null) #5
    %28 = tail call fast double @calc_checksum(ptr noundef nonnull @__func__.s252) #5
    ret double %28
  
  29:                                               ; preds = %7
    %30 = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, double noundef 0.000000e+00) #5
    %31 = add nuw nsw i32 %5, 1
    %32 = icmp eq i32 %31, 100000
    br i1 %32, label %25, label %4, !llvm.loop !14
  }
  
  declare i32 @initialise_arrays(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nofree nounwind
  declare noundef i32 @gettimeofday(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #2
  
  declare i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, double noundef) local_unnamed_addr #1
  
  declare double @calc_checksum(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
  declare <vscale x 2 x double> @llvm.experimental.vector.splice.nxv2f64(<vscale x 2 x double>, <vscale x 2 x double>, i32 immarg) #3
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #4
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #4
  
  attributes #0 = { nounwind uwtable vscale_range(4,4) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #1 = { "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #2 = { nofree nounwind "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #3 = { nocallback nofree nosync nounwind readnone willreturn }
  attributes #4 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #5 = { nounwind }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 7, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !5 = !{!"clang version 15.0.4 "}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"double", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C/C++ TBAA"}
  !10 = distinct !{!10, !11, !12, !13}
  !11 = !{!"llvm.loop.mustprogress"}
  !12 = !{!"llvm.loop.unroll.disable"}
  !13 = !{!"llvm.loop.isvectorized", i32 1}
  !14 = distinct !{!14, !11, !12}

...
---
name:            s252
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32sp, preferred-register: '' }
  - { id: 1, class: gpr64all, preferred-register: '' }
  - { id: 2, class: gpr64common, preferred-register: '' }
  - { id: 3, class: zpr, preferred-register: '' }
  - { id: 4, class: gpr64sp, preferred-register: '' }
  - { id: 5, class: zpr, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr64all, preferred-register: '' }
  - { id: 8, class: gpr32all, preferred-register: '' }
  - { id: 9, class: gpr64common, preferred-register: '' }
  - { id: 10, class: gpr32all, preferred-register: '' }
  - { id: 11, class: gpr64common, preferred-register: '' }
  - { id: 12, class: gpr32all, preferred-register: '' }
  - { id: 13, class: gpr64all, preferred-register: '' }
  - { id: 14, class: gpr32all, preferred-register: '' }
  - { id: 15, class: gpr32all, preferred-register: '' }
  - { id: 16, class: gpr64all, preferred-register: '' }
  - { id: 17, class: zpr, preferred-register: '' }
  - { id: 18, class: gpr32, preferred-register: '' }
  - { id: 19, class: gpr64sp, preferred-register: '' }
  - { id: 20, class: zpr, preferred-register: '' }
  - { id: 21, class: zpr, preferred-register: '' }
  - { id: 22, class: ppr_3b, preferred-register: '' }
  - { id: 23, class: ppr_3b, preferred-register: '' }
  - { id: 24, class: fpr64, preferred-register: '' }
  - { id: 25, class: zpr, preferred-register: '' }
  - { id: 26, class: gpr64all, preferred-register: '' }
  - { id: 27, class: gpr32, preferred-register: '' }
  - { id: 28, class: gpr64common, preferred-register: '' }
  - { id: 29, class: ppr_3b, preferred-register: '' }
  - { id: 30, class: zpr, preferred-register: '' }
  - { id: 31, class: gpr64common, preferred-register: '' }
  - { id: 32, class: zpr, preferred-register: '' }
  - { id: 33, class: ppr_3b, preferred-register: '' }
  - { id: 34, class: ppr, preferred-register: '' }
  - { id: 35, class: ppr_3b, preferred-register: '' }
  - { id: 36, class: zpr, preferred-register: '' }
  - { id: 37, class: zpr, preferred-register: '' }
  - { id: 38, class: gpr64common, preferred-register: '' }
  - { id: 39, class: gpr64sp, preferred-register: '' }
  - { id: 40, class: gpr64, preferred-register: '' }
  - { id: 41, class: gpr64common, preferred-register: '' }
  - { id: 42, class: gpr64common, preferred-register: '' }
  - { id: 43, class: gpr64common, preferred-register: '' }
  - { id: 44, class: gpr64common, preferred-register: '' }
  - { id: 45, class: gpr64common, preferred-register: '' }
  - { id: 46, class: gpr64common, preferred-register: '' }
  - { id: 47, class: gpr64common, preferred-register: '' }
  - { id: 48, class: gpr64common, preferred-register: '' }
  - { id: 49, class: fpr64, preferred-register: '' }
  - { id: 50, class: gpr32all, preferred-register: '' }
  - { id: 51, class: gpr32common, preferred-register: '' }
  - { id: 52, class: gpr32, preferred-register: '' }
  - { id: 53, class: gpr32, preferred-register: '' }
  - { id: 54, class: gpr64sp, preferred-register: '' }
  - { id: 55, class: gpr64all, preferred-register: '' }
  - { id: 56, class: gpr32all, preferred-register: '' }
  - { id: 57, class: gpr64common, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%9' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     true
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.1):
    successors: %bb.1(0x80000000)
    liveins: $x0
  
    %9:gpr64common = COPY $x0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %11:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s252, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s252
    $x0 = COPY %11
    BL @initialise_arrays, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %13:gpr64all = COPY $xzr
    $x0 = COPY %9
    $x1 = COPY %13
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %15:gpr32all = COPY $wzr
    %10:gpr32all = COPY %15
    %18:gpr32 = MOVi32imm 7
    %19:gpr64sp = SUBREG_TO_REG 0, %18, %subreg.sub_32
    %20:zpr = DUP_ZR_D %19
    %21:zpr = INDEX_II_D 0, 1
    %22:ppr_3b = PTRUE_D 31
    %23:ppr_3b = CMPEQ_PPzZZ_D %22, %21, %20, implicit-def dead $nzcv
    %24:fpr64 = FMOVD0
    %25:zpr = IMPLICIT_DEF
    %17:zpr = CPY_ZPmV_D %25, %23, %24
    %27:gpr32 = MOVi32imm 4000
    %28:gpr64common = LOADgot target-flags(aarch64-got) @b
    %31:gpr64common = LOADgot target-flags(aarch64-got) @c
    %34:ppr = PTRUE_D 1
    %35:ppr_3b = REV_PP_D %34
    %38:gpr64common = LOADgot target-flags(aarch64-got) @a
    %44:gpr64common = LOADgot target-flags(aarch64-got) @d
    %45:gpr64common = LOADgot target-flags(aarch64-got) @e
    %46:gpr64common = LOADgot target-flags(aarch64-got) @aa
    %47:gpr64common = LOADgot target-flags(aarch64-got) @bb
    %48:gpr64common = LOADgot target-flags(aarch64-got) @cc
    %52:gpr32 = MOVi32imm 100000
  
  bb.1 (%ir-block.4):
    successors: %bb.2(0x80000000)
  
    %0:gpr32sp = PHI %10, %bb.0, %8, %bb.4
    %26:gpr64all = COPY $xzr
    %16:gpr64all = COPY %26
    %1:gpr64all = SUBREG_TO_REG 0, %27, %subreg.sub_32
  
  bb.2 (%ir-block.7):
    successors: %bb.2(0x7c000000), %bb.4(0x04000000)
  
    %2:gpr64common = PHI %16, %bb.1, %6, %bb.2
    %3:zpr = PHI %17, %bb.1, %5, %bb.2
    %4:gpr64sp = PHI %1, %bb.1, %7, %bb.2
    %30:zpr = LD1D %22, %28, %2 :: (load unknown-size from %ir.12, align 64, !tbaa !6)
    %32:zpr = LD1D %22, %31, %2 :: (load unknown-size from %ir.15, align 64, !tbaa !6)
    %5:zpr = nnan ninf nsz arcp contract afn reassoc FMUL_ZZZ_D %32, %30
    %36:zpr = SPLICE_ZPZ_D %35, %3, %5
    %37:zpr = nnan ninf nsz arcp contract afn reassoc FMLA_ZPZZZ_UNDEF_D %22, killed %36, %32, %30
    ST1D killed %37, %22, %38, %2 :: (store unknown-size into %ir.21, align 64, !tbaa !6)
    %39:gpr64sp = nuw ADDXri %2, 8, 0
    %6:gpr64all = COPY %39
    %40:gpr64 = SUBSXri %4, 1, 0, implicit-def $nzcv
    %7:gpr64all = COPY %40
    Bcc 1, %bb.2, implicit $nzcv
    B %bb.4
  
  bb.3 (%ir-block.25):
    %54:gpr64sp = nuw ADDXri %9, 16, 0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    %55:gpr64all = COPY $xzr
    $x0 = COPY %54
    $x1 = COPY %55
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %57:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s252, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s252
    $x0 = COPY %57
    TCRETURNdi @calc_checksum, 0, csr_aarch64_aapcs, implicit $sp, implicit $x0
  
  bb.4 (%ir-block.29):
    successors: %bb.3(0x04000000), %bb.1(0x7c000000)
  
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    $x0 = COPY %38
    $x1 = COPY %28
    $x2 = COPY %31
    $x3 = COPY %44
    $x4 = COPY %45
    $x5 = COPY %46
    $x6 = COPY %47
    $x7 = COPY %48
    $d0 = COPY %24
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $d0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %51:gpr32common = nuw nsw ADDWri %0, 1, 0
    %8:gpr32all = COPY %51
    dead $wzr = SUBSWrr %51, %52, implicit-def $nzcv
    Bcc 0, %bb.3, implicit $nzcv
    B %bb.1

...
