#RUN: llc %s -mcpu=a64fx -ffj-swp -O1  -start-before=aarch64-swpipeliner  -swpl-debug-dump-plan  -swpl-debug-ddg -swpl-debug-dump-scheduling-every-inst -o /dev/null 2>&1 | FileCheck %s

#CHECK:DBG(SwplDdg::print) SwplDdg. 
#CHECK:### SwplDdg: 
#CHECK:### SwplEdge: 
#CHECK:### from: %50:gpr64common = COPY %60:gpr64all
#CHECK:### to  : %52:gpr64 = UBFMXri %50:gpr64common, 63, 62, debug-location !15; /TEST/tp/testprg.c:7:14
#CHECK:### distance:1 delay:1

#CHECK:### SwplEdge: 
#CHECK:### from: %52:gpr64 = UBFMXri %50:gpr64common, 63, 62, debug-location !15; /TEST/tp/testprg.c:7:14
#CHECK:### to  : %53:gpr64common = ADDXrr %16:gpr64common, %52:gpr64, debug-location !15; /TEST/tp/testprg.c:7:14
#CHECK:### distance:0 delay:1

#CHECK:### SwplEdge: 
#CHECK:### from: %53:gpr64common = ADDXrr %16:gpr64common, %52:gpr64, debug-location !15; /TEST/tp/testprg.c:7:14
#CHECK:### to  : %54:gpr32 = LDRHHui killed %53:gpr64common, 193, debug-location !15 :: (load (s16) from %ir.30, !tbaa !10); /TEST/tp/testprg.c:7:14
#CHECK:### distance:0 delay:1

#CHECK:### SwplEdge: 
#CHECK:### from: %52:gpr64 = UBFMXri %50:gpr64common, 63, 62, debug-location !15; /TEST/tp/testprg.c:7:14
#CHECK:### to  : %55:gpr64common = ADDXrr %20:gpr64common, %52:gpr64, debug-location !16; /TEST/tp/testprg.c:7:21
#CHECK:### distance:0 delay:1

#CHECK:### SwplEdge: 
#CHECK:### from: %55:gpr64common = ADDXrr %20:gpr64common, %52:gpr64, debug-location !16; /TEST/tp/testprg.c:7:21
#CHECK:### to  : %56:gpr32 = LDRHHui killed %55:gpr64common, 193, debug-location !16 :: (load (s16) from %ir.32, !tbaa !10); /TEST/tp/testprg.c:7:21
#CHECK:### distance:0 delay:1

#CHECK:### SwplEdge: 
#CHECK:### from: %56:gpr32 = LDRHHui killed %55:gpr64common, 193, debug-location !16 :: (load (s16) from %ir.32, !tbaa !10); /TEST/tp/testprg.c:7:21
#CHECK:### to  : %57:gpr32 = MADDWrrr killed %56:gpr32, killed %54:gpr32, $wzr, debug-location !17; /TEST/tp/testprg.c:7:19
#CHECK:### distance:0 delay:1

#CHECK:### SwplEdge: 
#CHECK:### from: %54:gpr32 = LDRHHui killed %53:gpr64common, 193, debug-location !15 :: (load (s16) from %ir.30, !tbaa !10); /TEST/tp/testprg.c:7:14
#CHECK:### to  : %57:gpr32 = MADDWrrr killed %56:gpr32, killed %54:gpr32, $wzr, debug-location !17; /TEST/tp/testprg.c:7:19
#CHECK:### distance:0 delay:1

#CHECK:### SwplEdge: 
#CHECK:### from: %52:gpr64 = UBFMXri %50:gpr64common, 63, 62, debug-location !15; /TEST/tp/testprg.c:7:14
#CHECK:### to  : %58:gpr64common = ADDXrr %28:gpr64common, %52:gpr64, debug-location !25; /TEST/tp/testprg.c:7:12
#CHECK:### distance:0 delay:1

#CHECK:### SwplEdge: 
#CHECK:### from: %57:gpr32 = MADDWrrr killed %56:gpr32, killed %54:gpr32, $wzr, debug-location !17; /TEST/tp/testprg.c:7:19
#CHECK:### to  : STRHHui killed %57:gpr32, %58:gpr64common, 193, debug-location !25 :: (store (s16) into %ir.36, !tbaa !10); /TEST/tp/testprg.c:7:12
#CHECK:### distance:0 delay:5

#CHECK:### SwplEdge: 
#CHECK:### from: %58:gpr64common = ADDXrr %28:gpr64common, %52:gpr64, debug-location !25; /TEST/tp/testprg.c:7:12
#CHECK:### to  : STRHHui killed %57:gpr32, %58:gpr64common, 193, debug-location !25 :: (store (s16) into %ir.36, !tbaa !10); /TEST/tp/testprg.c:7:12
#CHECK:### distance:0 delay:1

#CHECK:### SwplEdge: 
#CHECK:### from: %58:gpr64common = ADDXrr %28:gpr64common, %52:gpr64, debug-location !25; /TEST/tp/testprg.c:7:12
#CHECK:### to  : STRHHui %0:gpr32, %58:gpr64common, 194, debug-location !18 :: (store (s16) into %ir.38, !tbaa !10); /TEST/tp/testprg.c:8:12
#CHECK:### distance:0 delay:1

#CHECK:### SwplEdge: 
#CHECK:### from: %50:gpr64common = COPY %60:gpr64all
#CHECK:### to  : %59:gpr64sp = nuw nsw ADDXri %50:gpr64common, 2, 0, debug-location !26; /TEST/tp/testprg.c:6:17
#CHECK:### distance:1 delay:1

#CHECK:### SwplEdge: 
#CHECK:### from: %59:gpr64sp = nuw nsw ADDXri %50:gpr64common, 2, 0, debug-location !26; /TEST/tp/testprg.c:6:17
#CHECK:### to  : %60:gpr64all = COPY %59:gpr64sp, debug-location !26; /TEST/tp/testprg.c:6:17
#CHECK:### distance:0 delay:1

#CHECK:### SwplEdge: 
#CHECK:### from: %51:gpr64sp = COPY %62:gpr64all
#CHECK:### to  : %61:gpr64 = SUBSXri %51:gpr64sp, 1, 0, implicit-def $nzcv, debug-location !14; /TEST/tp/testprg.c:6:3
#CHECK:### distance:1 delay:1

#CHECK:### SwplEdge: 
#CHECK:### from: %61:gpr64 = SUBSXri %51:gpr64sp, 1, 0, implicit-def $nzcv, debug-location !14; /TEST/tp/testprg.c:6:3
#CHECK:### to  : %62:gpr64all = COPY %61:gpr64, debug-location !14; /TEST/tp/testprg.c:6:3
#CHECK:### distance:0 delay:1

#CHECK:### SwplEdge: 
#CHECK:### from: %60:gpr64all = COPY %59:gpr64sp, debug-location !26; /TEST/tp/testprg.c:6:17
#CHECK:### to  : %50:gpr64common = COPY %60:gpr64all
#CHECK:### distance:0 delay:1

#CHECK:### SwplEdge: 
#CHECK:### from: %62:gpr64all = COPY %61:gpr64, debug-location !14; /TEST/tp/testprg.c:6:3
#CHECK:### to  : %51:gpr64sp = COPY %62:gpr64all
#CHECK:### distance:0 delay:1

#CHECK:### SwplEdge: 
#CHECK:### from: %54:gpr32 = LDRHHui killed %53:gpr64common, 193, debug-location !15 :: (load (s16) from %ir.30, !tbaa !10); /TEST/tp/testprg.c:7:14
#CHECK:### to  : STRHHui killed %57:gpr32, %58:gpr64common, 193, debug-location !25 :: (store (s16) into %ir.36, !tbaa !10); /TEST/tp/testprg.c:7:12
#CHECK:### distance:20 delay:1

#CHECK:### SwplEdge: 
#CHECK:### from: %54:gpr32 = LDRHHui killed %53:gpr64common, 193, debug-location !15 :: (load (s16) from %ir.30, !tbaa !10); /TEST/tp/testprg.c:7:14
#CHECK:### to  : STRHHui %0:gpr32, %58:gpr64common, 194, debug-location !18 :: (store (s16) into %ir.38, !tbaa !10); /TEST/tp/testprg.c:8:12
#CHECK:### distance:20 delay:1

#CHECK:### SwplEdge: 
#CHECK:### from: %56:gpr32 = LDRHHui killed %55:gpr64common, 193, debug-location !16 :: (load (s16) from %ir.32, !tbaa !10); /TEST/tp/testprg.c:7:21
#CHECK:### to  : STRHHui killed %57:gpr32, %58:gpr64common, 193, debug-location !25 :: (store (s16) into %ir.36, !tbaa !10); /TEST/tp/testprg.c:7:12
#CHECK:### distance:20 delay:1

#CHECK:### SwplEdge: 
#CHECK:### from: %56:gpr32 = LDRHHui killed %55:gpr64common, 193, debug-location !16 :: (load (s16) from %ir.32, !tbaa !10); /TEST/tp/testprg.c:7:21
#CHECK:### to  : STRHHui %0:gpr32, %58:gpr64common, 194, debug-location !18 :: (store (s16) into %ir.38, !tbaa !10); /TEST/tp/testprg.c:8:12
#CHECK:### distance:20 delay:1

#CHECK:### SwplEdge: 
#CHECK:### from: STRHHui killed %57:gpr32, %58:gpr64common, 193, debug-location !25 :: (store (s16) into %ir.36, !tbaa !10); /TEST/tp/testprg.c:7:12
#CHECK:### to  : %54:gpr32 = LDRHHui killed %53:gpr64common, 193, debug-location !15 :: (load (s16) from %ir.30, !tbaa !10); /TEST/tp/testprg.c:7:14
#CHECK:### distance:20 delay:6

#CHECK:### SwplEdge: 
#CHECK:### from: STRHHui killed %57:gpr32, %58:gpr64common, 193, debug-location !25 :: (store (s16) into %ir.36, !tbaa !10); /TEST/tp/testprg.c:7:12
#CHECK:### to  : %56:gpr32 = LDRHHui killed %55:gpr64common, 193, debug-location !16 :: (load (s16) from %ir.32, !tbaa !10); /TEST/tp/testprg.c:7:21
#CHECK:### distance:20 delay:6

#CHECK:### SwplEdge: 
#CHECK:### from: STRHHui killed %57:gpr32, %58:gpr64common, 193, debug-location !25 :: (store (s16) into %ir.36, !tbaa !10); /TEST/tp/testprg.c:7:12
#CHECK:### to  : STRHHui %0:gpr32, %58:gpr64common, 194, debug-location !18 :: (store (s16) into %ir.38, !tbaa !10); /TEST/tp/testprg.c:8:12
#CHECK:### distance:0 delay:1

#CHECK:### SwplEdge: 
#CHECK:### from: STRHHui %0:gpr32, %58:gpr64common, 194, debug-location !18 :: (store (s16) into %ir.38, !tbaa !10); /TEST/tp/testprg.c:8:12
#CHECK:### to  : %54:gpr32 = LDRHHui killed %53:gpr64common, 193, debug-location !15 :: (load (s16) from %ir.30, !tbaa !10); /TEST/tp/testprg.c:7:14
#CHECK:### distance:20 delay:6

#CHECK:### SwplEdge: 
#CHECK:### from: STRHHui %0:gpr32, %58:gpr64common, 194, debug-location !18 :: (store (s16) into %ir.38, !tbaa !10); /TEST/tp/testprg.c:8:12
#CHECK:### to  : %56:gpr32 = LDRHHui killed %55:gpr64common, 193, debug-location !16 :: (load (s16) from %ir.32, !tbaa !10); /TEST/tp/testprg.c:7:21
#CHECK:### distance:20 delay:6

#CHECK:### SwplEdge: 
#CHECK:### from: STRHHui %0:gpr32, %58:gpr64common, 194, debug-location !18 :: (store (s16) into %ir.38, !tbaa !10); /TEST/tp/testprg.c:8:12
#CHECK:### to  : STRHHui killed %57:gpr32, %58:gpr64common, 193, debug-location !25 :: (store (s16) into %ir.36, !tbaa !10); /TEST/tp/testprg.c:7:12
#CHECK:### distance:1 delay:1


#CHECK:=========================================
#CHECK:%54:gpr32 = LDRHHui killed %53:gpr64common, 193, debug-location !15 :: (load (s16) from %ir.30, !tbaa !10); /TEST/tp/testprg.c:7:14
#CHECK:successor_inst : MADDWrrr ( cycle:124989, latecycle:124988, delay:1 )
#CHECK:successor_inst : STRHHui ( cycle:124995, latecycle:125094, delay:-99 )
#CHECK:successor_inst : STRHHui ( cycle:124996, latecycle:125095, delay:-99 )
#CHECK:unset (DependConstrained  ) : ADDXrr
#CHECK: begin_cycle          : 124988
#CHECK: SIP.slot             : 999908
#CHECK: SIP.slot.calcCycle() : 124988
#CHECK: iteration_interval = 5

#CHECK:       FLA       FLB       EXA       EXB       EAGA      EAGB      PRX       BR        LSU1      LSU2      FLA_C     FLB_C     EXA_C     EXB_C     EAGA_C    EAGB_C    
#CHECK:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#CHECK:       0         0         UBFMXri   0         0         0         0         STRHHui   0         0         0         0         0         0         0         0         
#CHECK:       0         0         0         ADDXrr    0         0         0         STRHHui   0         0         0         0         0         0         0         0         
#CHECK:       0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         
#CHECK:       0         0         0         0         0         0         0         LDRHHui   0         0         0         0         0         0         0         0         
#CHECK:       0         0         MADDWrrr  0         0         0         0         0         0         0         0         0         0         0         0         0         

#CHECK:	(999904)	--0--		--1--		--2--		--3--		LDRHHui		--5--		--6--		--7--	
#CHECK:	(999912)	--0--		--1--		--2--		--3--		MADDWrrr		--5--		--6--		--7--	
#CHECK:	(999920)	--0--		--1--		--2--		--3--		UBFMXri		--5--		--6--		--7--	
#CHECK:	(999928)	--0--		--1--		--2--		--3--		--4--		ADDXrr		--6--		--7--	
#CHECK:	(999936)	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK:	(999944)	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK:	(999952)	--0--		--1--		--2--		--3--		--4--		--5--		--6--		--7--	
#CHECK:	(999960)	--0--		--1--		--2--		--3--		--4--		--5--		STRHHui		--7--	
#CHECK:	(999968)	--0--		--1--		--2--		--3--		STRHHui		--5--		--6--		--7--	
#CHECK:=========================================

--- |
  ; ModuleID = '/TEST/tp/testprg.c'
  source_filename = "/TEST/tp/testprg.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  @b = dso_local local_unnamed_addr global [1000 x i16] zeroinitializer, align 2
  @c = dso_local local_unnamed_addr global [1000 x i16] zeroinitializer, align 2
  @a = dso_local local_unnamed_addr global [1000 x i16] zeroinitializer, align 4
  
  ; Function Attrs: nofree norecurse nounwind
  define dso_local i32 @main() local_unnamed_addr #0 !dbg !7 {
    %1 = load i16, i16* getelementptr inbounds ([1000 x i16], [1000 x i16]* @a, i64 0, i64 0), align 4, !dbg !9, !tbaa !10
    %2 = insertelement <8 x i16> undef, i16 %1, i32 0, !dbg !14
    %3 = shufflevector <8 x i16> %2, <8 x i16> undef, <8 x i32> zeroinitializer, !dbg !14
    call void @llvm.set.loop.iterations.i64(i64 12), !dbg !14
    br label %4, !dbg !14
  
  4:                                                ; preds = %4, %0
    %5 = phi i64 [ %20, %4 ], [ 2, %0 ]
    %6 = phi i64 [ 12, %0 ], [ %21, %4 ], !dbg !15
    %7 = getelementptr i8, i8* bitcast ([1000 x i16]* @b to i8*), i64 %5, !dbg !15
    %8 = bitcast i8* %7 to <16 x i16>*
    %9 = load <16 x i16>, <16 x i16>* %8, align 2, !dbg !15, !tbaa !10
    %10 = getelementptr i8, i8* bitcast ([1000 x i16]* @c to i8*), i64 %5, !dbg !16
    %11 = bitcast i8* %10 to <16 x i16>*
    %12 = load <16 x i16>, <16 x i16>* %11, align 2, !dbg !16, !tbaa !10
    %13 = mul <16 x i16> %12, %9, !dbg !17
    %14 = shufflevector <16 x i16> %13, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>, !dbg !17
    %15 = getelementptr i8, i8* bitcast ([1000 x i16]* @a to i8*), i64 %5, !dbg !18
    %16 = bitcast i8* %15 to <16 x i16>*
    %17 = shufflevector <8 x i16> %14, <8 x i16> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !18
    %18 = shufflevector <8 x i16> %14, <8 x i16> %3, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !18
    %19 = bitcast <16 x i16>* %16 to <8 x i16>*, !dbg !18
    call void @llvm.aarch64.neon.st2.v8i16.p0v8i16(<8 x i16> %17, <8 x i16> %18, <8 x i16>* %19), !dbg !18
    %20 = add nuw nsw i64 %5, 32
    %21 = call i64 @llvm.loop.decrement.reg.i64(i64 %6, i64 1)
    %22 = icmp ne i64 %21, 0
    br i1 %22, label %4, label %23, !llvm.loop !19
  
  23:                                               ; preds = %4
    call void @llvm.set.loop.iterations.i64(i64 4), !dbg !14
    br label %27, !dbg !14
  
  24:                                               ; preds = %27
    %25 = load i16, i16* getelementptr inbounds ([1000 x i16], [1000 x i16]* @a, i64 0, i64 500), align 4, !dbg !23, !tbaa !10
    %26 = sext i16 %25 to i32, !dbg !23
    ret i32 %26, !dbg !24
  
  27:                                               ; preds = %23, %27
    %28 = phi i64 [ 0, %23 ], [ %39, %27 ]
    %29 = phi i64 [ 4, %23 ], [ %40, %27 ], !dbg !15
    %30 = getelementptr i16, i16* getelementptr inbounds ([1000 x i16], [1000 x i16]* @b, i64 0, i64 193), i64 %28, !dbg !15
    %31 = load i16, i16* %30, align 2, !dbg !15, !tbaa !10
    %32 = getelementptr i16, i16* getelementptr inbounds ([1000 x i16], [1000 x i16]* @c, i64 0, i64 193), i64 %28, !dbg !16
    %33 = load i16, i16* %32, align 2, !dbg !16, !tbaa !10
    %34 = mul i16 %33, %31, !dbg !17
    %35 = getelementptr [1000 x i16], [1000 x i16]* @a, i64 0, i64 %28, !dbg !25
    %36 = getelementptr i16, i16* %35, i64 193, !dbg !25
    store i16 %34, i16* %36, align 2, !dbg !25, !tbaa !10
    %37 = getelementptr [1000 x i16], [1000 x i16]* @a, i64 0, i64 %28, !dbg !18
    %38 = getelementptr i16, i16* %37, i64 194, !dbg !18
    store i16 %1, i16* %38, align 2, !dbg !18, !tbaa !10
    %39 = add nuw nsw i64 %28, 2, !dbg !26
    %40 = call i64 @llvm.loop.decrement.reg.i64(i64 %29, i64 1), !dbg !14
    %41 = icmp ne i64 %40, 0, !dbg !14
    br i1 %41, label %27, label %24, !dbg !14, !llvm.loop !27
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.aarch64.neon.st2.v8i16.p0v8i16(<8 x i16>, <8 x i16>, <8 x i16>* nocapture) #1
  
  ; Function Attrs: noduplicate nounwind
  declare void @llvm.set.loop.iterations.i64(i64) #2
  
  ; Function Attrs: noduplicate nounwind
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #2
  
  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**) #3
  
  attributes #0 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="non-leaf" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" "use-soft-float"="false" }
  attributes #1 = { argmemonly nounwind }
  attributes #2 = { noduplicate nounwind }
  attributes #3 = { nounwind }
  
  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!3, !4, !5}
  !llvm.ident = !{!6}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 11.0.0 ", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly, enums: !2, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "/TEST/tp/testprg.c", directory: "/TEST")
  !2 = !{}
  !3 = !{i32 7, !"Dwarf Version", i32 4}
  !4 = !{i32 2, !"Debug Info Version", i32 3}
  !5 = !{i32 1, !"wchar_size", i32 4}
  !6 = !{!"clang version 11.0.0 "}
  !7 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 4, type: !8, scopeLine: 4, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2)
  !8 = !DISubroutineType(types: !2)
  !9 = !DILocation(line: 8, column: 14, scope: !7)
  !10 = !{!11, !11, i64 0}
  !11 = !{!"short", !12, i64 0}
  !12 = !{!"omnipotent char", !13, i64 0}
  !13 = !{!"Simple C/C++ TBAA"}
  !14 = !DILocation(line: 6, column: 3, scope: !7)
  !15 = !DILocation(line: 7, column: 14, scope: !7)
  !16 = !DILocation(line: 7, column: 21, scope: !7)
  !17 = !DILocation(line: 7, column: 19, scope: !7)
  !18 = !DILocation(line: 8, column: 12, scope: !7)
  !19 = distinct !{!19, !14, !20, !21, !22}
  !20 = !DILocation(line: 9, column: 3, scope: !7)
  !21 = !{!"llvm.loop.unroll.disable"}
  !22 = !{!"llvm.loop.isvectorized", i32 1}
  !23 = !DILocation(line: 10, column: 10, scope: !7)
  !24 = !DILocation(line: 10, column: 3, scope: !7)
  !25 = !DILocation(line: 7, column: 12, scope: !7)
  !26 = !DILocation(line: 6, column: 17, scope: !7)
  !27 = distinct !{!27, !14, !20, !21, !22}

...
---
name:            main
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: gpr32, preferred-register: '' }
  - { id: 1, class: fpr128, preferred-register: '' }
  - { id: 2, class: gpr64common, preferred-register: '' }
  - { id: 3, class: gpr64sp, preferred-register: '' }
  - { id: 4, class: gpr64all, preferred-register: '' }
  - { id: 5, class: gpr64all, preferred-register: '' }
  - { id: 6, class: gpr64common, preferred-register: '' }
  - { id: 7, class: gpr64sp, preferred-register: '' }
  - { id: 8, class: gpr64all, preferred-register: '' }
  - { id: 9, class: gpr64all, preferred-register: '' }
  - { id: 10, class: gpr64all, preferred-register: '' }
  - { id: 11, class: gpr64all, preferred-register: '' }
  - { id: 12, class: gpr64common, preferred-register: '' }
  - { id: 13, class: gpr32, preferred-register: '' }
  - { id: 14, class: gpr32, preferred-register: '' }
  - { id: 15, class: gpr32, preferred-register: '' }
  - { id: 16, class: gpr64common, preferred-register: '' }
  - { id: 17, class: gpr64common, preferred-register: '' }
  - { id: 18, class: fpr128, preferred-register: '' }
  - { id: 19, class: fpr128, preferred-register: '' }
  - { id: 20, class: gpr64common, preferred-register: '' }
  - { id: 21, class: gpr64common, preferred-register: '' }
  - { id: 22, class: fpr128, preferred-register: '' }
  - { id: 23, class: fpr128, preferred-register: '' }
  - { id: 24, class: fpr128, preferred-register: '' }
  - { id: 25, class: fpr128, preferred-register: '' }
  - { id: 26, class: fpr128, preferred-register: '' }
  - { id: 27, class: qq, preferred-register: '' }
  - { id: 28, class: gpr64common, preferred-register: '' }
  - { id: 29, class: gpr64common, preferred-register: '' }
  - { id: 30, class: gpr64sp, preferred-register: '' }
  - { id: 31, class: gpr64, preferred-register: '' }
  - { id: 32, class: gpr64all, preferred-register: '' }
  - { id: 33, class: gpr64all, preferred-register: '' }
  - { id: 34, class: gpr64all, preferred-register: '' }
  - { id: 35, class: gpr32, preferred-register: '' }
  - { id: 36, class: gpr64, preferred-register: '' }
  - { id: 37, class: gpr64, preferred-register: '' }
  - { id: 38, class: gpr64common, preferred-register: '' }
  - { id: 39, class: gpr32, preferred-register: '' }
  - { id: 40, class: gpr64, preferred-register: '' }
  - { id: 41, class: gpr64common, preferred-register: '' }
  - { id: 42, class: gpr32, preferred-register: '' }
  - { id: 43, class: gpr32, preferred-register: '' }
  - { id: 44, class: gpr64, preferred-register: '' }
  - { id: 45, class: gpr64common, preferred-register: '' }
  - { id: 46, class: gpr64sp, preferred-register: '' }
  - { id: 47, class: gpr64, preferred-register: '' }
  - { id: 48, class: gpr64common, preferred-register: '' }
  - { id: 49, class: gpr32, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    successors: %bb.1(0x80000000)
  
    %12:gpr64common = ADRP target-flags(aarch64-page) @a, debug-location !9
    %13:gpr32 = LDRHHui killed %12, target-flags(aarch64-pageoff, aarch64-nc) @a, debug-location !9 :: (dereferenceable load 2 from `i16* getelementptr inbounds ([1000 x i16], [1000 x i16]* @a, i64 0, i64 0)`, align 4, !tbaa !10)
    %0:gpr32 = COPY %13, debug-location !9
    %1:fpr128 = DUPv8i16gpr %13, debug-location !14
    %14:gpr32 = MOVi32imm 12
    %11:gpr64all = SUBREG_TO_REG 0, killed %14, %subreg.sub_32
    %15:gpr32 = MOVi32imm 2
    %10:gpr64all = SUBREG_TO_REG 0, killed %15, %subreg.sub_32
    %16:gpr64common = MOVaddr target-flags(aarch64-page) @b, target-flags(aarch64-pageoff, aarch64-nc) @b
    %20:gpr64common = MOVaddr target-flags(aarch64-page) @c, target-flags(aarch64-pageoff, aarch64-nc) @c
    %28:gpr64common = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a
  
  bb.1 (%ir-block.4):
    successors: %bb.1(0x7c000000), %bb.2(0x04000000)
  
    %2:gpr64common = PHI %10, %bb.0, %4, %bb.1
    %3:gpr64sp = PHI %11, %bb.0, %5, %bb.1, debug-location !15
    %17:gpr64common = ADDXrr %16, %2, debug-location !15
    %18:fpr128 = LDRQui %17, 0, debug-location !15 :: (load 16 from %ir.8, align 2, !tbaa !10)
    %19:fpr128 = LDRQui %17, 1, debug-location !15 :: (load 16 from %ir.8 + 16, align 2, !tbaa !10)
    %21:gpr64common = ADDXrr %20, %2, debug-location !16
    %22:fpr128 = LDRQui %21, 0, debug-location !16 :: (load 16 from %ir.11, align 2, !tbaa !10)
    %23:fpr128 = LDRQui %21, 1, debug-location !16 :: (load 16 from %ir.11 + 16, align 2, !tbaa !10)
    %24:fpr128 = MULv8i16 killed %23, killed %19, debug-location !17
    %25:fpr128 = MULv8i16 killed %22, killed %18, debug-location !17
    %26:fpr128 = UZP1v8i16 killed %25, killed %24, debug-location !17
    %27:qq = REG_SEQUENCE killed %26, %subreg.qsub0, %1, %subreg.qsub1, debug-location !17
    %29:gpr64common = ADDXrr %28, %2, debug-location !18
    ST2Twov8h killed %27, killed %29, debug-location !18 :: (store 32 into %ir.19)
    %30:gpr64sp = nuw nsw ADDXri %2, 32, 0
    %4:gpr64all = COPY %30
    %31:gpr64 = SUBSXri %3, 1, 0, implicit-def $nzcv
    %5:gpr64all = COPY %31
    Bcc 1, %bb.1, implicit $nzcv
    B %bb.2
  
  bb.2 (%ir-block.23):
    successors: %bb.4(0x80000000)
  
    %34:gpr64all = COPY $xzr
    %32:gpr64all = COPY %34
    %35:gpr32 = MOVi32imm 4
    %33:gpr64all = SUBREG_TO_REG 0, killed %35, %subreg.sub_32
    B %bb.4, debug-location !14
  
  bb.3 (%ir-block.24):
    %48:gpr64common = ADRP target-flags(aarch64-page) @a + 1000, debug-location !23
    %49:gpr32 = LDRSHWui killed %48, target-flags(aarch64-pageoff, aarch64-nc) @a + 1000, debug-location !23 :: (dereferenceable load 2 from `i16* getelementptr inbounds ([1000 x i16], [1000 x i16]* @a, i64 0, i64 500)`, align 4, !tbaa !10)
    $w0 = COPY %49, debug-location !24
    RET_ReallyLR implicit $w0, debug-location !24
  
  bb.4 (%ir-block.27):
    successors: %bb.4(0x7c000000), %bb.3(0x04000000)
  
    %6:gpr64common = PHI %32, %bb.2, %8, %bb.4
    %7:gpr64sp = PHI %33, %bb.2, %9, %bb.4, debug-location !15
    %36:gpr64 = UBFMXri %6, 63, 62, debug-location !15
    %38:gpr64common = ADDXrr %16, %36, debug-location !15
    %39:gpr32 = LDRHHui killed %38, 193, debug-location !15 :: (load 2 from %ir.30, !tbaa !10)
    %41:gpr64common = ADDXrr %20, %36, debug-location !16
    %42:gpr32 = LDRHHui killed %41, 193, debug-location !16 :: (load 2 from %ir.32, !tbaa !10)
    %43:gpr32 = MADDWrrr killed %42, killed %39, $wzr, debug-location !17
    %45:gpr64common = ADDXrr %28, %36, debug-location !25
    STRHHui killed %43, %45, 193, debug-location !25 :: (store 2 into %ir.36, !tbaa !10)
    STRHHui %0, %45, 194, debug-location !18 :: (store 2 into %ir.38, !tbaa !10)
    %46:gpr64sp = nuw nsw ADDXri %6, 2, 0, debug-location !26
    %8:gpr64all = COPY %46, debug-location !26
    %47:gpr64 = SUBSXri %7, 1, 0, implicit-def $nzcv, debug-location !14
    %9:gpr64all = COPY %47, debug-location !14
    Bcc 1, %bb.4, implicit $nzcv, debug-location !14
    B %bb.3, debug-location !14

...
