#RUN: llc %s -mcpu=a64fx -fswp -O1  -swpl-debug-dump-resource-filter="FSQRT_ZPmZ_D_UNDEF|FDIV_ZPZZ_D_UNDEF" -start-before=aarch64-swpipeliner -o /dev/null 2>&1 | FileCheck %s

#CHECK:DBG(AArch64SwplTargetMachine::getPipelines): MI: %234:zpr = nnan ninf nsz arcp contract afn reassoc FSQRT_ZPmZ_D_UNDEF
#CHECK-NEXT:  ResourceID: SIMDFP_SVE_OP+19
#CHECK-NEXT:  latency: 80
#CHECK-NEXT:  seqDecode: false
#CHECK-NEXT:  stage/resource(): 0/FLA, 0/FLA_E, 1/FLA_E, 2/FLA_E, 3/FLA_E, 4/FLA_E, 5/FLA_E, 6/FLA_E, 7/FLA_E, 8/FLA_E, 9/FLA_E, 10/FLA_E, 11/FLA_E, 12/FLA_E, 13/FLA_E, 14/FLA_E, 15/FLA_E, 16/FLA_E, 17/FLA_E, 18/FLA_E, 19/FLA_E, 20/FLA_E, 21/FLA_E, 22/FLA_E, 23/FLA_E, 24/FLA_E, 25/FLA_E, 26/FLA_E, 27/FLA_E, 28/FLA_E, 29/FLA_E, 30/FLA_E, 31/FLA_E, 32/FLA_E, 33/FLA_E, 34/FLA_E, 35/FLA_E, 36/FLA_E, 37/FLA_E, 38/FLA_E, 39/FLA_E, 40/FLA_E, 41/FLA_E, 42/FLA_E, 43/FLA_E, 44/FLA_E, 45/FLA_E, 46/FLA_E, 47/FLA_E, 48/FLA_E, 49/FLA_E, 50/FLA_E, 51/FLA_E, 52/FLA_E, 53/FLA_E, 54/FLA_E, 55/FLA_E, 56/FLA_E, 57/FLA_E, 58/FLA_E, 59/FLA_E, 60/FLA_E, 61/FLA_E, 62/FLA_E, 63/FLA_E, 64/FLA_E, 65/FLA_E, 66/FLA_E, 67/FLA_E, 68/FLA_E, 69/FLA_E, 70/FLA_E, 71/FLA_E, 72/FLA_E, 73/FLA_E, 74/FLA_E, 75/FLA_E, 76/FLA_E, 77/FLA_E, 78/FLA_E, 79/FLA_E
#CHECK:DBG(AArch64SwplTargetMachine::getPipelines): MI: %236:zpr = nnan ninf nsz arcp contract afn reassoc FDIV_ZPZZ_D_UNDEF
#CHECK-NEXT:  ResourceID: SIMDFP_SVE_OP+19
#CHECK-NEXT:  latency: 80
#CHECK-NEXT:  seqDecode: false
#CHECK-NEXT:  stage/resource(): 0/FLA, 0/FLA_E, 1/FLA_E, 2/FLA_E, 3/FLA_E, 4/FLA_E, 5/FLA_E, 6/FLA_E, 7/FLA_E, 8/FLA_E, 9/FLA_E, 10/FLA_E, 11/FLA_E, 12/FLA_E, 13/FLA_E, 14/FLA_E, 15/FLA_E, 16/FLA_E, 17/FLA_E, 18/FLA_E, 19/FLA_E, 20/FLA_E, 21/FLA_E, 22/FLA_E, 23/FLA_E, 24/FLA_E, 25/FLA_E, 26/FLA_E, 27/FLA_E, 28/FLA_E, 29/FLA_E, 30/FLA_E, 31/FLA_E, 32/FLA_E, 33/FLA_E, 34/FLA_E, 35/FLA_E, 36/FLA_E, 37/FLA_E, 38/FLA_E, 39/FLA_E, 40/FLA_E, 41/FLA_E, 42/FLA_E, 43/FLA_E, 44/FLA_E, 45/FLA_E, 46/FLA_E, 47/FLA_E, 48/FLA_E, 49/FLA_E, 50/FLA_E, 51/FLA_E, 52/FLA_E, 53/FLA_E, 54/FLA_E, 55/FLA_E, 56/FLA_E, 57/FLA_E, 58/FLA_E, 59/FLA_E, 60/FLA_E, 61/FLA_E, 62/FLA_E, 63/FLA_E, 64/FLA_E, 65/FLA_E, 66/FLA_E, 67/FLA_E, 68/FLA_E, 69/FLA_E, 70/FLA_E, 71/FLA_E, 72/FLA_E, 73/FLA_E, 74/FLA_E, 75/FLA_E, 76/FLA_E, 77/FLA_E, 78/FLA_E, 79/FLA_E

--- |
  ; ModuleID = 'nbody2_exclude_fapp.c'
  source_filename = "nbody2_exclude_fapp.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  @size = dso_local local_unnamed_addr global i32 0, align 4
  @px = dso_local local_unnamed_addr global [64 x float] zeroinitializer, align 4
  @py = dso_local local_unnamed_addr global [64 x float] zeroinitializer, align 4
  @j = dso_local local_unnamed_addr global i32 0, align 4
  @vx = dso_local global [64 x float] zeroinitializer, align 4
  @rep = dso_local local_unnamed_addr global i32 0, align 4
  
  ; Function Attrs: nounwind uwtable vscale_range(2,2)
  define dso_local void @test() local_unnamed_addr #0 {
  entry:
    %0 = load i32, ptr @size, align 4, !tbaa !6
    %wide.trip.count = zext i32 %0 to i64
    %cmp23 = icmp sgt i32 %0, 0
    br i1 %cmp23, label %for.body.lr.ph, label %for.cond.cleanup
  
  for.body.lr.ph:                                   ; preds = %entry
    %1 = trunc i64 %wide.trip.count to i32
    %2 = load i32, ptr @j, align 4, !tbaa !6
    %idxprom4 = sext i32 %2 to i64
    %arrayidx5 = getelementptr inbounds [64 x float], ptr @px, i64 0, i64 %idxprom4
    %3 = load float, ptr %arrayidx5, align 4, !tbaa !10
    %conv6 = fpext float %3 to double
    %arrayidx8 = getelementptr inbounds [64 x float], ptr @py, i64 0, i64 %idxprom4
    %4 = load float, ptr %arrayidx8, align 4, !tbaa !10
    %conv9 = fpext float %4 to double
    %min.iters.check = icmp ult i32 %1, 8
    br i1 %min.iters.check, label %for.body.preheader, label %vector.ph
  
  vector.ph:                                        ; preds = %for.body.lr.ph
    %n.vec = and i64 %wide.trip.count, 4294967288
    %broadcast.splatinsert = insertelement <vscale x 4 x double> poison, double %conv6, i64 0
    %broadcast.splat = shufflevector <vscale x 4 x double> %broadcast.splatinsert, <vscale x 4 x double> poison, <vscale x 4 x i32> zeroinitializer
    %broadcast.splatinsert27 = insertelement <vscale x 4 x double> poison, double %conv9, i64 0
    %broadcast.splat28 = shufflevector <vscale x 4 x double> %broadcast.splatinsert27, <vscale x 4 x double> poison, <vscale x 4 x i32> zeroinitializer
    %5 = add nsw i64 %n.vec, -8
    %6 = lshr i64 %5, 3
    %7 = add nuw nsw i64 %6, 1
    %8 = call i64 @llvm.start.loop.iterations.i64(i64 %7)
    br label %vector.body
  
  vector.body:                                      ; preds = %vector.body, %vector.ph
    %lsr.iv42 = phi ptr [ %uglygep43, %vector.body ], [ @vx, %vector.ph ]
    %lsr.iv40 = phi ptr [ %uglygep41, %vector.body ], [ @py, %vector.ph ]
    %lsr.iv38 = phi ptr [ %uglygep39, %vector.body ], [ @px, %vector.ph ]
    %9 = phi i64 [ %8, %vector.ph ], [ %22, %vector.body ]
    %wide.load = load <vscale x 4 x float>, ptr %lsr.iv38, align 4, !tbaa !10
    %10 = fpext <vscale x 4 x float> %wide.load to <vscale x 4 x double>
    %wide.load26 = load <vscale x 4 x float>, ptr %lsr.iv40, align 4, !tbaa !10
    %11 = fpext <vscale x 4 x float> %wide.load26 to <vscale x 4 x double>
    %12 = fsub fast <vscale x 4 x double> %broadcast.splat, %10
    %13 = fsub fast <vscale x 4 x double> %broadcast.splat28, %11
    %14 = fmul fast <vscale x 4 x double> %12, %12
    %15 = fmul fast <vscale x 4 x double> %13, %13
    %16 = fadd fast <vscale x 4 x double> %15, %14
    %17 = tail call fast <vscale x 4 x double> @llvm.sqrt.nxv4f64(<vscale x 4 x double> %16)
    %18 = fdiv fast <vscale x 4 x double> shufflevector (<vscale x 4 x double> insertelement (<vscale x 4 x double> poison, double 1.000000e+00, i32 0), <vscale x 4 x double> poison, <vscale x 4 x i32> zeroinitializer), %17
    %wide.load29 = load <vscale x 4 x float>, ptr %lsr.iv42, align 4, !tbaa !10
    %19 = fpext <vscale x 4 x float> %wide.load29 to <vscale x 4 x double>
    %20 = fadd fast <vscale x 4 x double> %18, %19
    %21 = fptrunc <vscale x 4 x double> %20 to <vscale x 4 x float>
    store <vscale x 4 x float> %21, ptr %lsr.iv42, align 4, !tbaa !10
    %uglygep39 = getelementptr i8, ptr %lsr.iv38, i64 32
    %uglygep41 = getelementptr i8, ptr %lsr.iv40, i64 32
    %uglygep43 = getelementptr i8, ptr %lsr.iv42, i64 32
    %22 = call i64 @llvm.loop.decrement.reg.i64(i64 %9, i64 1)
    %23 = icmp ne i64 %22, 0
    br i1 %23, label %vector.body, label %middle.block, !llvm.loop !12
  
  middle.block:                                     ; preds = %vector.body
    %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
    br i1 %cmp.n, label %for.cond.cleanup, label %for.body.preheader
  
  for.body.preheader:                               ; preds = %for.body.lr.ph, %middle.block
    %indvars.iv.ph = phi i64 [ %n.vec, %middle.block ], [ 0, %for.body.lr.ph ]
    %24 = shl nuw nsw i64 %indvars.iv.ph, 2
    %uglygep = getelementptr i8, ptr @vx, i64 %24
    %uglygep31 = getelementptr i8, ptr @py, i64 %24
    %uglygep34 = getelementptr i8, ptr @px, i64 %24
    %25 = sub i64 %wide.trip.count, %indvars.iv.ph
    %26 = call i64 @llvm.start.loop.iterations.i64(i64 %25)
    br label %for.body
  
  for.cond.cleanup:                                 ; preds = %for.body, %middle.block, %entry
    %call = tail call i32 @dummy(ptr noundef nonnull @vx) #5
    ret void
  
  for.body:                                         ; preds = %for.body.preheader, %for.body
    %lsr.iv35 = phi ptr [ %uglygep34, %for.body.preheader ], [ %uglygep36, %for.body ]
    %lsr.iv32 = phi ptr [ %uglygep31, %for.body.preheader ], [ %uglygep33, %for.body ]
    %lsr.iv = phi ptr [ %uglygep, %for.body.preheader ], [ %uglygep30, %for.body ]
    %27 = phi i64 [ %26, %for.body.preheader ], [ %32, %for.body ]
    %28 = load float, ptr %lsr.iv35, align 4, !tbaa !10
    %conv = fpext float %28 to double
    %29 = load float, ptr %lsr.iv32, align 4, !tbaa !10
    %conv3 = fpext float %29 to double
    %sub = fsub fast double %conv6, %conv
    %sub10 = fsub fast double %conv9, %conv3
    %mul = fmul fast double %sub, %sub
    %mul11 = fmul fast double %sub10, %sub10
    %add = fadd fast double %mul11, %mul
    %30 = tail call fast double @llvm.sqrt.f64(double %add)
    %div = fdiv fast double 1.000000e+00, %30
    %31 = load float, ptr %lsr.iv, align 4, !tbaa !10
    %conv14 = fpext float %31 to double
    %add15 = fadd fast double %div, %conv14
    %conv16 = fptrunc double %add15 to float
    store float %conv16, ptr %lsr.iv, align 4, !tbaa !10
    %uglygep30 = getelementptr i8, ptr %lsr.iv, i64 4
    %uglygep33 = getelementptr i8, ptr %lsr.iv32, i64 4
    %uglygep36 = getelementptr i8, ptr %lsr.iv35, i64 4
    %32 = call i64 @llvm.loop.decrement.reg.i64(i64 %27, i64 1)
    %33 = icmp ne i64 %32, 0
    br i1 %33, label %for.body, label %for.cond.cleanup, !llvm.loop !16
  }
  
  ; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
  declare double @llvm.sqrt.f64(double) #1
  
  declare i32 @dummy(...) local_unnamed_addr #2
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare <vscale x 4 x double> @llvm.sqrt.nxv4f64(<vscale x 4 x double>) #3
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #4
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #4
  
  attributes #0 = { nounwind uwtable vscale_range(2,2) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #1 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
  attributes #2 = { "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #3 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
  attributes #4 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #5 = { nounwind }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 7, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"int", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C/C++ TBAA"}
  !10 = !{!11, !11, i64 0}
  !11 = !{!"float", !8, i64 0}
  !12 = distinct !{!12, !13, !14, !15}
  !13 = !{!"llvm.loop.mustprogress"}
  !14 = !{!"llvm.loop.unroll.disable"}
  !15 = !{!"llvm.loop.isvectorized", i32 1}
  !16 = distinct !{!16, !13, !14, !15}

...
---
name:            test
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr64, preferred-register: '' }
  - { id: 1, class: fpr64, preferred-register: '' }
  - { id: 2, class: fpr64, preferred-register: '' }
  - { id: 3, class: gpr64, preferred-register: '' }
  - { id: 4, class: zpr, preferred-register: '' }
  - { id: 5, class: zpr, preferred-register: '' }
  - { id: 6, class: zpr, preferred-register: '' }
  - { id: 7, class: zpr, preferred-register: '' }
  - { id: 8, class: gpr64all, preferred-register: '' }
  - { id: 9, class: gpr64sp, preferred-register: '' }
  - { id: 10, class: gpr64sp, preferred-register: '' }
  - { id: 11, class: gpr64sp, preferred-register: '' }
  - { id: 12, class: gpr64sp, preferred-register: '' }
  - { id: 13, class: gpr64all, preferred-register: '' }
  - { id: 14, class: gpr64all, preferred-register: '' }
  - { id: 15, class: gpr64all, preferred-register: '' }
  - { id: 16, class: gpr64all, preferred-register: '' }
  - { id: 17, class: gpr64, preferred-register: '' }
  - { id: 18, class: gpr64all, preferred-register: '' }
  - { id: 19, class: gpr64all, preferred-register: '' }
  - { id: 20, class: gpr64all, preferred-register: '' }
  - { id: 21, class: gpr64all, preferred-register: '' }
  - { id: 22, class: gpr64sp, preferred-register: '' }
  - { id: 23, class: gpr64sp, preferred-register: '' }
  - { id: 24, class: gpr64sp, preferred-register: '' }
  - { id: 25, class: gpr64sp, preferred-register: '' }
  - { id: 26, class: gpr64all, preferred-register: '' }
  - { id: 27, class: gpr64all, preferred-register: '' }
  - { id: 28, class: gpr64all, preferred-register: '' }
  - { id: 29, class: gpr64all, preferred-register: '' }
  - { id: 30, class: gpr64common, preferred-register: '' }
  - { id: 31, class: gpr32, preferred-register: '' }
  - { id: 32, class: gpr32sp, preferred-register: '' }
  - { id: 33, class: gpr32, preferred-register: '' }
  - { id: 34, class: gpr64all, preferred-register: '' }
  - { id: 35, class: gpr32sp, preferred-register: '' }
  - { id: 36, class: gpr64common, preferred-register: '' }
  - { id: 37, class: gpr64, preferred-register: '' }
  - { id: 38, class: gpr64, preferred-register: '' }
  - { id: 39, class: gpr64common, preferred-register: '' }
  - { id: 40, class: fpr32, preferred-register: '' }
  - { id: 41, class: gpr64common, preferred-register: '' }
  - { id: 42, class: fpr32, preferred-register: '' }
  - { id: 43, class: gpr64all, preferred-register: '' }
  - { id: 44, class: gpr32, preferred-register: '' }
  - { id: 45, class: gpr64all, preferred-register: '' }
  - { id: 46, class: gpr64all, preferred-register: '' }
  - { id: 47, class: gpr64all, preferred-register: '' }
  - { id: 48, class: gpr64common, preferred-register: '' }
  - { id: 49, class: zpr, preferred-register: '' }
  - { id: 50, class: zpr, preferred-register: '' }
  - { id: 51, class: zpr, preferred-register: '' }
  - { id: 52, class: zpr, preferred-register: '' }
  - { id: 53, class: gpr64common, preferred-register: '' }
  - { id: 54, class: gpr64common, preferred-register: '' }
  - { id: 55, class: gpr64sp, preferred-register: '' }
  - { id: 56, class: gpr64common, preferred-register: '' }
  - { id: 57, class: gpr64common, preferred-register: '' }
  - { id: 58, class: gpr64common, preferred-register: '' }
  - { id: 59, class: ppr_3b, preferred-register: '' }
  - { id: 60, class: zpr, preferred-register: '' }
  - { id: 61, class: zpr, preferred-register: '' }
  - { id: 62, class: ppr_3b, preferred-register: '' }
  - { id: 63, class: zpr, preferred-register: '' }
  - { id: 64, class: zpr, preferred-register: '' }
  - { id: 65, class: zpr, preferred-register: '' }
  - { id: 66, class: zpr, preferred-register: '' }
  - { id: 67, class: zpr, preferred-register: '' }
  - { id: 68, class: zpr, preferred-register: '' }
  - { id: 69, class: zpr, preferred-register: '' }
  - { id: 70, class: zpr, preferred-register: '' }
  - { id: 71, class: zpr, preferred-register: '' }
  - { id: 72, class: zpr, preferred-register: '' }
  - { id: 73, class: zpr, preferred-register: '' }
  - { id: 74, class: zpr, preferred-register: '' }
  - { id: 75, class: zpr, preferred-register: '' }
  - { id: 76, class: zpr, preferred-register: '' }
  - { id: 77, class: zpr, preferred-register: '' }
  - { id: 78, class: zpr, preferred-register: '' }
  - { id: 79, class: zpr, preferred-register: '' }
  - { id: 80, class: zpr, preferred-register: '' }
  - { id: 81, class: zpr, preferred-register: '' }
  - { id: 82, class: zpr, preferred-register: '' }
  - { id: 83, class: zpr, preferred-register: '' }
  - { id: 84, class: zpr, preferred-register: '' }
  - { id: 85, class: zpr, preferred-register: '' }
  - { id: 86, class: zpr, preferred-register: '' }
  - { id: 87, class: zpr, preferred-register: '' }
  - { id: 88, class: zpr, preferred-register: '' }
  - { id: 89, class: zpr, preferred-register: '' }
  - { id: 90, class: zpr, preferred-register: '' }
  - { id: 91, class: zpr, preferred-register: '' }
  - { id: 92, class: zpr, preferred-register: '' }
  - { id: 93, class: zpr, preferred-register: '' }
  - { id: 94, class: zpr, preferred-register: '' }
  - { id: 95, class: zpr, preferred-register: '' }
  - { id: 96, class: zpr, preferred-register: '' }
  - { id: 97, class: zpr, preferred-register: '' }
  - { id: 98, class: zpr, preferred-register: '' }
  - { id: 99, class: zpr, preferred-register: '' }
  - { id: 100, class: zpr, preferred-register: '' }
  - { id: 101, class: zpr, preferred-register: '' }
  - { id: 102, class: zpr, preferred-register: '' }
  - { id: 103, class: zpr, preferred-register: '' }
  - { id: 104, class: gpr64sp, preferred-register: '' }
  - { id: 105, class: gpr64sp, preferred-register: '' }
  - { id: 106, class: gpr64sp, preferred-register: '' }
  - { id: 107, class: gpr64, preferred-register: '' }
  - { id: 108, class: gpr64, preferred-register: '' }
  - { id: 109, class: gpr64, preferred-register: '' }
  - { id: 110, class: gpr64common, preferred-register: '' }
  - { id: 111, class: gpr64, preferred-register: '' }
  - { id: 112, class: gpr64common, preferred-register: '' }
  - { id: 113, class: gpr64, preferred-register: '' }
  - { id: 114, class: gpr64common, preferred-register: '' }
  - { id: 115, class: gpr64, preferred-register: '' }
  - { id: 116, class: gpr64, preferred-register: '' }
  - { id: 117, class: gpr64sp, preferred-register: '' }
  - { id: 118, class: fpr32, preferred-register: '' }
  - { id: 119, class: fpr64, preferred-register: '' }
  - { id: 120, class: gpr64sp, preferred-register: '' }
  - { id: 121, class: fpr32, preferred-register: '' }
  - { id: 122, class: fpr64, preferred-register: '' }
  - { id: 123, class: fpr64, preferred-register: '' }
  - { id: 124, class: fpr64, preferred-register: '' }
  - { id: 125, class: fpr64, preferred-register: '' }
  - { id: 126, class: fpr64, preferred-register: '' }
  - { id: 127, class: fpr64, preferred-register: '' }
  - { id: 128, class: fpr64, preferred-register: '' }
  - { id: 129, class: fpr64, preferred-register: '' }
  - { id: 130, class: fpr64, preferred-register: '' }
  - { id: 131, class: fpr32, preferred-register: '' }
  - { id: 132, class: fpr64, preferred-register: '' }
  - { id: 133, class: fpr64, preferred-register: '' }
  - { id: 134, class: fpr32, preferred-register: '' }
  - { id: 135, class: gpr64sp, preferred-register: '' }
  - { id: 136, class: gpr64, preferred-register: '' }
  - { id: 137, class: gpr64common, preferred-register: '' }
  - { id: 138, class: gpr64common, preferred-register: '' }
  - { id: 139, class: gpr64common, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     true
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x50000000), %bb.6(0x30000000)
  
    %30:gpr64common = ADRP target-flags(aarch64-page) @size
    %31:gpr32 = LDRWui killed %30, target-flags(aarch64-pageoff, aarch64-nc) @size :: (dereferenceable load (s32) from @size, !tbaa !6)
    %0:gpr64 = SUBREG_TO_REG 0, killed %31, %subreg.sub_32
    %32:gpr32sp = COPY %0.sub_32
    dead $wzr = SUBSWri killed %32, 1, 0, implicit-def $nzcv
    Bcc 11, %bb.6, implicit $nzcv
    B %bb.1
  
  bb.1.for.body.lr.ph:
    successors: %bb.8(0x40000000), %bb.2(0x40000000)
  
    %35:gpr32sp = COPY %0.sub_32
    %36:gpr64common = ADRP target-flags(aarch64-page) @j
    %37:gpr64 = LDRSWui killed %36, target-flags(aarch64-pageoff, aarch64-nc) @j :: (dereferenceable load (s32) from @j, !tbaa !6)
    %38:gpr64 = UBFMXri killed %37, 62, 61
    %39:gpr64common = MOVaddr target-flags(aarch64-page) @px, target-flags(aarch64-pageoff, aarch64-nc) @px
    %40:fpr32 = LDRSroX %39, %38, 0, 0 :: (load (s32) from %ir.arrayidx5, !tbaa !10)
    %1:fpr64 = nofpexcept FCVTDSr killed %40, implicit $fpcr
    %41:gpr64common = MOVaddr target-flags(aarch64-page) @py, target-flags(aarch64-pageoff, aarch64-nc) @py
    %42:fpr32 = LDRSroX %41, %38, 0, 0 :: (load (s32) from %ir.arrayidx8, !tbaa !10)
    %2:fpr64 = nofpexcept FCVTDSr killed %42, implicit $fpcr
    dead $wzr = SUBSWri killed %35, 8, 0, implicit-def $nzcv
    Bcc 2, %bb.2, implicit $nzcv
  
  bb.8:
    successors: %bb.5(0x80000000)
  
    %43:gpr64all = COPY $xzr
    %34:gpr64all = COPY %43
    B %bb.5
  
  bb.2.vector.ph:
    successors: %bb.3(0x80000000)
  
    %48:gpr64common = ANDXri %0, 8028
    %3:gpr64 = COPY %48
    %50:zpr = IMPLICIT_DEF
    %49:zpr = INSERT_SUBREG %50, %1, %subreg.dsub
    %5:zpr = DUP_ZZI_D killed %49, 0
    %52:zpr = IMPLICIT_DEF
    %51:zpr = INSERT_SUBREG %52, %2, %subreg.dsub
    %7:zpr = DUP_ZZI_D killed %51, 0
    %53:gpr64common = nsw SUBXri %48, 8, 0
    %54:gpr64common = UBFMXri killed %53, 3, 63
    %55:gpr64sp = nuw nsw ADDXri killed %54, 1, 0
    %56:gpr64common = MOVaddr target-flags(aarch64-page) @px, target-flags(aarch64-pageoff, aarch64-nc) @px
    %47:gpr64all = COPY %56
    %57:gpr64common = MOVaddr target-flags(aarch64-page) @py, target-flags(aarch64-pageoff, aarch64-nc) @py
    %46:gpr64all = COPY %57
    %58:gpr64common = MOVaddr target-flags(aarch64-page) @vx, target-flags(aarch64-pageoff, aarch64-nc) @vx
    %45:gpr64all = COPY %58
    %8:gpr64all = COPY %55
    %59:ppr_3b = PTRUE_S 31
    %62:ppr_3b = PTRUE_D 31
    %64:zpr = IMPLICIT_DEF
    %67:zpr = IMPLICIT_DEF
    %71:zpr = IMPLICIT_DEF
    %74:zpr = IMPLICIT_DEF
    %84:zpr = IMPLICIT_DEF
    %86:zpr = IMPLICIT_DEF
    %87:zpr = FDUP_ZI_D 112
    %93:zpr = IMPLICIT_DEF
    %96:zpr = IMPLICIT_DEF
    %100:zpr = IMPLICIT_DEF
    %102:zpr = IMPLICIT_DEF
  
  bb.3.vector.body:
    successors: %bb.3(0x7c000000), %bb.4(0x04000000)
  
    %9:gpr64sp = PHI %45, %bb.2, %15, %bb.3
    %10:gpr64sp = PHI %46, %bb.2, %14, %bb.3
    %11:gpr64sp = PHI %47, %bb.2, %13, %bb.3
    %12:gpr64sp = PHI %8, %bb.2, %16, %bb.3
    %60:zpr = LD1W_IMM %59, %11, 0 :: (load unknown-size from %ir.lsr.iv38, align 4, !tbaa !10)
    %61:zpr = UUNPKLO_ZZ_D %60
    %63:zpr = FCVT_ZPmZ_StoD_UNDEF %64, %62, killed %61
    %65:zpr = UUNPKHI_ZZ_D %60
    %66:zpr = FCVT_ZPmZ_StoD_UNDEF %67, %62, killed %65
    %68:zpr = LD1W_IMM %59, %10, 0 :: (load unknown-size from %ir.lsr.iv40, align 4, !tbaa !10)
    %69:zpr = UUNPKHI_ZZ_D %68
    %70:zpr = FCVT_ZPmZ_StoD_UNDEF %71, %62, killed %69
    %72:zpr = UUNPKLO_ZZ_D %68
    %73:zpr = FCVT_ZPmZ_StoD_UNDEF %74, %62, killed %72
    %75:zpr = nnan ninf nsz arcp contract afn reassoc FSUB_ZZZ_D %5, killed %66
    %76:zpr = nnan ninf nsz arcp contract afn reassoc FSUB_ZZZ_D %5, killed %63
    %77:zpr = nnan ninf nsz arcp contract afn reassoc FSUB_ZZZ_D %7, killed %73
    %78:zpr = nnan ninf nsz arcp contract afn reassoc FSUB_ZZZ_D %7, killed %70
    %79:zpr = nnan ninf nsz arcp contract afn reassoc FMUL_ZZZ_D %76, %76
    %80:zpr = nnan ninf nsz arcp contract afn reassoc FMUL_ZZZ_D %75, %75
    %81:zpr = nnan ninf nsz arcp contract afn reassoc FMLA_ZPZZZ_D_UNDEF %62, killed %80, %78, %78
    %82:zpr = nnan ninf nsz arcp contract afn reassoc FMLA_ZPZZZ_D_UNDEF %62, killed %79, %77, %77
    %83:zpr = nnan ninf nsz arcp contract afn reassoc FSQRT_ZPmZ_D_UNDEF %84, %62, killed %82
    %85:zpr = nnan ninf nsz arcp contract afn reassoc FSQRT_ZPmZ_D_UNDEF %86, %62, killed %81
    %88:zpr = nnan ninf nsz arcp contract afn reassoc FDIV_ZPZZ_D_UNDEF %62, %87, killed %85
    %89:zpr = nnan ninf nsz arcp contract afn reassoc FDIV_ZPZZ_D_UNDEF %62, %87, killed %83
    %90:zpr = LD1W_IMM %59, %9, 0 :: (load unknown-size from %ir.lsr.iv42, align 4, !tbaa !10)
    %91:zpr = UUNPKHI_ZZ_D %90
    %92:zpr = FCVT_ZPmZ_StoD_UNDEF %93, %62, killed %91
    %94:zpr = UUNPKLO_ZZ_D %90
    %95:zpr = FCVT_ZPmZ_StoD_UNDEF %96, %62, killed %94
    %97:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZZZ_D killed %89, killed %95
    %98:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZZZ_D killed %88, killed %92
    %99:zpr = FCVT_ZPmZ_DtoS_UNDEF %100, %62, killed %98
    %101:zpr = FCVT_ZPmZ_DtoS_UNDEF %102, %62, killed %97
    %103:zpr = UZP1_ZZZ_S killed %101, killed %99
    ST1W_IMM killed %103, %59, %9, 0 :: (store unknown-size into %ir.lsr.iv42, align 4, !tbaa !10)
    %104:gpr64sp = ADDXri %11, 32, 0
    %13:gpr64all = COPY %104
    %105:gpr64sp = ADDXri %10, 32, 0
    %14:gpr64all = COPY %105
    %106:gpr64sp = ADDXri %9, 32, 0
    %15:gpr64all = COPY %106
    %107:gpr64 = SUBSXri %12, 1, 0, implicit-def $nzcv
    %16:gpr64all = COPY %107
    Bcc 1, %bb.3, implicit $nzcv
    B %bb.4
  
  bb.4.middle.block:
    successors: %bb.6(0x40000000), %bb.5(0x40000000)
  
    dead $xzr = SUBSXrr %48, %0, implicit-def $nzcv
    Bcc 0, %bb.6, implicit $nzcv
    B %bb.5
  
  bb.5.for.body.preheader:
    successors: %bb.7(0x80000000)
  
    %17:gpr64 = PHI %34, %bb.8, %3, %bb.4
    %139:gpr64common = MOVaddr target-flags(aarch64-page) @vx, target-flags(aarch64-pageoff, aarch64-nc) @vx
    %109:gpr64 = nuw nsw UBFMXri %17, 62, 61
    %111:gpr64 = ADDXrr %139, %109
    %18:gpr64all = COPY %111
    %113:gpr64 = ADDXrr %41, %109
    %19:gpr64all = COPY %113
    %115:gpr64 = ADDXrr %39, %109
    %20:gpr64all = COPY %115
    %116:gpr64 = SUBXrr %0, %17
    %21:gpr64all = COPY %116
    %129:fpr64 = FMOVDi 112
    B %bb.7
  
  bb.6.for.cond.cleanup:
    %137:gpr64common = MOVaddr target-flags(aarch64-page) @vx, target-flags(aarch64-pageoff, aarch64-nc) @vx
    $x0 = COPY %137
    TCRETURNdi @dummy, 0, csr_aarch64_aapcs, implicit $sp, implicit $x0
  
  bb.7.for.body:
    successors: %bb.7(0x7c000000), %bb.6(0x04000000)
  
    %22:gpr64sp = PHI %20, %bb.5, %28, %bb.7
    %23:gpr64sp = PHI %19, %bb.5, %27, %bb.7
    %24:gpr64sp = PHI %18, %bb.5, %26, %bb.7
    %25:gpr64sp = PHI %21, %bb.5, %29, %bb.7
    early-clobber %117:gpr64sp, %118:fpr32 = LDRSpost %22, 4 :: (load (s32) from %ir.lsr.iv35, !tbaa !10)
    %119:fpr64 = nofpexcept FCVTDSr killed %118, implicit $fpcr
    early-clobber %120:gpr64sp, %121:fpr32 = LDRSpost %23, 4 :: (load (s32) from %ir.lsr.iv32, !tbaa !10)
    %122:fpr64 = nofpexcept FCVTDSr killed %121, implicit $fpcr
    %123:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FSUBDrr %1, killed %119, implicit $fpcr
    %124:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FSUBDrr %2, killed %122, implicit $fpcr
    %125:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FMULDrr %123, %123, implicit $fpcr
    %127:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FMADDDrrr %124, %124, killed %125, implicit $fpcr
    %128:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FSQRTDr killed %127, implicit $fpcr
    %130:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FDIVDrr %129, killed %128, implicit $fpcr
    %131:fpr32 = LDRSui %24, 0 :: (load (s32) from %ir.lsr.iv, !tbaa !10)
    %132:fpr64 = nofpexcept FCVTDSr killed %131, implicit $fpcr
    %133:fpr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDDrr killed %130, killed %132, implicit $fpcr
    %134:fpr32 = nofpexcept FCVTSDr killed %133, implicit $fpcr
    early-clobber %135:gpr64sp = STRSpost killed %134, %24, 4 :: (store (s32) into %ir.lsr.iv, !tbaa !10)
    %26:gpr64all = COPY %135
    %27:gpr64all = COPY %120
    %28:gpr64all = COPY %117
    %136:gpr64 = SUBSXri %25, 1, 0, implicit-def $nzcv
    %29:gpr64all = COPY %136
    Bcc 1, %bb.7, implicit $nzcv
    B %bb.6

...
