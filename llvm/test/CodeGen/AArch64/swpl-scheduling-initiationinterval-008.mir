#RUN: llc %s -mcpu=a64fx -ffj-swp -O1 -swpl-debug -start-before=aarch64-swpipeliner -swpl-max-ireg=14 -swpl-minii=17   -o /dev/null 2>&1 | FileCheck %s

#CHECK:DBG(canPipelineLoop) [canPipelineLoop:OK] Passed all checks. :tp/testprg.c:5:3
#CHECK:DBG(calcEachMemAddressIncrement): early-clobber %53:gpr64sp = STRWpost killed %52:gpr32, %42:gpr64sp(tied-def 0), 4, debug-location !11 :: (store (s32) into %ir.4, !tbaa !12); tp/testprg.c:7:10
#CHECK: calcEachRegIncrement(%42): -2147483648
#CHECK:DBG(calcEachMemAddressIncrement): early-clobber %63:gpr64sp = STRWpost killed %62:gpr32, %45:gpr64sp(tied-def 0), 4, debug-location !11 :: (store (s32) into %ir.4, !tbaa !12); tp/testprg.c:7:10
#CHECK: calcEachRegIncrement(%45): -2147483648
#CHECK:DBG(calcEachMemAddressIncrement): early-clobber %71:gpr64sp = STRWpost killed %70:gpr32, %47:gpr64sp(tied-def 0), 4, debug-location !11 :: (store (s32) into %ir.4, !tbaa !12); tp/testprg.c:7:10
#CHECK: calcEachRegIncrement(%47): -2147483648
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%43:gpr64sp = COPY %55:gpr64all
#CHECK: latter_inst:%49:gpr32sp = COPY %43.sub_32:gpr64sp, debug-location !11; tp/testprg.c:7:10
#CHECK: use reg:%43
#CHECK: distance:1
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%49:gpr32sp = COPY %43.sub_32:gpr64sp, debug-location !11; tp/testprg.c:7:10
#CHECK: latter_inst:%50:gpr32sp = ADDWri killed %49:gpr32sp, 1000, 0, debug-location !11; tp/testprg.c:7:10
#CHECK: use reg:%49
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%50:gpr32sp = ADDWri killed %49:gpr32sp, 1000, 0, debug-location !11; tp/testprg.c:7:10
#CHECK: latter_inst:%51:gpr64all = INSERT_SUBREG %16:gpr64all(tied-def 0), killed %50:gpr32sp, %subreg.sub_32, debug-location !11; tp/testprg.c:7:10
#CHECK: use reg:%50
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%51:gpr64all = INSERT_SUBREG %16:gpr64all(tied-def 0), killed %50:gpr32sp, %subreg.sub_32, debug-location !11; tp/testprg.c:7:10
#CHECK: latter_inst:%52:gpr32 = COPY %51.sub_32:gpr64all, debug-location !11; tp/testprg.c:7:10
#CHECK: use reg:%51
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%52:gpr32 = COPY %51.sub_32:gpr64all, debug-location !11; tp/testprg.c:7:10
#CHECK: latter_inst:early-clobber %53:gpr64sp = STRWpost killed %52:gpr32, %42:gpr64sp(tied-def 0), 4, debug-location !11 :: (store (s32) into %ir.4, !tbaa !12); tp/testprg.c:7:10
#CHECK: use reg:%52
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%42:gpr64sp = COPY %56:gpr64all
#CHECK: latter_inst:early-clobber %53:gpr64sp = STRWpost killed %52:gpr32, %42:gpr64sp(tied-def 0), 4, debug-location !11 :: (store (s32) into %ir.4, !tbaa !12); tp/testprg.c:7:10
#CHECK: use reg:%42
#CHECK: distance:1
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%43:gpr64sp = COPY %55:gpr64all
#CHECK: latter_inst:%54:gpr64sp = nsw ADDXri %43:gpr64sp, 10, 0, debug-location !16; tp/testprg.c:5:17
#CHECK: use reg:%43
#CHECK: distance:1
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%54:gpr64sp = nsw ADDXri %43:gpr64sp, 10, 0, debug-location !16; tp/testprg.c:5:17
#CHECK: latter_inst:%55:gpr64all = COPY %54:gpr64sp, debug-location !16; tp/testprg.c:5:17
#CHECK: use reg:%54
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:early-clobber %53:gpr64sp = STRWpost killed %52:gpr32, %42:gpr64sp(tied-def 0), 4, debug-location !11 :: (store (s32) into %ir.4, !tbaa !12); tp/testprg.c:7:10
#CHECK: latter_inst:%56:gpr64all = COPY %53:gpr64sp, debug-location !16; tp/testprg.c:5:17
#CHECK: use reg:%53
#CHECK: distance:0
#CHECK: delay:9
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%44:gpr64sp = COPY %58:gpr64all
#CHECK: latter_inst:%57:gpr64 = SUBSXri %44:gpr64sp, 1, 0, implicit-def $nzcv, debug-location !10; tp/testprg.c:5:3
#CHECK: use reg:%44
#CHECK: distance:1
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%57:gpr64 = SUBSXri %44:gpr64sp, 1, 0, implicit-def $nzcv, debug-location !10; tp/testprg.c:5:3
#CHECK: latter_inst:%58:gpr64all = COPY %57:gpr64, debug-location !10; tp/testprg.c:5:3
#CHECK: use reg:%57
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%46:gpr64sp = COPY %65:gpr64all
#CHECK: latter_inst:%59:gpr32sp = COPY %46.sub_32:gpr64sp, debug-location !11; tp/testprg.c:7:10
#CHECK: use reg:%46
#CHECK: distance:1
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%59:gpr32sp = COPY %46.sub_32:gpr64sp, debug-location !11; tp/testprg.c:7:10
#CHECK: latter_inst:%60:gpr32sp = ADDWri killed %59:gpr32sp, 1000, 0, debug-location !11; tp/testprg.c:7:10
#CHECK: use reg:%59
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%60:gpr32sp = ADDWri killed %59:gpr32sp, 1000, 0, debug-location !11; tp/testprg.c:7:10
#CHECK: latter_inst:%61:gpr64all = INSERT_SUBREG %16:gpr64all(tied-def 0), killed %60:gpr32sp, %subreg.sub_32, debug-location !11; tp/testprg.c:7:10
#CHECK: use reg:%60
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%61:gpr64all = INSERT_SUBREG %16:gpr64all(tied-def 0), killed %60:gpr32sp, %subreg.sub_32, debug-location !11; tp/testprg.c:7:10
#CHECK: latter_inst:%62:gpr32 = COPY %61.sub_32:gpr64all, debug-location !11; tp/testprg.c:7:10
#CHECK: use reg:%61
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%62:gpr32 = COPY %61.sub_32:gpr64all, debug-location !11; tp/testprg.c:7:10
#CHECK: latter_inst:early-clobber %63:gpr64sp = STRWpost killed %62:gpr32, %45:gpr64sp(tied-def 0), 4, debug-location !11 :: (store (s32) into %ir.4, !tbaa !12); tp/testprg.c:7:10
#CHECK: use reg:%62
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%45:gpr64sp = COPY %66:gpr64all
#CHECK: latter_inst:early-clobber %63:gpr64sp = STRWpost killed %62:gpr32, %45:gpr64sp(tied-def 0), 4, debug-location !11 :: (store (s32) into %ir.4, !tbaa !12); tp/testprg.c:7:10
#CHECK: use reg:%45
#CHECK: distance:1
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%46:gpr64sp = COPY %65:gpr64all
#CHECK: latter_inst:%64:gpr64sp = nsw ADDXri %46:gpr64sp, 10, 0, debug-location !16; tp/testprg.c:5:17
#CHECK: use reg:%46
#CHECK: distance:1
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%64:gpr64sp = nsw ADDXri %46:gpr64sp, 10, 0, debug-location !16; tp/testprg.c:5:17
#CHECK: latter_inst:%65:gpr64all = COPY %64:gpr64sp, debug-location !16; tp/testprg.c:5:17
#CHECK: use reg:%64
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:early-clobber %63:gpr64sp = STRWpost killed %62:gpr32, %45:gpr64sp(tied-def 0), 4, debug-location !11 :: (store (s32) into %ir.4, !tbaa !12); tp/testprg.c:7:10
#CHECK: latter_inst:%66:gpr64all = COPY %63:gpr64sp, debug-location !16; tp/testprg.c:5:17
#CHECK: use reg:%63
#CHECK: distance:0
#CHECK: delay:9
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%48:gpr64sp = COPY %73:gpr64all
#CHECK: latter_inst:%67:gpr32sp = COPY %48.sub_32:gpr64sp, debug-location !11; tp/testprg.c:7:10
#CHECK: use reg:%48
#CHECK: distance:1
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%67:gpr32sp = COPY %48.sub_32:gpr64sp, debug-location !11; tp/testprg.c:7:10
#CHECK: latter_inst:%68:gpr32sp = ADDWri killed %67:gpr32sp, 1000, 0, debug-location !11; tp/testprg.c:7:10
#CHECK: use reg:%67
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%68:gpr32sp = ADDWri killed %67:gpr32sp, 1000, 0, debug-location !11; tp/testprg.c:7:10
#CHECK: latter_inst:%69:gpr64all = INSERT_SUBREG %16:gpr64all(tied-def 0), killed %68:gpr32sp, %subreg.sub_32, debug-location !11; tp/testprg.c:7:10
#CHECK: use reg:%68
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%69:gpr64all = INSERT_SUBREG %16:gpr64all(tied-def 0), killed %68:gpr32sp, %subreg.sub_32, debug-location !11; tp/testprg.c:7:10
#CHECK: latter_inst:%70:gpr32 = COPY %69.sub_32:gpr64all, debug-location !11; tp/testprg.c:7:10
#CHECK: use reg:%69
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%70:gpr32 = COPY %69.sub_32:gpr64all, debug-location !11; tp/testprg.c:7:10
#CHECK: latter_inst:early-clobber %71:gpr64sp = STRWpost killed %70:gpr32, %47:gpr64sp(tied-def 0), 4, debug-location !11 :: (store (s32) into %ir.4, !tbaa !12); tp/testprg.c:7:10
#CHECK: use reg:%70
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%47:gpr64sp = COPY %74:gpr64all
#CHECK: latter_inst:early-clobber %71:gpr64sp = STRWpost killed %70:gpr32, %47:gpr64sp(tied-def 0), 4, debug-location !11 :: (store (s32) into %ir.4, !tbaa !12); tp/testprg.c:7:10
#CHECK: use reg:%47
#CHECK: distance:1
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%48:gpr64sp = COPY %73:gpr64all
#CHECK: latter_inst:%72:gpr64sp = nsw ADDXri %48:gpr64sp, 10, 0, debug-location !16; tp/testprg.c:5:17
#CHECK: use reg:%48
#CHECK: distance:1
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%72:gpr64sp = nsw ADDXri %48:gpr64sp, 10, 0, debug-location !16; tp/testprg.c:5:17
#CHECK: latter_inst:%73:gpr64all = COPY %72:gpr64sp, debug-location !16; tp/testprg.c:5:17
#CHECK: use reg:%72
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:early-clobber %71:gpr64sp = STRWpost killed %70:gpr32, %47:gpr64sp(tied-def 0), 4, debug-location !11 :: (store (s32) into %ir.4, !tbaa !12); tp/testprg.c:7:10
#CHECK: latter_inst:%74:gpr64all = COPY %71:gpr64sp, debug-location !16; tp/testprg.c:5:17
#CHECK: use reg:%71
#CHECK: distance:0
#CHECK: delay:9
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%56:gpr64all = COPY %53:gpr64sp, debug-location !16; tp/testprg.c:5:17
#CHECK: latter_inst:%42:gpr64sp = COPY %56:gpr64all
#CHECK: use reg:%56
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%55:gpr64all = COPY %54:gpr64sp, debug-location !16; tp/testprg.c:5:17
#CHECK: latter_inst:%43:gpr64sp = COPY %55:gpr64all
#CHECK: use reg:%55
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%58:gpr64all = COPY %57:gpr64, debug-location !10; tp/testprg.c:5:3
#CHECK: latter_inst:%44:gpr64sp = COPY %58:gpr64all
#CHECK: use reg:%58
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%66:gpr64all = COPY %63:gpr64sp, debug-location !16; tp/testprg.c:5:17
#CHECK: latter_inst:%45:gpr64sp = COPY %66:gpr64all
#CHECK: use reg:%66
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%65:gpr64all = COPY %64:gpr64sp, debug-location !16; tp/testprg.c:5:17
#CHECK: latter_inst:%46:gpr64sp = COPY %65:gpr64all
#CHECK: use reg:%65
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%74:gpr64all = COPY %71:gpr64sp, debug-location !16; tp/testprg.c:5:17
#CHECK: latter_inst:%47:gpr64sp = COPY %74:gpr64all
#CHECK: use reg:%74
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(SwplDdg::analysisRegsFlowDependence):
#CHECK: former_inst:%73:gpr64all = COPY %72:gpr64sp, debug-location !16; tp/testprg.c:5:17
#CHECK: latter_inst:%48:gpr64sp = COPY %73:gpr64all
#CHECK: use reg:%73
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(getMemIncrement): former_increment=-2147483648 , latter_increment=-2147483648
#CHECK:DBG(SwplDdg::analysisMemDependence):output
#CHECK: former_inst:early-clobber %53:gpr64sp = STRWpost killed %52:gpr32, %42:gpr64sp(tied-def 0), 4, debug-location !11 :: (store (s32) into %ir.4, !tbaa !12); tp/testprg.c:7:10
#CHECK: latter_inst:early-clobber %63:gpr64sp = STRWpost killed %62:gpr32, %45:gpr64sp(tied-def 0), 4, debug-location !11 :: (store (s32) into %ir.4, !tbaa !12); tp/testprg.c:7:10
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(getMemIncrement): former_increment=-2147483648 , latter_increment=-2147483648
#CHECK:DBG(SwplDdg::analysisMemDependence):output
#CHECK: former_inst:early-clobber %53:gpr64sp = STRWpost killed %52:gpr32, %42:gpr64sp(tied-def 0), 4, debug-location !11 :: (store (s32) into %ir.4, !tbaa !12); tp/testprg.c:7:10
#CHECK: latter_inst:early-clobber %71:gpr64sp = STRWpost killed %70:gpr32, %47:gpr64sp(tied-def 0), 4, debug-location !11 :: (store (s32) into %ir.4, !tbaa !12); tp/testprg.c:7:10
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(getMemIncrement): former_increment=-2147483648 , latter_increment=-2147483648
#CHECK:DBG(SwplDdg::analysisMemDependence):output
#CHECK: former_inst:early-clobber %63:gpr64sp = STRWpost killed %62:gpr32, %45:gpr64sp(tied-def 0), 4, debug-location !11 :: (store (s32) into %ir.4, !tbaa !12); tp/testprg.c:7:10
#CHECK: latter_inst:early-clobber %53:gpr64sp = STRWpost killed %52:gpr32, %42:gpr64sp(tied-def 0), 4, debug-location !11 :: (store (s32) into %ir.4, !tbaa !12); tp/testprg.c:7:10
#CHECK: distance:1
#CHECK: delay:1
#CHECK:DBG(getMemIncrement): former_increment=-2147483648 , latter_increment=-2147483648
#CHECK:DBG(SwplDdg::analysisMemDependence):output
#CHECK: former_inst:early-clobber %63:gpr64sp = STRWpost killed %62:gpr32, %45:gpr64sp(tied-def 0), 4, debug-location !11 :: (store (s32) into %ir.4, !tbaa !12); tp/testprg.c:7:10
#CHECK: latter_inst:early-clobber %71:gpr64sp = STRWpost killed %70:gpr32, %47:gpr64sp(tied-def 0), 4, debug-location !11 :: (store (s32) into %ir.4, !tbaa !12); tp/testprg.c:7:10
#CHECK: distance:0
#CHECK: delay:1
#CHECK:DBG(getMemIncrement): former_increment=-2147483648 , latter_increment=-2147483648
#CHECK:DBG(SwplDdg::analysisMemDependence):output
#CHECK: former_inst:early-clobber %71:gpr64sp = STRWpost killed %70:gpr32, %47:gpr64sp(tied-def 0), 4, debug-location !11 :: (store (s32) into %ir.4, !tbaa !12); tp/testprg.c:7:10
#CHECK: latter_inst:early-clobber %53:gpr64sp = STRWpost killed %52:gpr32, %42:gpr64sp(tied-def 0), 4, debug-location !11 :: (store (s32) into %ir.4, !tbaa !12); tp/testprg.c:7:10
#CHECK: distance:1
#CHECK: delay:1
#CHECK:DBG(getMemIncrement): former_increment=-2147483648 , latter_increment=-2147483648
#CHECK:DBG(SwplDdg::analysisMemDependence):output
#CHECK: former_inst:early-clobber %71:gpr64sp = STRWpost killed %70:gpr32, %47:gpr64sp(tied-def 0), 4, debug-location !11 :: (store (s32) into %ir.4, !tbaa !12); tp/testprg.c:7:10
#CHECK: latter_inst:early-clobber %63:gpr64sp = STRWpost killed %62:gpr32, %45:gpr64sp(tied-def 0), 4, debug-location !11 :: (store (s32) into %ir.4, !tbaa !12); tp/testprg.c:7:10
#CHECK: distance:1
#CHECK: delay:1
#CHECK:        : (sched for small loop (Iterative Modulo Scheduling). ResMII 14. NumOfBodyInsts 33. Budget 165. Minimum II = 14.)
#CHECK:        :  (@) Scheduling tight       at estimation.          : (II: 17 in [ 17,95]) MVE: 1 Last inst: 0. (Itr Org: 99, Req: 3) (Reg Fp: 0/32, Int: 14/14, Pre: 1/8) Eval:0.000000e+00.
#CHECK:        : Change ii range for moderate schedule search:[ 17, 95 ] -> [ 18, 34 ]
#CHECK:        :  (x) Register (I) short     at recollect moderate.  : (II: 18 in [ 18,34]) MVE: 1 Last inst: 0. (Itr Org: 99, Req: 2) (Reg Fp: 0/32, Int: 15/14, Pre: 1/8) Eval:-1.000000e+00.
#CHECK:        :  (@) Scheduling tight       at recollect moderate.  : (II: 21 in [ 18,34]) MVE: 1 Last inst: 0. (Itr Org: 99, Req: 2) (Reg Fp: 0/32, Int: 14/14, Pre: 1/8) Eval:0.000000e+00.
#CHECK:        :  (@) Scheduling tight       at recollect moderate.  : (II: 24 in [ 18,34]) MVE: 1 Last inst: 0. (Itr Org: 99, Req: 2) (Reg Fp: 0/32, Int: 14/14, Pre: 1/8) Eval:0.000000e+00.
#CHECK:        :  (@) Scheduling tight       at recollect moderate.  : (II: 27 in [ 18,34]) MVE: 1 Last inst: 0. (Itr Org: 99, Req: 2) (Reg Fp: 0/32, Int: 14/14, Pre: 1/8) Eval:0.000000e+00.
#CHECK:        :  (@) Scheduling tight       at recollect moderate.  : (II: 30 in [ 18,34]) MVE: 1 Last inst: 0. (Itr Org: 99, Req: 2) (Reg Fp: 0/32, Int: 14/14, Pre: 1/8) Eval:0.000000e+00.
#CHECK:        :  (@) Scheduling tight       at recollect moderate.  : (II: 33 in [ 18,34]) MVE: 1 Last inst: 0. (Itr Org: 99, Req: 2) (Reg Fp: 0/32, Int: 13/14, Pre: 1/8) Eval:0.000000e+00.
#CHECK:        : Required iteration count in MIR input is        :   3 (= kernel:1 + pro/epilogue:2 + mod:0) 
#CHECK:        : Original iteration count in MIR is found        :   99
#CHECK:        :      Non-tuned SWPL (ker exp, ker itr, mod itr) : ( 1, 97, 0)
#CHECK::
#CHECK:        : Loop is software pipelined. (ii=17, kernel=17 cycles, prologue,epilogue =34 cycles)
#CHECK:        :      S
#CHECK:        :      IPC (initial=1.76, real=1.76, rate=100.00%)
#CHECK:        :      = Instructions(30)/II(17)
#CHECK:        :      Virtual inst:(3)
#CHECK::


--- |
  ; ModuleID = '/TEST/tp/testprg.c'
  source_filename = "/TEST/tp/testprg.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  ; Function Attrs: nofree norecurse nounwind
  define dso_local i32 @test(i32* nocapture %0) local_unnamed_addr #0 !dbg !7 {
    %2 = getelementptr i32, i32* %0, i64 1, !dbg !10
    call void @llvm.set.loop.iterations.i64(i64 99), !dbg !10
    br label %3, !dbg !10
  
  3:                                                ; preds = %3, %1
    %4 = phi i32* [ %10, %3 ], [ %2, %1 ]
    %5 = phi i64 [ %9, %3 ], [ -990, %1 ]
    %6 = phi i64 [ 99, %1 ], [ %11, %3 ], !dbg !11
    %7 = add i64 %5, 1000, !dbg !11
    %8 = trunc i64 %7 to i32
    store i32 %8, i32* %4, align 4, !dbg !11, !tbaa !12
    %9 = add nsw i64 %5, 10, !dbg !16
    %10 = getelementptr i32, i32* %4, i64 1, !dbg !16
    %11 = call i64 @llvm.loop.decrement.reg.i64(i64 %6, i64 1), !dbg !10
    %12 = icmp ne i64 %11, 0, !dbg !10
    br i1 %12, label %3, label %13, !dbg !10, !llvm.loop !17
  
  13:                                               ; preds = %3
    %14 = getelementptr inbounds i32, i32* %0, i64 99, !dbg !20
    %15 = load i32, i32* %14, align 4, !dbg !20, !tbaa !12
    ret i32 %15, !dbg !21
  }
  
  ; Function Attrs: noduplicate nounwind
  declare void @llvm.set.loop.iterations.i64(i64) #1
  
  ; Function Attrs: noduplicate nounwind
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #1
  
  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**) #2
  
  attributes #0 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="non-leaf" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" "use-soft-float"="false" }
  attributes #1 = { noduplicate nounwind }
  attributes #2 = { nounwind }
  
  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!3, !4, !5}
  !llvm.ident = !{!6}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 11.0.0 ", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly, enums: !2, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "/TEST/tp/testprg.c", directory: "/TEST")
  !2 = !{}
  !3 = !{i32 7, !"Dwarf Version", i32 4}
  !4 = !{i32 2, !"Debug Info Version", i32 3}
  !5 = !{i32 1, !"wchar_size", i32 4}
  !6 = !{!"clang version 11.0.0"}
  !7 = distinct !DISubprogram(name: "test", scope: !8, file: !8, line: 1, type: !9, scopeLine: 2, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2)
  !8 = !DIFile(filename: "tp/testprg.c", directory: "/TEST")
  !9 = !DISubroutineType(types: !2)
  !10 = !DILocation(line: 5, column: 3, scope: !7)
  !11 = !DILocation(line: 7, column: 10, scope: !7)
  !12 = !{!13, !13, i64 0}
  !13 = !{!"int", !14, i64 0}
  !14 = !{!"omnipotent char", !15, i64 0}
  !15 = !{!"Simple C/C++ TBAA"}
  !16 = !DILocation(line: 5, column: 17, scope: !7)
  !17 = distinct !{!17, !10, !18, !19}
  !18 = !DILocation(line: 8, column: 3, scope: !7)
  !19 = !{!"llvm.loop.unroll.disable"}
  !20 = !DILocation(line: 10, column: 10, scope: !7)
  !21 = !DILocation(line: 10, column: 3, scope: !7)

...
---
name:            test
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: gpr64all, preferred-register: '' }
  - { id: 1, class: gpr64sp, preferred-register: '' }
  - { id: 2, class: gpr64sp, preferred-register: '' }
  - { id: 3, class: gpr64sp, preferred-register: '' }
  - { id: 4, class: gpr64all, preferred-register: '' }
  - { id: 5, class: gpr64all, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr64common, preferred-register: '' }
  - { id: 8, class: gpr64all, preferred-register: '' }
  - { id: 9, class: gpr64all, preferred-register: '' }
  - { id: 10, class: gpr64sp, preferred-register: '' }
  - { id: 11, class: gpr64, preferred-register: '' }
  - { id: 12, class: gpr32, preferred-register: '' }
  - { id: 13, class: gpr32sp, preferred-register: '' }
  - { id: 14, class: gpr32sp, preferred-register: '' }
  - { id: 15, class: gpr64all, preferred-register: '' }
  - { id: 16, class: gpr64all, preferred-register: '' }
  - { id: 17, class: gpr32, preferred-register: '' }
  - { id: 18, class: gpr64sp, preferred-register: '' }
  - { id: 19, class: gpr64sp, preferred-register: '' }
  - { id: 20, class: gpr64, preferred-register: '' }
  - { id: 21, class: gpr32, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%7' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.1):
    successors: %bb.1(0x80000000)
    liveins: $x0
  
    %7:gpr64common = COPY $x0
    %10:gpr64sp = ADDXri %7, 4, 0, debug-location !10
    %0:gpr64all = COPY %10, debug-location !10
    %11:gpr64 = MOVi64imm -990
    %8:gpr64all = COPY %11
    %12:gpr32 = MOVi32imm 99
    %9:gpr64all = SUBREG_TO_REG 0, killed %12, %subreg.sub_32
    %16:gpr64all = IMPLICIT_DEF
  
  bb.1 (%ir-block.3):
    successors: %bb.1(0x7c000000), %bb.2(0x04000000)
  
    %1:gpr64sp = PHI %0, %bb.0, %5, %bb.1
    %2:gpr64sp = PHI %8, %bb.0, %4, %bb.1
    %3:gpr64sp = PHI %9, %bb.0, %6, %bb.1, debug-location !11
    %101:gpr64sp = PHI %0, %bb.0, %105, %bb.1
    %102:gpr64sp = PHI %8, %bb.0, %104, %bb.1
    %201:gpr64sp = PHI %0, %bb.0, %205, %bb.1
    %202:gpr64sp = PHI %8, %bb.0, %204, %bb.1
    %13:gpr32sp = COPY %2.sub_32, debug-location !11
    %14:gpr32sp = ADDWri killed %13, 1000, 0, debug-location !11
    %15:gpr64all = INSERT_SUBREG %16, killed %14, %subreg.sub_32, debug-location !11
    %17:gpr32 = COPY %15.sub_32, debug-location !11
    early-clobber %18:gpr64sp = STRWpost killed %17, %1, 4, debug-location !11 :: (store 4 into %ir.4, !tbaa !12)
    %19:gpr64sp = nsw ADDXri %2, 10, 0, debug-location !16
    %4:gpr64all = COPY %19, debug-location !16
    %5:gpr64all = COPY %18, debug-location !16
    %20:gpr64 = SUBSXri %3, 1, 0, implicit-def $nzcv, debug-location !10
    %6:gpr64all = COPY %20, debug-location !10
    %113:gpr32sp = COPY %102.sub_32, debug-location !11
    %114:gpr32sp = ADDWri killed %113, 1000, 0, debug-location !11
    %115:gpr64all = INSERT_SUBREG %16, killed %114, %subreg.sub_32, debug-location !11
    %117:gpr32 = COPY %115.sub_32, debug-location !11
    early-clobber %118:gpr64sp = STRWpost killed %117, %101, 4, debug-location !11 :: (store 4 into %ir.4, !tbaa !12)
    %119:gpr64sp = nsw ADDXri %102, 10, 0, debug-location !16
    %104:gpr64all = COPY %119, debug-location !16
    %105:gpr64all = COPY %118, debug-location !16
    %213:gpr32sp = COPY %202.sub_32, debug-location !11
    %214:gpr32sp = ADDWri killed %213, 1000, 0, debug-location !11
    %215:gpr64all = INSERT_SUBREG %16, killed %214, %subreg.sub_32, debug-location !11
    %217:gpr32 = COPY %215.sub_32, debug-location !11
    early-clobber %218:gpr64sp = STRWpost killed %217, %201, 4, debug-location !11 :: (store 4 into %ir.4, !tbaa !12)
    %219:gpr64sp = nsw ADDXri %202, 10, 0, debug-location !16
    %204:gpr64all = COPY %219, debug-location !16
    %205:gpr64all = COPY %218, debug-location !16
    Bcc 1, %bb.1, implicit $nzcv, debug-location !10
    B %bb.2, debug-location !10
  
  bb.2 (%ir-block.13):
    %21:gpr32 = LDRWui %7, 99, debug-location !20 :: (load 4 from %ir.14, !tbaa !12)
    $w0 = COPY %21, debug-location !21
    RET_ReallyLR implicit $w0, debug-location !21

...
