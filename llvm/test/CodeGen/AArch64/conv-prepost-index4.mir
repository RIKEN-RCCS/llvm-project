# RUN: llc -mcpu=a64fx -O1 -swpl-disable-reg-alloc  -fswp -start-before=aarch64-swpipeliner -o /dev/null  -swpl-debug %s 2>&1 | FileCheck %s
#
# CHECK: DBG(SwplLoop::convertPrePostIndexInstr)
# CHECK-NEXT:  before:early-clobber %77:gpr64sp, %78:fpr32 = LDRSpost %73:gpr64sp(tied-def 0), 4 :: (load (s32) from %ir.lsr.iv35, !tbaa !6)
# CHECK-NEXT:  after 1:%78:fpr32 = LDURSi %73:gpr64sp, 0 :: (load (s32) from %ir.lsr.iv35, !tbaa !6)
# CHECK-NEXT:  after 2:%77:gpr64sp = ADDXri %73:gpr64sp, 4, 0
# CHECK-NEXT: DBG(SwplLoop::convertPrePostIndexInstr)
# CHECK-NEXT:  before:early-clobber %79:gpr64sp, %80:fpr32 = LDRSpost %74:gpr64sp(tied-def 0), 4 :: (load (s32) from %ir.lsr.iv32, !tbaa !6)
# CHECK-NEXT:  after 1:%80:fpr32 = LDURSi %74:gpr64sp, 0 :: (load (s32) from %ir.lsr.iv32, !tbaa !6)
# CHECK-NEXT:  after 2:%79:gpr64sp = ADDXri %74:gpr64sp, 4, 0
# CHECK-NEXT: DBG(SwplLoop::convertPrePostIndexInstr)
# CHECK-NEXT:  before:early-clobber %81:gpr64sp, %82:fpr32 = LDRSpost %74:gpr64sp(tied-def 0), -4 :: (load (s32) from %ir.lsr.iv32, !tbaa !6)
# CHECK-NEXT:  after 1:%82:fpr32 = LDURSi %74:gpr64sp, 0 :: (load (s32) from %ir.lsr.iv32, !tbaa !6)
# CHECK-NEXT:  after 2:%81:gpr64sp = SUBXri %74:gpr64sp, 4, 0
# CHECK-NEXT: DBG(SwplLoop::convertPrePostIndexInstr)
# CHECK-NEXT:  before:early-clobber %84:gpr64sp = STRSpost %83:fpr32, %75:gpr64sp(tied-def 0), 4 :: (store (s32) into %ir.lsr.iv, !tbaa !6)
# CHECK-NEXT:  after 1:STURSi %83:fpr32, %75:gpr64sp, 0 :: (store (s32) into %ir.lsr.iv, !tbaa !6)
# CHECK-NEXT:  after 2:%84:gpr64sp = ADDXri %75:gpr64sp, 4, 0
# CHECK-NEXT: DBG(SwplLoop::convertPrePostIndexInstr)
# CHECK-NEXT:  before:early-clobber %85:gpr64sp = STRSpost killed %83:fpr32, %75:gpr64sp(tied-def 0), -4 :: (store (s32) into %ir.lsr.iv, !tbaa !6)
# CHECK-NEXT:  after 1:STURSi %83:fpr32, %75:gpr64sp, 0 :: (store (s32) into %ir.lsr.iv, !tbaa !6)
# CHECK-NEXT:  after 2:%85:gpr64sp = SUBXri %75:gpr64sp, 4, 0

--- |
  ; ModuleID = 'a10.c'
  source_filename = "a10.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  @a = dso_local global [32000 x float] zeroinitializer, align 64
  @b = dso_local global [32000 x float] zeroinitializer, align 64
  @c = dso_local global [32000 x float] zeroinitializer, align 64
  @d = dso_local global [32000 x float] zeroinitializer, align 64
  @e = dso_local global [32000 x float] zeroinitializer, align 64
  @aa = dso_local global [256 x [256 x float]] zeroinitializer, align 64
  @bb = dso_local global [256 x [256 x float]] zeroinitializer, align 64
  @cc = dso_local global [256 x [256 x float]] zeroinitializer, align 64
  
  ; Function Attrs: nounwind uwtable vscale_range(1,16)
  define dso_local void @a10(ptr nocapture noundef readnone %func_args) local_unnamed_addr #0 {
  entry:
    %0 = tail call i64 @llvm.vscale.i64()
    %1 = shl nuw nsw i64 %0, 2
    %n.mod.vf = urem i64 16000, %1
    %n.vec = sub nuw nsw i64 16000, %n.mod.vf
    %2 = udiv i64 16000, %1
    %3 = mul i64 %0, %2
    %4 = shl i64 %3, 4
    %5 = add nuw nsw i64 %4, 64000
    %uglygep = getelementptr i8, ptr @a, i64 %5
    %uglygep31 = getelementptr i8, ptr @b, i64 %4
    %uglygep34 = getelementptr i8, ptr @a, i64 %4
    br label %vector.ph
  
  vector.ph:                                        ; preds = %for.cond.cleanup3, %entry
    %nl.019 = phi i32 [ 0, %entry ], [ %inc11, %for.cond.cleanup3 ]
    br label %vector.body
  
  vector.body:                                      ; preds = %vector.body, %vector.ph
    %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
    %6 = shl i64 %index, 2
    %uglygep28 = getelementptr i8, ptr @a, i64 %6
    %wide.load = load <vscale x 4 x float>, ptr %uglygep28, align 16, !tbaa !6
    %uglygep29 = getelementptr i8, ptr @b, i64 %6
    %wide.load23 = load <vscale x 4 x float>, ptr %uglygep29, align 16, !tbaa !6
    %7 = fadd fast <vscale x 4 x float> %wide.load23, %wide.load
    %8 = shl i64 %index, 2
    %uglygep27 = getelementptr i8, ptr getelementptr (i8, ptr @a, i64 64000), i64 %8
    store <vscale x 4 x float> %7, ptr %uglygep27, align 16, !tbaa !6
    %index.next = add nuw i64 %index, %1
    %9 = icmp eq i64 %n.vec, %index.next
    br i1 %9, label %middle.block, label %vector.body, !llvm.loop !10
  
  middle.block:                                     ; preds = %vector.body
    %10 = icmp eq i64 %n.mod.vf, 0
    br i1 %10, label %for.cond.cleanup3, label %for.body4.preheader
  
  for.body4.preheader:                              ; preds = %middle.block
    %11 = call i64 @llvm.start.loop.iterations.i64(i64 %n.mod.vf)
    br label %for.body4
  
  for.cond.cleanup:                                 ; preds = %for.cond.cleanup3
    ret void
  
  for.cond.cleanup3:                                ; preds = %for.body4, %middle.block
    %call = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, float noundef 0.000000e+00) #4
    %inc11 = add nuw nsw i32 %nl.019, 1
    %exitcond22.not = icmp eq i32 %inc11, 100
    br i1 %exitcond22.not, label %for.cond.cleanup, label %vector.ph, !llvm.loop !13
  
  for.body4:                                        ; preds = %for.body4.preheader, %for.body4
    %lsr.iv35 = phi ptr [ %uglygep34, %for.body4.preheader ], [ %uglygep36, %for.body4 ]
    %lsr.iv32 = phi ptr [ %uglygep31, %for.body4.preheader ], [ %uglygep33, %for.body4 ]
    %lsr.iv = phi ptr [ %uglygep, %for.body4.preheader ], [ %uglygep30, %for.body4 ]
    %12 = phi i64 [ %11, %for.body4.preheader ], [ %15, %for.body4 ]
    %13 = load float, ptr %lsr.iv35, align 4, !tbaa !6
    %14 = load float, ptr %lsr.iv32, align 4, !tbaa !6
    %add = fadd fast float %14, %13
    store float %add, ptr %lsr.iv, align 4, !tbaa !6
    %uglygep30 = getelementptr i8, ptr %lsr.iv, i64 4
    %uglygep33 = getelementptr i8, ptr %lsr.iv32, i64 4
    %uglygep36 = getelementptr i8, ptr %lsr.iv35, i64 4
    %15 = call i64 @llvm.loop.decrement.reg.i64(i64 %12, i64 1)
    %16 = icmp ne i64 %15, 0
    br i1 %16, label %for.body4, label %for.cond.cleanup3, !llvm.loop !14
  }
  
  declare i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, float noundef) local_unnamed_addr #1
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
  declare i64 @llvm.vscale.i64() #2
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #3
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #3
  
  attributes #0 = { nounwind uwtable vscale_range(1,16) "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #1 = { "approx-func-fp-math"="true" "frame-pointer"="non-leaf" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" }
  attributes #2 = { nocallback nofree nosync nounwind readnone willreturn }
  attributes #3 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #4 = { nounwind }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 7, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !5 = !{!"clang version 15.0.4"}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"float", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C/C++ TBAA"}
  !10 = distinct !{!10, !11, !12}
  !11 = !{!"llvm.loop.mustprogress"}
  !12 = !{!"llvm.loop.isvectorized", i32 1}
  !13 = distinct !{!13, !11}
  !14 = distinct !{!14, !11, !15, !12}
  !15 = !{!"llvm.loop.unroll.runtime.disable"}

...
---
name:            a10
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr64, preferred-register: '' }
  - { id: 1, class: gpr64, preferred-register: '' }
  - { id: 2, class: gpr64, preferred-register: '' }
  - { id: 3, class: gpr64all, preferred-register: '' }
  - { id: 4, class: gpr64all, preferred-register: '' }
  - { id: 5, class: gpr64all, preferred-register: '' }
  - { id: 6, class: gpr32sp, preferred-register: '' }
  - { id: 7, class: gpr64common, preferred-register: '' }
  - { id: 8, class: gpr64all, preferred-register: '' }
  - { id: 9, class: gpr64all, preferred-register: '' }
  - { id: 10, class: gpr32all, preferred-register: '' }
  - { id: 11, class: gpr64sp, preferred-register: '' }
  - { id: 12, class: gpr64sp, preferred-register: '' }
  - { id: 13, class: gpr64sp, preferred-register: '' }
  - { id: 14, class: gpr64sp, preferred-register: '' }
  - { id: 15, class: gpr64all, preferred-register: '' }
  - { id: 16, class: gpr64all, preferred-register: '' }
  - { id: 17, class: gpr64all, preferred-register: '' }
  - { id: 18, class: gpr64all, preferred-register: '' }
  - { id: 19, class: gpr64, preferred-register: '' }
  - { id: 20, class: gpr32all, preferred-register: '' }
  - { id: 21, class: gpr64, preferred-register: '' }
  - { id: 22, class: gpr64, preferred-register: '' }
  - { id: 23, class: gpr64, preferred-register: '' }
  - { id: 24, class: gpr32, preferred-register: '' }
  - { id: 25, class: gpr64, preferred-register: '' }
  - { id: 26, class: gpr64, preferred-register: '' }
  - { id: 27, class: gpr64, preferred-register: '' }
  - { id: 28, class: gpr64, preferred-register: '' }
  - { id: 29, class: gpr64, preferred-register: '' }
  - { id: 30, class: gpr64, preferred-register: '' }
  - { id: 31, class: gpr64common, preferred-register: '' }
  - { id: 32, class: gpr64, preferred-register: '' }
  - { id: 33, class: gpr32, preferred-register: '' }
  - { id: 34, class: gpr64, preferred-register: '' }
  - { id: 35, class: gpr64, preferred-register: '' }
  - { id: 36, class: gpr64common, preferred-register: '' }
  - { id: 37, class: gpr64, preferred-register: '' }
  - { id: 38, class: gpr32all, preferred-register: '' }
  - { id: 39, class: gpr64all, preferred-register: '' }
  - { id: 40, class: gpr64all, preferred-register: '' }
  - { id: 41, class: gpr64common, preferred-register: '' }
  - { id: 42, class: gpr64common, preferred-register: '' }
  - { id: 43, class: ppr_3b, preferred-register: '' }
  - { id: 44, class: zpr, preferred-register: '' }
  - { id: 45, class: gpr64common, preferred-register: '' }
  - { id: 46, class: zpr, preferred-register: '' }
  - { id: 47, class: zpr, preferred-register: '' }
  - { id: 48, class: gpr64common, preferred-register: '' }
  - { id: 49, class: gpr64, preferred-register: '' }
  - { id: 50, class: gpr64, preferred-register: '' }
  - { id: 51, class: gpr64sp, preferred-register: '' }
  - { id: 52, class: fpr32, preferred-register: '' }
  - { id: 53, class: gpr64sp, preferred-register: '' }
  - { id: 54, class: fpr32, preferred-register: '' }
  - { id: 55, class: fpr32, preferred-register: '' }
  - { id: 56, class: gpr64sp, preferred-register: '' }
  - { id: 57, class: gpr64, preferred-register: '' }
  - { id: 58, class: gpr64common, preferred-register: '' }
  - { id: 59, class: gpr64common, preferred-register: '' }
  - { id: 60, class: gpr64common, preferred-register: '' }
  - { id: 61, class: gpr64common, preferred-register: '' }
  - { id: 62, class: gpr64common, preferred-register: '' }
  - { id: 63, class: gpr64common, preferred-register: '' }
  - { id: 64, class: gpr64common, preferred-register: '' }
  - { id: 65, class: gpr64common, preferred-register: '' }
  - { id: 66, class: fpr32, preferred-register: '' }
  - { id: 67, class: gpr32all, preferred-register: '' }
  - { id: 68, class: gpr32sp, preferred-register: '' }
  - { id: 69, class: gpr32, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
  
    %21:gpr64 = RDVLI_XI 1
    %22:gpr64 = UBFMXri killed %21, 4, 63
    %23:gpr64 = CNTW_XPiI 31, 1
    %24:gpr32 = MOVi32imm 16000
    %25:gpr64 = SUBREG_TO_REG 0, killed %24, %subreg.sub_32
    %26:gpr64 = UDIVXr %25, %23
    %27:gpr64 = MADDXrrr %26, %23, $xzr
    %28:gpr64 = SUBXrr %25, %27
    %1:gpr64 = COPY %28
    %29:gpr64 = MADDXrrr killed %22, %26, $xzr
    %30:gpr64 = UBFMXri killed %29, 60, 59
    %31:gpr64common = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a
    %32:gpr64 = ADDXrr %31, %30
    %33:gpr32 = MOVi32imm 64000
    %34:gpr64 = SUBREG_TO_REG 0, killed %33, %subreg.sub_32
    %35:gpr64 = ADDXrr %32, killed %34
    %3:gpr64all = COPY %35
    %36:gpr64common = MOVaddr target-flags(aarch64-page) @b, target-flags(aarch64-pageoff, aarch64-nc) @b
    %37:gpr64 = ADDXrr %36, %30
    %4:gpr64all = COPY %37
    %38:gpr32all = COPY $wzr
    %20:gpr32all = COPY %38
    %5:gpr64all = COPY %32
    %43:ppr_3b = PTRUE_S 31
    %48:gpr64common = MOVi64imm 16000
    %60:gpr64common = MOVaddr target-flags(aarch64-page) @c, target-flags(aarch64-pageoff, aarch64-nc) @c
    %61:gpr64common = MOVaddr target-flags(aarch64-page) @d, target-flags(aarch64-pageoff, aarch64-nc) @d
    %62:gpr64common = MOVaddr target-flags(aarch64-page) @e, target-flags(aarch64-pageoff, aarch64-nc) @e
    %63:gpr64common = MOVaddr target-flags(aarch64-page) @aa, target-flags(aarch64-pageoff, aarch64-nc) @aa
    %64:gpr64common = MOVaddr target-flags(aarch64-page) @bb, target-flags(aarch64-pageoff, aarch64-nc) @bb
    %65:gpr64common = MOVaddr target-flags(aarch64-page) @cc, target-flags(aarch64-pageoff, aarch64-nc) @cc
    %66:fpr32 = FMOVS0
  
  bb.1.vector.ph:
    successors: %bb.2(0x80000000)
  
    %6:gpr32sp = PHI %20, %bb.0, %10, %bb.6
    %40:gpr64all = COPY $xzr
    %39:gpr64all = COPY %40
  
  bb.2.vector.body:
    successors: %bb.3(0x04000000), %bb.2(0x7c000000)
  
    %7:gpr64common = PHI %39, %bb.1, %8, %bb.2
    %42:gpr64common = ADDXrs %31, %7, 2
    %44:zpr = LD1W %43, %31, %7 :: (load unknown-size from %ir.uglygep28, align 16, !tbaa !6)
    %46:zpr = LD1W %43, %36, %7 :: (load unknown-size from %ir.uglygep29, align 16, !tbaa !6)
    %47:zpr = nnan ninf nsz arcp contract afn reassoc FADD_ZZZ_S killed %46, killed %44
    ST1W killed %47, %43, killed %42, %48 :: (store unknown-size into %ir.uglygep27, align 16, !tbaa !6)
    %49:gpr64 = nuw ADDXrr %7, %23
    %8:gpr64all = COPY %49
    dead $xzr = SUBSXrr %27, %49, implicit-def $nzcv
    Bcc 1, %bb.2, implicit $nzcv
    B %bb.3
  
  bb.3.middle.block:
    successors: %bb.6(0x30000000), %bb.4(0x50000000)
  
    CBZX %1, %bb.6
    B %bb.4
  
  bb.4.for.body4.preheader:
    successors: %bb.7(0x80000000)
  
    %9:gpr64all = COPY %1
    B %bb.7
  
  bb.5.for.cond.cleanup:
    RET_ReallyLR
  
  bb.6.for.cond.cleanup3:
    successors: %bb.5(0x04000000), %bb.1(0x7c000000)
  
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    $x0 = COPY %31
    $x1 = COPY %36
    $x2 = COPY %60
    $x3 = COPY %61
    $x4 = COPY %62
    $x5 = COPY %63
    $x6 = COPY %64
    $x7 = COPY %65
    $s0 = COPY %66
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $s0, implicit-def $sp, implicit-def $w0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %68:gpr32sp = nuw nsw ADDWri %6, 1, 0
    %10:gpr32all = COPY %68
    dead $wzr = SUBSWri %68, 100, 0, implicit-def $nzcv
    Bcc 0, %bb.5, implicit $nzcv
    B %bb.1
  
  bb.7.for.body4:
    successors: %bb.7(0x7c000000), %bb.6(0x04000000)
  
    %11:gpr64sp = PHI %5, %bb.4, %17, %bb.7
    %12:gpr64sp = PHI %4, %bb.4, %16, %bb.7
    %13:gpr64sp = PHI %3, %bb.4, %15, %bb.7
    %14:gpr64sp = PHI %9, %bb.4, %18, %bb.7
    early-clobber %51:gpr64sp, %52:fpr32 = LDRSpost %11, 4 :: (load (s32) from %ir.lsr.iv35, !tbaa !6)
    early-clobber %53:gpr64sp, %54:fpr32 = LDRSpost %12, 4 :: (load (s32) from %ir.lsr.iv32, !tbaa !6)
    early-clobber %A1:gpr64sp, %A2:fpr32 = LDRSpost %12, -4 :: (load (s32) from %ir.lsr.iv32, !tbaa !6)
    %55:fpr32 = nnan ninf nsz arcp contract afn reassoc nofpexcept FADDSrr killed %54, killed %52
    early-clobber %56:gpr64sp = STRSpost %55, %13, 4 :: (store (s32) into %ir.lsr.iv, !tbaa !6)
    early-clobber %B1:gpr64sp = STRSpost killed %55, %13, -4 :: (store (s32) into %ir.lsr.iv, !tbaa !6)
    %15:gpr64all = COPY %56
    %16:gpr64all = COPY %53
    %17:gpr64all = COPY %51
    %57:gpr64 = SUBSXri %14, 1, 0, implicit-def $nzcv
    %18:gpr64all = COPY %57
    Bcc 1, %bb.7, implicit $nzcv
    B %bb.6

...
