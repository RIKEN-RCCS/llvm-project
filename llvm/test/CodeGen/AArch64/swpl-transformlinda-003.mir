#RUN: llc %s -mcpu=a64fx -O1 -ffj-swp -swpl-debug-dump-mir=8 -start-before=aarch64-swpipeliner -o /dev/null 2>&1 | FileCheck %s
#CHECK:** TransformedMIRInfo begin **
#CHECK:originalDoVReg:%3
#CHECK:originalDoInitVar:%0
#CHECK:doVReg:%27
#CHECK:iterationInterval:23
#CHECK:minimumIterationInterval:4
#CHECK:coefficient: 1
#CHECK:minConstant: 0
#CHECK:expansion: 2
#CHECK:nVersions: 1
#CHECK:nCopies: 2
#CHECK:requiredKernelIteration: 2
#CHECK:prologEndIndx: 184
#CHECK:kernelEndIndx: 368
#CHECK:epilogEndIndx: 552
#CHECK:isIterationCountConstant: 0
#CHECK:doVRegInitialValue: 0
#CHECK:originalKernelIteration: 0
#CHECK:transformedKernelIteration: 0
#CHECK:transformedModIteration: 0
#CHECK:updateDoVRegMI:%17:gpr64 = SUBSXri %3:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK:branchDoVRegMI:Bcc 1, %bb.11, implicit $nzcv
#CHECK:branchDoVRegMIKernel:Bcc 10, %bb.3, implicit $nzcv
#CHECK:OrgPreHeader: %bb.1
#CHECK:Check1: %bb.6
#CHECK:Prolog: %bb.7
#CHECK:OrgBody: %bb.3
#CHECK:Epilog: %bb.8
#CHECK:NewPreHeader: %bb.10
#CHECK:Check2: %bb.9
#CHECK:NewBody: %bb.11
#CHECK:NewExit: %bb.12
#CHECK:OrgExit: %bb.2
#CHECK:mis:
#CHECK:** TransformedMIRInfo end   **
#CHECK:target loop:Loop at depth 1 containing: %bb.3<header><latch><exiting>
#CHECK:LAST:
#CHECK:bb.0 (%ir-block.1):
#CHECK:  successors: %bb.2(0x30000000), %bb.1(0x50000000); %bb.2(37.50%), %bb.1(62.50%)
#CHECK:  liveins: $x0
#CHECK:  %7:gpr64common = COPY $x0
#CHECK:  TBNZX %7:gpr64common, 63, %bb.2
#CHECK:  B %bb.1
#CHECK:bb.1 (%ir-block.3):
#CHECK:; predecessors: %bb.0
#CHECK:  successors: %bb.6(0x80000000); %bb.6(100.00%)

#CHECK:  %10:gpr64sp = ADDXri %7:gpr64common, 1, 0
#CHECK:  %0:gpr64all = COPY %10:gpr64sp
#CHECK:  %11:gpr64common = MOVaddr target-flags(aarch64-page) @A, target-flags(aarch64-pageoff, aarch64-nc) @A
#CHECK:  %9:gpr64all = COPY %11:gpr64common
#CHECK:  %12:gpr64common = MOVaddr target-flags(aarch64-page) @B, target-flags(aarch64-pageoff, aarch64-nc) @B
#CHECK:  %8:gpr64all = COPY %12:gpr64common
#CHECK:  B %bb.6
#CHECK:bb.2 (%ir-block.5):
#CHECK:; predecessors: %bb.0, %bb.12

#CHECK:  RET_ReallyLR
#CHECK:bb.6 (%ir-block.6):
#CHECK:; predecessors: %bb.1
#CHECK:  successors: %bb.7(0x40000000), %bb.10(0x40000000); %bb.7(50.00%), %bb.10(50.00%)

#CHECK:  %29:gpr64sp = COPY %0:gpr64all
#CHECK:  $xzr = SUBSXri %29:gpr64sp, 2, 0, implicit-def $nzcv
#CHECK:  Bcc 11, %bb.10, implicit $nzcv
#CHECK:bb.7 (%ir-block.6):
#CHECK:; predecessors: %bb.6
#CHECK:  successors: %bb.3(0x80000000); %bb.3(100.00%)

#CHECK:  %18:gpr64sp = COPY %8:gpr64all
#CHECK:  %19:gpr64sp = COPY %9:gpr64all
#CHECK:  %20:gpr64sp = COPY %0:gpr64all
#CHECK:  early-clobber %21:gpr64sp, %22:fpr32 = LDRSpost %18:gpr64sp(tied-def 0), 4
#CHECK:bb.3 (%ir-block.6):
#CHECK:; predecessors: %bb.3, %bb.7
#CHECK:  successors: %bb.3(0x7c000000), %bb.8(0x04000000); %bb.3(96.88%), %bb.8(3.12%)

#CHECK:  %48:gpr64sp = PHI %21:gpr64sp, %bb.7, %47:gpr64sp, %bb.3
#CHECK:  %50:fpr32 = PHI %22:fpr32, %bb.7, %49:fpr32, %bb.3
#CHECK:  %55:gpr64sp = PHI %20:gpr64sp, %bb.7, %54:gpr64sp, %bb.3
#CHECK:  %57:gpr64sp = PHI %19:gpr64sp, %bb.7, %56:gpr64sp, %bb.3
#CHECK:  %43:fpr32 = nnan ninf nsz arcp contract afn reassoc FADDSrr %50:fpr32, %50:fpr32
#CHECK:  early-clobber %44:gpr64sp = STRSpost killed %43:fpr32, %57:gpr64sp(tied-def 0), 4 :: (store (s32) into %ir.11, !tbaa !2)
#CHECK:  %45:gpr64all = COPY %48:gpr64sp
#CHECK:  %46:gpr64sp = COPY %45:gpr64all
#CHECK:  early-clobber %47:gpr64sp, %49:fpr32 = LDRSpost %46:gpr64sp(tied-def 0), 4
#CHECK:  %51:gpr64 = SUBSXri %55:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK:  %52:gpr64all = COPY %44:gpr64sp
#CHECK:  %53:gpr64all = COPY %51:gpr64
#CHECK:  %54:gpr64sp = COPY %53:gpr64all
#CHECK:  %56:gpr64sp = COPY %52:gpr64all
#CHECK:  %58:gpr64sp = COPY %51:gpr64
#CHECK:  $xzr = SUBSXri %58:gpr64sp, 2, 0, implicit-def $nzcv
#CHECK:  Bcc 10, %bb.3, implicit $nzcv
#CHECK:bb.8 (%ir-block.6):
#CHECK:; predecessors: %bb.3
#CHECK:  successors: %bb.9(0x80000000); %bb.9(100.00%)

#CHECK:  %34:fpr32 = nnan ninf nsz arcp contract afn reassoc FADDSrr %49:fpr32, %49:fpr32
#CHECK:  early-clobber %35:gpr64sp = STRSpost killed %34:fpr32, %56:gpr64sp(tied-def 0), 4 :: (store (s32) into %ir.11, !tbaa !2)
#CHECK:  %36:gpr64all = COPY %47:gpr64sp
#CHECK:  %37:gpr64sp = COPY %36:gpr64all
#CHECK:  %38:gpr64 = SUBSXri %54:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK:  %39:gpr64all = COPY %35:gpr64sp
#CHECK:  %40:gpr64all = COPY %38:gpr64
#CHECK:  %41:gpr64sp = COPY %40:gpr64all
#CHECK:  %42:gpr64sp = COPY %39:gpr64all
#CHECK:bb.9 (%ir-block.6):
#CHECK:; predecessors: %bb.8
#CHECK:  successors: %bb.10(0x40000000), %bb.12(0x40000000); %bb.10(50.00%), %bb.12(50.00%)

#CHECK:  $xzr = SUBSXri %41:gpr64sp, 0, 0, implicit-def $nzcv
#CHECK:  Bcc 0, %bb.12, implicit $nzcv
#CHECK:bb.10 (%ir-block.6):
#CHECK:; predecessors: %bb.9, %bb.6
#CHECK:  successors: %bb.11(0x80000000); %bb.11(100.00%)

#CHECK:  %31:gpr64sp = PHI %8:gpr64all, %bb.6, %37:gpr64sp, %bb.9
#CHECK:  %32:gpr64sp = PHI %9:gpr64all, %bb.6, %42:gpr64sp, %bb.9
#CHECK:  %33:gpr64sp = PHI %0:gpr64all, %bb.6, %41:gpr64sp, %bb.9
#CHECK:bb.11 (%ir-block.6):
#CHECK:; predecessors: %bb.11, %bb.10
#CHECK:  successors: %bb.11(0x40000000), %bb.12(0x40000000); %bb.11(50.00%), %bb.12(50.00%)

#CHECK:  %1:gpr64sp = PHI %31:gpr64sp, %bb.10, %5:gpr64all, %bb.11
#CHECK:  %2:gpr64sp = PHI %32:gpr64sp, %bb.10, %4:gpr64all, %bb.11
#CHECK:  %3:gpr64sp = PHI %33:gpr64sp, %bb.10, %6:gpr64all, %bb.11
#CHECK:  early-clobber %13:gpr64sp, %14:fpr32 = LDRSpost %1:gpr64sp(tied-def 0), 4
#CHECK:  %15:fpr32 = nnan ninf nsz arcp contract afn reassoc FADDSrr %14:fpr32, %14:fpr32
#CHECK:  early-clobber %16:gpr64sp = STRSpost killed %15:fpr32, %2:gpr64sp(tied-def 0), 4 :: (store (s32) into %ir.11, !tbaa !2)
#CHECK:  %4:gpr64all = COPY %16:gpr64sp
#CHECK:  %5:gpr64all = COPY %13:gpr64sp
#CHECK:  %17:gpr64 = SUBSXri %3:gpr64sp, 1, 0, implicit-def $nzcv
#CHECK:  %6:gpr64all = COPY %17:gpr64
#CHECK:  Bcc 1, %bb.11, implicit $nzcv
#CHECK:  B %bb.12
#CHECK:bb.12 (%ir-block.6):
#CHECK:; predecessors: %bb.11, %bb.9
#CHECK:  successors: %bb.2(0x80000000); %bb.2(100.00%)

#CHECK:  B %bb.2
--- |
  ; ModuleID = 'test3044-03.c'
  source_filename = "test3044-03.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  @B = external dso_local local_unnamed_addr global [100 x float], align 4
  @A = external dso_local local_unnamed_addr global [100 x float], align 4
  
  ; Function Attrs: nofree norecurse nounwind
  define dso_local void @test3044(i64 %0) local_unnamed_addr #0 {
    %2 = icmp slt i64 %0, 0
    br i1 %2, label %5, label %3
  
  3:                                                ; preds = %1
    %4 = add i64 %0, 1
    call void @llvm.set.loop.iterations.i64(i64 %4)
    br label %6
  
  5:                                                ; preds = %6, %1
    ret void
  
  6:                                                ; preds = %6, %3
    %7 = phi [100 x float]* [ @B, %3 ], [ %17, %6 ]
    %8 = phi [100 x float]* [ @A, %3 ], [ %15, %6 ]
    %9 = phi i64 [ %4, %3 ], [ %18, %6 ]
    %10 = bitcast [100 x float]* %7 to float*
    %11 = bitcast [100 x float]* %8 to float*
    %12 = load float, float* %10, align 4, !tbaa !2
    %13 = fmul fast float %12, 2.000000e+00
    store float %13, float* %11, align 4, !tbaa !2
    %14 = getelementptr [100 x float], [100 x float]* %8, i64 0, i64 1
    %15 = bitcast float* %14 to [100 x float]*
    %16 = getelementptr [100 x float], [100 x float]* %7, i64 0, i64 1
    %17 = bitcast float* %16 to [100 x float]*
    %18 = call i64 @llvm.loop.decrement.reg.i64(i64 %9, i64 1)
    %19 = icmp ne i64 %18, 0
    br i1 %19, label %6, label %5, !llvm.loop !6
  }
  
  ; Function Attrs: noduplicate nounwind
  declare void @llvm.set.loop.iterations.i64(i64) #1
  
  ; Function Attrs: noduplicate nounwind
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #1
  
  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**) #2
  
  attributes #0 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="non-leaf" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rdm,+sha2,+sve,+v8.2a" "unsafe-fp-math"="true" "use-soft-float"="false" }
  attributes #1 = { noduplicate nounwind }
  attributes #2 = { nounwind }
  
  !llvm.module.flags = !{!0}
  !llvm.ident = !{!1}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{!"clang version 11.0.0"}
  !2 = !{!3, !3, i64 0}
  !3 = !{!"float", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}
  !6 = distinct !{!6, !7}
  !7 = !{!"llvm.loop.unroll.disable"}

...
---
name:            test3044
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: gpr64all, preferred-register: '' }
  - { id: 1, class: gpr64sp, preferred-register: '' }
  - { id: 2, class: gpr64sp, preferred-register: '' }
  - { id: 3, class: gpr64sp, preferred-register: '' }
  - { id: 4, class: gpr64all, preferred-register: '' }
  - { id: 5, class: gpr64all, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr64common, preferred-register: '' }
  - { id: 8, class: gpr64all, preferred-register: '' }
  - { id: 9, class: gpr64all, preferred-register: '' }
  - { id: 10, class: gpr64sp, preferred-register: '' }
  - { id: 11, class: gpr64common, preferred-register: '' }
  - { id: 12, class: gpr64common, preferred-register: '' }
  - { id: 13, class: gpr64sp, preferred-register: '' }
  - { id: 14, class: fpr32, preferred-register: '' }
  - { id: 15, class: fpr32, preferred-register: '' }
  - { id: 16, class: gpr64sp, preferred-register: '' }
  - { id: 17, class: gpr64, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%7' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.1):
    successors: %bb.2(0x30000000), %bb.1(0x50000000)
    liveins: $x0
  
    %7:gpr64common = COPY $x0
    TBNZX %7, 63, %bb.2
    B %bb.1
  
  bb.1 (%ir-block.3):
    successors: %bb.3(0x80000000)
  
    %10:gpr64sp = ADDXri %7, 1, 0
    %0:gpr64all = COPY %10
    %11:gpr64common = MOVaddr target-flags(aarch64-page) @A, target-flags(aarch64-pageoff, aarch64-nc) @A
    %9:gpr64all = COPY %11
    %12:gpr64common = MOVaddr target-flags(aarch64-page) @B, target-flags(aarch64-pageoff, aarch64-nc) @B
    %8:gpr64all = COPY %12
    B %bb.3
  
  bb.2 (%ir-block.5):
    RET_ReallyLR
  
  bb.3 (%ir-block.6):
    successors: %bb.3(0x7c000000), %bb.2(0x04000000)
  
    %1:gpr64sp = PHI %8, %bb.1, %5, %bb.3
    %2:gpr64sp = PHI %9, %bb.1, %4, %bb.3
    %3:gpr64sp = PHI %0, %bb.1, %6, %bb.3
    early-clobber %13:gpr64sp, %14:fpr32 = LDRSpost %1, 4
    %15:fpr32 = nnan ninf nsz arcp contract afn reassoc FADDSrr %14, %14
    early-clobber %16:gpr64sp = STRSpost killed %15, %2, 4 :: (store 4 into %ir.11, !tbaa !2)
    %4:gpr64all = COPY %16
    %5:gpr64all = COPY %13
    %17:gpr64 = SUBSXri %3, 1, 0, implicit-def $nzcv
    %6:gpr64all = COPY %17
    Bcc 1, %bb.3, implicit $nzcv
    B %bb.2

