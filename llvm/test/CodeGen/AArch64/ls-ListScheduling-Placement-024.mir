#RUN: llc %s -mcpu=a64fx -fswp -fls -O3 -start-before=aarch64-swpipeliner -swpl-maxii=2 -ls-debug-dump-scheduling-every-inst -o /dev/null 2>&1 | FileCheck %s

#CHECK:%226:fpr128 = SUBREG_TO_REG 0, killed %225:fpr64, %subreg.dsub
#CHECK-NEXT:pred : INSERT_SUBREG(placed=62501, delay=1)
#CHECK-NEXT:earliest cycle : 62502
#CHECK-NEXT:placed cycle   : 62502

--- |
  ; ModuleID = 'ls009.c'
  source_filename = "ls009.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  ; Function Attrs: nofree norecurse nosync nounwind memory(argmem: readwrite) uwtable vscale_range(1,16)
  define dso_local i32 @func(i32 noundef %n, ptr nocapture noundef readonly %a, ptr nocapture noundef readonly %b, ptr nocapture noundef writeonly %c, ptr nocapture noundef writeonly %q) local_unnamed_addr #0 {
  entry:
    %cmp22.not = icmp eq i32 %n, 0
    br i1 %cmp22.not, label %for.cond.cleanup, label %for.body.preheader
  
  for.body.preheader:                               ; preds = %entry
    %wide.trip.count = zext i32 %n to i64
    %xtraiter = and i64 %wide.trip.count, 7
    %0 = icmp ult i32 %n, 8
    br i1 %0, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new
  
  for.body.preheader.new:                           ; preds = %for.body.preheader
    %1 = lshr i64 %wide.trip.count, 3
    %scevgep39 = getelementptr i8, ptr %c, i64 16
    %scevgep49 = getelementptr i8, ptr %q, i64 16
    %scevgep59 = getelementptr i8, ptr %b, i64 16
    %scevgep69 = getelementptr i8, ptr %a, i64 16
    %2 = shl nuw nsw i64 %1, 3
    %3 = add nsw i64 %2, -8
    %4 = lshr i64 %3, 3
    %5 = add nuw nsw i64 %4, 1
    %6 = call i64 @llvm.start.loop.iterations.i64(i64 %5)
    br label %for.body
  
  for.cond.cleanup.loopexit.unr-lcssa.loopexit:     ; preds = %for.body
    %7 = mul i64 %lsr.iv.next38, -1
    br label %for.cond.cleanup.loopexit.unr-lcssa
  
  for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.cond.cleanup.loopexit.unr-lcssa.loopexit, %for.body.preheader
    %indvars.iv.unr = phi i64 [ 0, %for.body.preheader ], [ %7, %for.cond.cleanup.loopexit.unr-lcssa.loopexit ]
    %y.023.unr = phi i32 [ 0, %for.body.preheader ], [ %add5.7, %for.cond.cleanup.loopexit.unr-lcssa.loopexit ]
    %lcmp.mod.not = icmp eq i64 %xtraiter, 0
    br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.body.epil.preheader
  
  for.body.epil.preheader:                          ; preds = %for.cond.cleanup.loopexit.unr-lcssa
    %8 = shl nuw nsw i64 %indvars.iv.unr, 2
    %scevgep = getelementptr i8, ptr %q, i64 %8
    %scevgep27 = getelementptr i8, ptr %c, i64 %8
    %scevgep30 = getelementptr i8, ptr %b, i64 %8
    %scevgep33 = getelementptr i8, ptr %a, i64 %8
    %9 = call i64 @llvm.start.loop.iterations.i64(i64 %xtraiter)
    br label %for.body.epil
  
  for.body.epil:                                    ; preds = %for.body.epil.preheader, %for.body.epil
    %lsr.iv34 = phi ptr [ %scevgep33, %for.body.epil.preheader ], [ %scevgep35, %for.body.epil ]
    %lsr.iv31 = phi ptr [ %scevgep30, %for.body.epil.preheader ], [ %scevgep32, %for.body.epil ]
    %lsr.iv28 = phi ptr [ %scevgep27, %for.body.epil.preheader ], [ %scevgep29, %for.body.epil ]
    %lsr.iv = phi ptr [ %scevgep, %for.body.epil.preheader ], [ %scevgep26, %for.body.epil ]
    %y.023.epil = phi i32 [ %add5.epil, %for.body.epil ], [ %y.023.unr, %for.body.epil.preheader ]
    %10 = phi i64 [ %9, %for.body.epil.preheader ], [ %13, %for.body.epil ]
    %11 = load i32, ptr %lsr.iv34, align 4, !tbaa !6
    %add.epil = add nsw i32 %11, %y.023.epil
    %12 = load i32, ptr %lsr.iv31, align 4, !tbaa !6
    %add5.epil = add nsw i32 %12, %11
    %add6.epil = add nsw i32 %add.epil, %add5.epil
    store i32 %add6.epil, ptr %lsr.iv28, align 4, !tbaa !6
    %add9.epil = shl nsw i32 %add5.epil, 1
    store i32 %add9.epil, ptr %lsr.iv, align 4, !tbaa !6
    %scevgep26 = getelementptr i8, ptr %lsr.iv, i64 4
    %scevgep29 = getelementptr i8, ptr %lsr.iv28, i64 4
    %scevgep32 = getelementptr i8, ptr %lsr.iv31, i64 4
    %scevgep35 = getelementptr i8, ptr %lsr.iv34, i64 4
    %13 = call i64 @llvm.loop.decrement.reg.i64(i64 %10, i64 1)
    %14 = icmp ne i64 %13, 0
    br i1 %14, label %for.body.epil, label %for.cond.cleanup, !llvm.loop !10
  
  for.cond.cleanup:                                 ; preds = %for.body.epil, %for.cond.cleanup.loopexit.unr-lcssa, %entry
    ret i32 0
  
  for.body:                                         ; preds = %for.body, %for.body.preheader.new
    %lsr.iv70 = phi ptr [ %scevgep71, %for.body ], [ %scevgep69, %for.body.preheader.new ]
    %lsr.iv60 = phi ptr [ %scevgep61, %for.body ], [ %scevgep59, %for.body.preheader.new ]
    %lsr.iv50 = phi ptr [ %scevgep51, %for.body ], [ %scevgep49, %for.body.preheader.new ]
    %lsr.iv40 = phi ptr [ %scevgep41, %for.body ], [ %scevgep39, %for.body.preheader.new ]
    %lsr.iv37 = phi i64 [ %lsr.iv.next38, %for.body ], [ 0, %for.body.preheader.new ]
    %y.023 = phi i32 [ 0, %for.body.preheader.new ], [ %add5.7, %for.body ]
    %15 = phi i64 [ %6, %for.body.preheader.new ], [ %32, %for.body ]
    %scevgep72 = getelementptr i8, ptr %lsr.iv70, i64 -16
    %16 = load i32, ptr %scevgep72, align 4, !tbaa !6
    %add = add nsw i32 %16, %y.023
    %scevgep62 = getelementptr i8, ptr %lsr.iv60, i64 -16
    %17 = load i32, ptr %scevgep62, align 4, !tbaa !6
    %add5 = add nsw i32 %17, %16
    %add6 = add nsw i32 %add, %add5
    %scevgep43 = getelementptr i8, ptr %lsr.iv40, i64 -16
    store i32 %add6, ptr %scevgep43, align 4, !tbaa !6
    %add9 = shl nsw i32 %add5, 1
    %scevgep53 = getelementptr i8, ptr %lsr.iv50, i64 -16
    store i32 %add9, ptr %scevgep53, align 4, !tbaa !6
    %scevgep74 = getelementptr i8, ptr %lsr.iv70, i64 -12
    %18 = load i32, ptr %scevgep74, align 4, !tbaa !6
    %add.1 = add nsw i32 %18, %add5
    %scevgep64 = getelementptr i8, ptr %lsr.iv60, i64 -12
    %19 = load i32, ptr %scevgep64, align 4, !tbaa !6
    %add5.1 = add nsw i32 %19, %18
    %add6.1 = add nsw i32 %add.1, %add5.1
    %scevgep44 = getelementptr i8, ptr %lsr.iv40, i64 -12
    store i32 %add6.1, ptr %scevgep44, align 4, !tbaa !6
    %add9.1 = shl nsw i32 %add5.1, 1
    %scevgep54 = getelementptr i8, ptr %lsr.iv50, i64 -12
    store i32 %add9.1, ptr %scevgep54, align 4, !tbaa !6
    %scevgep75 = getelementptr i8, ptr %lsr.iv70, i64 -8
    %20 = load i32, ptr %scevgep75, align 4, !tbaa !6
    %add.2 = add nsw i32 %20, %add5.1
    %scevgep65 = getelementptr i8, ptr %lsr.iv60, i64 -8
    %21 = load i32, ptr %scevgep65, align 4, !tbaa !6
    %add5.2 = add nsw i32 %21, %20
    %add6.2 = add nsw i32 %add.2, %add5.2
    %scevgep45 = getelementptr i8, ptr %lsr.iv40, i64 -8
    store i32 %add6.2, ptr %scevgep45, align 4, !tbaa !6
    %add9.2 = shl nsw i32 %add5.2, 1
    %scevgep55 = getelementptr i8, ptr %lsr.iv50, i64 -8
    store i32 %add9.2, ptr %scevgep55, align 4, !tbaa !6
    %scevgep76 = getelementptr i8, ptr %lsr.iv70, i64 -4
    %22 = load i32, ptr %scevgep76, align 4, !tbaa !6
    %add.3 = add nsw i32 %22, %add5.2
    %scevgep66 = getelementptr i8, ptr %lsr.iv60, i64 -4
    %23 = load i32, ptr %scevgep66, align 4, !tbaa !6
    %add5.3 = add nsw i32 %23, %22
    %add6.3 = add nsw i32 %add.3, %add5.3
    %scevgep46 = getelementptr i8, ptr %lsr.iv40, i64 -4
    store i32 %add6.3, ptr %scevgep46, align 4, !tbaa !6
    %add9.3 = shl nsw i32 %add5.3, 1
    %scevgep56 = getelementptr i8, ptr %lsr.iv50, i64 -4
    store i32 %add9.3, ptr %scevgep56, align 4, !tbaa !6
    %24 = load i32, ptr %lsr.iv70, align 4, !tbaa !6
    %add.4 = add nsw i32 %24, %add5.3
    %25 = load i32, ptr %lsr.iv60, align 4, !tbaa !6
    %add5.4 = add nsw i32 %25, %24
    %add6.4 = add nsw i32 %add.4, %add5.4
    store i32 %add6.4, ptr %lsr.iv40, align 4, !tbaa !6
    %add9.4 = shl nsw i32 %add5.4, 1
    store i32 %add9.4, ptr %lsr.iv50, align 4, !tbaa !6
    %scevgep78 = getelementptr i8, ptr %lsr.iv70, i64 4
    %26 = load i32, ptr %scevgep78, align 4, !tbaa !6
    %add.5 = add nsw i32 %26, %add5.4
    %scevgep68 = getelementptr i8, ptr %lsr.iv60, i64 4
    %27 = load i32, ptr %scevgep68, align 4, !tbaa !6
    %add5.5 = add nsw i32 %27, %26
    %add6.5 = add nsw i32 %add.5, %add5.5
    %scevgep48 = getelementptr i8, ptr %lsr.iv40, i64 4
    store i32 %add6.5, ptr %scevgep48, align 4, !tbaa !6
    %add9.5 = shl nsw i32 %add5.5, 1
    %scevgep57 = getelementptr i8, ptr %lsr.iv50, i64 4
    store i32 %add9.5, ptr %scevgep57, align 4, !tbaa !6
    %scevgep77 = getelementptr i8, ptr %lsr.iv70, i64 8
    %28 = load i32, ptr %scevgep77, align 4, !tbaa !6
    %add.6 = add nsw i32 %28, %add5.5
    %scevgep67 = getelementptr i8, ptr %lsr.iv60, i64 8
    %29 = load i32, ptr %scevgep67, align 4, !tbaa !6
    %add5.6 = add nsw i32 %29, %28
    %add6.6 = add nsw i32 %add.6, %add5.6
    %scevgep47 = getelementptr i8, ptr %lsr.iv40, i64 8
    store i32 %add6.6, ptr %scevgep47, align 4, !tbaa !6
    %add9.6 = shl nsw i32 %add5.6, 1
    %scevgep58 = getelementptr i8, ptr %lsr.iv50, i64 8
    store i32 %add9.6, ptr %scevgep58, align 4, !tbaa !6
    %scevgep73 = getelementptr i8, ptr %lsr.iv70, i64 12
    %30 = load i32, ptr %scevgep73, align 4, !tbaa !6
    %add.7 = add nsw i32 %30, %add5.6
    %scevgep63 = getelementptr i8, ptr %lsr.iv60, i64 12
    %31 = load i32, ptr %scevgep63, align 4, !tbaa !6
    %add5.7 = add nsw i32 %31, %30
    %add6.7 = add nsw i32 %add.7, %add5.7
    %scevgep42 = getelementptr i8, ptr %lsr.iv40, i64 12
    store i32 %add6.7, ptr %scevgep42, align 4, !tbaa !6
    %add9.7 = shl nsw i32 %add5.7, 1
    %scevgep52 = getelementptr i8, ptr %lsr.iv50, i64 12
    store i32 %add9.7, ptr %scevgep52, align 4, !tbaa !6
    %lsr.iv.next38 = add nsw i64 %lsr.iv37, -8
    %scevgep41 = getelementptr i8, ptr %lsr.iv40, i64 32
    %scevgep51 = getelementptr i8, ptr %lsr.iv50, i64 32
    %scevgep61 = getelementptr i8, ptr %lsr.iv60, i64 32
    %scevgep71 = getelementptr i8, ptr %lsr.iv70, i64 32
    %32 = call i64 @llvm.loop.decrement.reg.i64(i64 %15, i64 1)
    %33 = icmp ne i64 %32, 0
    br i1 %33, label %for.body, label %for.cond.cleanup.loopexit.unr-lcssa.loopexit, !llvm.loop !13
  }
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #1
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #1
  
  attributes #0 = { nofree norecurse nosync nounwind memory(argmem: readwrite) uwtable vscale_range(1,16) "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.1a,+v8.2a,+v8a,-fmv" }
  attributes #1 = { nocallback noduplicate nofree nosync nounwind willreturn }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 1}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"int", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C/C++ TBAA"}
  !10 = distinct !{!10, !11, !12}
  !11 = !{!"llvm.loop.unroll.disable"}
  !12 = !{!"llvm.remainder.pipeline.disable"}
  !13 = distinct !{!13, !14}
  !14 = !{!"llvm.loop.mustprogress"}

...
---
name:            func
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr64, preferred-register: '' }
  - { id: 1, class: gpr64, preferred-register: '' }
  - { id: 2, class: gpr64all, preferred-register: '' }
  - { id: 3, class: gpr64all, preferred-register: '' }
  - { id: 4, class: gpr64all, preferred-register: '' }
  - { id: 5, class: gpr64all, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: gpr64all, preferred-register: '' }
  - { id: 8, class: gpr64, preferred-register: '' }
  - { id: 9, class: gpr32all, preferred-register: '' }
  - { id: 10, class: gpr64all, preferred-register: '' }
  - { id: 11, class: gpr64all, preferred-register: '' }
  - { id: 12, class: gpr64all, preferred-register: '' }
  - { id: 13, class: gpr64all, preferred-register: '' }
  - { id: 14, class: gpr64all, preferred-register: '' }
  - { id: 15, class: gpr64sp, preferred-register: '' }
  - { id: 16, class: gpr64sp, preferred-register: '' }
  - { id: 17, class: gpr64sp, preferred-register: '' }
  - { id: 18, class: gpr64sp, preferred-register: '' }
  - { id: 19, class: gpr32, preferred-register: '' }
  - { id: 20, class: gpr64sp, preferred-register: '' }
  - { id: 21, class: gpr32all, preferred-register: '' }
  - { id: 22, class: gpr64all, preferred-register: '' }
  - { id: 23, class: gpr64all, preferred-register: '' }
  - { id: 24, class: gpr64all, preferred-register: '' }
  - { id: 25, class: gpr64all, preferred-register: '' }
  - { id: 26, class: gpr64all, preferred-register: '' }
  - { id: 27, class: gpr64sp, preferred-register: '' }
  - { id: 28, class: gpr64sp, preferred-register: '' }
  - { id: 29, class: gpr64sp, preferred-register: '' }
  - { id: 30, class: gpr64sp, preferred-register: '' }
  - { id: 31, class: gpr64sp, preferred-register: '' }
  - { id: 32, class: gpr32, preferred-register: '' }
  - { id: 33, class: gpr64sp, preferred-register: '' }
  - { id: 34, class: gpr32all, preferred-register: '' }
  - { id: 35, class: gpr64, preferred-register: '' }
  - { id: 36, class: gpr64all, preferred-register: '' }
  - { id: 37, class: gpr64all, preferred-register: '' }
  - { id: 38, class: gpr64all, preferred-register: '' }
  - { id: 39, class: gpr64all, preferred-register: '' }
  - { id: 40, class: gpr64all, preferred-register: '' }
  - { id: 41, class: gpr32common, preferred-register: '' }
  - { id: 42, class: gpr64common, preferred-register: '' }
  - { id: 43, class: gpr64common, preferred-register: '' }
  - { id: 44, class: gpr64common, preferred-register: '' }
  - { id: 45, class: gpr64common, preferred-register: '' }
  - { id: 46, class: gpr64all, preferred-register: '' }
  - { id: 47, class: gpr32all, preferred-register: '' }
  - { id: 48, class: gpr32, preferred-register: '' }
  - { id: 49, class: gpr64sp, preferred-register: '' }
  - { id: 50, class: gpr32all, preferred-register: '' }
  - { id: 51, class: gpr64all, preferred-register: '' }
  - { id: 52, class: gpr32, preferred-register: '' }
  - { id: 53, class: gpr64all, preferred-register: '' }
  - { id: 54, class: gpr32all, preferred-register: '' }
  - { id: 55, class: gpr64sp, preferred-register: '' }
  - { id: 56, class: gpr64sp, preferred-register: '' }
  - { id: 57, class: gpr64sp, preferred-register: '' }
  - { id: 58, class: gpr64sp, preferred-register: '' }
  - { id: 59, class: gpr64sp, preferred-register: '' }
  - { id: 60, class: gpr64common, preferred-register: '' }
  - { id: 61, class: gpr64common, preferred-register: '' }
  - { id: 62, class: gpr64sp, preferred-register: '' }
  - { id: 63, class: gpr32all, preferred-register: '' }
  - { id: 64, class: gpr64all, preferred-register: '' }
  - { id: 65, class: gpr32, preferred-register: '' }
  - { id: 66, class: gpr32, preferred-register: '' }
  - { id: 67, class: gpr32, preferred-register: '' }
  - { id: 68, class: gpr32, preferred-register: '' }
  - { id: 69, class: gpr32, preferred-register: '' }
  - { id: 70, class: gpr32, preferred-register: '' }
  - { id: 71, class: gpr32, preferred-register: '' }
  - { id: 72, class: gpr32, preferred-register: '' }
  - { id: 73, class: gpr32, preferred-register: '' }
  - { id: 74, class: gpr32, preferred-register: '' }
  - { id: 75, class: gpr32, preferred-register: '' }
  - { id: 76, class: gpr32, preferred-register: '' }
  - { id: 77, class: gpr32, preferred-register: '' }
  - { id: 78, class: gpr32, preferred-register: '' }
  - { id: 79, class: gpr32, preferred-register: '' }
  - { id: 80, class: gpr32, preferred-register: '' }
  - { id: 81, class: gpr32, preferred-register: '' }
  - { id: 82, class: gpr32, preferred-register: '' }
  - { id: 83, class: gpr32, preferred-register: '' }
  - { id: 84, class: gpr32, preferred-register: '' }
  - { id: 85, class: gpr32, preferred-register: '' }
  - { id: 86, class: gpr32, preferred-register: '' }
  - { id: 87, class: gpr32, preferred-register: '' }
  - { id: 88, class: gpr32, preferred-register: '' }
  - { id: 89, class: gpr32, preferred-register: '' }
  - { id: 90, class: gpr32, preferred-register: '' }
  - { id: 91, class: gpr32, preferred-register: '' }
  - { id: 92, class: gpr32, preferred-register: '' }
  - { id: 93, class: gpr32, preferred-register: '' }
  - { id: 94, class: gpr32, preferred-register: '' }
  - { id: 95, class: gpr32, preferred-register: '' }
  - { id: 96, class: gpr32, preferred-register: '' }
  - { id: 97, class: gpr32, preferred-register: '' }
  - { id: 98, class: gpr32, preferred-register: '' }
  - { id: 99, class: gpr32, preferred-register: '' }
  - { id: 100, class: gpr32, preferred-register: '' }
  - { id: 101, class: gpr32, preferred-register: '' }
  - { id: 102, class: gpr32, preferred-register: '' }
  - { id: 103, class: gpr32, preferred-register: '' }
  - { id: 104, class: gpr32, preferred-register: '' }
  - { id: 105, class: gpr32, preferred-register: '' }
  - { id: 106, class: gpr32, preferred-register: '' }
  - { id: 107, class: gpr32, preferred-register: '' }
  - { id: 108, class: gpr32, preferred-register: '' }
  - { id: 109, class: gpr32, preferred-register: '' }
  - { id: 110, class: gpr32, preferred-register: '' }
  - { id: 111, class: gpr32, preferred-register: '' }
  - { id: 112, class: gpr32, preferred-register: '' }
  - { id: 113, class: gpr64common, preferred-register: '' }
  - { id: 114, class: gpr64sp, preferred-register: '' }
  - { id: 115, class: gpr64sp, preferred-register: '' }
  - { id: 116, class: gpr64sp, preferred-register: '' }
  - { id: 117, class: gpr64sp, preferred-register: '' }
  - { id: 118, class: gpr64, preferred-register: '' }
  - { id: 119, class: gpr64, preferred-register: '' }
  - { id: 120, class: gpr64, preferred-register: '' }
  - { id: 121, class: gpr64, preferred-register: '' }
  - { id: 122, class: gpr64, preferred-register: '' }
  - { id: 123, class: gpr64, preferred-register: '' }
  - { id: 124, class: gpr64, preferred-register: '' }
  - { id: 125, class: gpr64, preferred-register: '' }
  - { id: 126, class: gpr64sp, preferred-register: '' }
  - { id: 127, class: gpr32, preferred-register: '' }
  - { id: 128, class: gpr32, preferred-register: '' }
  - { id: 129, class: gpr64sp, preferred-register: '' }
  - { id: 130, class: gpr32, preferred-register: '' }
  - { id: 131, class: gpr32, preferred-register: '' }
  - { id: 132, class: gpr32, preferred-register: '' }
  - { id: 133, class: gpr64sp, preferred-register: '' }
  - { id: 134, class: gpr32, preferred-register: '' }
  - { id: 135, class: gpr64sp, preferred-register: '' }
  - { id: 136, class: gpr64, preferred-register: '' }
  - { id: 137, class: gpr32all, preferred-register: '' }
  - { id: 138, class: gpr32, preferred-register: '' }
  - { id: 139, class: gpr32, preferred-register: '' }
  - { id: 140, class: gpr32, preferred-register: '' }
  - { id: 141, class: gpr32, preferred-register: '' }
  - { id: 142, class: gpr32, preferred-register: '' }
  - { id: 143, class: gpr32, preferred-register: '' }
  - { id: 144, class: gpr32, preferred-register: '' }
  - { id: 145, class: gpr32, preferred-register: '' }
  - { id: 146, class: gpr32, preferred-register: '' }
  - { id: 147, class: gpr32, preferred-register: '' }
  - { id: 148, class: gpr32, preferred-register: '' }
  - { id: 149, class: gpr32, preferred-register: '' }
  - { id: 150, class: gpr32, preferred-register: '' }
  - { id: 151, class: gpr32, preferred-register: '' }
  - { id: 152, class: gpr32, preferred-register: '' }
  - { id: 153, class: gpr32, preferred-register: '' }
  - { id: 154, class: gpr32, preferred-register: '' }
  - { id: 155, class: gpr32, preferred-register: '' }
liveins:
  - { reg: '$w0', virtual-reg: '%41' }
  - { reg: '$x1', virtual-reg: '%42' }
  - { reg: '$x2', virtual-reg: '%43' }
  - { reg: '$x3', virtual-reg: '%44' }
  - { reg: '$x4', virtual-reg: '%45' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.7(0x30000000), %bb.1(0x50000000)
    liveins: $w0, $x1, $x2, $x3, $x4
  
    %45:gpr64common = COPY $x4
    %44:gpr64common = COPY $x3
    %43:gpr64common = COPY $x2
    %42:gpr64common = COPY $x1
    %41:gpr32common = COPY $w0
    %200:fpr32 = IMPLICIT_DEF
    CBZW %41, %bb.7
    B %bb.1
  
  bb.1.for.body.preheader:
    successors: %bb.9(0x40000000), %bb.2(0x40000000)
  
    %48:gpr32 = ORRWrs $wzr, %41, 0
    %0:gpr64 = SUBREG_TO_REG 0, killed %48, %subreg.sub_32
    %49:gpr64sp = ANDXri %0, 4098
    %1:gpr64 = COPY %49
    dead $wzr = SUBSWri %41, 8, 0, implicit-def $nzcv
    Bcc 2, %bb.2, implicit $nzcv
  
  bb.9:
    successors: %bb.4(0x80000000)
  
    %50:gpr32all = COPY $wzr
    %47:gpr32all = COPY %50
    %51:gpr64all = COPY $xzr
    %46:gpr64all = COPY %51
    B %bb.4
  
  bb.2.for.body.preheader.new:
    successors: %bb.8(0x80000000)
  
    %55:gpr64sp = ADDXri %44, 16, 0
    %2:gpr64all = COPY %55
    %56:gpr64sp = ADDXri %45, 16, 0
    %3:gpr64all = COPY %56
    %57:gpr64sp = ADDXri %43, 16, 0
    %4:gpr64all = COPY %57
    %58:gpr64sp = ADDXri %42, 16, 0
    %5:gpr64all = COPY %58
    %59:gpr64sp = ANDXri %0, 8028
    %60:gpr64common = nsw SUBXri killed %59, 8, 0
    %61:gpr64common = UBFMXri killed %60, 3, 63
    %62:gpr64sp = nuw nsw ADDXri killed %61, 1, 0
    %63:gpr32all = COPY $wzr
    %54:gpr32all = COPY %63
    %64:gpr64all = COPY $xzr
    %53:gpr64all = COPY %64
    %6:gpr64all = COPY %62
    %201:fpr64 = IMPLICIT_DEF
    B %bb.8
  
  bb.3.for.cond.cleanup.loopexit.unr-lcssa.loopexit:
    successors: %bb.4(0x80000000)
  
    %119:gpr64 = COPY $xzr
    %120:gpr64 = SUBXrr %119, %113
    %7:gpr64all = COPY %120
  
  bb.4.for.cond.cleanup.loopexit.unr-lcssa:
    successors: %bb.7(0x30000000), %bb.5(0x50000000)
  
    %8:gpr64 = PHI %46, %bb.9, %7, %bb.3
    %9:gpr32all = PHI %47, %bb.9, %34, %bb.3
    CBZX %1, %bb.7
    B %bb.5
  
  bb.5.for.body.epil.preheader:
    successors: %bb.6(0x80000000)
  
    %121:gpr64 = nuw nsw UBFMXri %8, 62, 61
    %122:gpr64 = ADDXrr %45, %121
    %10:gpr64all = COPY %122
    %123:gpr64 = ADDXrr %44, %121
    %11:gpr64all = COPY %123
    %124:gpr64 = ADDXrr %43, %121
    %12:gpr64all = COPY %124
    %125:gpr64 = ADDXrr %42, %121
    %13:gpr64all = COPY %125
    %14:gpr64all = COPY %1
  
  bb.6.for.body.epil:
    successors: %bb.6(0x7c000000), %bb.7(0x04000000)
  
    %15:gpr64sp = PHI %13, %bb.5, %25, %bb.6
    %16:gpr64sp = PHI %12, %bb.5, %24, %bb.6
    %17:gpr64sp = PHI %11, %bb.5, %23, %bb.6
    %18:gpr64sp = PHI %10, %bb.5, %22, %bb.6
    %19:gpr32 = PHI %9, %bb.5, %21, %bb.6
    %20:gpr64sp = PHI %14, %bb.5, %26, %bb.6
    early-clobber %126:gpr64sp, %127:gpr32 = LDRWpost %15, 4 :: (load (s32) from %ir.lsr.iv34, !tbaa !6)
    %128:gpr32 = nsw ADDWrr %127, %19
    early-clobber %129:gpr64sp, %130:gpr32 = LDRWpost %16, 4 :: (load (s32) from %ir.lsr.iv31, !tbaa !6)
    %131:gpr32 = nsw ADDWrr killed %130, %127
    %21:gpr32all = COPY %131
    %132:gpr32 = nsw ADDWrr killed %128, %131
    early-clobber %133:gpr64sp = STRWpost killed %132, %17, 4 :: (store (s32) into %ir.lsr.iv28, !tbaa !6)
    %134:gpr32 = nsw UBFMWri %131, 31, 30
    early-clobber %135:gpr64sp = STRWpost killed %134, %18, 4 :: (store (s32) into %ir.lsr.iv, !tbaa !6)
    %22:gpr64all = COPY %135
    %23:gpr64all = COPY %133
    %24:gpr64all = COPY %129
    %25:gpr64all = COPY %126
    %136:gpr64 = SUBSXri %20, 1, 0, implicit-def $nzcv
    %26:gpr64all = COPY %136
    Bcc 1, %bb.6, implicit $nzcv
    B %bb.7
  
  bb.7.for.cond.cleanup:
    %137:gpr32all = COPY $wzr
    $w0 = COPY %137
    RET_ReallyLR implicit $w0
  
  bb.8.for.body:
    successors: %bb.8(0x7c000000), %bb.3(0x04000000)
  
    %27:gpr64sp = PHI %5, %bb.2, %39, %bb.8
    %28:gpr64sp = PHI %4, %bb.2, %38, %bb.8
    %29:gpr64sp = PHI %3, %bb.2, %37, %bb.8
    %30:gpr64sp = PHI %2, %bb.2, %36, %bb.8
    %31:gpr64sp = PHI %53, %bb.2, %35, %bb.8
    %32:gpr32 = PHI %54, %bb.2, %34, %bb.8
    %33:gpr64sp = PHI %6, %bb.2, %40, %bb.8
    %202:fpr64 = PHI %201, %bb.2, %40, %bb.8
    %203:fpr64 = COPY %202
    %204:fpr64 = INSERT_SUBREG %203, %200, %subreg.ssub
    %205:fpr128 = SUBREG_TO_REG 0, killed %204, %subreg.dsub
    %65:gpr32 = LDURWi %27, -16 :: (load (s32) from %ir.scevgep72, !tbaa !6)
    %66:gpr32 = nsw ADDWrr %65, %32
    %67:gpr32 = LDURWi %28, -16 :: (load (s32) from %ir.scevgep62, !tbaa !6)
    %68:gpr32 = nsw ADDWrr killed %67, %65
    %69:gpr32 = nsw ADDWrr killed %66, %68
    STURWi killed %69, %30, -16 :: (store (s32) into %ir.scevgep43, !tbaa !6)
    %70:gpr32 = nsw UBFMWri %68, 31, 30
    STURWi killed %70, %29, -16 :: (store (s32) into %ir.scevgep53, !tbaa !6)
    %71:gpr32 = LDURWi %27, -12 :: (load (s32) from %ir.scevgep74, !tbaa !6)
    %72:gpr32 = nsw ADDWrr %71, %68
    %73:gpr32 = LDURWi %28, -12 :: (load (s32) from %ir.scevgep64, !tbaa !6)
    %74:gpr32 = nsw ADDWrr killed %73, %71
    %75:gpr32 = nsw ADDWrr killed %72, %74
    STURWi killed %75, %30, -12 :: (store (s32) into %ir.scevgep44, !tbaa !6)
    %76:gpr32 = nsw UBFMWri %74, 31, 30
    STURWi killed %76, %29, -12 :: (store (s32) into %ir.scevgep54, !tbaa !6)
    %77:gpr32 = LDURWi %27, -8 :: (load (s32) from %ir.scevgep75, !tbaa !6)
    %78:gpr32 = nsw ADDWrr %77, %74
    %79:gpr32 = LDURWi %28, -8 :: (load (s32) from %ir.scevgep65, !tbaa !6)
    %80:gpr32 = nsw ADDWrr killed %79, %77
    %81:gpr32 = nsw ADDWrr killed %78, %80
    STURWi killed %81, %30, -8 :: (store (s32) into %ir.scevgep45, !tbaa !6)
    %82:gpr32 = nsw UBFMWri %80, 31, 30
    STURWi killed %82, %29, -8 :: (store (s32) into %ir.scevgep55, !tbaa !6)
    %83:gpr32 = LDURWi %27, -4 :: (load (s32) from %ir.scevgep76, !tbaa !6)
    %84:gpr32 = nsw ADDWrr %83, %80
    %85:gpr32 = LDURWi %28, -4 :: (load (s32) from %ir.scevgep66, !tbaa !6)
    %86:gpr32 = nsw ADDWrr killed %85, %83
    %87:gpr32 = nsw ADDWrr killed %84, %86
    STURWi killed %87, %30, -4 :: (store (s32) into %ir.scevgep46, !tbaa !6)
    %88:gpr32 = nsw UBFMWri %86, 31, 30
    STURWi killed %88, %29, -4 :: (store (s32) into %ir.scevgep56, !tbaa !6)
    %89:gpr32 = LDRWui %27, 0 :: (load (s32) from %ir.lsr.iv70, !tbaa !6)
    %90:gpr32 = nsw ADDWrr %89, %86
    %91:gpr32 = LDRWui %28, 0 :: (load (s32) from %ir.lsr.iv60, !tbaa !6)
    %92:gpr32 = nsw ADDWrr killed %91, %89
    %93:gpr32 = nsw ADDWrr killed %90, %92
    STRWui killed %93, %30, 0 :: (store (s32) into %ir.lsr.iv40, !tbaa !6)
    %94:gpr32 = nsw UBFMWri %92, 31, 30
    STRWui killed %94, %29, 0 :: (store (s32) into %ir.lsr.iv50, !tbaa !6)
    %95:gpr32 = LDRWui %27, 1 :: (load (s32) from %ir.scevgep78, !tbaa !6)
    %96:gpr32 = nsw ADDWrr %95, %92
    %97:gpr32 = LDRWui %28, 1 :: (load (s32) from %ir.scevgep68, !tbaa !6)
    %98:gpr32 = nsw ADDWrr killed %97, %95
    %99:gpr32 = nsw ADDWrr killed %96, %98
    STRWui killed %99, %30, 1 :: (store (s32) into %ir.scevgep48, !tbaa !6)
    %100:gpr32 = nsw UBFMWri %98, 31, 30
    STRWui killed %100, %29, 1 :: (store (s32) into %ir.scevgep57, !tbaa !6)
    %101:gpr32 = LDRWui %27, 2 :: (load (s32) from %ir.scevgep77, !tbaa !6)
    %102:gpr32 = nsw ADDWrr %101, %98
    %103:gpr32 = LDRWui %28, 2 :: (load (s32) from %ir.scevgep67, !tbaa !6)
    %104:gpr32 = nsw ADDWrr killed %103, %101
    %105:gpr32 = nsw ADDWrr killed %102, %104
    STRWui killed %105, %30, 2 :: (store (s32) into %ir.scevgep47, !tbaa !6)
    %106:gpr32 = nsw UBFMWri %104, 31, 30
    STRWui killed %106, %29, 2 :: (store (s32) into %ir.scevgep58, !tbaa !6)
    %107:gpr32 = LDRWui %27, 3 :: (load (s32) from %ir.scevgep73, !tbaa !6)
    %108:gpr32 = nsw ADDWrr %107, %104
    %109:gpr32 = LDRWui %28, 3 :: (load (s32) from %ir.scevgep63, !tbaa !6)
    %110:gpr32 = nsw ADDWrr killed %109, %107
    %34:gpr32all = COPY %110
    %111:gpr32 = nsw ADDWrr killed %108, %110
    STRWui killed %111, %30, 3 :: (store (s32) into %ir.scevgep42, !tbaa !6)
    %112:gpr32 = nsw UBFMWri %110, 31, 30
    STRWui killed %112, %29, 3 :: (store (s32) into %ir.scevgep52, !tbaa !6)
    %113:gpr64common = nsw SUBXri %31, 8, 0
    %35:gpr64 = COPY %113
    %114:gpr64sp = ADDXri %30, 32, 0
    %36:gpr64all = COPY %114
    %115:gpr64sp = ADDXri %29, 32, 0
    %37:gpr64all = COPY %115
    %116:gpr64sp = ADDXri %28, 32, 0
    %38:gpr64all = COPY %116
    %117:gpr64sp = ADDXri %27, 32, 0
    %39:gpr64all = COPY %117
    %118:gpr64 = SUBSXri %33, 1, 0, implicit-def $nzcv
    %40:gpr64all = COPY %118
    Bcc 1, %bb.8, implicit $nzcv
    B %bb.3

...
