# RUN: llc %s -fswp -mcpu=a64fx -start-before=aarch64-swpipeliner -pass-remarks=aarch64-swpipeliner -swpl-enable-reg-alloc -o /dev/null 2>&1 | FileCheck %s
# CHECK: remark: s4117.c:36:9: software pipelining (IPC: 0.37, ITR: 3, MVE: 2, II: 35, Stage: 2, (VReg Fp: 5/32, Int: 9/29, Pred: 2/8)), SRA(PReg Fp: 5/32, Int: 6/29, Pred: 1/8)
--- |
  ; ModuleID = 's4117.c'
  source_filename = "s4117.c"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"
  
  %struct.args_t = type { %struct.timeval, %struct.timeval, ptr }
  %struct.timeval = type { i64, i64 }
  
  @__func__.s4117 = private unnamed_addr constant [6 x i8] c"s4117\00", align 1
  @b = external global [32000 x double], align 64
  @c = external global [32000 x double], align 64
  @d = external global [32000 x double], align 64
  @a = external global [32000 x double], align 64
  @e = external global [32000 x double], align 64
  @aa = external global [256 x [256 x double]], align 64
  @bb = external global [256 x [256 x double]], align 64
  @cc = external global [256 x [256 x double]], align 64
  
  ; Function Attrs: nounwind uwtable vscale_range(4,4)
  define dso_local double @s4117(ptr nocapture noundef %func_args) local_unnamed_addr #0 !dbg !10 {
  entry:
    %call = tail call i32 @initialise_arrays(ptr noundef nonnull @__func__.s4117) #7, !dbg !13
    %call1 = tail call i32 @gettimeofday(ptr noundef %func_args, ptr noundef null) #7, !dbg !14
    %0 = tail call <vscale x 2 x i64> @llvm.experimental.stepvector.nxv2i64(), !dbg !15
    br label %vector.ph, !dbg !16
  
  vector.ph:                                        ; preds = %for.cond.cleanup4, %entry
    %nl.027 = phi i32 [ 0, %entry ], [ %inc14, %for.cond.cleanup4 ]
    %1 = call i64 @llvm.start.loop.iterations.i64(i64 4000), !dbg !17
    br label %vector.body, !dbg !17
  
  vector.body:                                      ; preds = %vector.body, %vector.ph
    %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ], !dbg !18
    %vec.ind = phi <vscale x 2 x i64> [ %0, %vector.ph ], [ %vec.ind.next, %vector.body ]
    %2 = phi i64 [ %1, %vector.ph ], [ %10, %vector.body ], !dbg !19
    %3 = shl nuw nsw i64 %index, 3, !dbg !19
    %uglygep = getelementptr i8, ptr @b, i64 %3, !dbg !19
    %wide.load = load <vscale x 2 x double>, ptr %uglygep, align 64, !dbg !19, !tbaa !20
    %4 = lshr <vscale x 2 x i64> %vec.ind, shufflevector (<vscale x 2 x i64> insertelement (<vscale x 2 x i64> poison, i64 1, i32 0), <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer), !dbg !24
    %5 = and <vscale x 2 x i64> %4, shufflevector (<vscale x 2 x i64> insertelement (<vscale x 2 x i64> poison, i64 2147483647, i32 0), <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer), !dbg !25
    %6 = getelementptr double, ptr @c, <vscale x 2 x i64> %5, !dbg !25
    %wide.masked.gather = tail call <vscale x 2 x double> @llvm.masked.gather.nxv2f64.nxv2p0(<vscale x 2 x ptr> %6, i32 8, <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), <vscale x 2 x double> undef), !dbg !25, !tbaa !20
    %7 = shl nuw nsw i64 %index, 3, !dbg !26
    %uglygep31 = getelementptr i8, ptr @d, i64 %7, !dbg !26
    %wide.load30 = load <vscale x 2 x double>, ptr %uglygep31, align 64, !dbg !26, !tbaa !20
    %8 = tail call <vscale x 2 x double> @llvm.fmuladd.nxv2f64(<vscale x 2 x double> %wide.masked.gather, <vscale x 2 x double> %wide.load30, <vscale x 2 x double> %wide.load), !dbg !27
    %9 = shl nuw nsw i64 %index, 3, !dbg !28
    %uglygep32 = getelementptr i8, ptr @a, i64 %9, !dbg !28
    store <vscale x 2 x double> %8, ptr %uglygep32, align 64, !dbg !28, !tbaa !20
    %index.next = add nuw i64 %index, 8, !dbg !18
    %vec.ind.next = add <vscale x 2 x i64> %vec.ind, shufflevector (<vscale x 2 x i64> insertelement (<vscale x 2 x i64> poison, i64 8, i32 0), <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer)
    %10 = call i64 @llvm.loop.decrement.reg.i64(i64 %2, i64 1), !dbg !18
    %11 = icmp ne i64 %10, 0, !dbg !18
    br i1 %11, label %vector.body, label %for.cond.cleanup4, !dbg !18, !llvm.loop !29
  
  for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
    %t2 = getelementptr inbounds %struct.args_t, ptr %func_args, i64 0, i32 1, !dbg !34
    %call16 = tail call i32 @gettimeofday(ptr noundef nonnull %t2, ptr noundef null) #7, !dbg !35
    %call17 = tail call double @calc_checksum(ptr noundef nonnull @__func__.s4117) #7, !dbg !36
    ret double %call17, !dbg !37
  
  for.cond.cleanup4:                                ; preds = %vector.body
    %call12 = tail call i32 @dummy(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @aa, ptr noundef nonnull @bb, ptr noundef nonnull @cc, double noundef 0.000000e+00) #7, !dbg !38
    %inc14 = add nuw nsw i32 %nl.027, 1, !dbg !39
    %exitcond29.not = icmp eq i32 %inc14, 100, !dbg !40
    br i1 %exitcond29.not, label %for.cond.cleanup, label %vector.ph, !dbg !16, !llvm.loop !41
  }
  
  declare !dbg !43 i32 @initialise_arrays(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nofree nounwind
  declare !dbg !45 noundef i32 @gettimeofday(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #2
  
  declare !dbg !47 i32 @dummy(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, double noundef) local_unnamed_addr #1
  
  declare !dbg !48 double @calc_checksum(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
  declare <vscale x 2 x i64> @llvm.experimental.stepvector.nxv2i64() #3
  
  ; Function Attrs: nocallback nofree nosync nounwind readonly willreturn
  declare <vscale x 2 x double> @llvm.masked.gather.nxv2f64.nxv2p0(<vscale x 2 x ptr>, i32 immarg, <vscale x 2 x i1>, <vscale x 2 x double>) #4
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare <vscale x 2 x double> @llvm.fmuladd.nxv2f64(<vscale x 2 x double>, <vscale x 2 x double>, <vscale x 2 x double>) #5
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.start.loop.iterations.i64(i64) #6
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i64 @llvm.loop.decrement.reg.i64(i64, i64) #6
  
  attributes #0 = { nounwind uwtable vscale_range(4,4) "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #1 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #2 = { nofree nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="a64fx" "target-features"="+aes,+crc,+crypto,+fp-armv8,+fullfp16,+lse,+neon,+outline-atomics,+ras,+rdm,+sha2,+sve,+v8.2a" }
  attributes #3 = { nocallback nofree nosync nounwind readnone willreturn }
  attributes #4 = { nocallback nofree nosync nounwind readonly willreturn }
  attributes #5 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
  attributes #6 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #7 = { nounwind }
  
  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
  !llvm.ident = !{!9}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 15.0.4 (aa8c40be5a4067d6183bbf71b6e4e26681001eb9)", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "s4117.c", directory: "", checksumkind: CSK_MD5, checksum: "07a19633c97159ca6602d0f04e32da48")
  !2 = !{i32 7, !"Dwarf Version", i32 5}
  !3 = !{i32 2, !"Debug Info Version", i32 3}
  !4 = !{i32 1, !"wchar_size", i32 4}
  !5 = !{i32 7, !"PIC Level", i32 2}
  !6 = !{i32 7, !"PIE Level", i32 2}
  !7 = !{i32 7, !"uwtable", i32 2}
  !8 = !{i32 7, !"frame-pointer", i32 1}
  !9 = !{!"clang version 15.0.4 (aa8c40be5a4067d6183bbf71b6e4e26681001eb9)"}
  !10 = distinct !DISubprogram(name: "s4117", scope: !1, file: !1, line: 26, type: !11, scopeLine: 27, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !12)
  !11 = !DISubroutineType(types: !12)
  !12 = !{}
  !13 = !DILocation(line: 32, column: 5, scope: !10)
  !14 = !DILocation(line: 33, column: 5, scope: !10)
  !15 = !DILocation(line: 0, scope: !10)
  !16 = !DILocation(line: 35, column: 5, scope: !10)
  !17 = !DILocation(line: 36, column: 9, scope: !10)
  !18 = !DILocation(line: 36, column: 38, scope: !10)
  !19 = !DILocation(line: 37, column: 20, scope: !10)
  !20 = !{!21, !21, i64 0}
  !21 = !{!"double", !22, i64 0}
  !22 = !{!"omnipotent char", !23, i64 0}
  !23 = !{!"Simple C/C++ TBAA"}
  !24 = !DILocation(line: 37, column: 30, scope: !10)
  !25 = !DILocation(line: 37, column: 27, scope: !10)
  !26 = !DILocation(line: 37, column: 36, scope: !10)
  !27 = !DILocation(line: 37, column: 25, scope: !10)
  !28 = !DILocation(line: 37, column: 18, scope: !10)
  !29 = distinct !{!29, !17, !30, !31, !32, !33}
  !30 = !DILocation(line: 38, column: 9, scope: !10)
  !31 = !{!"llvm.loop.mustprogress"}
  !32 = !{!"llvm.loop.unroll.disable"}
  !33 = !{!"llvm.loop.isvectorized", i32 1}
  !34 = !DILocation(line: 42, column: 30, scope: !10)
  !35 = !DILocation(line: 42, column: 5, scope: !10)
  !36 = !DILocation(line: 43, column: 12, scope: !10)
  !37 = !DILocation(line: 43, column: 5, scope: !10)
  !38 = !DILocation(line: 39, column: 9, scope: !10)
  !39 = !DILocation(line: 35, column: 41, scope: !10)
  !40 = !DILocation(line: 35, column: 25, scope: !10)
  !41 = distinct !{!41, !16, !42, !31, !32}
  !42 = !DILocation(line: 40, column: 5, scope: !10)
  !43 = !DISubprogram(name: "initialise_arrays", scope: !44, file: !44, line: 30, type: !11, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !12)
  !44 = !DIFile(filename: "./common.h", directory: "", checksumkind: CSK_MD5, checksum: "813c757a5bf947ca4a43c95623064070")
  !45 = !DISubprogram(name: "gettimeofday", scope: !46, file: !46, line: 67, type: !11, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !12)
  !46 = !DIFile(filename: "/usr/lib/gcc-cross/aarch64-linux-gnu/11/../../../../aarch64-linux-gnu/include/sys/time.h", directory: "", checksumkind: CSK_MD5, checksum: "b36e339815f62ba7208e5294180e353c")
  !47 = !DISubprogram(name: "dummy", scope: !44, file: !44, line: 26, type: !11, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !12)
  !48 = !DISubprogram(name: "calc_checksum", scope: !44, file: !44, line: 31, type: !11, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !12)

...
---
name:            s4117
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: zpr, preferred-register: '' }
  - { id: 1, class: gpr32sp, preferred-register: '' }
  - { id: 2, class: gpr64all, preferred-register: '' }
  - { id: 3, class: gpr64common, preferred-register: '' }
  - { id: 4, class: zpr, preferred-register: '' }
  - { id: 5, class: gpr64sp, preferred-register: '' }
  - { id: 6, class: gpr64all, preferred-register: '' }
  - { id: 7, class: zpr, preferred-register: '' }
  - { id: 8, class: gpr64all, preferred-register: '' }
  - { id: 9, class: gpr32all, preferred-register: '' }
  - { id: 10, class: gpr64common, preferred-register: '' }
  - { id: 11, class: gpr32all, preferred-register: '' }
  - { id: 12, class: gpr64common, preferred-register: '' }
  - { id: 13, class: gpr32all, preferred-register: '' }
  - { id: 14, class: gpr64all, preferred-register: '' }
  - { id: 15, class: gpr32all, preferred-register: '' }
  - { id: 16, class: gpr32all, preferred-register: '' }
  - { id: 17, class: gpr64all, preferred-register: '' }
  - { id: 18, class: gpr64all, preferred-register: '' }
  - { id: 19, class: gpr32, preferred-register: '' }
  - { id: 20, class: gpr64common, preferred-register: '' }
  - { id: 21, class: ppr_3b, preferred-register: '' }
  - { id: 22, class: zpr, preferred-register: '' }
  - { id: 23, class: zpr, preferred-register: '' }
  - { id: 24, class: ppr_3b, preferred-register: '' }
  - { id: 25, class: zpr, preferred-register: '' }
  - { id: 26, class: gpr64common, preferred-register: '' }
  - { id: 27, class: zpr, preferred-register: '' }
  - { id: 28, class: gpr64common, preferred-register: '' }
  - { id: 29, class: zpr, preferred-register: '' }
  - { id: 30, class: zpr, preferred-register: '' }
  - { id: 31, class: gpr64common, preferred-register: '' }
  - { id: 32, class: gpr64sp, preferred-register: '' }
  - { id: 33, class: gpr64, preferred-register: '' }
  - { id: 34, class: gpr64common, preferred-register: '' }
  - { id: 35, class: gpr64common, preferred-register: '' }
  - { id: 36, class: gpr64common, preferred-register: '' }
  - { id: 37, class: gpr64common, preferred-register: '' }
  - { id: 38, class: gpr64common, preferred-register: '' }
  - { id: 39, class: gpr64common, preferred-register: '' }
  - { id: 40, class: gpr64common, preferred-register: '' }
  - { id: 41, class: gpr64common, preferred-register: '' }
  - { id: 42, class: fpr64, preferred-register: '' }
  - { id: 43, class: gpr32all, preferred-register: '' }
  - { id: 44, class: gpr32sp, preferred-register: '' }
  - { id: 45, class: gpr32, preferred-register: '' }
  - { id: 46, class: gpr64sp, preferred-register: '' }
  - { id: 47, class: gpr64all, preferred-register: '' }
  - { id: 48, class: gpr32all, preferred-register: '' }
  - { id: 49, class: gpr64common, preferred-register: '' }
  - { id: 50, class: gpr32, preferred-register: '' }
  - { id: 51, class: gpr64, preferred-register: '' }
liveins:
  - { reg: '$x0', virtual-reg: '%10' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     true
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $x0
  
    %10:gpr64common = COPY $x0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !13
    %12:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s4117, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s4117, debug-location !13
    $x0 = COPY %12, debug-location !13
    BL @initialise_arrays, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0, debug-location !13
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !13
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !14
    %14:gpr64all = COPY $xzr
    $x0 = COPY %10, debug-location !14
    $x1 = COPY %14, debug-location !14
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0, debug-location !14
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !14
    %16:gpr32all = COPY $wzr
    %11:gpr32all = COPY %16
    %0:zpr = INDEX_II_D 0, 1, debug-location !15
    %19:gpr32 = MOVi32imm 4000
    %20:gpr64common = LOADgot target-flags(aarch64-got) @b
    %21:ppr_3b = PTRUE_D 31
    %26:gpr64common = LOADgot target-flags(aarch64-got) @c
    %28:gpr64common = LOADgot target-flags(aarch64-got) @d
    %31:gpr64common = LOADgot target-flags(aarch64-got) @a
    %38:gpr64common = LOADgot target-flags(aarch64-got) @e
    %39:gpr64common = LOADgot target-flags(aarch64-got) @aa
    %40:gpr64common = LOADgot target-flags(aarch64-got) @bb
    %41:gpr64common = LOADgot target-flags(aarch64-got) @cc
    %42:fpr64 = FMOVD0
  
  bb.1.vector.ph:
    successors: %bb.2(0x80000000)
  
    %1:gpr32sp = PHI %11, %bb.0, %9, %bb.4
    %18:gpr64all = COPY $xzr
    %17:gpr64all = COPY %18
    %2:gpr64all = SUBREG_TO_REG 0, %19, %subreg.sub_32
  
  bb.2.vector.body:
    successors: %bb.2(0x7c000000), %bb.4(0x04000000)
  
    %3:gpr64common = PHI %17, %bb.1, %6, %bb.2, debug-location !18
    %4:zpr = PHI %0, %bb.1, %7, %bb.2
    %5:gpr64sp = PHI %2, %bb.1, %8, %bb.2, debug-location !19
    %50:gpr32 = COPY %5
    %51:gpr64 = SUBREG_TO_REG 0, %50, %subreg.sub_32
    %22:zpr = LD1D %21, %20, %3, debug-location !19 :: (load unknown-size from %ir.uglygep, align 64, !tbaa !20)
    %23:zpr = LSR_ZZI_D %4, 1, debug-location !24
    %25:zpr = AND_ZI %23, 4126, debug-location !25
    %27:zpr = GLD1D_SCALED %21, %26, killed %25, debug-location !25 :: (load unknown-size, align 8, !tbaa !20)
    %29:zpr = LD1D %21, %28, %3, debug-location !26 :: (load unknown-size from %ir.uglygep31, align 64, !tbaa !20)
    %30:zpr = FMLA_ZPZZZ_UNDEF_D %21, killed %22, killed %27, killed %29, debug-location !27
    ST1D killed %30, %21, %31, %3, debug-location !28 :: (store unknown-size into %ir.uglygep32, align 64, !tbaa !20)
    %32:gpr64sp = nuw ADDXri %3, 8, 0, debug-location !18
    %6:gpr64all = COPY %32, debug-location !18
    %7:zpr = ADD_ZI_D %4, 8, 0
    %33:gpr64 = SUBSXri %5, 1, 0, implicit-def $nzcv, debug-location !18
    %8:gpr64all = COPY %33, debug-location !18
    Bcc 1, %bb.2, implicit $nzcv, debug-location !18
    B %bb.4, debug-location !18
  
  bb.3.for.cond.cleanup:
    %46:gpr64sp = nuw ADDXri %10, 16, 0, debug-location !34
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !35
    %47:gpr64all = COPY $xzr
    $x0 = COPY %46, debug-location !35
    $x1 = COPY %47, debug-location !35
    BL @gettimeofday, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $w0, debug-location !35
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !35
    %49:gpr64common = MOVaddr target-flags(aarch64-page) @__func__.s4117, target-flags(aarch64-pageoff, aarch64-nc) @__func__.s4117, debug-location !36
    $x0 = COPY %49, debug-location !36
    TCRETURNdi @calc_checksum, 0, csr_aarch64_aapcs, implicit $sp, implicit $x0, debug-location !36
  
  bb.4.for.cond.cleanup4:
    successors: %bb.3(0x04000000), %bb.1(0x7c000000)
  
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !38
    $x0 = COPY %31, debug-location !38
    $x1 = COPY %20, debug-location !38
    $x2 = COPY %26, debug-location !38
    $x3 = COPY %28, debug-location !38
    $x4 = COPY %38, debug-location !38
    $x5 = COPY %39, debug-location !38
    $x6 = COPY %40, debug-location !38
    $x7 = COPY %41, debug-location !38
    $d0 = COPY %42, debug-location !38
    BL @dummy, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit $d0, implicit-def $sp, implicit-def $w0, debug-location !38
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !38
    %44:gpr32sp = nuw nsw ADDWri %1, 1, 0, debug-location !39
    %9:gpr32all = COPY %44, debug-location !39
    dead $wzr = SUBSWri %44, 100, 0, implicit-def $nzcv, debug-location !16
    Bcc 0, %bb.3, implicit $nzcv, debug-location !16
    B %bb.1, debug-location !16

...
